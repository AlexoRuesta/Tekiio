/* Generacion TXT REtenciones y Percepciones */
/* 3ksys - Argentina */
/* auxiliar functions - txt process */
/* **************************** */
/**
 * @NApiVersion 2.1
 * @NAmdConfig /SuiteScripts/configuration.json
 * @NScriptType ScheduledScript
 * @NModuleScope Public
 */
define(["N/log", "N/record", "N/search", "N/runtime", "N/file", "N/format", "L54/utilidades", "N/email"],
	function (log, record, search, runtime, file, format, utilidades, emailModule) {
	  /* global define */
	  // migrado desde l54_Generar_TXT_Retenciones
	  // Para Formatear a MONEDA
	  Number.prototype.formatMoney = function (decPlaces, thouSeparator, decSeparator) {
		var n = this,
		  decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
		  decSeparator = decSeparator == undefined ? "." : decSeparator,
		  thouSeparator = thouSeparator == undefined ? "" : thouSeparator, // decia ","
		  sign = n < 0 ? "-" : "",
		  i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
		  j = (j = i.length) > 3 ? j % 3 : 0;
		return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
	  };
	  String.prototype.formatMoney = function (decPlaces, thouSeparator, decSeparator) {
		var n = this,
		  decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
		  decSeparator = decSeparator == undefined ? "." : decSeparator,
		  thouSeparator = thouSeparator == undefined ? "" : thouSeparator, // decia ","
		  sign = n < 0 ? "-" : "",
		  i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
		  j = (j = i.length) > 3 ? j % 3 : 0;
		return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
	  };
	  //[Lista]
	  function numberTruncTwoDec(nStr) {
		const x = nStr.toString().split(".");
		const x1 = x[0];
		let x2 = x.length > 1 ? "." + x[1] : ".00";
		x2 = x2.length < 3 ? x2 + "0" : x2.substring(0, 3);
		return x1 + x2;
	  }
	  // Función que sirve para retornar cuantos decimales posee un número
	  //[Lista]
	  function countDecimales(number) {
		let cantidadDecimales = 0;
		if (!isEmpty(number)) {
		  const arrayNumber = parseFloat(number, 10).toString().split(".");
		  cantidadDecimales = (arrayNumber.length == 2) ? arrayNumber[1].length : 0;
		}
		return cantidadDecimales;
	  }
	  // Función que sirve para eliminar el separador decimal y transformar un número en entero.
	  //[Lista]
	  function convertToInteger(number) {
		let numberConvert = 0.0;
		if (!isEmpty(number))
		  numberConvert = parseFloat(number, 10).toString().replace(".", "");
		return parseFloat(numberConvert, 10);
	  }
	  // FUNCTION: isEmpty [Lista]
	  function isEmpty(value) {
		if (value === "" || value === null || value === "null" || value === undefined || value === "undefined") {
		  return true;
		}
		return false;
	  }
	  //[Lista]
	  function esOneworld() {
		// var filters = [new nlobjSearchFilter('isinactive', null, 'is', 'F'),
		// new nlobjSearchFilter('custrecord_l54_es_oneworld', null, 'is', 'T')];
		const filters = [
		  new search.createFilter({
			name: "isinactive",
			operator: search.Operator.IS,
			values: false
		  }),
		  new search.createFilter({
			name: "custrecord_l54_es_oneworld",
			operator: search.Operator.IS,
			values: true
		  })
		];
		const searchresults = search.create({
		  type: "customrecord_l54_datos_impositivos_emp",
		  filters: filters
		}).run().getRange({
		  start: 0,
		  end: 1
		});
		if (searchresults != null && searchresults.length > 0)
		  return true;
		else
		  return false;
	  }
	  //[Lista]
	  function pad(number, length) {
		let str = "" + number;
		while (str.length < length) {
		  str = "0" + str;
		}
		return str;
	  }
	  //[lista]
	  // left padding s with c to a total of n chars
	  // padding_left('eureka', '*', 10)
	  function padding_left(s, c, n) {
		if (!s || !c || s.toString().length >= n) {
		  return s;
		}
		const max = (n - s.toString().length) / c.toString().length;
		for (let i = 0; i < max; i++) {
		  s = c + s;
		}
		return s;
	  }
	  //[lista]
	  // right padding s with c to a total of n chars
	  // padding_right('eureka', '*', 10)
	  function padding_right(s, c, n) {
		if (!s || !c || s.toString().length >= n) {
		  return s;
		}
		const max = (n - s.toString().length) / c.toString().length;
		for (let i = 0; i < max; i++) {
		  s += c;
		}
		return s;
	  }
	  //[✔]
	  const normalize = (function () {
		const from = "ÃÀÁÄÂÈÉËÊÌÍÏÎÒÓÖÔÙÚÜÛãàáäâèéëêìíïîòóöôùúüûÑñÇç°º",
		  to = "AAAAAEEEEIIIIOOOOUUUUaaaaaeeeeiiiioooouuuunncc  ",
		  mapping = {};
		for (let i = 0, j = from.length; i < j; i++)
		  mapping[from.charAt(i)] = to.charAt(i);
		return function (str) {
		  const ret = [];
		  for (let i = 0, j = str.length; i < j; i++) {
			const c = str.charAt(i);
			if (mapping.hasOwnProperty(str.charAt(i)))
			  ret.push(mapping[c]);
			else
			  ret.push(c);
		  }
		  return ret.join("");
		};
	  })();
	  //[Lista]
	  function enviarEmailUsuarioLogueado(email, asunto, contenido, idAutor, archivoTXT, archivoSujeto, archivoNotasCredito, archivoTXTPercepciones, archivoTXTRetenciones) {
		if (!isEmpty(idAutor)) {
		  let attachments = null;
		  attachments = [];
		  if (!isEmpty(archivoTXT)) {
			attachments.push(archivoTXT);
		  }
		  if (!isEmpty(archivoSujeto)) {
			attachments.push(archivoSujeto);
		  }
		  if (!isEmpty(archivoNotasCredito)) {
			attachments.push(archivoNotasCredito);
		  }
		  if (!isEmpty(archivoTXTPercepciones)) {
			attachments.push(archivoTXTPercepciones);
		  }
		  if (!isEmpty(archivoTXTRetenciones)) {
			attachments.push(archivoTXTRetenciones);
		  }
		  emailModule.send({
			author: idAutor,
			recipients: email,
			subject: asunto,
			body: contenido,
			attachments: attachments,
			//bcc: number[] | string[],
			//cc: number[] | string[],
			//isInternalOnly: boolean,
			//relatedRecords: Object,
			//replyTo: string
		  });
		}
	  }
	  //[Lista]
	  function isPersonProveedor(id_proveedor) {
		const filters = [];
		filters[0] = search.createFilter({
		  name: "internalid",
		  operator: search.Operator.IS,
		  values: id_proveedor
		});
		const columns = [];
		columns[0] = search.createColumn({
		  name: "isperson"
		});
		const results = search.create({
		  type: "vendor",
		  filters: filters,
		  columns: columns
		}).run().getRange({
		  start: 0,
		  end: 1
		});
		const tipo_proveedor = results[0].getValue({ name: "isperson" });
		return tipo_proveedor;
	  }
	  //[Lista]
	  function countryProveedor(id_country) {
		const filters = [];
		filters[0] = search.createFilter({
		  name: "internalid",
		  operator: search.Operator.IS,
		  values: id_country
		});
		const columns = [];
		columns[0] = search.createColumn({
		  name: "custrecord_l54_cod_pais_fex"
		});
		const results = search.create({
		  type: "customrecord_l54_paises_fex",
		  filters: filters,
		  columns: columns
		}).run().getRange({
		  start: 0,
		  end: 1
		});
		const codigo_pais = results[0].getValue({ name: "custrecord_l54_cod_pais_fex" });
		return codigo_pais;
	  }
	  //[Lista]
	  function generarTXTSicore(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug({
		  title: "generarTXTSicore",
		  details: "Inicio - Generacion TXT SICORE"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		let contenidoTXTSujeto = "";
		let contenidoTXT = "";
		let idRetencionNetSuite, refComprobante;
		let retencionSICORE = {};
		try {
		  retencionSICORE.retencion = {};
		  retencionSICORE.sujeto = {};
		  retencionSICORE.existenRetenciones = false;
		  retencionSICORE.error = false;
		  retencionSICORE.descripcionError = "";
		  retencionSICORE.procesoEncolado = false;
		  retencionSICORE.idLog = idRegistroLOG;
		  retencionSICORE.contenidoTXT = "";
		  retencionSICORE.contenidoTXTSujeto = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTRetencionesSICORE = [];
		  //filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesSICORE[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSICORE[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  const search_ = search.load({
			id: "customsearch_l54_ret_sicore",
			type: "customrecord_l54_retencion"
		  });
		  search_.filters.push(...filtroTXTRetencionesSICORE);
		  const searchResults = search_.run();
		  let resultadoTXTRetencionesSICORE = [];
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesSICORE = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesSICORE = resultadoTXTRetencionesSICORE.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SICORE', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTRetencionesSICORE)) {
			log.debug({
			  title: "generarTXTSicore",
			  details: "Cantidad Retenciones: " + resultadoTXTRetencionesSICORE.length
			});
			//
			for (let i = 0; resultadoTXTRetencionesSICORE != null && i < resultadoTXTRetencionesSICORE.length && procesoEncolado == false; i++) {
			  retencionSICORE.retencion = {};
			  retencionSICORE.sujeto = {};
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  const columns = resultadoTXTRetencionesSICORE[i].columns;
			  idRetencionNetSuite = resultadoTXTRetencionesSICORE[i].getValue({
				name: "internalid"
			  });
			  refComprobante = resultadoTXTRetencionesSICORE[i].getValue({
				name: "custrecord_l54_ret_ref_pago_prov"
			  });
			  if (!isEmpty(refComprobante)) {
				const codigoComprobante = obtenerCodigoComprobante(refComprobante, "sic", subsidiaria);
				if (!isEmpty(codigoComprobante)) {
				  retencionSICORE.retencion.codigoComprobante = padding_left(codigoComprobante, "0", 2);
				  // Obtengo el tipo de Comprobante netsuite
				  const filtroComprobanteNS = [];
				  //filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
				  filtroComprobanteNS[0] = search.createFilter({
					name: "internalid", //The search return column name
					operator: search.Operator.IS,
					values: refComprobante
				  });
				  const columnaComprobanteNS = [];
				  //columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');
				  columnaComprobanteNS[0] = search.createColumn({
					name: "recordtype"
				  });
				  const resultadoComprobanteNS = search.create({
					type: "transaction",
					filters: filtroComprobanteNS,
					columns: columnaComprobanteNS
				  }).run().getRange({
					start: 0,
					end: 1000
				  });
				  if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {
					//tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');
					tipoComprobanteNS = resultadoComprobanteNS[0].getValue({
					  name: "recordtype"
					});
					if (!isEmpty(tipoComprobanteNS)) {
					  // Obtengo Informacion Adicional del Pago a Proveedor
   
					  //filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
					  const filtroPagoProveedor = search.createFilter({
						name: "internalid",
						operator: search.Operator.IS,
						values: refComprobante
					  });
					  /* var columnaPagoProveedor = [];
					  columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
					  columnaPagoProveedor[1] = new nlobjSearchColumn('total');
					  var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
					  //var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);
					  //**
					  // var resultadoPagoProveedor = search.create({
					  // 	type: tipoComprobanteNS,
					  // 	//id: 'customsearch_l54_imp_pagos_prov_gen_txt',
					  // 	filters: filtroPagoProveedor,
					  // 	//columns: columns
					  // }).run().getRange({
					  // 	start: 0,
					  // 	end: 1000
					  // });
					  const SSresultadoPagoProveedor = search.load({
						id: "customsearch_l54_imp_pagos_prov_gen_txt"
					  });
					  SSresultadoPagoProveedor.filters.push(filtroPagoProveedor);
					  const resultSet = SSresultadoPagoProveedor.run();
					  const resultadoPagoProveedor = resultSet.getRange({
						start: 0,
						end: 1000
					  });
					  if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
						// Obtengo la Fecha de Emision del Comprobante
						// var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
						const columnasResultadoPagoProveedor = resultadoPagoProveedor[0].columns;
						//var fecha = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[1]);
						const fecha = resultadoPagoProveedor[0].getValue({
						  name: columnasResultadoPagoProveedor[1]
						});
						if (!isEmpty(fecha)) {
						  // Formateo la Fecha
						  //var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
						  const fechaDate = format.parse({
							value: fecha,
							type: format.Type.DATE
						  });
						  if (!isEmpty(fechaDate)) {
							// Obtengo las Componentes de la Fecha
							const dia = fechaDate.getDate();
							const mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
							const anio = fechaDate.getFullYear();
							const fechaComprobante = padding_left(dia, "0", 2) + "/" + padding_left(mes, "0", 2) + "/" + anio;
							retencionSICORE.retencion.fechaComprobante = fechaComprobante;
							// Obtengo el Numero del Comprobante													
							const numerador = resultadoTXTRetencionesSICORE[i].getValue({
							  name: "custrecord_l54_ret_cod_pago_prov"
							});
							if (!isEmpty(numerador)) {
							  // Tomo el Numero, Punto de Venta y Letra
							  //var arrayNumerador = numerador.split("-");
							  //if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
							  //var numeroComprobante = arrayNumerador[2];
							  const numeroComprobante = numerador.toString().substr(-8);
							  // Tomo el Punto de Venta
							  //var puntoVenta = arrayNumerador[1];
							  const puntoVenta = resultadoTXTRetencionesSICORE[i].getValue({
								name: "custrecord_l54_ret_pv_pago_prov"
							  });
							  // Tomo la Latra del Comprobante
							  //var letra = arrayNumerador[0];
							  const letra = resultadoTXTRetencionesSICORE[i].getValue({
								name: "custrecord_l54_ret_let_pago_prov"
							  });
							  //if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
							  if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
								const numeroAux = padding_left(puntoVenta.toString(), "0", 5) + padding_left(numeroComprobante.toString(), "0", 8);
								retencionSICORE.retencion.numeroComprobante = padding_left(numeroAux, "0", 16);
								// Obtengo Tipo de Cambio de la Retencion
								const tipoCambio = resultadoTXTRetencionesSICORE[i].getValue({
								  name: "custrecord_l54_ret_tipo_cambio"
								});
								if (!isEmpty(tipoCambio)) {
								  // Obtengo el Importe del Comprobante
								  // var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
								  //var importeComprobante = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[7]);
								  const importeComprobante = resultadoPagoProveedor[0].getValue({
									name: columnasResultadoPagoProveedor[7]
								  });
								  if (!isEmpty(importeComprobante) && (parseFloat(importeComprobante) > 0)) {
									/* retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
									Comentado por: Jesus Salazar. 
									Se comentó esta instrucción porque generaba error al momento de calcular importe de comprobante con moneda extranjera, se multiplicaba 
									de nuevo por el tipo de cambio el campo de paidamount que ya venía transformado a moneda local, se recalculaba y era erróneo el proceso
									*/
									// Cambio realizado por Jesús Salazar el 14/02/2019, para obtener el importe comprobante del SS Importe Pagos Proveedores que ya viene transformado a moneda
									//retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
									retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
									// fin Cambio
									// Obtengo el Tipo de Impuesto (Ganancias o IVA)
									// por ahora pregunto si es ganancia o IVA, pero cambiarlo para que la lista de tipo retencion (Ganancia , IVA ,IIBB , SUSS)
									// Sea un recordType y tenga el codigo del tipo de Impuesto.																	
									const tipoRetencion = resultadoTXTRetencionesSICORE[i].getValue({
									  name: "custrecord_l54_ret_tipo"
									});
									//var esRetencionBeneficiariosExterior = resultadoTXTRetencionesSICORE[i].getValue(columns[29]);
									const esRetencionBeneficiariosExterior = resultadoTXTRetencionesSICORE[i].getValue({
									  name: columns[29]
									});
									let tipoImpuesto = null;
									if (!isEmpty(tipoRetencion)) {
									  if (parseInt(tipoRetencion, 10) == 1) {
										// GANANCIAS - Si es retención de ganancias a un beneficiario del exterior se le asigna 218, si no se le asigna 217
										tipoImpuesto = (!isEmpty(esRetencionBeneficiariosExterior) && (esRetencionBeneficiariosExterior == "T" || esRetencionBeneficiariosExterior === true)) ? 218 : 217;
									  } else {
										if (parseInt(tipoRetencion, 10) == 2) {
										  // IVA
										  tipoImpuesto = 767;
										}
									  }
									  if (!isEmpty(tipoImpuesto)) {
										retencionSICORE.retencion.tipoImpuesto = padding_left(tipoImpuesto, "0", 4);
										// Obtengo el Codigo de Regimen
										const codigoRegimen = resultadoTXTRetencionesSICORE[i].getValue({
										  name: "custrecord_l54_ret_codigo_regimen"
										});
										if (!isEmpty(codigoRegimen) && parseInt(codigoRegimen, 10) > 0) {
										  retencionSICORE.retencion.codigoRegimen = padding_left(codigoRegimen, "0", 3);
										  // Obtengo el Codigo de Operacion
										  if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
											const filtroTipoOperacion = [];
											filtroTipoOperacion[0] = search.createFilter({
											  name: "internalid", //The search return column name
											  operator: search.Operator.IS,
											  values: tipoOperacion
											});
											const columnaTipoOperacion = [];
											columnaTipoOperacion[0] = search.createColumn({
											  name: "custrecord_l54_tipo_op_codigo"
											});
											//Crear una búsqueda
											const resultadoTipoOperacion = search.create({
											  type: "customrecord_l54_tipo_operacion",
											  filters: filtroTipoOperacion,
											  columns: columnaTipoOperacion
											}).run().getRange({
											  start: 0,
											  end: 1000
											});
											if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {
											  //var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
											  const codigoOperacion = resultadoTipoOperacion[0].getValue({
												name: "custrecord_l54_tipo_op_codigo"
											  });
											  if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
												retencionSICORE.retencion.codigoOperacion = codigoOperacion;
												// Obtengo la Base de Calculo
												/* Comentado por: JSalazar. 08/05/19.
												El valor de base cálculo ya viene transformado a pesos desde el SS.
												var baseCalculo = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_base_calculo_imp');
												 */
												let baseCalculo = resultadoTXTRetencionesSICORE[i].getValue({
												  name: columns[27]
												}); // Monto base cálculo en moneda local
												if (isEmpty(baseCalculo) || (parseFloat(baseCalculo, 10) <= 0)) {
												  //baseCalculo = resultadoTXTRetencionesSICORE[i].getValue(columns[26]); // monto base cálculo en moneda local sacado mediante formula del SS, por si no existe el monto en moneda local
												  baseCalculo = resultadoTXTRetencionesSICORE[i].getValue({
													name: columns[26]
												  });  // monto base cálculo en moneda local sacado mediante formula del SS, por si no existe el monto en moneda local
												}
												if (!isEmpty(baseCalculo) && (parseFloat(baseCalculo, 10) > 0)) {
												  // retencionSICORE.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
												  retencionSICORE.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
												  // Obtengo Fecha de Retencion
												  const fechaRetencion = resultadoTXTRetencionesSICORE[i].getValue({ name: "custrecord_l54_ret_fecha" });
												  if (!isEmpty(fechaRetencion)) {
													// Formateo la Fecha
													//var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
													const fechaRetencionDate = format.parse({
													  value: fechaRetencion,
													  type: format.Type.DATE
													});
													if (!isEmpty(fechaRetencionDate)) {
													  // Obtengo las Componentes de la Fecha
													  const diaRetencion = fechaRetencionDate.getDate();
													  const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
													  const anioRetencion = fechaRetencionDate.getFullYear();
													  const fechaRetencionFinal = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
													  retencionSICORE.retencion.fechaRetencion = fechaRetencionFinal;
													  // Cargo el Proveedor
													  let proveedor = resultadoTXTRetencionesSICORE[i].getValue({ name: "custrecord_l54_ret_ref_proveedor" });
													  // Obtengo el Numero de Documento
													  if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {
														retencionSICORE.sujeto.idSujetoNetSuite = proveedor;
														/*var filtroProveedor = [];
														filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);
														var columnaProveedor = [];
														columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
														columnaProveedor[1] = new nlobjSearchColumn('companyname');
														columnaProveedor[2] = new nlobjSearchColumn('lastname');
														columnaProveedor[3] = new nlobjSearchColumn('firstname');
														columnaProveedor[4] = new nlobjSearchColumn('address1');
														columnaProveedor[5] = new nlobjSearchColumn('city');
														columnaProveedor[6] = new nlobjSearchColumn('zipcode');
														columnaProveedor[7] = new nlobjSearchColumn('state');
														columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_tipo_documento');
														columnaProveedor[9] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_gan');
														columnaProveedor[10] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
														columnaProveedor[11] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
														columnaProveedor[12] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
														columnaProveedor[13] = new nlobjSearchColumn('custentity_l54_tipo_documento');*/
														//var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);
														//1.0
														// var resultadoProveedor = new nlapiLoadRecord('vendor', proveedor, {
														// 	disabletriggers: true
														// });
														//2.0
														log.debug("proveedor id SICORE=", proveedor);
														const resultadoProveedor = record.load({
														  type: record.Type.VENDOR,
														  id: proveedor,
														  isDynamic: true,
														  defaultValues: {
															disabletriggers: true
														  }
														});
														//if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
														log.debug("line 583", JSON.stringify(resultadoProveedor));
														if (!isEmpty(resultadoProveedor)) {
														  // Obtengo Codigo Condicion del Proveedor
														  let tipoContribuyente = "";
														  let desc = "";
														  let recordTypeTipoContribuyente = "";
														  if (parseInt(tipoRetencion, 10) == 1) {
															// GANANCIAS
															desc = "Ganancias";
															recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente_gan";
															//tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente_gan');
															tipoContribuyente = resultadoTXTRetencionesSICORE[i].getValue({ name: "custrecord_l54_ret_tipo_contrib_gan" });
														  } else {
															if (parseInt(tipoRetencion, 10) == 2) {
															  // IVA
															  desc = "IVA";
															  recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente";
															  //tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente');
															  tipoContribuyente = resultadoTXTRetencionesSICORE[i].getValue({ name: "custrecord_l54_ret_tipo_contrib_iva" });
															}
														  }
														  log.debug("line 604", "Tipocontribuyente: " + tipoContribuyente);
														  if (!isEmpty(tipoContribuyente)) {
															const filtroTipoContribuyente = [];
															filtroTipoContribuyente[0] = search.createFilter({
															  name: "internalid", //The search return column name
															  operator: search.Operator.IS,
															  values: tipoContribuyente
															});
															const columnaTipoContribuyente = [];
															if (desc == "Ganancias") {
															  //columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
															  columnaTipoContribuyente[0] = search.createColumn({
																name: "custrecord_l54_sic_tipo_cond_codigo",
																join: "custrecord_l54_tipo_contr_gan_cod_sic"
															  });
															  //columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
															  columnaTipoContribuyente[1] = search.createColumn({
																name: "custrecord_l54_sic_tipo_cond_susp",
																join: "custrecord_l54_tipo_contr_gan_cod_sic"
															  });
															} else {
															  //columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_cont_cod_sic');
															  columnaTipoContribuyente[0] = search.createColumn({
																name: "custrecord_l54_sic_tipo_cond_codigo",
																join: "custrecord_l54_tipo_cont_cod_sic"
															  });
															  //columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_cont_cod_sic');
															  columnaTipoContribuyente[1] = search.createColumn({
																name: "custrecord_l54_sic_tipo_cond_susp",
																join: "custrecord_l54_tipo_cont_cod_sic"
															  });
															}
															//var resultadoTipoContribuyente = new nlapiSearchRecord(recordTypeTipoContribuyente, null, filtroTipoContribuyente, columnaTipoContribuyente);
															const resultadoTipoContribuyente = search.create({
															  type: recordTypeTipoContribuyente,
															  filters: filtroTipoContribuyente,
															  columns: columnaTipoContribuyente
															}).run().getRange({
															  start: 0,
															  end: 1000
															});
															log.debug("line 645", JSON.stringify(resultadoTipoContribuyente));
															if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
															  let codigoCondicion = "";
															  let tipoSuspension = "";
															  if (desc == "Ganancias") {
																//codigoCondicion = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
																codigoCondicion = resultadoTipoContribuyente[0].getValue({
																  name: "custrecord_l54_sic_tipo_cond_codigo",
																  join: "custrecord_l54_tipo_contr_gan_cod_sic"
																});
																//tipoSuspension = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
																tipoSuspension = resultadoTipoContribuyente[0].getValue({
																  name: "custrecord_l54_sic_tipo_cond_susp",
																  join: "custrecord_l54_tipo_contr_gan_cod_sic"
																});
															  } else {
																codigoCondicion = resultadoTipoContribuyente[0].getValue({ name: "custrecord_l54_sic_tipo_cond_codigo", join: "custrecord_l54_tipo_cont_cod_sic" });
																tipoSuspension = resultadoTipoContribuyente[0].getValue({ name: "custrecord_l54_sic_tipo_cond_susp", join: "custrecord_l54_tipo_cont_cod_sic" });
															  }
															  log.debug("line 664", "codigo suspension: " + codigoCondicion + "  tipoSuspension: " + tipoSuspension);
															  if (!isEmpty(codigoCondicion) && !isEmpty(tipoSuspension)) {
																retencionSICORE.retencion.codigoCondicion = padding_left(codigoCondicion, "0", 2);
																// Configuro el Codigo de Suspension del Sujeto
																const filtroSuspension = [];
																//filtroSuspension[0] = new nlobjSearchFilter('internalid', null, 'is', tipoSuspension);
																filtroSuspension[0] = search.createFilter({
																  name: "internalid", //The search return column name
																  operator: search.Operator.IS,
																  values: tipoSuspension
																});
																const columnaSuspension = [];
																//columnaSuspension[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_susp_codigo');
																columnaSuspension[0] = search.createColumn({
																  name: "custrecord_l54_sic_tipo_susp_codigo" //Name of a search column as a string.																																
																});
																//var resultadoSuspension = new nlapiSearchRecord('customrecord_l54_sic_tipo_suspension', null, filtroSuspension, columnaSuspension);
																const resultadoSuspension = search.create({
																  type: "customrecord_l54_sic_tipo_suspension",
																  filters: filtroSuspension,
																  columns: columnaSuspension
																}).run().getRange({
																  start: 0,
																  end: 1000
																});
																log.debug("line 689", JSON.stringify(resultadoSuspension));
																if (!isEmpty(resultadoSuspension) && resultadoSuspension.length > 0) {
																  const codigoSuspension = resultadoSuspension[0].getValue({ name: "custrecord_l54_sic_tipo_susp_codigo" });
																  if (!isEmpty(codigoSuspension)) {
																	retencionSICORE.retencion.codigoSujetoSusp = codigoSuspension;
																	// Obtengo el Importe de la Retencion
																	// var importeRetencion = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_importe');
																	const importeRetencion = resultadoTXTRetencionesSICORE[i].getValue({ name: columns[28] });
																	if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																	  //retencionSICORE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																	  retencionSICORE.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
																	  // Porcentaje Exclusion , lo Obtengo del Proveedor
																	  let existePorcenaje = false;
																	  let porcentaje = "0";
																	  //var porcentaje = resultadoProveedor.getFieldValue('custentity_l54_porcentaje_excl');
																	  porcentaje = resultadoProveedor.getValue({
																		fieldId: "custentity_l54_porcentaje_excl"
																	  });
																	  let porcentajeFinal = "0";
																	  if (!isEmpty(porcentaje)) {
																		existePorcenaje = true;
																		// Quito el Simbolo %
																		porcentajeFinal = String(porcentaje).substring(0, porcentaje.length - 1);
																	  }
																	  if (isEmpty(porcentajeFinal))
																		porcentajeFinal = "0";
																	  retencionSICORE.retencion.porcentajeExcl = padding_left(porcentajeFinal.formatMoney(2, separadorMiles, separadorDecimal), "0", 6);
																	  // Fecha Boletin
																	  //var fechaBoletin = resultadoProveedor.getFieldValue('custentity_l54_fecha_boletin');
																	  const fechaBoletin = resultadoProveedor.getValue({
																		fieldId: "custentity_l54_fecha_boletin"
																	  });
																	  let fechaBoletinFinal = " ";
																	  let errorFechaBoletin = false;
																	  if (!isEmpty(fechaBoletin)) {
																		//var fechaBoletinDate = nlapiStringToDate(fechaBoletin, 'datetimetz');
																		const fechaBoletinDate = format.parse({
																		  value: fechaBoletin,
																		  type: format.Type.DATE
																		});
																		if (!isEmpty(fechaBoletinDate)) {
																		  // Obtengo las Componentes de la Fecha
																		  const diaBoletin = fechaBoletinDate.getDate();
																		  const mesBoletin = parseInt(fechaBoletinDate.getMonth(), 10) + parseInt(1, 10);
																		  const anioBoletin = fechaBoletinDate.getFullYear();
																		  fechaBoletinFinal = padding_left(diaBoletin, "0", 2) + "/" + padding_left(mesBoletin, "0", 2) + "/" + anioBoletin;
																		}
																	  } else {
																		// Si no Tiene Fecha de Boletin pero si Porcentaje de Exclusion -> Error
																		if (existePorcenaje == true)
																		  errorFechaBoletin = true;
																	  }
																	  if (isEmpty(fechaBoletinFinal))
																		fechaBoletinFinal = " ";
																	  if (errorFechaBoletin == false) {
																		retencionSICORE.retencion.fechaBoletin = padding_right(fechaBoletinFinal, " ", 10);
																		// Obtengo el Tipo de Documento del Sujeto Retenido
																		//var tipoDocumento = resultadoProveedor.getFieldValue('custentity_l54_tipo_documento');
																		let tipoDocumento = resultadoProveedor.getValue({
																		  fieldId: "custentity_l54_tipo_documento"
																		});
																		if (!isEmpty(tipoDocumento)) {
																		  // Obtengo el Codigo de Tipo de Documento
																		  const filtroTipoDocumento = [];
																		  //filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);
																		  filtroTipoDocumento[0] = search.createFilter({
																			name: "internalid", //The search return column name
																			operator: search.Operator.IS,
																			values: tipoDocumento
																		  });
																		  const columnaTipoDocumento = [];
																		  //columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sic');
																		  columnaTipoDocumento[0] = search.createColumn({
																			name: "custrecord_l54_tipo_doc_sic" //Name of a search column as a string.																																					
																		  });
																		  //var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);
																		  const resultadoTipoDocumento = search.create({
																			type: "customrecord_l54_tipo_documento",
																			filters: filtroTipoDocumento,
																			columns: columnaTipoDocumento
																		  }).run().getRange({
																			start: 0,
																			end: 1000
																		  });
																		  log.debug("line 773", JSON.stringify(resultadoTipoDocumento));
																		  if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																			tipoDocumento = resultadoTipoDocumento[0].getValue({ name: "custrecord_l54_tipo_doc_sic" });
																			if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																			  retencionSICORE.retencion.tipoDocSujeto = padding_left(tipoDocumento, "0", 2);
																			  // Informacion de Beneficiarios del Exterior
																			  // Verifico si el Proveedor tiene
																			  retencionSICORE.retencion.numeroCertificado = padding_left("0", "0", 14);
																			  retencionSICORE.retencion.denominacion = padding_right(" ", " ", 30);
																			  retencionSICORE.retencion.acrecentamiento = "0";
																			  retencionSICORE.retencion.cuitPaisRetenido = padding_right("0", "0", 11);
																			  retencionSICORE.retencion.cuitOrdenante = padding_right("0", "0", 11);
																			  // Cargo informacion del Sujeto Retenido
																			  proveedor = resultadoTXTRetencionesSICORE[i].getValue({ name: "custrecord_l54_ret_ref_proveedor" });
																			  // Obtengo el Numero de Documento
																			  //var nroDocumento = resultadoProveedor.getFieldValue('custentity_l54_cuit_entity');
																			  let nroDocumento = resultadoProveedor.getValue({ fieldId: "custentity_l54_cuit_entity" });
																			  if (!isEmpty(nroDocumento)) {
																				// Formateo el Documento
																				nroDocumento = nroDocumento.replace(/-/g, "");
																				nroDocumento = nroDocumento.replace(/\./g, "");
																				// Elimino Blancos
																				const numeroDocumentoFinal = nroDocumento.replace(/ /g, "&nbsp");
																				retencionSICORE.retencion.numeroDocumento = padding_right(numeroDocumentoFinal, " ", 20);
																				retencionSICORE.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
																				// Obtengo la Razon Social
																				let razonSocial = resultadoProveedor.getValue({ fieldId: "companyname" });
																				if (isEmpty(razonSocial)) {
																				  // Busco Nombre y Apellido
																				  const apellido = resultadoProveedor.getValue({ fieldId: "lastname" });
																				  const nombre = resultadoProveedor.getValue({ fieldId: "firstname" });
																				  razonSocial = apellido + " " + nombre;
																				}
																				razonSocial = razonSocial.replace(/(?:\r\n|\r|\n)/g, "");
																				log.debug("line 807", "razonSocial: " + razonSocial);
																				if (!isEmpty(razonSocial)) {
																				  retencionSICORE.sujeto.razonSocial = padding_right(normalize(razonSocial.substring(0, 19)), " ", 20);
																				  // Nuevo
																				  //var cantidadDirecciones = resultadoProveedor.getLineItemCount('addressbook');
																				  const cantidadDirecciones = resultadoProveedor.getLineCount({
																					sublistId: "addressbook"
																				  });
																				  log.debug("line 815", "cantidadDirecciones: " + cantidadDirecciones);
																				  let numeroLinea = 0;
																				  if (cantidadDirecciones > 0) {
																					if (cantidadDirecciones > 1) {
																					  // Busco la de Facturacion Predeterminado
																					  //var numLinea = resultadoProveedor.findLineItemValue('addressbook', 'defaultbilling', 'T');
																					  const numLinea = resultadoProveedor.findSublistLineWithValue({
																						sublistId: "addressbook",
																						fieldId: "defaultbilling",
																						value: true
																					  });
																					  log.debug("line 825", "numLinea: " + numLinea);
																					  if (!isEmpty(numLinea) && numLinea > 0) {
																						numeroLinea = numLinea;
																					  } else {
																						// Tomo la Primera
																						numeroLinea = 0;
																					  }
																					} else {
																					  numeroLinea = 0;
																					}
																				  } else {
																					numeroLinea = -1;
																				  }
																				  const valorSiNoPExisteDato = "NO POSEE";
																				  // Nuevo
																				  log.debug("line 839", "numeroLinea: " + numeroLinea);
																				  if (!isEmpty(numeroLinea) && numeroLinea >= 0) {
																					// Obtengo Domicilio Fiscal
																					//var domicilioFiscal = resultadoProveedor[0].getValue('address1');
																					//var domicilioFiscal = isEmpty(resultadoProveedor.getLineItemValue('addressbook', 'addr1', numeroLinea)) ? valorSiNoPExisteDato : resultadoProveedor.getLineItemValue('addressbook', 'addr1', numeroLinea);
																					let domicilioFiscal = isEmpty(resultadoProveedor.getSublistValue({
																					  sublistId: "addressbook",
																					  fieldId: "addr1",
																					  line: numeroLinea
																					})) ? valorSiNoPExisteDato : resultadoProveedor.getSublistValue({
																					  sublistId: "addressbook",
																					  fieldId: "addr1",
																					  line: numeroLinea
																					});
																					//Aquí
																					log.debug("line 854", "domicilioFiscal: " + domicilioFiscal);
																					if (!isEmpty(domicilioFiscal)) {
																					  domicilioFiscal = domicilioFiscal.replace(/(?:\r\n|\r|\n)/g, "");
																					  retencionSICORE.sujeto.domicilioFiscal = padding_right(normalize(domicilioFiscal.substring(0, 19)), " ", 20);
																					  // Obtengo Localidad
																					  //var localidad = resultadoProveedor[0].getValue('city');
																					  //var localidad = isEmpty(resultadoProveedor.getLineItemValue('addressbook', 'city', numeroLinea)) ? valorSiNoPExisteDato : resultadoProveedor.getLineItemValue('addressbook', 'city', numeroLinea);
																					  let localidad = isEmpty(resultadoProveedor.getSublistValue({
																						sublistId: "addressbook",
																						fieldId: "city",
																						line: numeroLinea
																					  })) ? valorSiNoPExisteDato : resultadoProveedor.getSublistValue({
																						sublistId: "addressbook",
																						fieldId: "city",
																						line: numeroLinea
																					  });
																					  log.debug("line 870", "localidad: " + localidad);
																					  if (!isEmpty(localidad)) {
																						localidad = localidad.replace(/(?:\r\n|\r|\n)/g, "");
																						retencionSICORE.sujeto.localidad = padding_right(normalize(localidad.substring(0, 19)), " ", 20);
																						// Obtengo Codigo de Provincia
																						//var provincia = resultadoProveedor[0].getValue('state');
																						//var provincia = resultadoProveedor.getLineItemValue('addressbook', 'custrecord_l54_provincia', numeroLinea);
																						//RG var subrecordAddress = resultadoProveedor.viewLineItemSubrecord('addressbook', 'addressbookaddress', numeroLinea);
																						// Seleccione la línea de la sublista
																						resultadoProveedor.selectLine({
																						  sublistId: "addressbook",
																						  line: numeroLinea
																						});
																						// Obtenga la sublista activa
																						const subrecordAddress = resultadoProveedor.getCurrentSublistSubrecord({
																						  sublistId: "addressbook",
																						  fieldId: "addressbookaddress"
																						});
																						log.debug("line 886", "subrecordAddress: " + subrecordAddress);
																						if (!isEmpty(subrecordAddress)) {
																						  const provincia = isEmpty(subrecordAddress.getValue({
																							fieldId: "custrecord_l54_provincia"
																						  })) ? valorSiNoPExisteDato : subrecordAddress.getValue({ fieldId: "custrecord_l54_provincia" }); // get 'country' field of address subrecord
																						  if (!isEmpty(provincia)) {
																							//nlapiLogExecution('DEBUG', 'generarTXT_SICORE - Retenciones', 'Provincia ID : ' + provincia);
																							let codigoProvincia = "";
																							if (provincia == valorSiNoPExisteDato) {
																							  codigoProvincia = "99";
																							} else {
																							  // Busco el Codigo de Provincia SICORE
																							  const filtroProvincia = [];
																							  //filtroProvincia[0] = new nlobjSearchFilter('custrecord_l54_sic_codigo_prov_provincia', null, 'is', provincia);
																							  //filtroProvincia[0] = new nlobjSearchFilter('internalid', null, 'is', provincia);
																							  filtroProvincia[0] = search.createFilter({
																								name: "internalid", //The search return column name
																								operator: search.Operator.IS,
																								values: provincia
																							  });
																							  const columnaProvincia = [];
																							  //columnaProvincia[0] = new nlobjSearchColumn('custrecord_l54_sic_codigo_prov_codigo');
																							  columnaProvincia[0] = search.createColumn({
																								name: "custrecord_l54_sic_codigo_prov_codigo" //Name of a search column as a string.																																															
																							  });
																							  //var resultadoProvincia = new nlapiSearchRecord('customrecord_l54_sic_codigo_provincia', null, filtroProvincia, columnaProvincia);
																							  var resultadoProvincia = search.create({
																								type: "customrecord_l54_sic_codigo_provincia",
																								filters: filtroProvincia,
																								columns: columnaProvincia
																							  }).run().getRange({
																								start: 0,
																								end: 1000
																							  });
																							}
																							if ((!isEmpty(resultadoProvincia) && resultadoProvincia.length > 0) || !isEmpty(codigoProvincia)) {
																							  codigoProvincia = isEmpty(codigoProvincia) ? resultadoProvincia[0].getValue({ name: "custrecord_l54_sic_codigo_prov_codigo" }) : codigoProvincia;
																							  //nlapiLogExecution('DEBUG', 'generarTXT_SICORE - Retenciones', 'Codigo Prov ID : ' + codigoProvincia);
																							  log.debug("line 924", "codigoProvincia: " + codigoProvincia);
																							  if (!isEmpty(codigoProvincia)) {
																								retencionSICORE.sujeto.codigoProvincia = padding_left(codigoProvincia, 0, 2);
																								// Obtengo Codigo Postal
																								//var codigoPostal = resultadoProveedor[0].getValue('zipcode');
																								const valorItemResultProv = resultadoProveedor.getSublistValue({
																								  sublistId: "addressbook",
																								  fieldId: "zip",
																								  line: numeroLinea
																								});
																								const codigoPostal = isEmpty(valorItemResultProv) ? " " : valorItemResultProv;
																								if (!isEmpty(codigoPostal)) {
																								  retencionSICORE.sujeto.codigoPostal = padding_right(codigoPostal.substring(0, 7), " ", 8);
																								  // Obtengo Tipo de Documento																																																
																								  tipoDocumento = resultadoProveedor.getValue({
																									fieldId: "custentity_l54_tipo_documento"
																								  });
																								  if (!isEmpty(tipoDocumento)) {
																									// Obtengo el Codigo de Documento SICORE
																									const filtroTipoDoc = [];
																									filtroTipoDoc[0] = search.createFilter({
																									  name: "internalid", //The search return column name
																									  operator: search.Operator.IS,
																									  values: tipoDocumento
																									});
																									const columnaTipoDoc = [];
																									columnaTipoDoc[0] = search.createColumn({
																									  name: "custrecord_l54_tipo_doc_sic"
																									});
																									const resultadoTipoDoc = search.create({
																									  type: "customrecord_l54_tipo_documento",
																									  filters: filtroTipoDoc,
																									  columns: columnaTipoDoc
																									}).run().getRange({
																									  start: 0,
																									  end: 1000
																									});
																									if (!isEmpty(resultadoTipoDoc) && resultadoTipoDoc.length > 0) {
																									  const codigoTipoDocumento = resultadoTipoDoc[0].getValue({ name: "custrecord_l54_tipo_doc_sic" });
																									  if (!isEmpty(codigoTipoDocumento)) {
																										retencionSICORE.sujeto.tipoDocumento = padding_left(codigoTipoDocumento, 0, 2);
																									  } else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																									  }
																									} else {
																									  errorGlobal = true;
																									  descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																									}
																								  } else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo Tipo De Documento del Proveedor";
																								  }
																								} else {
																								  errorGlobal = true;
																								  descripcionError = "Error Obteniendo Codigo Postal del Proveedor";
																								}
																							  } else {
																								errorGlobal = true;
																								descripcionError = "Codigo de Provincia Invalido";
																							  }
																							} else {
																							  errorGlobal = true;
																							  descripcionError = "Error Obteniendo Codigo de Provincia";
																							}
																						  } else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo Provincia del Proveedor";
																						  }
																						} else {
																						  errorGlobal = true;
																						  descripcionError = "Error Obteniendo SubRecord de Direccion del Proveedor";
																						}
																					  } else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo Localidad del Proveedor";
																					  }
																					} else {
																					  errorGlobal = true;
																					  descripcionError = "Error Obteniendo Domicilio Fiscal del Proveedor";
																					}
																				  } else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Linea de Direccion del Proveedor";
																				  }
																				} else {
																				  errorGlobal = true;
																				  descripcionError = "Error Obteniendo Razon Social del Proveedor";
																				}
																			  } else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																			  }
																			} else {
																			  errorGlobal = true;
																			  descripcionError = "Error Tipo de Documento SICORE No Configurado Correctamente";
																			}
																		  } else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo Tipo de Documento";
																		  }
																		} else {
																		  errorGlobal = true;
																		  descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																		}
																	  } else {
																		errorGlobal = true;
																		descripcionError = "Falta Configurar Fecha de Boletin del Proveedor";
																	  }
																	} else {
																	  errorGlobal = true;
																	  descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																	}
																  } else {
																	errorGlobal = true;
																	descripcionError = "Falta Configurar Codigo de Suspension del Sujeto Retenido";
																  }
																} else {
																  errorGlobal = true;
																  descripcionError = "Error Obteniendo el Codigo de Suspension del Sujeto Retenido";
																}
															  } else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo el Codigo de Condicion";
															  }
															} else {
															  errorGlobal = true;
															  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
															}
														  } else {
															errorGlobal = true;
															descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
														  }
														} else {
														  errorGlobal = true;
														  descripcionError = "Error Obteniendo Informacion del Proveedor";
														}
													  } else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Proveedor";
													  }
													} else {
													  errorGlobal = true;
													  descripcionError = "Error Formateando la Fecha de Retencion";
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Fecha De Retencion";
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "Error Obteniendo Base De Calculo";
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Codigo de Operacion Invalido";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo el Codigo de Operacion";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Codigo de Operacion";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Codigo de Regimen";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo El Tipo De Impuesto";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo El Tipo De Impuesto";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Importe del Comprobante";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
							  }
							  /*} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							  }*/
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Formateando la Fecha del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Fecha del Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionSICORE.sujeto != null) {
				  if (retencionSICORE.retencion != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					if (!isEmpty(contenidoTXTSujeto)) {
					  contenidoTXTSujeto += "\r\n";
					}
					const error = false;
					const descripcionMensaje = "TXT Retenciones Generado Correctamente";
					contenidoTXT += retencionSICORE.retencion.codigoComprobante + retencionSICORE.retencion.fechaComprobante + retencionSICORE.retencion.numeroComprobante +
					  retencionSICORE.retencion.importeComprobante + retencionSICORE.retencion.tipoImpuesto + retencionSICORE.retencion.codigoRegimen + retencionSICORE.retencion.codigoOperacion +
					  retencionSICORE.retencion.baseCalculo + retencionSICORE.retencion.fechaRetencion + retencionSICORE.retencion.codigoCondicion + retencionSICORE.retencion.codigoSujetoSusp +
					  retencionSICORE.retencion.importeRetencion + retencionSICORE.retencion.porcentajeExcl + retencionSICORE.retencion.fechaBoletin +
					  retencionSICORE.retencion.tipoDocSujeto + retencionSICORE.retencion.numeroDocumento + retencionSICORE.retencion.numeroCertificado + retencionSICORE.retencion.denominacion +
					  retencionSICORE.retencion.acrecentamiento + retencionSICORE.retencion.cuitPaisRetenido + retencionSICORE.retencion.cuitOrdenante;
					// Para Informacion del Sujeto Retenido
					contenidoTXTSujeto += retencionSICORE.sujeto.numeroDocSujeto + retencionSICORE.sujeto.razonSocial + retencionSICORE.sujeto.domicilioFiscal + retencionSICORE.sujeto.localidad +
					  retencionSICORE.sujeto.codigoProvincia + retencionSICORE.sujeto.codigoPostal + retencionSICORE.sujeto.tipoDocumento;
					// Grabo Registro de TXT
					/*var estadoGeneracionTXTSujetos = null;
					var estadoGeneracionTXT = null;
					estadoGeneracionTXTSujetos = generarTXTSujetos(periodo, tipoOperacion, tipoRegimen, retencionSICORE.sujeto.idSujetoNetSuite, contenidoTXTSujeto, idRegistroLOG, idRetencionNetSuite);
					if (isEmpty(estadoGeneracionTXTSujetos) || !isEmpty(estadoGeneracionTXTSujetos) && estadoGeneracionTXTSujetos.errorGeneracion == true) {
					// Error Generando TXT
					error = true;
					descripcionMensaje = "Error Generando TXT Sujetos Retenidos";
					if (isEmpty(estadoGeneracionTXTSujetos))
					descripcionMensaje = estadoGeneracionTXTSujetos.descripcionError;
					errorGeneral = true;
					descripcionError = descripcionMensaje;
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
					if (error == false) {
					estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
					}
					if (error == false) {
					if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
					// Error Generando TXT
					error = true;
					descripcionMensaje = "Error Generando TXT Retenciones";
					if (isEmpty(estadoGeneracionTXT))
					descripcionMensaje = estadoGeneracionTXT.descripcionError;
					errorGeneral = true;
					descripcionError = descripcionMensaje;
					//retencionSICORE = grabarError(true, descripcionMensaje, true);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
					}*/
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Retencion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error({
				  title: "generarTXTSicore",
				  details: "Error Generando TXT Retenciones SICORE " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error " + descripcionError + ":", idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTRetencionesSICORE) && resultadoTXTRetencionesSICORE.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  log.error({
					title: "generarTXTSicore",
					details: "Error Obteniendo Retenciones SICORE"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			log.debug({
			  title: "generarTXTSicore",
			  details: "No se encontraron resultados para SICORE - Retenciones"
			});
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		  if (!isEmpty(contenidoTXTSujeto)) {
			contenidoTXTSujeto += "\r\n";
		  }
		} catch (e) {
		  log.error({
			title: "generarTXTSicore",
			details: "Error Generando TXT SICORE - Error :  " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SICORE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionSICORE = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSICORE = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug({
		  title: "generarTXTSicore",
		  details: "Finalizacion - Generacion TXT SICORE"
		});
		retencionSICORE.contenidoTXT = contenidoTXT;
		retencionSICORE.contenidoTXTSujeto = contenidoTXTSujeto;
		return retencionSICORE;
	  }
	  //[Lista]
	  function generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Inicio - Generacion TXT SIRE GANANCIAS EXTERIOR');
		log.debug({
		  title: "generarTXTSireGananciasExt",
		  details: "Inicio - Generacion TXT SIRE GANANCIAS EXTERIOR"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		const contenidoTXTSujeto = "";
		try {
		  var retencionSIRE_ganancias = {};
		  retencionSIRE_ganancias.existenRetenciones = false;
		  retencionSIRE_ganancias.error = false;
		  retencionSIRE_ganancias.descripcionError = "";
		  retencionSIRE_ganancias.procesoEncolado = false;
		  retencionSIRE_ganancias.idLog = idRegistroLOG;
		  retencionSIRE_ganancias.contenidoTXTSujeto = "";
		  let iCont = 0;
		  const filtroTXTRetencionesSIRE_ganancias = [];
		  retencionSIRE_ganancias.contenidoTXT = "";
		  var contenidoTXT = "";
		  //se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTRetencionesSIRE_ganancias[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesSIRE_ganancias[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTRetencionesSIRE_ganancias[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTRetencionesSIRE_ganancias[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sire_ext');
		  const search_ = search.load({
			id: "customsearch_l54_ret_sire_ext",
			type: "customrecord_l54_retencion" //opc
		  });
		  search_.filters.push(...filtroTXTRetencionesSIRE_ganancias);
		  const searchResults = search_.run();
		  let resultadoTXTRetencionesSIREGanancias = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesSIREGanancias = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesSIREGanancias = resultadoTXTRetencionesSIREGanancias.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTRetencionesSIREGanancias)) {
			const columns = searchResults.columns;
			//nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIREGanancias.length);
			log.debug({
			  title: "generarTXTSireGananciasExt",
			  details: "Cantidad Retenciones: " + resultadoTXTRetencionesSIREGanancias.length
			});
			for (let i = 0; i < resultadoTXTRetencionesSIREGanancias.length && procesoEncolado == false; i++) {
			  retencionSIRE_ganancias.retencion = {};
			  retencionSIRE_ganancias.sujeto = {};
			  // Campos inicializados que se deben incluir en el TXT
			  retencionSIRE_ganancias.retencion.formulario = "2003";
			  retencionSIRE_ganancias.retencion.version = "0100";
			  retencionSIRE_ganancias.retencion.cod_trazabilidad = padding_right(" ", " ", 10);
			  retencionSIRE_ganancias.retencion.impuesto = "218";
			  //retencionSIRE.contenidoTXT = retencionSIRE.retencion.formulario + retencionSIRE.retencion.version + retencionSIRE.retencion.cod_trazabilidad;
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var refComprobante = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			  // Verifico si existe referencia de pago a proveedor
			  if (!isEmpty(refComprobante)) {
				var idRetencionNetSuite = resultadoTXTRetencionesSIREGanancias[i].id;
				const tipoComprobante = obtenerCodigoComprobante(refComprobante, "sire", subsidiaria);
				if (!isEmpty(tipoComprobante)) {
				  if (tipoComprobante === "01" || tipoComprobante === "02" || tipoComprobante === "03" || tipoComprobante === "04" || tipoComprobante === "05" || tipoComprobante === "06" || tipoComprobante === "09") {
					let regimen = "";
					// Obtengo los valores de los campos que necesito y lleno el contenido del TXT
					retencionSIRE_ganancias.retencion.tipoComprobante = padding_left(tipoComprobante, "0", 2);
					// Obtengo el tipo de Comprobante netsuite
					const filtroComprobanteNS = [];
					//filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
					filtroComprobanteNS[0] = search.createFilter({
					  name: "internalid",
					  operator: search.Operator.IS,
					  values: refComprobante
					});
					const columnaComprobanteNS = [];
					//columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');
					columnaComprobanteNS[0] = search.createColumn({
					  name: "recordtype"
					});
					//var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);
					const resultadoComprobanteNS = search.create({
					  type: "transaction",
					  filters: filtroComprobanteNS,
					  columns: columnaComprobanteNS
					}).run().getRange({
					  start: 0,
					  end: 1000
					});
					if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {
					  tipoComprobanteNS = resultadoComprobanteNS[0].getValue({ name: "recordtype" });
					  if (!isEmpty(tipoComprobanteNS)) {
						// Obtengo Informacion Adicional del Pago a Proveedor
						//filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
						const filtroPagoProveedor = search.createFilter({
						  name: "internalid",
						  operator: search.Operator.IS,
						  values: refComprobante
						});
						/* var columnaPagoProveedor = [];
						columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
						columnaPagoProveedor[1] = new nlobjSearchColumn('total');
						var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
						//var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);
						// var resultadoPagoProveedor = search.create({
						// 	type: tipoComprobanteNS,
						// 	filters: filtroPagoProveedor,
						// 	id: 'customsearch_l54_imp_pagos_prov_gen_txt'
						// }).run().getRange({
						// 	start: 0,
						// 	end: 1000
						// });
						const SSresultadoPagoProveedor = search.load({
						  id: "customsearch_l54_imp_pagos_prov_gen_txt"
						});
						SSresultadoPagoProveedor.filters.push(filtroPagoProveedor);
						const resultSet = SSresultadoPagoProveedor.run();
						const resultadoPagoProveedor = resultSet.getRange({
						  start: 0,
						  end: 1000
						});
						if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
						  const columnasResultadoPagoProveedor = resultadoPagoProveedor[0].columns;
						  const cuit_subsidiaria = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[4] });
						  retencionSIRE_ganancias.retencion.cuit = padding_left(cuit_subsidiaria.replace(/-/g, ""), "0", 11);
						  if (!isEmpty(retencionSIRE_ganancias.retencion.cuit)) {
							regimen = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: "custrecord_l54_ret_codigo_regimen" });
							if (!isEmpty(regimen)) {
							  retencionSIRE_ganancias.retencion.regimen = padding_left(regimen, "0", 3);
							  retencionSIRE_ganancias.retencion.cuit_ord = padding_left(resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[53] }), "0", 11);
							  // Fecha retención y tratamiento de la data
							  let fechaRetencion = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: "custrecord_l54_ret_fecha" });
							  if (!isEmpty(fechaRetencion)) {
								//var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz'),
								const fechaDate_ret = format.parse({
								  value: fechaRetencion,
								  type: format.Type.DATE
								});
								const diaRetencion = fechaDate_ret.getDate(),
								  mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10),
								  anioRetencion = fechaDate_ret.getFullYear();
								//var fecha_ret = new Date(anioRetencion, mesRetencion - 1, diaRetencion);
								const fecha_sire_menor = new Date(2015, 2, 1); //los meses van desde 0 a 11, empezando por enero con el mes 0
								if (fechaDate_ret > fecha_sire_menor) {
								  fechaRetencion = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
								  retencionSIRE_ganancias.retencion.fecha = fechaRetencion;
								  // Fecha del comprobante y tratamiento de la data
								  let fechaComprobante = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[13] });
								  if (!isEmpty(fechaComprobante)) {
									//var fechaDate_comp = nlapiStringToDate(fechaComprobante, 'datetimetz'),
									const fechaDate_comp = format.parse({
									  value: fechaComprobante,
									  type: format.Type.DATE
									});
									const dia_comp = fechaDate_comp.getDate(),
									  mes_comp = parseInt(fechaDate_comp.getMonth(), 10) + parseInt(1, 10),
									  anio_comp = fechaDate_comp.getFullYear();
									if (fechaDate_comp <= fechaDate_ret) {
									  if (tipoComprobante === "03") {
										retencionSIRE_ganancias.retencion.fechaComprobante = retencionSIRE_ganancias.retencion.fecha;
									  } else {
										fechaComprobante = padding_left(dia_comp, "0", 2) + "/" + padding_left(mes_comp, "0", 2) + "/" + anio_comp;
										retencionSIRE_ganancias.retencion.fechaComprobante = fechaComprobante;
									  }
									  // Nro comprobante
									  const numerador = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[14] });
									  if (!isEmpty(numerador)) {
										const numero_aux = numerador.toString().substr(-8);
										let numero_comprobante = "";
										const puntoVenta = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
										if (tipoComprobante === "01" || tipoComprobante === "02" || tipoComprobante === "03" || tipoComprobante === "04") {
										  numero_comprobante = padding_left(puntoVenta.toString(), "0", 5) + "-" + padding_left(numero_aux.toString(), "0", 8);
										} else {
										  if (tipoComprobante === "05" || tipoComprobante === "09") {
											numero_comprobante = padding_left(puntoVenta.toString(), "0", 5) + padding_left(numero_aux.toString(), "0", 11);
										  } else {
											numero_comprobante = padding_left(puntoVenta.toString(), "0", 5) + padding_left(numero_aux.toString(), "0", 8);
										  }
										}
										retencionSIRE_ganancias.retencion.numeroComprobante = padding_right(numero_comprobante, " ", 16);
										//Importe Comprobante
										// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
										const importeComprobante = resultadoPagoProveedor[0].getValue({ name: columnasResultadoPagoProveedor[7] });
										const noRetencion = "0";
										if (!isEmpty(importeComprobante)) {
										  if (noRetencion === "0" && parseFloat(importeComprobante) > 0) {
											retencionSIRE_ganancias.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
											// Los campos que no son obligatorios los dejé en blanco
											const filler = padding_right(" ", " ", 14),
											  nro_certificado = padding_left("0", "0", 25),
											  fecha_certificado = padding_left(" ", " ", 10),
											  importe_certificado = padding_left("0.00", "0", 14),
											  motivo_EmisionNC = padding_right(" ", " ", 30),
											  motivo_noRetencion = padding_right(" ", " ", 30),
											  aplica_cdi = "0", //PREGUNTAR SI APLICA O NO
											  aplica_acrecentamiento = "0";
											//Codigo alicuota sacado de acuerdo al tipo de regimen
											retencionSIRE_ganancias.retencion.codigo_alicuota = retencionSIRE_ganancias.retencion.regimen === "903" ? "020" : "006";
											//Cuit proveedor país de origen
											const claveNIF = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[44] });
											if (!isEmpty(claveNIF)) {
											  retencionSIRE_ganancias.retencion.NIF = padding_right(claveNIF, " ", 50);
											  const fullname_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[45] });
											  if (!isEmpty(fullname_proveedor)) {
												retencionSIRE_ganancias.retencion.fullName = padding_right(fullname_proveedor, " ", 60);
												const country_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[46] }),
												  state_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[47] }),
												  city_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[48] }),
												  zipcode_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[49] });
												const address_proveedor = country_proveedor + " " + state_proveedor + " " + city_proveedor + " " + zipcode_proveedor;
												if (!isEmpty(address_proveedor)) {
												  retencionSIRE_ganancias.retencion.address_proveedor = address_proveedor.length > 60 ? normalize(address_proveedor.substr(0, 60)) : padding_right(normalize(address_proveedor), " ", 60);
												  const pais_origen_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: columns[52] });
												  if (!isEmpty(pais_origen_proveedor)) {
													//Extraigo el código del país desde la tabla Paises FEX
													const codigo_pais = countryProveedor(pais_origen_proveedor);
													retencionSIRE_ganancias.retencion.pais_proveedor = padding_left(codigo_pais, "0", 3);
													//nlapiLogExecution('DEBUG', 'codigo pais', codigo_pais);
													const id_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue({ name: "custrecord_l54_ret_ref_proveedor" });
													const isperson = isPersonProveedor(id_proveedor);
													//Pregunto si es false o true por el tipo de persona
													if (isperson === "F" || isperson === false) {
													  retencionSIRE_ganancias.retencion.tipo_proveedor = "J"; //persona jurídica
													} else {
													  retencionSIRE_ganancias.retencion.tipo_proveedor = "F"; //persona física
													}
													//nlapiLogExecution('DEBUG', 'tipo proveedor', isperson);
													contenidoTXT += retencionSIRE_ganancias.retencion.formulario + retencionSIRE_ganancias.retencion.version + retencionSIRE_ganancias.retencion.cod_trazabilidad +
													  retencionSIRE_ganancias.retencion.cuit + retencionSIRE_ganancias.retencion.impuesto + retencionSIRE_ganancias.retencion.regimen + retencionSIRE_ganancias.retencion.cuit_ord +
													  retencionSIRE_ganancias.retencion.fecha + retencionSIRE_ganancias.retencion.tipoComprobante + retencionSIRE_ganancias.retencion.fechaComprobante +
													  retencionSIRE_ganancias.retencion.numeroComprobante + retencionSIRE_ganancias.retencion.importeComprobante + filler + nro_certificado + fecha_certificado +
													  importe_certificado + motivo_EmisionNC + noRetencion + motivo_noRetencion + aplica_cdi + retencionSIRE_ganancias.retencion.codigo_alicuota +
													  aplica_acrecentamiento + retencionSIRE_ganancias.retencion.NIF + retencionSIRE_ganancias.retencion.fullName + retencionSIRE_ganancias.retencion.address_proveedor +
													  retencionSIRE_ganancias.retencion.pais_proveedor + retencionSIRE_ganancias.retencion.tipo_proveedor + "\r\n";
													///falta hacer la parte de tipo de persona
													/*nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', contenidoTXT);
													nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', contenidoTXT.length);*/
												  } else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el País de residencia del Proveedor";
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "Error Obteniendo la Dirección del Proveedor";
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Nombre y Apellido del Proveedor";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo la Clave NIF del Proveedor";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "El Importe del Comprobante debe ser mayor que cero (0)";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Importe del Comprobante";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Número del Comprobante";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "La Fecha del Comprobante no puede ser mayor a la Fecha de la Retención";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Fecha del Comprobante";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "La Fecha de la Retención no puede ser menor al 01 de marzo de 2015";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Retención";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Regimen del Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el CUIT del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Información Adicional del pago a proveedor";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo la Información del tipoComprobanteNS";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Información del resultadoComprobanteNS";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "El Tipo de Comprobante no es válido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Tipo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
			  }
			  if (errorGlobal == true) {
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Generando TXT Retenciones SIRE Ganancias Exterior: ' + descripcionError);
				log.error({
				  title: "generarTXTSireGananciasExt",
				  details: "Error Generando TXT Retenciones SIRE Ganancias Exterior: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTRetencionesSIREGanancias) && resultadoTXTRetencionesSIREGanancias.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Obteniendo Retenciones SIRE Ganancias Exterior');
				  log.error({
					title: "generarTXTSireGananciasExt",
					details: "Error Obteniendo Retenciones SIRE Ganancias Exterior"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'No se encontraron resultados para SIRE - Ganancias del Exterior');
			log.debug({
			  title: "generarTXTSireGananciasExt",
			  details: "No se encontraron resultados para SIRE - Ganancias del Exterior"
			});
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Generando TXT SIRE Ganancias Exterior - Error : ' + e.message);
		  log.error({
			title: "generarTXTSireGananciasExt",
			details: "Error Generando TXT SIRE Ganancias Exterior - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIRE Ganancias Exterior - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionSIRE_ganancias = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIRE_ganancias = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Finalizacion - Generacion TXT SIRE Ganancias Exterior');
		log.debug({
		  title: "generarTXTSireGananciasExt",
		  details: "Finalizacion - Generacion TXT SIRE Ganancias Exterior"
		});
		if (!isEmpty(contenidoTXT)) {
		  retencionSIRE_ganancias.contenidoTXT = contenidoTXT;
		}
		return retencionSIRE_ganancias;
	  }
	  //[Lista]
	  function generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Inicio - Generacion TXT SIRE SUSS');
		log.debug({
		  title: "generarTXTSireSUUS",
		  details: "Inicio - Generacion TXT SIRE SUSS"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		const contenidoTXTSujeto = "";
		try {
		  var retencionSIRE_SUSS = {};
		  retencionSIRE_SUSS.existenRetenciones = false;
		  retencionSIRE_SUSS.error = false;
		  retencionSIRE_SUSS.descripcionError = "";
		  retencionSIRE_SUSS.procesoEncolado = false;
		  retencionSIRE_SUSS.idLog = idRegistroLOG;
		  retencionSIRE_SUSS.contenidoTXTSujeto = "";
		  let iCont = 0;
		  const filtroTXTRetencionesSIRE_SUSS = [];
		  var contenidoTXT = "";
		  retencionSIRE_SUSS.contenidoTXT = "";
		  let oneWorld = false;
		  if (esOneworld()) {
			oneWorld = true;
		  }
		  let cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
		  let cuitEmpresaFinal = "";
		  if (!isEmpty(cuitEmpresa)) {
			// Formateo el Documento
			cuitEmpresa = cuitEmpresa.replace(/-/g, "");
			cuitEmpresa = cuitEmpresa.replace(/\./g, "");
			// Elimino Blancos
			cuitEmpresaFinal = cuitEmpresa.replace(/ /g, "&nbsp");
		  }
		  //se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTRetencionesSIRE_SUSS[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesSIRE_SUSS[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTRetencionesSIRE_SUSS[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTRetencionesSIRE_SUSS[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sire_suss');
		  const search_ = search.load({
			id: "customsearch_l54_ret_sire_suss",
			type: "customrecord_l54_retencion" //opc
		  });
		  search_.filters.push(...filtroTXTRetencionesSIRE_SUSS);
		  const searchResults = search_.run();
		  let resultadoTXTRetencionesSIRESuus = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesSIRESuus = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesSIRESuus = resultadoTXTRetencionesSIRESuus.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTRetencionesSIRESuus)) {
			const columns = searchResults.columns;
			//nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIRESuus.length);
			log.debug({
			  title: "generarTXTSireSUUS",
			  details: "Cantidad Retenciones: " + resultadoTXTRetencionesSIRESuus.length
			});
			for (let i = 0; i < resultadoTXTRetencionesSIRESuus.length && procesoEncolado == false; i++) {
			  retencionSIRE_SUSS.retencion = {};
			  retencionSIRE_SUSS.sujeto = {};
			  // Campos inicializados que se deben incluir en el TXT
			  retencionSIRE_SUSS.retencion.formulario = "2004";
			  retencionSIRE_SUSS.retencion.version = "0100";
			  retencionSIRE_SUSS.retencion.cod_trazabilidad = padding_right(" ", " ", 10);
			  retencionSIRE_SUSS.retencion.impuesto = "353";
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var refComprobante = resultadoTXTRetencionesSIRESuus[i].getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			  // Verifico si existe referencia de pago a proveedor
			  if (!isEmpty(refComprobante)) {
				var idRetencionNetSuite = resultadoTXTRetencionesSIRESuus[i].id;
				const tipoComprobante = obtenerCodigoComprobante(refComprobante, "siresuss", subsidiaria);
				if (!isEmpty(tipoComprobante)) {
				  if (tipoComprobante === "01" || tipoComprobante === "02" || tipoComprobante === "03" || tipoComprobante === "05") {
					let regimen = "";
					retencionSIRE_SUSS.retencion.tipoComprobante = padding_left(tipoComprobante, "0", 2);
					// Obtengo el tipo de Comprobante netsuite
					const filtroComprobanteNS = [];
					//filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
					filtroComprobanteNS[0] = search.createFilter({
					  name: "internalid",
					  operator: search.Operator.IS,
					  values: refComprobante
					});
					const columnaComprobanteNS = [];
					//columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');
					columnaComprobanteNS[0] = search.createColumn({
					  name: "recordtype"
					});
					//var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);
					const resultadoComprobanteNS = search.create({
					  type: "transaction",
					  filters: filtroComprobanteNS,
					  columns: columnaComprobanteNS
					}).run().getRange({
					  start: 0,
					  end: 1000
					});
					if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {
					  tipoComprobanteNS = resultadoComprobanteNS[0].getValue({ name: "recordtype" });
					  if (!isEmpty(tipoComprobanteNS)) {
						// Obtengo Informacion Adicional del Pago a Proveedor
						//filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
						const filtroPagoProveedor = search.createFilter({
						  name: "internalid",
						  operator: search.Operator.IS,
						  values: refComprobante
						});
						/* var columnaPagoProveedor = [];
						columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
						columnaPagoProveedor[1] = new nlobjSearchColumn('total');
						var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
						//var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);
						// var resultadoPagoProveedor = search.create({
						// 	type: tipoComprobanteNS,
						// 	filters: filtroPagoProveedor,
						// 	id: 'customsearch_l54_imp_pagos_prov_gen_txt' //opc                       
						// }).run().getRange({
						// 	start: 0,
						// 	end: 1000
						// });
						const SSresultadoPagoProveedor = search.load({
						  id: "customsearch_l54_imp_pagos_prov_gen_txt"
						});
						SSresultadoPagoProveedor.filters.push(filtroPagoProveedor);
						const resultSet = SSresultadoPagoProveedor.run();
						const resultadoPagoProveedor = resultSet.getRange({
						  start: 0,
						  end: 1000
						});
						if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
						  const columnasResultadoPagoProveedor = resultadoPagoProveedor[0].columns;
						  // Obtengo los valores de los campos que necesito y lleno el contenido del TXT
						  if (oneWorld) {
							const cuit_subsidiaria = resultadoTXTRetencionesSIRESuus[i].getValue({ name: columns[4] });
							retencionSIRE_SUSS.retencion.cuit = padding_left(cuit_subsidiaria.replace(/-/g, ""), "0", 11);
						  } else {
							retencionSIRE_SUSS.retencion.cuit = padding_left(cuitEmpresaFinal, "0", 11);
						  }
						  if (!isEmpty(retencionSIRE_SUSS.retencion.cuit)) {
							//retencionSIRE_SUSS.contenidoTXT += retencionSIRE_SUSS.retencion.cuit + retencionSIRE_SUSS.retencion.impuesto;
							regimen = resultadoTXTRetencionesSIRESuus[i].getValue({ name: "custrecord_l54_ret_codigo_regimen" });
							if (!isEmpty(regimen)) {
							  retencionSIRE_SUSS.retencion.regimen = padding_left(regimen, "0", 3);
							  retencionSIRE_SUSS.retencion.cuit_ord = padding_left(resultadoTXTRetencionesSIRESuus[i].getValue({ name: columns[44] }), "0", 11);
							  // Fecha retención y tratamiento de la data
							  let fechaRetencion = resultadoTXTRetencionesSIRESuus[i].getValue({ name: "custrecord_l54_ret_fecha" });
							  if (!isEmpty(fechaRetencion)) {
								//var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz'),
								const fechaDate_ret = format.parse({
								  value: fechaRetencion,
								  type: format.Type.DATE
								});
								const diaRetencion = fechaDate_ret.getDate(),
								  mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10),
								  anioRetencion = fechaDate_ret.getFullYear();
								const fecha_sire_menor = new Date(2015, 2, 1); //los meses van desde 0 a 11, empezando por enero con el mes 0
								if (fechaDate_ret > fecha_sire_menor) {
								  fechaRetencion = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
								  retencionSIRE_SUSS.retencion.fecha = fechaRetencion;
								  // Fecha del comprobante y tratamiento de la data
								  let fechaComprobante = resultadoTXTRetencionesSIRESuus[i].getValue({ name: columns[12] });
								  if (!isEmpty(fechaComprobante)) {
									//var fechaDate_comp = nlapiStringToDate(fechaComprobante, 'datetimetz'),
									const fechaDate_comp = format.parse({
									  value: fechaComprobante,
									  type: format.Type.DATE
									});
									const dia_comp = fechaDate_comp.getDate(),
									  mes_comp = parseInt(fechaDate_comp.getMonth(), 10) + parseInt(1, 10),
									  anio_comp = fechaDate_comp.getFullYear();
									if (fechaDate_comp <= fechaDate_ret) {
									  if (tipoComprobante === "03") {
										retencionSIRE_SUSS.retencion.fechaComprobante = retencionSIRE_SUSS.retencion.fecha;
									  } else {
										fechaComprobante = padding_left(dia_comp, "0", 2) + "/" + padding_left(mes_comp, "0", 2) + "/" + anio_comp;
										retencionSIRE_SUSS.retencion.fechaComprobante = fechaComprobante;
									  }
									  // Nro comprobante
									  const numerador = resultadoTXTRetencionesSIRESuus[i].getValue({ name: columns[13] });
									  if (!isEmpty(numerador)) {
										const numero_aux = numerador.toString().substr(-8);
										let numero_comprobante = "";
										const puntoVenta = resultadoTXTRetencionesSIRESuus[i].getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
										if (tipoComprobante === "01" || tipoComprobante === "02" || tipoComprobante === "03") {
										  numero_comprobante = padding_left(puntoVenta.toString(), "0", 5) + "-" + padding_left(numero_aux.toString(), "0", 8);
										} else {
										  if (tipoComprobante === "05") {
											numero_comprobante = padding_left(puntoVenta.toString(), "0", 5) + padding_left(numero_aux.toString(), "0", 11);
										  }
										}
										retencionSIRE_SUSS.retencion.numeroComprobante = padding_right(numero_comprobante, " ", 16);
										//Importe Comprobante
										// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
										const importeComprobante = resultadoPagoProveedor[0].getValue({ name: columnasResultadoPagoProveedor[7] });
										if (!isEmpty(importeComprobante)) {
										  if (parseFloat(importeComprobante) > 0) {
											retencionSIRE_SUSS.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
											const tipoCambio = resultadoTXTRetencionesSIRESuus[i].getValue({ name: "custrecord_l54_ret_tipo_cambio" });
											// var importeRetencion = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_importe');
											const importeRetencion = resultadoTXTRetencionesSIRESuus[i].getValue({ name: columns[47] });
											if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0) {
											  if (parseFloat(importeRetencion, 10) <= parseFloat(importeComprobante, 10)) {
												retencionSIRE_SUSS.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
												// Los campos que no son obligatorios los dejé en blanco
												const nro_certificado = padding_left(" ", " ", 25),
												  fecha_certificado = padding_left(" ", " ", 10),
												  importe_certificado = padding_left("0.00", "0", 14),
												  otros_datos = padding_right(" ", " ", 30);
												contenidoTXT += retencionSIRE_SUSS.retencion.formulario + retencionSIRE_SUSS.retencion.version + retencionSIRE_SUSS.retencion.cod_trazabilidad +
												  retencionSIRE_SUSS.retencion.cuit + retencionSIRE_SUSS.retencion.impuesto + retencionSIRE_SUSS.retencion.regimen + retencionSIRE_SUSS.retencion.cuit_ord +
												  retencionSIRE_SUSS.retencion.fecha + retencionSIRE_SUSS.retencion.tipoComprobante + retencionSIRE_SUSS.retencion.fechaComprobante +
												  retencionSIRE_SUSS.retencion.numeroComprobante + retencionSIRE_SUSS.retencion.importeComprobante + retencionSIRE_SUSS.retencion.importeRetencion +
												  nro_certificado + fecha_certificado + importe_certificado + otros_datos + "\r\n";
												/*nlapiLogExecution('DEBUG', 'Contenido del TXT', contenidoTXT);
												nlapiLogExecution('DEBUG', 'Longitud del TXT', contenidoTXT.length);*/
											  } else {
												errorGlobal = true;
												descripcionError = "El Importe de la Retención no puede ser mayor al Importe de Comprobante";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo el Importe de la Retención";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "El Importe del Comprobante debe ser mayor que cero (0)";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Importe del Comprobante";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Número del Comprobante";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "La Fecha del Comprobante no puede ser mayor a la Fecha de la Retención";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Fecha del Comprobante";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "La Fecha de la Retención no puede ser menor al 01 de marzo de 2015";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Retención";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Regimen del Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el CUIT del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo los Resultados de Pago Proveedor";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Tipo Comprobante NS o RT";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Resultado del Comprobante NS";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "El Tipo de Comprobante no es válido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Tipo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
			  }
			  if (errorGlobal == true) {
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIRE SUSS: ' + descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones SIRE SUSS: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTRetencionesSIRESuus) && resultadoTXTRetencionesSIRESuus.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIRE SUSS');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Retenciones SIRE SUSS"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'No se encontraron resultados para Retenciones SIRE - SUSS');
			log.debug({
			  title: "generarTXTSireSUUS",
			  details: "No se encontraron resultados para Retenciones SIRE - SUSS"
			});
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSireSUUS', 'Error Generando TXT SIRE SUSS - Error : ' + e.message);
		  log.error({
			title: "generarTXTSireSUUS",
			details: "Error Generando TXT SIRE SUSS - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIRE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionSIRE_SUSS = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIRE_SUSS = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Finalizacion - Generacion TXT SIRE RETENCIONES SUSS');
		log.debug({
		  title: "generarTXTSireSUUS",
		  details: "Finalizacion - Generacion TXT SIRE RETENCIONES SUSS"
		});
		if (!isEmpty(contenidoTXT)) {
		  retencionSIRE_SUSS.contenidoTXT = contenidoTXT;
		}
		return retencionSIRE_SUSS;
	  }
	  //[Lista]
	  function generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion) {
		//nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Inicio - Generacion TXT SIRCAR - RETENCION');
		log.debug({
		  title: "generarTXTSircarRetencion",
		  details: "Inicio - Generacion TXT SIRCAR - RETENCION"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		const contenidoTXTSujeto = "";
		try {
		  var retencionSIRCAR = {};
		  retencionSIRCAR.existenRetenciones = false;
		  retencionSIRCAR.error = false;
		  retencionSIRCAR.descripcionError = "";
		  retencionSIRCAR.procesoEncolado = false;
		  retencionSIRCAR.idLog = idRegistroLOG;
		  retencionSIRCAR.contenidoTXTSujeto = "";
		  let iCont = 0;
		  const filtroTXTRetencionesSIRCAR = [];
		  var contenidoTXT = "";
		  retencionSIRCAR.contenidoTXT = "";
		  var idRetencionNetSuite = "";
		  var refComprobante = "";
		  //se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesSIRCAR[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria)) {
			//filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTRetencionesSIRCAR[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		  if (!isEmpty(jurisdiccion)) {
			//filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_jurisdiccion', null, 'anyof', jurisdiccion);
			filtroTXTRetencionesSIRCAR[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_jurisdiccion",
			  operator: search.Operator.ANYOF,
			  values: jurisdiccion
			});
		  }
		  //Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sircar_santafe');
		  const search_ = search.load({
			id: "customsearch_l54_ret_sircar_santafe",
			type: "customrecord_l54_retencion" //opc
		  });
		  search_.filters.push(...filtroTXTRetencionesSIRCAR);
		  const searchResults = search_.run(); //Devuelve search.ResultSet
		  let resultadoTXTRetencionesSIRCAR = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesSIRCAR = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesSIRCAR = resultadoTXTRetencionesSIRCAR.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTRetencionesSIRCAR)) {
			//var columns = searchResults.getColumns();
			const columns = searchResults.columns;
			let formatoTXTSircar = "";
          /* Funcion para generar un nro random unico para el nro de renglon: 
          Math.round(Math.random() * (maximo - minimo) + minimo); en este caso va desde 1 incluido a 100.000 sin incluirlo*/
          //const aux_num_renglon = Math.round((Math.random() * (100000 - 1)) + 1);
          //const num_renglon = aux_num_renglon.toString();
			//nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIRCAR.length);
			log.debug({
			  title: "generarTXTSircarRetencion",
			  details: "Cantidad Retenciones: " + resultadoTXTRetencionesSIRCAR.length
			});
			if (resultadoTXTRetencionesSIRCAR.length > 0) {
			  formatoTXTSircar = resultadoTXTRetencionesSIRCAR[0].getValue({ name: columns[44] });
			}
			if ((!isEmpty(formatoTXTSircar) && formatoTXTSircar > 0) || (resultadoTXTRetencionesSIRCAR.length == 0 && (isEmpty(formatoTXTSircar) || formatoTXTSircar == ""))) {
			  for (let i = 0; i < resultadoTXTRetencionesSIRCAR.length && procesoEncolado == false; i++) {
              let a = i + 1;
              let num_renglon = padding_left(a.toString(), "0", 5);
				retencionSIRCAR.retencion = {};
				retencionSIRCAR.sujeto = {};
				// Campos inicializados que se deben incluir en el TXT
                retencionSIRCAR.retencion.nro_renglon = num_renglon;
				retencionSIRCAR.retencion.origen_comprobante = "1"; // Significa que el comprobante es Generado por Software propio del Agente
				retencionSIRCAR.retencion.tipo_comprobante = "1"; // Significa que es Comprobante de Retención
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				refComprobante = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
				// Verifico si existe referencia de pago a proveedor
				if (!isEmpty(refComprobante)) {
				  //idRetencionNetSuite = resultadoTXTRetencionesSIRCAR[i].getId();
				  idRetencionNetSuite = resultadoTXTRetencionesSIRCAR[i].id;
				  // 4.- Obtengo el Nro Comprobante
				  const numerador = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
				  if (!isEmpty(numerador)) {
					const numero_aux = numerador.toString().substr(-8);
					let numero_comprobante = "";
					const puntoVenta = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
					numero_comprobante = padding_left(puntoVenta.toString(), "0", 4) + padding_left(numero_aux.toString(), "0", 8);
					retencionSIRCAR.retencion.numeroComprobante = padding_right(numero_comprobante, " ", 12);
					// 5.- Obtengo el cuit del contribuyente
					const cuit_contribuyente = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[4] });
					retencionSIRCAR.retencion.cuit = padding_left(cuit_contribuyente.replace(/-/g, ""), "0", 11);
					if (!isEmpty(retencionSIRCAR.retencion.cuit)) {
					  // 6.- Obtengo la fecha de la retención
					  let fechaRetencion = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_fecha" });
					  if (!isEmpty(fechaRetencion)) {
						const fechaDate_ret = format.parse({ value: fechaRetencion, type: format.Type.DATE });
						const diaRetencion = fechaDate_ret.getDate();
						const mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10);
						const anioRetencion = fechaDate_ret.getFullYear();
						fechaRetencion = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
						retencionSIRCAR.retencion.fecha = fechaRetencion;
						// 7.- Monto Sujeto a Retención o base cálculo.
						//var monto_suj_retencion = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_base_calculo');
						const monto_suj_retencion = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[43] });
						if (!isEmpty(monto_suj_retencion)) {
						  //retencionSIRCAR.retencion.monto_suj_retencion = padding_left(monto_suj_retencion.toString().replace(/,/g, ''), '0', 12);
						  retencionSIRCAR.retencion.monto_suj_retencion = padding_left(parseFloat(parseFloat(monto_suj_retencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 12);
						  // 9.- Importe de la Retención, Monto Retenido.
						  const importeRetencion = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_importe" });
						  const tipoCambio = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_tipo_cambio" });
						  if (!isEmpty(importeRetencion)) {
							//retencionSIRCAR.retencion.monto_retenido = padding_left(importeRetencion.toString().replace(/,/g, ''), '0', 12);
							retencionSIRCAR.retencion.monto_retenido = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 12);
							// 8.- Alicuota de la Retención.
							const alicuota = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[36] });
							if (!isEmpty(alicuota)) {
							  retencionSIRCAR.retencion.alicuota = padding_left(alicuota.toString().replace(/,/g, ""), "0", 6);
							  // 10.- Código de Régimen correspondiente
							  const cod_regimen = resultadoTXTRetencionesSIRCAR[i].getValue({ name: "custrecord_l54_ret_codigo_regimen" });
							  if (!isEmpty(cod_regimen)) {
								retencionSIRCAR.retencion.cod_regimen = padding_left(cod_regimen, "0", 3);
								// 11.- Código de Jurisdicción (código en Convenio Multilateral de la jurisdicción a la cual está presentando la DDJJ)
								const cod_jurisdiccion = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[6] });
								if (!isEmpty(cod_jurisdiccion)) {
								  retencionSIRCAR.retencion.cod_jurisdiccion = padding_left(cod_jurisdiccion, "0", 3);
								  // NUEVO - Formato TXT Sircar 2021
								  if (formatoTXTSircar == 2) {
									retencionSIRCAR.retencion.tipoOperacionRetencion = 1; // Retención Efectuada
									const fechaConstancia = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[45] });
									if (!isEmpty(fechaConstancia)) {
									  retencionSIRCAR.retencion.fechaConstancia = padding_left(fechaConstancia, " ", 10);
									  let numeroConstanciaRetencion = resultadoTXTRetencionesSIRCAR[i].getValue({ name: columns[5] });
									  if (!isEmpty(numeroConstanciaRetencion)) {
										const expRegNumeros = /[^0-9]/gi;
										numeroConstanciaRetencion = numeroConstanciaRetencion.toString().replace(expRegNumeros, "");
										numeroConstanciaRetencion = numeroConstanciaRetencion.toString().substr(-14);
										retencionSIRCAR.retencion.numeroConstanciaRetencion = padding_left(numeroConstanciaRetencion, "0", 14);
										retencionSIRCAR.retencion.nroConstanciaOriginal = padding_left("0", "0", 14); // Número de Constancia Original - sólo aplica a retención de anulaciones - Como no existe, se deja en 0
										contenidoTXT += retencionSIRCAR.retencion.nro_renglon + "," + retencionSIRCAR.retencion.origen_comprobante + "," + retencionSIRCAR.retencion.tipo_comprobante + "," +
										  retencionSIRCAR.retencion.numeroComprobante + "," + retencionSIRCAR.retencion.cuit + "," + retencionSIRCAR.retencion.fecha + "," +
										  retencionSIRCAR.retencion.monto_suj_retencion + "," + retencionSIRCAR.retencion.alicuota + "," + retencionSIRCAR.retencion.monto_retenido + "," +
										  retencionSIRCAR.retencion.cod_regimen + "," + retencionSIRCAR.retencion.cod_jurisdiccion + "," + retencionSIRCAR.retencion.tipoOperacionRetencion + "," +
										  retencionSIRCAR.retencion.fechaConstancia + "," + retencionSIRCAR.retencion.numeroConstanciaRetencion + "," + retencionSIRCAR.retencion.nroConstanciaOriginal + "\r\n";
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Número de Emisión de la Constancia";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo la Fecha de Emisión de la Constancia";
									}
								  } else {
									contenidoTXT += retencionSIRCAR.retencion.nro_renglon + "," + retencionSIRCAR.retencion.origen_comprobante + "," + retencionSIRCAR.retencion.tipo_comprobante + "," +
									  retencionSIRCAR.retencion.numeroComprobante + "," + retencionSIRCAR.retencion.cuit + "," + retencionSIRCAR.retencion.fecha + "," +
									  retencionSIRCAR.retencion.monto_suj_retencion + "," + retencionSIRCAR.retencion.alicuota + "," + retencionSIRCAR.retencion.monto_retenido + "," +
									  retencionSIRCAR.retencion.cod_regimen + "," + retencionSIRCAR.retencion.cod_jurisdiccion + "\r\n";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el Código de la Jurisdicción";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Código de Regimen del Comprobante";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Alicuota";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Importe de Retención";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Monto Sujeto a Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo la Fecha de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el CUIT del Contribuyente";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Número del Comprobante";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}
				if (errorGlobal == true) {
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIRCAR: ' + descripcionError);
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Generando TXT Retenciones SIRCAR: " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			} else {
			  errorGeneral = true;
			  descripcionError = "Error Obteniendo el Formato del TXT SIRCAR para la jurisdicción seleccionada. Debe configurar el formato del TXT SIRCAR a utilizar de dicha jurisdicción, en el RT \"Zona de Impuestos\".";
			  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
			  log.error({
				title: "Proceso Generacion TXT",
				details: descripcionError
			  });
			  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTRetencionesSIRCAR) && resultadoTXTRetencionesSIRCAR.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSircarRetencion', 'Error Obteniendo Retenciones SIRCAR');
				  log.error({
					title: "generarTXTSircarRetencion",
					details: "Error Obteniendo Retenciones SIRCAR"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'No se encontraron resultados para SIRCAR - RETENCIONES');
			log.debug({
			  title: "generarTXTSircarRetencion",
			  details: "No se encontraron resultados para SIRCAR - RETENCIONES"
			});
		  }
		} catch (e) {
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIRCAR; Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionSIRCAR = grabarError(true, "Error Generando TXT de Retenciones SIRCAR", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIRCAR = grabarError(false, "Generacion de TXT de Retenciones SIRCAR Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones SIRCAR Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Finalizacion - Generacion TXT DE RETENCIONES SIRCAR');
		log.debug({
		  title: "generarTXTSircarRetencion",
		  details: "Finalizacion - Generacion TXT DE RETENCIONES SIRCAR"
		});
		if (!isEmpty(contenidoTXT)) {
		  retencionSIRCAR.contenidoTXT = contenidoTXT.replace(/ /gi, "");
		}
		return retencionSIRCAR;
	  }
	  //[Lista]
	  function generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion) {
		//nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'Inicio - Generacion TXT SIRCAR Percepciones');
		log.debug({
		  title: "generarTXTSircarPercepcion",
		  details: "Inicio - Generacion TXT SIRCAR Percepciones"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones SIRCAR";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		const marcaGenerarTXT = true;
		const errorParcial = false;
		let contenidoTXT = "";
		const idRetencionNetSuite = "";
		try {
		  var percepcionSIRCAR = {};
		  percepcionSIRCAR.retencion = {};
		  percepcionSIRCAR.sujeto = {};
		  percepcionSIRCAR.existenRetenciones = false;
		  percepcionSIRCAR.error = false;
		  percepcionSIRCAR.descripcionError = "";
		  percepcionSIRCAR.procesoEncolado = false;
		  percepcionSIRCAR.idLog = idRegistroLOG;
		  percepcionSIRCAR.contenidoTXT = "";
		  let formatoTXTSircar = "";
		  var refComprobante = "";
		  const filtro = [];
		  let i = 0;
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria)) {
			//filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'jurisdiccion: ' + jurisdiccion);
		  log.debug({
			title: "generarTXTSircarPercepcion",
			details: "jurisdiccion: " + jurisdiccion
		  });
		  if (!isEmpty(jurisdiccion)) {
			//filtro[i++] = new nlobjSearchFilter('custcol_l54_jurisd_iibb_lineas', null, 'anyof', jurisdiccion);
			filtro[i++] = search.createFilter({
			  name: "custcol_l54_jurisd_iibb_lineas",
			  operator: search.Operator.ANYOF,
			  values: jurisdiccion
			});
		  }
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_sircar_santafe');
		  const search_ = search.load({
			id: "customsearch_l54_per_sircar_santafe",
			type: "transaction" //opc
		  });
		  search_.filters.push(...filtro);
		  const searchResults = search_.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			/* Funcion para generar un nro random unico para el nro de renglon: 
			Math.round(Math.random() * (maximo - minimo) + minimo); en este caso va desde 1 incluido a 100.000 sin incluirlo*/
			//const aux_num_renglon = Math.round((Math.random() * (100000 - 1)) + 1);
			//const num_renglon = aux_num_renglon.toString();//alex
			//nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'Cantidad Percepciones:' + completeResultSet.length);
			log.debug({
			  title: "generarTXTSircarPercepcion",
			  details: "Cantidad Percepciones: " + completeResultSet.length
			});
			const columns = searchResults.columns;
			if (completeResultSet.length > 0) {
			  formatoTXTSircar = completeResultSet[0].getValue({ name: columns[15] });
			}
			if ((!isEmpty(formatoTXTSircar) && formatoTXTSircar > 0) || (completeResultSet.length == 0 && (isEmpty(formatoTXTSircar) || formatoTXTSircar == ""))) {
            let regimenes = getRegimenPercepcion(subsidiaria, jurisdiccion)
			  for (i = 0; i < completeResultSet.length; i++) {
              let a = i + 1;
              let num_renglon = padding_left(a.toString(), "0", 5);
				percepcionSIRCAR.percepcion = {};
				percepcionSIRCAR.sujeto = {};
				const resultadoTXTPercepcionesSIRCAR = completeResultSet[i];
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
				refComprobante = resultadoTXTPercepcionesSIRCAR.getValue({ name: "internalid" });
				if (!isEmpty(refComprobante)) {
				  let nroDocumento = resultadoTXTPercepcionesSIRCAR.getValue({ name: "custbody_54_cuit_entity" });
				  if (!isEmpty(nroDocumento)) {
					// Formateo el Documento
					nroDocumento = nroDocumento.replace(/-/g, "");
					nroDocumento = nroDocumento.replace(/\./g, "");
					// Elimino Blancos
					nroDocumento = nroDocumento.replace(/ /g, "&nbsp");
					if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
					  // Formateo el Cuit
					  percepcionSIRCAR.percepcion.cuit = padding_left(nroDocumento, "0", 11);
					  // Obtengo la Fecha de Retencion
					  const fechaPercepcion = resultadoTXTPercepcionesSIRCAR.getValue({ name: "trandate" });
					  if (!isEmpty(fechaPercepcion)) {
						// Formateo la Fecha
						//var fechaPercepcionDate = nlapiStringToDate(fechaPercepcion, 'datetimetz');
						var fechaPercepcionDate = format.parse({
						  value: fechaPercepcion,
						  type: format.Type.DATE
						});
						if (!isEmpty(fechaPercepcionDate)) {
						  // Obtengo las Componentes de la Fecha
						  const diaPercepcion = fechaPercepcionDate.getDate();
						  const mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
						  const anioPercepcion = fechaPercepcionDate.getFullYear();
						  const fechaPercepcionFinal = padding_left(diaPercepcion, "0", 2) + "/" + padding_left(mesPercepcion, "0", 2) + "/" + anioPercepcion;
						  percepcionSIRCAR.percepcion.fechaPercepcion = fechaPercepcionFinal;
						  // Obtengo el Tipo de Comprobante
						  const codigoComprobante = obtenerCodigoComprobante(refComprobante, "sircar", subsidiaria);
						  if (!isEmpty(codigoComprobante)) {
							percepcionSIRCAR.percepcion.codigoComprobante = padding_left(codigoComprobante, "0", 3);
							// Obtengo el Numero de Emision (Numerador)
							const nro_comprobante = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[4] });
							// Obtengo el Numero de Sucursal (Punto de Venta)
							const puntoVenta = resultadoTXTPercepcionesSIRCAR.getValue({ name: "custbody_l54_boca" });
							if (!isEmpty(puntoVenta)) {
							  percepcionSIRCAR.percepcion.numeroComprobante = nro_comprobante;
							  // Obtengo la Letra del Comprobante
							  const letraStr = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[2] });
							  percepcionSIRCAR.percepcion.letra = letraStr;
							  // Obtengo el tipo de Cambio
							  const tipoCambio = resultadoTXTPercepcionesSIRCAR.getValue({ name: "exchangerate" });
							  if (!isEmpty(tipoCambio)) {
								// Obtengo el Importe de la Percepcion
								const importePercepcion = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[7] });
								// Genero el Absoluto
								const abs_importePercepcion = Math.abs(importePercepcion);
								//if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != '102' && (parseFloat(importePercepcion, 10) > 0.00)) || (codigoComprobante == '102' && (parseFloat(importePercepcion, 10) < 0.00)))) {
								if (!isEmpty(abs_importePercepcion) && abs_importePercepcion >= 0) {
								  // Si es Nota de Credito, Va en Negativo
								  const longitudImporte = 11;
								  let caracterRelleno = "";
								  if (codigoComprobante == "102") {
									//longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
									caracterRelleno = "-";
								  }
                                
								if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[6] }) == "CustCred"){
                                  percepcionSIRCAR.percepcion.importePercepcion = "-" + padding_left(parseFloat(importePercepcion, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
                                }else{
								  percepcionSIRCAR.percepcion.importePercepcion = importePercepcion;
                                }
								  // Obtengo el Monto Imponible de Percepcion
								  const montoImponible = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[14] });
								  // Genero el Absoluto
								  const abs_montoImponible = Math.abs(montoImponible);
								  //if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != '102' && (parseFloat(montoImponible, 10) > 0.00)) || (codigoComprobante == '102' && (parseFloat(montoImponible, 10) >= 0.00)))) {
								  if (!isEmpty(abs_montoImponible) && abs_montoImponible >= 0) {
									// Si es Nota de Credito, Va en Negativo
									const longitudMontoImponible = 12;
									let caracterRellenoMontoImp = "";
									if (codigoComprobante == "102") {
									  //longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
									  caracterRellenoMontoImp = "-";
									}
									//percepcionSIRCAR.percepcion.montoImponible = caracterRelleno + padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
									//percepcionSIRCAR.percepcion.montoImponible = montoImponible;
                                  if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[6] }) == "CustCred"){
                                    percepcionSIRCAR.percepcion.montoImponible = "-" + padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 11);
                                  }else{
                                    percepcionSIRCAR.percepcion.montoImponible = padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 12);
                                  }
									const cod_jurisdiccion = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[10] });
									if (!isEmpty(cod_jurisdiccion)) {
									  percepcionSIRCAR.percepcion.cod_jurisdiccion = padding_left(cod_jurisdiccion, "0", 3);
									  const alicuota = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[9] });
									  percepcionSIRCAR.percepcion.alicuota = padding_left(alicuota, "0", 6);

                                    var regimenesResult = regimenes.filter(function (obj) {
                                      return (obj.col0 == Number(percepcionSIRCAR.percepcion.alicuota))
                                    })
                                    log.debug("regimenesResult", JSON.stringify(regimenesResult))
                                    if(regimenesResult.length > 0){
                                      var cod_regimen = regimenesResult[0].col1;
                                    }else{
                                      var cod_regimen = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[12] });
                                    }
									  percepcionSIRCAR.percepcion.cod_regimen = padding_left(cod_regimen, "0", 3);
									  if (formatoTXTSircar == 2) {
										// NUEVO 2020 - Formato #2 del TXT SIRCAR
										percepcionSIRCAR.percepcion.tipoOperacionPercepcion = "1"; // Operacion Efectuada
										try {
										  if (codigoComprobante == "102") {
											const recordTypeTransaction = resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[16] });
											//nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'recordTypeTransaction: ' + recordTypeTransaction + ' - refComprobante: ' + refComprobante);
											log.debug({
											  title: "percepcionesSIRCAR",
											  details: "recordTypeTransaction: " + recordTypeTransaction + " - refComprobante: " + refComprobante
											});
											//var recordTransaction = nlapiLoadRecord(recordTypeTransaction, refComprobante);
											const recordTransaction = record.load({
											  type: recordTypeTransaction,
											  id: refComprobante,
											  isDynamic: true
											});
											//var transaccion_referencia = recordTransaction.getFieldValue('createdfrom');
											let transaccion_referencia = recordTransaction.getValue({
											  fieldId: "createdfrom"
											});
											//nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Se cargó el registro de la NC.');
											log.debug({
											  title: "percepcionesSIRCAR",
											  details: "Se cargó el registro de la NC."
											});
											if (isEmpty(transaccion_referencia)) {
											  //transaccion_referencia = recordTransaction.getFieldValue('custbody_l54_transaccion_referencia');
											  transaccion_referencia = recordTransaction.getValue({
												fieldId: "custbody_l54_transaccion_referencia"
											  });
											}
											// Se verifican los datos de la transacción de referencia
											if (!isEmpty(transaccion_referencia)) {
											  let errorCargarTransaccion = false;
											  try {
												//var resultadoTransRef = nlapiLoadRecord('invoice', transaccion_referencia);
												var resultadoTransRef = record.load({
												  type: record.Type.INVOICE,
												  id: transaccion_referencia,
												  isDynamic: true
												});
												//nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Es invoice');
												log.debug({
												  title: "percepcionesSIRCAR",
												  details: "Es invoice"
												});
											  } catch (errorInvoice) {
												errorCargarTransaccion = true;
												log.error({
												  title: "percepcionesSIRCAR",
												  details: "Error al intentar cargar transacción - errorInvoice:" + errorInvoice.message
												});
											  }
											  if (errorCargarTransaccion) {
												try {
												  //var resultadoTransRef = nlapiLoadRecord('returnauthorization', transaccion_referencia);
												  resultadoTransRef = record.load({
													type: record.Type.RETURN_AUTHORIZATION,
													id: transaccion_referencia
												  });
												  //nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Es Autorización');
												  log.debug({
													title: "percepcionesSIRCAR",
													details: "Es Autorización"
												  });
												} catch (errorAutorizacion) {
												  //nlapiLogExecution('ERROR', 'percepcionesSIRCAR', 'Error al intentar cargar transacción - errorAutorizacion:' + errorAutorizacion.message);
												  log.error({
													title: "percepcionesSIRCAR",
													details: "Error al intentar cargar transacción - errorAutorizacion: " + errorAutorizacion.message
												  });
												}
											  }
											  if (!isEmpty(resultadoTransRef)) {
												//var recordTypeTransRef = resultadoTransRef.getFieldValue('recordtype');
												const recordTypeTransRef = resultadoTransRef.getValue({
												  fieldId: "recordtype"
												});
												log.debug({
												  title: "percepcionesSIRCAR",
												  details: "recordTypeTransRef: " + recordTypeTransRef
												});
												if (recordTypeTransRef == "returnauthorization") {
												  //var idCreatedFromAutorizacion = resultadoTransRef.getFieldValue('createdfrom');
												  const idCreatedFromAutorizacion = resultadoTransRef.getValue({
													fieldId: "createdfrom"
												  });
												  //var referenciaOfTransRef = nlapiLoadRecord('invoice', idCreatedFromAutorizacion);
												  const referenciaOfTransRef = record.load({
													type: record.Type.INVOICE,
													id: idCreatedFromAutorizacion
												  });
												  if (!isEmpty(referenciaOfTransRef)) {
													var nroConstanciaFinalSircar = numeroConstanciaFinalSIRCAR(referenciaOfTransRef);
													if (!isEmpty(nroConstanciaFinalSircar) && !nroConstanciaFinalSircar.error) {
													  percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left(nroConstanciaFinalSircar.numeroConstancia, "0", 14);
													} else {
													  errorGlobal = true;
													  descripcionError = nroConstanciaFinalSircar.mensaje + refComprobante;
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + ". No se encontró en NetSuite la transacción de referencia de la NC asociada a una autorización de devolución.";
												  }
												} else {
												  nroConstanciaFinalSircar = numeroConstanciaFinalSIRCAR(resultadoTransRef);
												  if (!isEmpty(nroConstanciaFinalSircar) && !nroConstanciaFinalSircar.error) {
													percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left(nroConstanciaFinalSircar.numeroConstancia, "0", 14);
												  } else {
													errorGlobal = true;
													descripcionError = nroConstanciaFinalSircar.mensaje + refComprobante;
												  }
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + ". No se encontró en NetSuite la transacción de referencia de la NC.";
											  }
											} else {
											  const nroTipoDocumentoReferencia = "1";
											  // Se verifican los campos de cabecera de la nota de crédito que hacen referencia a la transacción de referencia
											  //var letraDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_letra_doc_ref');
											  const letraDocumentoReferencia = recordTransaction.getValue({
												fieldId: "custbody_l54_letra_doc_ref"
											  });
											  //var puntoVentaDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_pv_doc_ref');
											  const puntoVentaDocumentoReferencia = recordTransaction.getValue({
												fieldId: "custbody_l54_pv_doc_ref"
											  });
											  //var numeroDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_nro_doc_ref');
											  const numeroDocumentoReferencia = recordTransaction.getValue({
												fieldId: "custbody_l54_nro_doc_ref"
											  });
											  if (!isEmpty(letraDocumentoReferencia) && !isEmpty(puntoVentaDocumentoReferencia) && !isEmpty(numeroDocumentoReferencia)) {
												//var letraDocumentoReferenciaFinal = nlapiLookupField('customrecord_l54_letra_doc', letraDocumentoReferencia, 'name');
												let letraDocumentoReferenciaFinal = utilidades.getLookupFieldsSafe(search.lookupFields({
												  type: "customrecord_l54_letra_doc",
												  id: letraDocumentoReferencia,
												  columns: "name"
												}), "name");
												letraDocumentoReferenciaFinal = letraDocumentoReferenciaFinal.toString().substring(0, 1);
												//var puntoVentaDocumentoReferenciaFinal = nlapiLookupField('customrecord_l54_bocas', puntoVentaDocumentoReferencia, 'name');
												let puntoVentaDocumentoReferenciaFinal = utilidades.getLookupFieldsSafe(search.lookupFields({
												  type: "customrecord_l54_bocas",
												  id: puntoVentaDocumentoReferencia,
												  columns: "name"
												}), "name");
   
												puntoVentaDocumentoReferenciaFinal = puntoVentaDocumentoReferenciaFinal.toString().substr(-4);
												puntoVentaDocumentoReferenciaFinal = padding_left(puntoVentaDocumentoReferenciaFinal, "0", 4);
												const numeroDocumentoReferenciaFinal = padding_left(numeroDocumentoReferencia, "0", 8);
												percepcionSIRCAR.percepcion.nroConstanciaOriginal = nroTipoDocumentoReferencia + letraDocumentoReferenciaFinal + puntoVentaDocumentoReferenciaFinal + numeroDocumentoReferenciaFinal;
											  } else {
												errorGlobal = true;
												descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + ". No se encontró en NetSuite la transacción de referencia de la NC por los campos de cabecera.";
											  }
											}
										  } else {
											percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left("0", "0", 14);
										  }
										} catch (errorConsultaTransaccionReferencia) {
										  errorGlobal = true;
										  descripcionError = "EXCEPCION - Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + " - Detalles del Error: " + errorConsultaTransaccionReferencia.message;
										}
									  }
									} else {
									  //nlapiLogExecution('DEBUG', 'ERROR COD. JURISDICCION', 'COD. JURISDICCION: ' + cod_jurisdiccion);
									  log.debug({
										title: "ERROR COD. JURISDICCION",
										details: "COD. JURISDICCION: " + cod_jurisdiccion
									  });
									  errorGlobal = true;
									  descripcionError = "El Codigo de Jurisdicción es Inválido";
									}
								  } else {
									//nlapiLogExecution('DEBUG', 'ERROR MONTO IMPONIBLE', 'MONTO IMPONIBLE: ' + montoImponible);
									log.debug({
									  title: "ERROR MONTO IMPONIBLE",
									  details: "MONTO IMPONIBLE: " + montoImponible
									});
									errorGlobal = true;
									descripcionError = "El Monto Imponible es Invalido";
								  }
								} else {
								  log.debug({
									title: "ERROR importe percepcion",
									details: "Importe Perc: " + importePercepcion
								  });
								  errorGlobal = true;
								  descripcionError = "El Importe de Percepcion es Invalido";
								}
							  } else {
								//nlapiLogExecution('DEBUG', 'ERROR tipo cambio', 'Tipo cambio: ' + tipoCambio);
								log.debug({
								  title: "ERROR tipo cambio",
								  details: "Tipo cambio: " + tipoCambio
								});
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Cambio";
							  }
							} else {
							  //nlapiLogExecution('DEBUG', 'ERROR Punto de venta', 'Punto de Venta: ' + puntoVenta);
							  log.debug({
								title: "ERROR Punto de venta",
								details: "Punto de Venta: " + puntoVenta
							  });
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
							}
						  } else {
							//nlapiLogExecution('DEBUG', 'ERROR tipo Comprobante', 'Tipo Comprobante: ' + codigoComprobante);
							log.debug({
							  title: "ERROR tipo Comprobante",
							  details: "Tipo Comprobante: " + codigoComprobante
							});
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Codigo de Comprobante";
						  }
						} else {
						  //nlapiLogExecution('DEBUG', 'ERROR fecha', 'formateando fecha: ' + fechaPercepcionDate);
						  log.debug({
							title: "ERROR fecha",
							details: "formateando fecha: " + fechaPercepcionDate
						  });
						  errorGlobal = true;
						  descripcionError = "Error Formateando la Fecha de Percepcion";
						}
					  } else {
						//nlapiLogExecution('DEBUG', 'ERROR fecha', 'obteniendo fecha: ' + fechaPercepcionDate);
						log.debug({
						  title: "ERROR fecha",
						  details: "obteniendo fecha: " + fechaPercepcionDate
						});
						errorGlobal = true;
						descripcionError = "Error Obteniendo Fecha De Percepcion";
					  }
					} else {
					  //nlapiLogExecution('DEBUG', 'ERROR CUIT', 'CUIT INVALIDO: ' + nroDocumento);
					  log.debug({
						title: "ERROR CUIT",
						details: "CUIT INVALIDO: " + nroDocumento
					  });
					  errorGlobal = true;
					  descripcionError = "Numero de Documento del Cliente Invalido";
					}
				  } else {
					//nlapiLogExecution('DEBUG', 'ERROR CUIT', 'CUIT INVALIDO: ' + nroDocumento);
					log.debug({
					  title: "ERROR CUIT",
					  details: "CUIT INVALIDO: " + nroDocumento
					});
					errorGlobal = true;
					descripcionError = "Error Obteniendo Numero de Documento del Cliente";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}
				// Genero el Contenido
				if (errorGlobal == false) {
				  if (percepcionSIRCAR.percepcion != null) {
					const error = false;
					const descripcionMensaje = "TXT Percepciones Generado Correctamente";
					if (formatoTXTSircar == 1) {
                    contenidoTXT += num_renglon + "," + percepcionSIRCAR.percepcion.codigoComprobante + "," + percepcionSIRCAR.percepcion.letra + "," + percepcionSIRCAR.percepcion.numeroComprobante + "," +
						percepcionSIRCAR.percepcion.cuit + "," + percepcionSIRCAR.percepcion.fechaPercepcion + "," + percepcionSIRCAR.percepcion.montoImponible + "," + percepcionSIRCAR.percepcion.alicuota + "," +
                      percepcionSIRCAR.percepcion.importePercepcion + "," + percepcionSIRCAR.percepcion.cod_regimen + "," + percepcionSIRCAR.percepcion.cod_jurisdiccion + "\r\n";
					} else {
					  if (formatoTXTSircar == 2) {
                      if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[10] }) == "914") {
                        percepcionSIRCAR.percepcion.nroConstanciaOriginal = "0";
						}
                      contenidoTXT += num_renglon + "," + percepcionSIRCAR.percepcion.codigoComprobante + "," + percepcionSIRCAR.percepcion.letra + "," + percepcionSIRCAR.percepcion.numeroComprobante + "," +
						  percepcionSIRCAR.percepcion.cuit + "," + percepcionSIRCAR.percepcion.fechaPercepcion + "," + percepcionSIRCAR.percepcion.montoImponible + "," + percepcionSIRCAR.percepcion.alicuota + "," +
						  percepcionSIRCAR.percepcion.importePercepcion + "," + percepcionSIRCAR.percepcion.cod_regimen + "," + percepcionSIRCAR.percepcion.cod_jurisdiccion + "," +
                        percepcionSIRCAR.percepcion.tipoOperacionPercepcion + "," + percepcionSIRCAR.percepcion.nroConstanciaOriginal + "\r\n";
					  }
					}
					//nlapiLogExecution('DEBUG', 'Contenido del TXT de PERCEPCION - SIRCAR', 'Contenido: ' + contenidoTXT);
					log.debug({
					  title: "Contenido del TXT de PERCEPCION - SIRCAR",
					  details: "Contenido: " + contenidoTXT
					});
					//nlapiLogExecution('DEBUG', 'Longitud del TXT de PERCEPCION - SIRCAR', 'Longitud del txt: ' + contenidoTXT.length);
					log.debug({
					  title: "Longitud del TXT de PERCEPCION - SIRCAR",
					  details: "Longitud del txt: " + contenidoTXT.length
					});
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Percepciones
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIRCAR');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Generando TXT Percepciones SIRCAR"
				  });
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			} else {
			  errorGeneral = true;
			  descripcionError = "Error Obteniendo el Formato del TXT SIRCAR para la jurisdicción seleccionada. Debe configurar el formato del TXT SIRCAR a utilizar de dicha jurisdicción, en el RT \"Zona de Impuestos\".";
			  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
			  log.error({
				title: "Proceso Generacion TXT",
				details: descripcionError
			  });
			  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", idPercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones SIRCAR');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Percepciones SIRCAR"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones", idPercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'No se encontraron resultados para SIRCAR - PERCEPCIONES');
			log.debug({
			  title: "generarTXTSircarPercepcion",
			  details: "No se encontraron resultados para SIRCAR - PERCEPCIONES"
			});
		  }
        if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
        }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIRCAR - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIRCAR - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIRCAR - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcionSIRCAR = grabarError(true, "Error Generando TXT de Percepciones - SIRCAR", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSIRCAR = grabarError(false, "Generacion de TXT de Percepciones Correcta - SIRCAR", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente - SIRCAR", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - SIRCAR', 'Finalizacion - Generacion TXT SIRCAR Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT - SIRCAR",
		  details: "Finalizacion - Generacion TXT SIRCAR Percepciones"
		});
		if (!isEmpty(contenidoTXT)) {
		  percepcionSIRCAR.contenidoTXT = contenidoTXT.replace(/ /gi, "");
		}
		return percepcionSIRCAR;
	  }
	  //[Lista]
	  function generarTXTArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTArciba', 'Inicio - Generacion TXT ARCIBA');
		log.debug({
		  title: "generarTXTArciba",
		  details: "Inicio - Generacion TXT ARCIBA"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones/Percepciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		let contenidoTXT = "";
		try {
		  var retencionARCIBA = {};
		  retencionARCIBA.retencion = {};
		  retencionARCIBA.sujeto = {};
		  retencionARCIBA.existenRetenciones = false;
		  retencionARCIBA.error = false;
		  retencionARCIBA.descripcionError = "";
		  retencionARCIBA.procesoEncolado = false;
		  retencionARCIBA.idLog = idRegistroLOG;
		  retencionARCIBA.contenidoTXT = "";
		  // INICIO Obtener la Informacion de RETENCIONES usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTRetencionesARCIBA = [];
		  //filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesARCIBA[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTRetencionesARCIBA[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arciba');
		  let search_ = search.load({
			id: "customsearch_l54_ret_arciba",
			type: "customrecord_l54_retencion"
		  });
		  search_.filters.push(...filtroTXTRetencionesARCIBA);
		  let searchResults = search_.run();
		  let resultadoTXTRetencionesARCIBA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  let resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesARCIBA = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesARCIBA = resultadoTXTRetencionesARCIBA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_ARCIBA_ret",
				details: "'resultIndex: " + resultIndex + ",resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de RETENCIONES usando un SavedSearch
		  // INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  iCont = 0;
		  const filtroTXTPercepcionesARCIBA = [];
		  //filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba');
		  search_ = search.load({
			id: "customsearch_l54_per_arciba",
			type: "transaction"
		  });
		  search_.filters.push(...filtroTXTPercepcionesARCIBA);
		  searchResults = search_.run();
		  let resultadoTXTPercepcionesARCIBA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  resultIndex = 0;
		  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
			  else
				resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_Perc', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  // INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Recorrer Retenciones');
		  log.debug({
			title: "generarTXTArciba",
			details: "INICIO Recorrer Retenciones"
		  });
		  for (let i = 0; resultadoTXTRetencionesARCIBA != null && i < resultadoTXTRetencionesARCIBA.length; i++) {
			const result = resultadoTXTRetencionesARCIBA[i];
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].tipoOperacion = 1;
			informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesARCIBA[i].getValue({ name: "internalid" });
			informacionResultado[indiceArray].refComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
			informacionResultado[indiceArray].letraComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_let_pago_prov" });
			informacionResultado[indiceArray].tipoCambio = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_tipo_cambio" });
			informacionResultado[indiceArray].refNorma = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_arc_cod_norma_codigo", join: "custrecord_l54_ret_ref_norma" });
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_contr_iibb_cod_arc", join: "custrecord_l54_ret_tipo_contrib_iibb" });
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_cont_cod_arc", join: "custrecord_l54_ret_tipo_contrib_iva" });
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_base_calculo_imp')); //custrecord_l54_ret_base_calculo_imp
			informacionResultado[indiceArray].baseCalculo = result.getValue({ name: columns[30] });
			const fechaOperacionAux = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_fecha" });
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  //fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaComprobante = "";
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_numerador" });
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_cod_retencion" });
			informacionResultado[indiceArray].refEntidad = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_ref_proveedor" });
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_jurisdiccion" });
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_importe" }));
			informacionResultado[indiceArray].importeComprobante = "";
			informacionResultado[indiceArray].alicuota = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_alicuota" });
			informacionResultado[indiceArray].minimoImp = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_param_ret_min_no_imp", join: "custrecord_l54_ret_cod_retencion" });
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Recorrer Percepciones');
		  log.debug({
			title: "generarTXTArciba",
			details: "INICIO Recorrer Percepciones"
		  });
		  for (let i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			informacionResultado[indiceArray] = {};
			const result = resultadoTXTPercepcionesARCIBA[i];
			const columns = result.columns;
			informacionResultado[indiceArray].tipoOperacion = 2;
			informacionResultado[indiceArray].idInterno = "";
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "internalid", summary: "group" });
			//informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_numero_localizado', null, 'max');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custbody_l54_numero_localizado",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_boca', null, 'max');					
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custbody_l54_boca",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_letra', null, 'max');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custbody_l54_letra",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcionesARCIBA[i].getValue('exchangerate', null, 'group');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "exchangerate",
			  summary: search.Summary.GROUP
			});
			//informacionResultado[indiceArray].refNorma = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custcol_l54_norma_iibb_perc', 'max');
			informacionResultado[indiceArray].refNorma = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custrecord_l54_arc_cod_norma_codigo",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].situacionIIBB = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_contr_iibb_cod_arc', 'custcol_l54_tipo_contribuyente', 'max');
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custrecord_l54_tipo_contr_iibb_cod_arc",
			  join: "custcol_l54_tipo_contribuyente",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].situiacionIVA = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_cont_cod_arc', 'custbody_l54_tipo_contribuyente', 'max');
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custrecord_l54_tipo_cont_cod_arc",
			  join: "custbody_l54_tipo_contribuyente",
			  summary: search.Summary.MAX
			});
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = result.getValue({ name: columns[21] });
			//var fechaOperacionAux = resultadoTXTPercepcionesARCIBA[i].getValue('trandate', null, 'group');
			const fechaOperacionAux = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "trandate",
			  summary: search.Summary.GROUP
			});
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  //fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.Type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = "";
			//informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('taxcode', null, 'group');
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcionesARCIBA[i].getValue({ name: columns[13], summary: search.Summary.GROUP });
			//informacionResultado[indiceArray].refEntidad = resultadoTXTPercepcionesARCIBA[i].getValue('internalid', 'customer', 'group');
			informacionResultado[indiceArray].refEntidad = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "internalid",
			  join: "customer",
			  summary: search.Summary.GROUP
			});
			//informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custcol_l54_jurisd_iibb_lineas",
			  summary: search.Summary.GROUP
			});
			//informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('taxamount', null, 'sum'));
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "taxamount",
			  summary: search.Summary.SUM
			}));
			//informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('total', null, 'sum'));
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue(
			  {
				name: "total",
				summary: search.Summary.SUM
			  }));
			//informacionResultado[indiceArray].alicuota = resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_alicuota', null, 'sum');
			informacionResultado[indiceArray].alicuota = resultadoTXTPercepcionesARCIBA[i].getValue({
			  name: "custcol_l54_alicuota",
			  summary: search.Summary.SUM
			});
			informacionResultado[indiceArray].minimoImp = 0;
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Ordenar');
		  log.debug({
			title: "generarTXTArciba",
			details: "INICIO Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  // FIN UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Cantidad Retenciones:' + informacionResultado.length);
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  let tipoOperacionStr = "Percepcion";
			  let entidadStr = "Cliente";
			  retencionARCIBA.retencion = {};
			  retencionARCIBA.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  tipoOperacion = informacionResultado[i].tipoOperacion;
			  var idRetencionNetSuite = "";
			  if (tipoOperacion == 1) {
				idRetencionNetSuite = informacionResultado[i].idInterno;
				tipoOperacionStr = "Retencion";
				entidadStr = "Proveedor";
			  }
			  var refComprobante = informacionResultado[i].refComprobante;
			  if (!isEmpty(refComprobante)) {
				let codigoComprobante = null;
				if (tipoOperacion == 1)
				  codigoComprobante = obtenerCodigoComprobante(refComprobante, "arc", subsidiaria);
				else
				  codigoComprobante = obtenerCodigoComprobante(refComprobante, "arc_perc", subsidiaria);
				if (!isEmpty(codigoComprobante)) {
				  retencionARCIBA.retencion.codigoComprobante = padding_left(codigoComprobante, "0", 2);
				  // Obtengo el tipo de Comprobante netsuite
				  const filtroComprobanteNS = [];
				  //filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
				  filtroComprobanteNS[0] = search.createFilter({
					name: "internalid",
					operator: search.Operator.IS,
					values: refComprobante
				  });
				  const columnaComprobanteNS = [];
				  //columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');
				  columnaComprobanteNS[0] = search.createColumn({
					name: "recordtype"
				  });
				  let resultadoComprobanteNS = null;
				  if (tipoOperacion == 1)
					//resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);
					resultadoComprobanteNS = search.create({
					  type: "transaction",
					  filters: filtroComprobanteNS,
					  columns: columnaComprobanteNS
					}).run().getRange({
					  start: 0,
					  end: 1000
					});
				  if ((!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) || (tipoOperacion == 2)) {
					tipoComprobanteNS = null;
					if (tipoOperacion == 1)
					  tipoComprobanteNS = resultadoComprobanteNS[0].getValue({ name: "recordtype" });
					if (!isEmpty(tipoComprobanteNS) || (tipoOperacion == 2)) {
					  let resultadoPagoProveedor = null;
					  if (tipoOperacion == 1) {
						// Obtengo Informacion Adicional del Pago a Proveedor
   
						//filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
						const filtroPagoProveedor = search.createFilter({
						  name: "internalid",
						  operator: search.Operator.IS,
						  values: refComprobante
						});
						const columnaPagoProveedor = [];
						//columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
						columnaPagoProveedor[0] = search.createColumn({
						  name: "trandate"
						});
						//columnaPagoProveedor[1] = new nlobjSearchColumn('total');
						columnaPagoProveedor[1] = search.createColumn({
						  name: "total"
						});
						//columnaPagoProveedor[2] = new nlobjSearchColumn('custbody_l54_importe_iva');
						columnaPagoProveedor[2] = search.createColumn({
						  name: "custbody_l54_importe_iva"
						});
						//columnaPagoProveedor[3] = new nlobjSearchColumn('custbody_l54_importe_percepciones');
						columnaPagoProveedor[3] = search.createColumn({
						  name: "custbody_l54_importe_percepciones"
						});
						//resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null);
						// resultadoPagoProveedor = search.create({
						// 	type: tipoComprobanteNS,
						// 	filters: filtroPagoProveedor,
						// 	id: 'customsearch_l54_imp_pagos_proveedores'
						// });
						const SSresultadoPagoProveedor = search.load({
						  id: "customsearch_l54_imp_pagos_proveedores"
						});
						SSresultadoPagoProveedor.filters.push(filtroPagoProveedor);
						const resultSet = SSresultadoPagoProveedor.run();
						resultadoPagoProveedor = resultSet.getRange({
						  start: 0,
						  end: 1000
						});
					  }
					  if ((!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) || (tipoOperacion == 2)) {
						// Obtengo la Fecha de Emision del Comprobante
						let fecha = "";
						if (tipoOperacion == 1)
						  //fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
						  fecha = resultadoPagoProveedor[0].getValue({
							name: "trandate",
							summary: search.Summary.GROUP
						  });
						else
						  fecha = informacionResultado[i].fechaComprobante;
						//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha : ' + fecha);
						if (!isEmpty(fecha)) {
						  let fechaDate = "";
						  // Formateo la Fecha
						  if (tipoOperacion == 1)
							//fechaDate = nlapiStringToDate(fecha, 'datetimetz');
							fechaDate = format.parse({
							  value: fecha,
							  type: format.Type.DATE
							});
						  else
							fechaDate = fecha;
						  //nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha Date : ' + fechaDate);
						  if (!isEmpty(fechaDate)) {
							// Obtengo las Componentes de la Fecha
							const dia = fechaDate.getDate();
							const mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
							const anio = fechaDate.getFullYear();
							const fechaComprobante = padding_left(dia, "0", 2) + "/" + padding_left(mes, "0", 2) + "/" + anio;
							retencionARCIBA.retencion.fechaComprobante = fechaComprobante;
							// Obtengo el Numero del Comprobante
							const numerador = informacionResultado[i].codigoComprobante;
							if (!isEmpty(numerador)) {
							  // Tomo el Numero, Punto de Venta y Letra
							  //var arrayNumerador = numerador.split("-");
							  //if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
							  //var numeroComprobante = arrayNumerador[2];
							  const numeroComprobante = numerador.toString().substr(-8);
							  // Tomo el Punto de Venta
							  //var puntoVenta = arrayNumerador[1];
							  const puntoVenta = informacionResultado[i].puntoVentaComprobante;
							  // Tomo la Latra del Comprobante
							  //var letra = arrayNumerador[0];
							  const letra = informacionResultado[i].letraComprobante;
							  //if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
							  if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
								const numeroAux = padding_left(puntoVenta.toString(), "0", 4) + padding_left(numeroComprobante.toString(), "0", 12);
								let faltaLetra = false;
								if (tipoOperacion == 1) {
								  retencionARCIBA.retencion.letra = " ";
								} else {
								  if (retencionARCIBA.retencion.codigoComprobante == "01" || retencionARCIBA.retencion.codigoComprobante == "06" || retencionARCIBA.retencion.codigoComprobante == "07") {
									if (isEmpty(letra)) {
									  faltaLetra = true;
									} else {
									  retencionARCIBA.retencion.letra = letra;
									}
								  } else {
									retencionARCIBA.retencion.letra = " ";
								  }
								}
								if (faltaLetra == false) {
								  retencionARCIBA.retencion.numeroComprobante = padding_left(numeroAux, "0", 16); // En vez de 15 , pongo 16 porque como
								  // Es Orden de Pago no va la Letra
								  //retencionARCIBA.retencion.letraComprobante = padding_right(letra, " ", 1);
								  // Obtengo Tipo de Cambio de la Retencion
								  const tipoCambio = informacionResultado[i].tipoCambio;
								  if (!isEmpty(tipoCambio)) {
									// Obtengo el Importe del Comprobante
									let importeComprobante = "";
									if (tipoOperacion == 1)
									  //importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
									  importeComprobante = resultadoPagoProveedor[0].getValue({
										name: "paidamount",
										summary: search.Summary.SUM
									  });
									else
									  importeComprobante = informacionResultado[i].importeComprobante;
									if (!isEmpty(importeComprobante)) {
									  /*------------- Inicio - JSalazar 27/03/2019: Al campo "tipo de cambio" lo sustituí por el "1" porque ya el "total" de las percepciones y retenciones tiene en su valor la transformación de moneda
										extranjera a pesos argentinos desde la SS y no es necesario volver a tomar en cuenta el valor del tipo de cambio para hacer de nuevo dicha transformación */
									  //retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
									  retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
									  //*-------------- Fin - JSalazar 27/03/2019. ----------------------------------******///////////////////////////
									  //retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
									  // Obtengo el Codigo de Operacion
									  if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
										const filtroTipoOperacion = [];
										//filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);
										filtroTipoOperacion[0] = search.createFilter({
										  name: "internalid",
										  operator: search.Operator.IS,
										  values: tipoOperacion
										});
										const columnaTipoOperacion = [];
										//columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');
										columnaTipoOperacion[0] = search.createColumn({
										  name: "custrecord_l54_tipo_op_codigo"
										});
										//var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);
										const resultadoTipoOperacion = search.create({
										  type: "customrecord_l54_tipo_operacion",
										  filters: filtroTipoOperacion,
										  columns: columnaTipoOperacion
										}).run().getRange({
										  start: 0,
										  end: 1000
										});
										if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {
										  const codigoOperacion = resultadoTipoOperacion[0].getValue({ name: "custrecord_l54_tipo_op_codigo" });
										  if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
											retencionARCIBA.retencion.codigoOperacion = codigoOperacion;
											const infoImpuesto = null;
											// Obtengo el Codigo de Norma
											//var codigoNorma = '016'; // RIESGO FISCAL
											let codigoNorma = "";
											if (tipoOperacion == 1)
											  codigoNorma = informacionResultado[i].refNorma;
											else {
											  /*infoImpuesto = obtenerInfoImpuesto(informacionResultado[i].codigoOperacion);
											  if (!isEmpty(infoImpuesto))
											  codigoNorma = infoImpuesto.codigoNorma;*/
											  codigoNorma = informacionResultado[i].refNorma;
											}
											if (!isEmpty(codigoNorma)) {
											  retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, "0", 3);
											  // Obtengo la Base de Calculo
											  const baseCalculo = informacionResultado[i].baseCalculo;
											  if (!isEmpty(baseCalculo)) {
												retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 12);
												// Obtengo Fecha de Retencion
												let fechaRetencion = "";
												fechaRetencion = informacionResultado[i].fechaOperacion;
												if (!isEmpty(fechaRetencion)) {
												  // Formateo la Fecha
												  //var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
												  const fechaRetencionDate = format.parse({
													value: fechaRetencion,
													type: format.Type.DATE
												  });
												  if (!isEmpty(fechaRetencionDate)) {
													// Obtengo las Componentes de la Fecha
													const diaRetencion = fechaRetencionDate.getDate();
													const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
													const anioRetencion = fechaRetencionDate.getFullYear();
													const fechaRetencionFinal = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
													retencionARCIBA.retencion.fechaRetencion = fechaRetencionFinal;
													// Obtengo el Numero de Certificado
													let numeroCertificado = " ";
													if (tipoOperacion == 1)
													  numeroCertificado = informacionResultado[i].numeroOperacion;
													if (!isEmpty(numeroCertificado) || (tipoOperacion == 2)) {
													  retencionARCIBA.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 16);
													  // Obtengo la Alicuota
													  // Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
													  //var idInternoParametrizacionRetencion = '';
													  //if (tipoOperacion == 1)
													  //idInternoParametrizacionRetencion = informacionResultado[i].codigoOperacion;
													  //if (!isEmpty(idInternoParametrizacionRetencion) || (tipoOperacion == 2)) {
													  /*var resultadoAlicuota = '';
													  if (tipoOperacion == 1) {
													  var filtroAlicuota = [];
													  filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);
													  var columnaAlicuota = [];
													  columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');
													  resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);
													  }*/
													  //if ((!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) || (tipoOperacion == 2)) {
													  let alicuota = "";
													  /*if (tipoOperacion == 1)
													  alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
													  else {
													  if (!isEmpty(infoImpuesto))
													  alicuota = infoImpuesto.porcentaje;
													  }*/
													  alicuota = informacionResultado[i].alicuota;
													  if (!isEmpty(alicuota)) {
														retencionARCIBA.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 5);
														// Cargo el Proveedor
														let proveedor = "";
														proveedor = informacionResultado[i].refEntidad;
														// Obtengo el Numero de Documento
														if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {
														  retencionARCIBA.sujeto.idSujetoNetSuite = proveedor;
														  const filtroProveedor = [];
														  filtroProveedor[0] = {
															name: "internalid",
															operator: "is",
															values: proveedor
														  };
														  const columnaProveedor = [];
														  //columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
														  columnaProveedor[0] = search.createColumn({
															name: "custentity_l54_cuit_entity"
														  });
														  //columnaProveedor[1] = new nlobjSearchColumn('companyname');
														  columnaProveedor[1] = search.createColumn({
															name: "companyname"
														  });
														  //columnaProveedor[2] = new nlobjSearchColumn('lastname');
														  columnaProveedor[2] = search.createColumn({
															name: "lastname"
														  });
														  //columnaProveedor[3] = new nlobjSearchColumn('firstname');
														  columnaProveedor[3] = search.createColumn({
															name: "firstname"
														  });
														  //columnaProveedor[4] = new nlobjSearchColumn('custentity_l54_tipo_documento');
														  columnaProveedor[4] = search.createColumn({
															name: "custentity_l54_tipo_documento"
														  });
														  //columnaProveedor[5] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
														  columnaProveedor[5] = search.createColumn({
															name: "custentity_l54_tipo_contribuyente"
														  });
														  //columnaProveedor[6] = new nlobjSearchColumn('custentity_l54_cod_iibb');
														  columnaProveedor[6] = search.createColumn({
															name: "custentity_l54_cod_iibb"
														  });
														  //columnaProveedor[7] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_iibb');
														  columnaProveedor[7] = search.createColumn({
															name: "custentity_l54_tipo_contribuyente_iibb"
														  });
														  let tipoRecordType = "customer";
														  if (tipoOperacion == 1)
															tipoRecordType = "vendor";
														  //var resultadoProveedor = new nlapiSearchRecord(tipoRecordType, null, filtroProveedor, columnaProveedor);
														  const resultadoProveedor = search.create({
															type: tipoRecordType,
															filters: filtroProveedor,
															columns: columnaProveedor
														  }).run().getRange({
															start: 0,
															end: 1000
														  });
														  if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
															const jurisdiccion = informacionResultado[i].jurisdiccionOperacion;
															if (!isEmpty(jurisdiccion)) {
															  // Obtengo el Tipo de Contribuyente segun la Jurisdiccion
															  //
															  let resultadoJurisdiccion = "";
															  if (tipoOperacion == 1) {
																const filtroJurisdiccion = [];
																//filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																filtroJurisdiccion[0] = search.createFilter({
																  name: "custrecord_l54_jurisdicciones_iibb_prov", //The search return column name
																  operator: search.Operator.IS,
																  values: proveedor
																});
																//filtroJurisdiccion[1] =filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);
																filtroJurisdiccion[1] = search.createFilter({
																  name: "custrecord_l54_jurisdicciones_iibb_jur",
																  operator: search.Operator.IS,
																  values: jurisdiccion
																});
																const columnaJurisdiccion = [];
																//columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');
																columnaJurisdiccion[0] = search.createColumn({
																  name: "intcustrecord_l54_jurisdicciones_iibb_tipoernalid" //Name of a search column as a string.																																
																});
																//resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);
																resultadoJurisdiccion = search.create({
																  type: "customrecord_l54_jurisdicciones_iibb",
																  filters: filtroJurisdiccion,
																  columns: columnaJurisdiccion
																}).run().getRange({
																  start: 0,
																  end: 1000
																});
															  }
															  let desc = "IIBB";
															  //if ((!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) || (tipoOperacion == 2)) {
															  //
															  // Obtengo Codigo Tipo Condicion IIBB
															  /*var tipoContribuyenteIIBB = "";
															  //tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
															  if (tipoOperacion == 1) {
															  tipoContribuyenteIIBB = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_tipo');
															  } else {
															  // Solo por Ahora tomar la General del Cliente, Luego Tomar de la Tabla Jurisdicciones IIBB
															  tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
															  }*/
															  //if (!isEmpty(tipoContribuyenteIIBB)) {
															  /*var filtroTipoContribuyente = [];
															  filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);
															  var columnaTipoContribuyente = [];
															  columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_arc');
															  var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);*/
															  //if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
															  //var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_arc');
															  const situacionIIBB = informacionResultado[i].situacionIIBB;
															  if (!isEmpty(situacionIIBB)) {
																retencionARCIBA.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																let numeroIIBB = "0";
																if (situacionIIBB == 1 || situacionIIBB == 2 || situacionIIBB == 5) {
																  // Busco el Numero de IIBB
																  numeroIIBB = resultadoProveedor[0].getValue({ name: "custentity_l54_cod_iibb" });
																}
																if (!isEmpty(numeroIIBB)) {
																  // Formateo el Documento
																  numeroIIBB = numeroIIBB.replace(/-/g, "");
																  numeroIIBB = numeroIIBB.replace(/\./g, "");
																  // Elimino Blancos
																  numeroIIBB = numeroIIBB.replace(/ /g, "&nbsp");
																  retencionARCIBA.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 11);
																  // Busco la Situacion Frente al IVA
																  //var tipoContribuyenteIVA = "";
																  desc = "IVA";
																  //tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');
																  //tipoContribuyenteIVA = informacionResultado[i].tipoContrIVA;
																  //if (!isEmpty(tipoContribuyenteIVA)) {
																  /*var filtroTipoContribuyente = [];
																  filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);
																  var columnaTipoContribuyente = [];
																  columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_arc');
																  var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);*/
																  //if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																  //var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_arc');
																  const situacionIVA = informacionResultado[i].situiacionIVA;
																  if (!isEmpty(situacionIVA)) {
																	retencionARCIBA.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																	// Obtengo el Importe de la Retencion
																	const importeRetencion = informacionResultado[i].importeOperacion;
																	if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																	  /*------------INICIO. JSalazar: 28/03/2019. Se comentan estas líneas y se agregan las condiciones siguiente dependiendo del tipo de operación, porque con las retenciones es necesario tomar en cuenta el tipo de cambio
																		y en las percepciones no es no es necesario porque ya vienen transformadas a pesos
																	  retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																	  retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16); */
																	  if (tipoOperacion == 1) {
																		retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																	  } else {
																		retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																	  }
																	  ////////-------FIN. JSalazar: 28/03/2019.----------------------------------------/////////////
																	  // Obtengo el Tipo de Documento del Sujeto Retenido
																	  let tipoDocumento = resultadoProveedor[0].getValue({ name: "custentity_l54_tipo_documento" });
																	  if (!isEmpty(tipoDocumento)) {
																		// Obtengo el Codigo de Tipo de Documento
																		const filtroTipoDocumento = [];
																		//filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);
																		filtroTipoDocumento[0] = search.createFilter({
																		  name: "internalid",
																		  operator: search.Operator.IS,
																		  values: tipoDocumento
																		});
																		const columnaTipoDocumento = [];
																		//columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_arc');
																		columnaTipoDocumento[0] = search.createColumn({
																		  name: "custrecord_l54_tipo_doc_arc" //Name of a search column as a string.																																				
																		});
																		//var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);
																		const resultadoTipoDocumento = search.create({
																		  type: "customrecord_l54_tipo_documento",
																		  filters: filtroTipoDocumento,
																		  columns: columnaTipoDocumento
																		}).run().getRange({
																		  start: 0,
																		  end: 1000
																		});
																		if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																		  tipoDocumento = resultadoTipoDocumento[0].getValue({ name: "custrecord_l54_tipo_doc_arc" });
																		  if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																			retencionARCIBA.sujeto.tipoDocSujeto = padding_left(tipoDocumento, "0", 1);
																			// Informacion de Beneficiarios del Exterior
																			// Verifico si el Proveedor tiene
																			let otrosConceptos = "";
																			/*var resultadoMinimoNoImp = null;
																			if (tipoOperacion == 1) {
																			// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																			var filtroMinimoNoImp = [];
																			filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);
																			var columnaMinimoNoImp = [];
																			columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');
																			resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);
																			}*/
																			//if ((!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) || (tipoOperacion == 2)) {
																			if (tipoOperacion == 1) {
																			  //otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																			  otrosConceptos = informacionResultado[i].minimoImp;
																			} else {
																			  otrosConceptos = 0;
																			}
																			if (!isEmpty(otrosConceptos)) {
																			  // Obtengo el Importe de Percepcion del Pago
																			  let importePercepcionPago = "";
																			  if (tipoOperacion == 1) {
																				//importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'max');
																				importePercepcionPago = resultadoPagoProveedor[0].getValue({
																				  name: "custbody_l54_importe_percepciones",
																				  summary: search.Summary.MAX
																				});
																			  } else {
																				importePercepcionPago = 0;
																			  }
																			  if (!isEmpty(importePercepcionPago)) {
																				const otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);
																				retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptosFinal, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																				// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos
																				//Comento esta línea porque en eARCIBA el proceso no hace esto.
																				//retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10) - parseFloat(otrosConceptos, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																				// Obtengo el Importe del IVA
																				//var importeIVAPago = "";
																				//importeIVAPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_iva', null, 'group');
																				// Al Ser Orden de Pago el Importe IVA debe ir en 0
																				let importeIVAPago = 0;
																				if (tipoOperacion == 2 && (retencionARCIBA.retencion.letra == "A" || retencionARCIBA.retencion.letra == "M")) {
																				  importeIVAPago = "";
																				  //FALTA Consultar el Importe de IVA del Comprobante
																				  //importeIVAPago=informacionResultado[i].importeIVA;
   
																				  //filtroIVA[0] = new nlobjSearchFilter('internalid', null, 'is', informacionResultado[i].refComprobante);
																				  const filtroIVA = search.createFilter({
																					name: "internalid",
																					operator: search.Operator.IS,
																					values: informacionResultado[i].refComprobante
																				  });
																				  //var resultadoIVA = new nlapiSearchRecord('transaction', 'customsearch_l54_imp_iva_transaccion', filtroIVA, null);
																				  // var resultadoIVA = search.create({
																				  // 	type: 'transaction',
																				  // 	filters: filtroIVA,
																				  // 	id: 'customsearch_l54_imp_iva_transaccion'
																				  // }).run().getRange({
																				  // 	start: 0,
																				  // 	end: 1000
																				  // });
																				  const SaveSearchResultadoIVA = search.load({
																					id: "customsearch_l54_imp_iva_transaccion"
																				  });
																				  SaveSearchResultadoIVA.filters.push(filtroIVA);
																				  const resultSet = SaveSearchResultadoIVA.run();
																				  var resultadoIVA = resultSet.getRange({
																					start: 0,
																					end: 1000
																				  });
																				}
																				if ((!isEmpty(resultadoIVA) && resultadoIVA.length > 0)) {
																				  importeIVAPago = resultadoIVA[0].getValue({ name: "taxamount", summary: search.Summary.SUM });
																				}
																				if (!isEmpty(importeIVAPago)) {
																				  //retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																				  retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																				  // Cargo informacion del Sujeto Retenido
																				  proveedor = informacionResultado[i].refEntidad;
																				  // Obtengo el Numero de Documento
																				  let nroDocumento = resultadoProveedor[0].getValue({ name: "custentity_l54_cuit_entity" });
																				  if (!isEmpty(nroDocumento)) {
																					// Formateo el Documento
																					nroDocumento = nroDocumento.replace(/-/g, "");
																					nroDocumento = nroDocumento.replace(/\./g, "");
																					// Elimino Blancos
																					const numeroDocumentoFinal = nroDocumento.replace(/ /g, "&nbsp");
																					retencionARCIBA.sujeto.numeroDocSujeto = padding_left(numeroDocumentoFinal, "0", 11);
																					// Obtengo la Razon Social
																					let razonSocial = resultadoProveedor[0].getValue({ name: "companyname" });
																					if (isEmpty(razonSocial)) {
																					  // Busco Nombre y Apellido
																					  const apellido = resultadoProveedor[0].getValue({ name: "lastname" });
																					  const nombre = resultadoProveedor[0].getValue({ name: "firstname" });
																					  razonSocial = apellido + " " + nombre;
																					}
																					if (!isEmpty(razonSocial)) {
																					  retencionARCIBA.sujeto.razonSocial = padding_right(razonSocial.substring(0, 29), " ", 30);
																					} else {
																					  errorGlobal = true;
																					  descripcionError = "Error Obteniendo Razon Social del " + entidadStr;
																					}
																				  } else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Numero de Documento del " + entidadStr;
																				  }
																				} else {
																				  errorGlobal = true;
																				  descripcionError = "Error Obteniendo Importe IVA de la Transaccion";
																				}
																			  } else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Importe Percepciones";
																			  }
																			} else {
																			  errorGlobal = true;
																			  descripcionError = "Minimo No Imponible No Configurado";
																			}
																			/*} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo el Minimo No Imponible";
																			}*/
																		  } else {
																			errorGlobal = true;
																			descripcionError = "Error Tipo de Documento ARCIBA No Configurado Correctamente";
																		  }
																		} else {
																		  errorGlobal = true;
																		  descripcionError = "Error Obteniendo Tipo de Documento";
																		}
																	  } else {
																		errorGlobal = true;
																		descripcionError = "El Sujeto Retenido/Percibido no Posee Tipo de Documento";
																	  }
																	} else {
																	  errorGlobal = true;
																	  descripcionError = "El Importe de Retencion/Percepcion debe ser mayor a 0.00";
																	}
																  } else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo Situacion de " + desc;
																  }
																  /*} else {
																  errorGlobal = true;
																  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																  }*/
																  /*} else {
																  errorGlobal = true;
																  descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																  }*/
																} else {
																  errorGlobal = true;
																  descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido/Percibido";
																}
															  } else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Situacion de " + desc;
															  }
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
															  }*/
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
															  }*/
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del " + entidadStr;
															  }*/
															} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion/Percepcion";
															}
														  } else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Informacion del " + entidadStr;
														  }
														} else {
														  errorGlobal = true;
														  descripcionError = "Error Obteniendo " + entidadStr;
														}
													  } else {
														errorGlobal = true;
														descripcionError = "Alicuota Invalida";
													  }
													  /*} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
													  }*/
													  /*} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
													  }*/
													} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Numero de Certificado";
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error Formateando la Fecha de " + tipoOperacionStr;
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "Error Obteniendo Fecha De " + tipoOperacionStr;
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Base De Calculo";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo Codigo De Norma";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Codigo de Operacion Invalido";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Codigo de Operacion";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Codigo de Operacion";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo Importe del Comprobante";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la " + tipoOperacionStr;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo Letra del Comprobante";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
							  }
							  /*} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							  }*/
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Formateando la Fecha del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Fecha del Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la " + tipoOperacionStr;
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionARCIBA.sujeto != null) {
				  if (retencionARCIBA.retencion != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					const error = false;
					const descripcionMensaje = "TXT Retenciones/Percepciones Generado Correctamente";
					contenidoTXT += retencionARCIBA.retencion.codigoOperacion + retencionARCIBA.retencion.codigoNorma + retencionARCIBA.retencion.fechaRetencion + retencionARCIBA.retencion.codigoComprobante +
					  retencionARCIBA.retencion.letra + retencionARCIBA.retencion.numeroComprobante + retencionARCIBA.retencion.fechaComprobante + retencionARCIBA.retencion.importeComprobante +
					  retencionARCIBA.retencion.numeroCertificado + retencionARCIBA.sujeto.tipoDocSujeto + retencionARCIBA.sujeto.numeroDocSujeto + retencionARCIBA.sujeto.situacionIIBB +
					  retencionARCIBA.sujeto.numeroIIBB + retencionARCIBA.sujeto.situacionIVA + retencionARCIBA.sujeto.razonSocial + retencionARCIBA.sujeto.otrosConceptos +
					  retencionARCIBA.sujeto.iva + retencionARCIBA.retencion.baseCalculo + retencionARCIBA.retencion.alicuota + retencionARCIBA.retencion.retencionPracticada +
					  retencionARCIBA.retencion.importeRetencion;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Retencion/Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Retenido/Percibido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Descripción error', descripcionError);
				log.error({
				  title: "Descripción error",
				  details: descripcionError
				});
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones/Percepciones ARCIBA');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones/Percepciones ARCIBA"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones/Percepciones Correcta - No se Encontraron Retenciones/Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones/Percepciones ARCIBA');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Retenciones/Percepciones ARCIBA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : Error Obteniendo Retenciones/Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARCIBA - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT ARCIBA - Error :" + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT ARCIBA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionARCIBA = grabarError(true, "Error Generando TXT de Retenciones/Percepciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionARCIBA = grabarError(false, "Generacion de TXT de Retenciones/Percepciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones/Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT ARCIBA');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT ARCIBA"
		});
		retencionARCIBA.contenidoTXT = contenidoTXT;
		return retencionARCIBA;
	  }
	  //[Lista]
	  function generarTXTeArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Inicio - Generacion TXT eARCIBA');
		log.debug({
		  title: "generarTXTeArciba",
		  details: "Inicio - Generacion TXT eARCIBA"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones/Percepciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		let contenidoTXT = "";
		try {
		  var retencionARCIBA = {};
		  retencionARCIBA.retencion = {};
		  retencionARCIBA.sujeto = {};
		  retencionARCIBA.existenRetenciones = false;
		  retencionARCIBA.error = false;
		  retencionARCIBA.descripcionError = "";
		  retencionARCIBA.procesoEncolado = false;
		  retencionARCIBA.idLog = idRegistroLOG;
		  retencionARCIBA.contenidoTXT = "";
		  // INICIO Obtener la Informacion de RETENCIONES usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTRetencionesARCIBA = [];
		  //filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencionesARCIBA[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTRetencionesARCIBA[iCont++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arciba');
		  let search2 = search.load({
			id: "customsearch_l54_ret_arciba",
			type: "customrecord_l54_retencion" //opc
		  });
		  search2.filters.push(...filtroTXTRetencionesARCIBA);
		  let searchResults = search2.run();
		  let resultadoTXTRetencionesARCIBA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  let resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencionesARCIBA = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencionesARCIBA = resultadoTXTRetencionesARCIBA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_eARCIBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_eARCIBA_ret",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de RETENCIONES usando un SavedSearch
		  // INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  iCont = 0;
		  const filtroTXTPercepcionesARCIBA = [];
		  //filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//|filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba');
		  search2 = search.load({
			id: "customsearch_l54_per_arciba",
			type: "transaction"
		  });
		  search2.filters.push(...filtroTXTPercepcionesARCIBA);
		  searchResults = search2.run();
		  let resultadoTXTPercepcionesARCIBA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  resultIndex = 0;
		  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
			  else
				resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_Perc', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  // INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Recorrer Retenciones');
		  log.debug({
			title: "generarTXTeArciba",
			details: "INICIO Recorrer Retenciones"
		  });
        var objList = getTipoTransIdNew();
        var idRetenciones = new Array();
        var idPercepciones = new Array();
    
		  for (let i = 0; resultadoTXTRetencionesARCIBA != null && i < resultadoTXTRetencionesARCIBA.length; i++) {
			const result = resultadoTXTRetencionesARCIBA[i];
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].tipoOperacion = 1;
			informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesARCIBA[i].getValue({ name: "internalid" });
			informacionResultado[indiceArray].refComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
			informacionResultado[indiceArray].letraComprobante = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_let_pago_prov" });
			informacionResultado[indiceArray].tipoCambio = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_tipo_cambio" });
			informacionResultado[indiceArray].refNorma = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_arc_cod_norma_codigo", join: "custrecord_l54_ret_ref_norma" });
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_contr_iibb_cod_arc", join: "custrecord_l54_ret_tipo_contrib_iibb" });
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_cont_cod_arc", join: "custrecord_l54_ret_tipo_contrib_iva" });
          
          informacionResultado[indiceArray].tipoDocSujeto = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custbody_l54_tipo_doc_cliente", join: "custrecord_l54_ret_ref_pago_prov" });
          informacionResultado[indiceArray].numeroDocSujeto = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custbody_54_cuit_entity", join: "custrecord_l54_ret_ref_pago_prov" });
          informacionResultado[indiceArray].razonSocial = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custbody_l54_razon_social_prov", join: "custrecord_l54_ret_ref_pago_prov" });
          informacionResultado[indiceArray].numeroIIBB = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custbody_l54_num_iibb", join: "custrecord_l54_ret_ref_pago_prov" });
    
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_base_calculo_imp')); //custrecord_l54_ret_base_calculo_imp
			informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue({ name: columns[33] }), 10);
			const fechaOperacionAux = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_fecha" });
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  //fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.Type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaComprobante = "";
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_numerador" });
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_cod_retencion" });
			informacionResultado[indiceArray].refEntidad = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_ref_proveedor" });
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_jurisdiccion" });
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_importe" }));
			informacionResultado[indiceArray].importeComprobante = "";
			informacionResultado[indiceArray].alicuota = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_ret_alicuota" }));
			informacionResultado[indiceArray].minimoImp = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custrecord_l54_param_ret_min_no_imp", join: "custrecord_l54_ret_cod_retencion" });
			informacionResultado[indiceArray].aceptacion = result.getValue({ name: columns[31] });
			informacionResultado[indiceArray].fechaAceptacionExpresa = result.getValue({ name: columns[32] });
          
          informacionResultado[indiceArray].recordtype = "vendorpayment";
          informacionResultado[indiceArray].esND = false;
          informacionResultado[indiceArray].esCE = false;
          informacionResultado[indiceArray].recordList = objList.filter(function (obj) {
            return (obj.name == informacionResultado[indiceArray].recordtype)
          });
          informacionResultado[indiceArray].tipoContribuyenteIIBB = resultadoTXTRetencionesARCIBA[i].getValue({ name: "custentity_l54_tipo_contribuyente_iibb", join: "custrecord_l54_ret_ref_proveedor" });

          idRetenciones.push(informacionResultado[indiceArray].refComprobante);
          
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Recorrer Percepciones');
		  log.debug({
			title: "generarTXTeArciba",
			details: "INICIO Recorrer Percepciones"
		  });
		  for (let i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			const result = resultadoTXTPercepcionesARCIBA[i];
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].tipoOperacion = 2;
			informacionResultado[indiceArray].idInterno = "";
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "internalid", summary: search.Summary.GROUP });
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_numero_localizado", summary: search.Summary.MAX });
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_boca", summary: search.Summary.MAX });
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_letra", summary: search.Summary.MAX });
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "exchangerate", summary: search.Summary.GROUP });
			informacionResultado[indiceArray].refNorma = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custrecord_l54_arc_cod_norma_codigo", join: "custcol_l54_norma_iibb_perc", summary: search.Summary.MAX });
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_contr_iibb_cod_arc", join: "custcol_l54_tipo_contribuyente", summary: search.Summary.MAX });
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custrecord_l54_tipo_cont_cod_arc", join: "custbody_l54_tipo_contribuyente", summary: search.Summary.MAX });
    
          informacionResultado[indiceArray].tipoDocSujeto = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_tipo_doc_cliente", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].numeroDocSujeto = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_54_cuit_entity", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].razonSocial = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_razon_social_cliente", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].numeroIIBB = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_num_iibb", summary: search.Summary.GROUP });
    
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue({name:'custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue({ name: columns[25] }), 10);
			const fechaOperacionAux = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "trandate", summary: search.Summary.GROUP });
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.Type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = "";
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcionesARCIBA[i].getValue({ name: columns[13], summary: search.Summary.GROUP });
			informacionResultado[indiceArray].refEntidad = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "internalid", join: "customer", summary: search.Summary.GROUP });
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custcol_l54_jurisd_iibb_lineas", summary: search.Summary.GROUP });
			//informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue({name:'taxamount', null, 'sum'));
			informacionResultado[indiceArray].importeOperacion = parseFloat(numberTruncTwoDec(Math.abs(result.getValue({ name: columns[24] }))), 10);
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue({ name: "total", summary: search.Summary.SUM }));
			informacionResultado[indiceArray].alicuota = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custcol_l54_alicuota", summary: search.Summary.SUM }));
			informacionResultado[indiceArray].minimoImp = 0;
			informacionResultado[indiceArray].aceptacion = result.getValue({ name: columns[22] });
			informacionResultado[indiceArray].fechaAceptacionExpresa = result.getValue({ name: columns[23] });
    
          
          informacionResultado[indiceArray].recordtype = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "recordtype", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].esND = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_nd", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].esCE = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custbody_l54_es_credito_electronico", summary: search.Summary.GROUP });
          informacionResultado[indiceArray].recordList = objList.filter(function (obj) {
            return (obj.name == informacionResultado[indiceArray].recordtype)
          });
          informacionResultado[indiceArray].tipoContribuyenteIIBB = resultadoTXTPercepcionesARCIBA[i].getValue({ name: "custentity_l54_tipo_contribuyente_iibb", join: "customer", summary: search.Summary.GROUP });

          idPercepciones.push(informacionResultado[indiceArray].refComprobante);

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Ordenar');
		  log.debug({
			title: "generarTXTeArciba",
			details: "INICIO Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  // FIN UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Cantidad Retenciones:' + informacionResultado.length + " Visualizar :  "+ JSON.stringify(informacionResultado));
			log.debug({
			  title: "generarTXTeArciba",
            details: 'Cantidad Retenciones:' + informacionResultado.length + " Visualizar :  "+ JSON.stringify(informacionResultado)
			});

          
         
          if(idRetenciones.length != 0 || idPercepciones.length != 0){
            var objPagos = new Array(), objPercepciones = new Array();
            if(idRetenciones.length != 0) objPagos = getPagos([... new Set(idRetenciones)]);
            if(idPercepciones.length != 0) objPercepciones = getPercepciones([... new Set(idPercepciones)]);
            var objOperaciones = getTipoOperaciones();
            var objTipoDocumento = getTipoDocumento();
            var objNumerador =  getNumeradores(subsidiaria);
            var objComprobantes = getComprobantes();
            var objTipoContriIIBB = getTipoContribuyenteIIBB();
          }

			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  let tipoOperacionStr = "Percepcion";
			  let entidadStr = "Cliente";
			  retencionARCIBA.retencion = {};
			  retencionARCIBA.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  tipoOperacion = informacionResultado[i].tipoOperacion;
			  var idRetencionNetSuite = "";
			  if (tipoOperacion == 1) {
				idRetencionNetSuite = informacionResultado[i].idInterno;
				tipoOperacionStr = "Retencion";
				entidadStr = "Proveedor";
			  }
			  var refComprobante = informacionResultado[i].refComprobante;
			  if (!isEmpty(refComprobante)) {
				let codigoComprobante = null;
              let idRecord = informacionResultado[i].recordList;
              if (tipoOperacion == 1){
                
                var objNumeradorResult = objNumerador.filter(function (obj) {
                  return (obj.col2 == idRecord[0].id && obj.col3 == informacionResultado[i].esND && obj.col4 == informacionResultado[i].esCE)
                })

                if(objNumeradorResult.length > 0){
                  var objComprobantesResult = objComprobantes.filter(function (obj) {
                    return (obj.col0 == objNumeradorResult[0].col1)
                  })
                  if(objComprobantesResult.length > 0){
                    codigoComprobante = objComprobantesResult[0].col1
                  }
                }
              
              }else{
                var objNumeradorResult = objNumerador.filter(function (obj) {
                  return (obj.col2 == idRecord[0].id && obj.col3 == informacionResultado[i].esND && obj.col4 == informacionResultado[i].esCE)
                })

                if(objNumeradorResult.length > 0){
                  var objComprobantesResult = objComprobantes.filter(function (obj) {
                    return (obj.col0 == objNumeradorResult[0].col1)
                  })
                  if(objComprobantesResult.length > 0){
                    codigoComprobante = objComprobantesResult[0].col2
                  }
                }
              }
                
				//nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Ref Comprobante: ' + refComprobante);
				log.debug({
				  title: "generarTXTeArciba",
				  details: "Ref Comprobante: " + refComprobante
				});
				if (!isEmpty(codigoComprobante)) {
				  retencionARCIBA.retencion.codigoComprobante = padding_left(codigoComprobante, "0", 2);
				  // Obtengo el tipo de Comprobante netsuite
				  var resultadoComprobanteNS = null;
				  //log.debug("line 4399","tipoOperacion: "+tipoOperacion);
				  //log.debug("Line 4400","resultadoComprobanteNS:"+JSON.stringify(resultadoComprobanteNS));
                if ((tipoOperacion == 1) || (tipoOperacion == 2)) {
					tipoComprobanteNS = null;
					if (tipoOperacion == 1)
                    tipoComprobanteNS = informacionResultado[i].recordtype;
					//log.debug("line 4404","tipoComprobanteNS: "+tipoComprobanteNS+"  , tipoOperacion: "+tipoOperacion);
					if (!isEmpty(tipoComprobanteNS) || (tipoOperacion == 2)) {
					  let resultadoPagoProveedor = null;
					  if (tipoOperacion == 1) {
						var objPagosResult = objPagos.filter(function (obj) {
							return (obj.col0 == refComprobante)
						  });
						}
						
                    if ((!isEmpty(objPagosResult) && objPagosResult.length > 0) || (tipoOperacion == 2)) {
                       
						// Obtengo la Fecha de Emision del Comprobante
						let fecha = "";
						if (tipoOperacion == 1) {
						  //fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
                        fecha = objPagosResult[0].col1;
						} else {
						  fecha = informacionResultado[i].fechaComprobante;
						}
						//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha : ' + fecha);
						if (!isEmpty(fecha)) {
						  let fechaDate = "";
						  // Formateo la Fecha
						  if (tipoOperacion == 1)
							//fechaDate = nlapiStringToDate(fecha, 'datetimetz');
							fechaDate = format.parse({
							  value: fecha,
							  type: format.Type.DATE
							});
						  else
							fechaDate = format.parse({
							  value: fecha,
							  type: format.Type.DATE
							});
						  //nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha Date : ' + fechaDate);
						  if (!isEmpty(fechaDate)) {
							// Obtengo las Componentes de la Fecha
							const dia = fechaDate.getDate();
							const mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
							const anio = fechaDate.getFullYear();
							const fechaComprobante = padding_left(dia, "0", 2) + "/" + padding_left(mes, "0", 2) + "/" + anio;
							retencionARCIBA.retencion.fechaComprobante = fechaComprobante;
							// Obtengo el Numero del Comprobante
							const numerador = informacionResultado[i].codigoComprobante;
							if (!isEmpty(numerador)) {
							  // Tomo el Numero, Punto de Venta y Letra
							  //var arrayNumerador = numerador.split("-");
							  //if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
							  //var numeroComprobante = arrayNumerador[2];
							  const numeroComprobante_aux = numerador.toString().split("-");
							  const numeroComprobante = (numeroComprobante_aux.length == 3) ? numeroComprobante_aux[2] : null;
							  // Tomo el Punto de Venta
							  //var puntoVenta = arrayNumerador[1];
							  const puntoVenta = informacionResultado[i].puntoVentaComprobante;
							  // Tomo la Latra del Comprobante
							  //var letra = arrayNumerador[0];
							  const letra = informacionResultado[i].letraComprobante;
							  //if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
							  if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
								const numeroAux = padding_left(puntoVenta.toString(), "0", 8) + padding_left(numeroComprobante.toString(), "0", 8);
								let faltaLetra = false;
								if (tipoOperacion == 1) {
								  retencionARCIBA.retencion.letra = " ";
								} else {
								  if (retencionARCIBA.retencion.codigoComprobante == "01" || retencionARCIBA.retencion.codigoComprobante == "02" || retencionARCIBA.retencion.codigoComprobante == "06" || retencionARCIBA.retencion.codigoComprobante == "07") {
									if (isEmpty(letra)) {
									  faltaLetra = true;
									} else {
									  retencionARCIBA.retencion.letra = letra;
									}
								  } else {
									retencionARCIBA.retencion.letra = " ";
								  }
								}
								if (faltaLetra == false) {
								  retencionARCIBA.retencion.numeroComprobante = padding_left(numeroAux, "0", 16); // En vez de 15 , pongo 16 porque como
								  // Es Orden de Pago no va la Letra
								  //retencionARCIBA.retencion.letraComprobante = padding_right(letra, " ", 1);
								  // Obtengo Tipo de Cambio de la Retencion
								  const tipoCambio = informacionResultado[i].tipoCambio;
								  if (!isEmpty(tipoCambio)) {
									// Obtengo el Importe del Comprobante
									let importeComprobante = "";
                                  if (tipoOperacion        == 1) {
									  //importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
                                    importeComprobante = objPagosResult[0].col7;
									} else {
									  importeComprobante = informacionResultado[i].importeComprobante;
									}
									if (!isEmpty(importeComprobante)) {
									  //retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
									  //retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
									  // Obtengo el Codigo de Operacion
									  if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
										//var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);
                                      var resultadoTipoOperacion = objOperaciones.filter(function (obj) {
                                        return (obj.id == tipoOperacion)
                                      })
										if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {
                                        const codigoOperacion = resultadoTipoOperacion[0].codigoOp;
										  if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
											retencionARCIBA.retencion.codigoOperacion = codigoOperacion;
											const infoImpuesto = null;
											// Obtengo el Codigo de Norma
											//var codigoNorma = '016'; // RIESGO FISCAL
											let codigoNorma = "";
											//if (tipoOperacion == 1)
											//codigoNorma = informacionResultado[i].refNorma;
											//else {
											/*infoImpuesto = obtenerInfoImpuesto(informacionResultado[i].codigoOperacion);
											if (!isEmpty(infoImpuesto))
											codigoNorma = infoImpuesto.codigoNorma;*/
											codigoNorma = informacionResultado[i].refNorma;
											//}
											if (!isEmpty(codigoNorma)) {
											  retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, "0", 3);
											  // Obtengo la Base de Calculo
											  const baseCalculo = informacionResultado[i].baseCalculo;
											  if (!isEmpty(baseCalculo)) {
												//retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
												// Obtengo Fecha de Retencion
												let fechaRetencion = "";
												fechaRetencion = informacionResultado[i].fechaOperacion;
												if (!isEmpty(fechaRetencion)) {
												  // Formateo la Fecha
												  //var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
												  const fechaRetencionDate = format.parse({
													value: fechaRetencion,
													type: format.Type.DATE
												  });
												  if (!isEmpty(fechaRetencionDate)) {
													// Obtengo las Componentes de la Fecha
													const diaRetencion = fechaRetencionDate.getDate();
													const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
													const anioRetencion = fechaRetencionDate.getFullYear();
													const fechaRetencionFinal = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
													retencionARCIBA.retencion.fechaRetencion = fechaRetencionFinal;
													// Obtengo el Numero de Certificado
													let numeroCertificado = " ";
													if (tipoOperacion == 1)
													  numeroCertificado = informacionResultado[i].numeroOperacion;
													if (!isEmpty(numeroCertificado) || (tipoOperacion == 2)) {
													  retencionARCIBA.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 16);
													  // Obtengo la Alicuota
													  // Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
													  //var idInternoParametrizacionRetencion = '';
													  //if (tipoOperacion == 1)
													  //idInternoParametrizacionRetencion = informacionResultado[i].codigoOperacion;
													  //if (!isEmpty(idInternoParametrizacionRetencion) || (tipoOperacion == 2)) {
													  /*var resultadoAlicuota = '';
													  if (tipoOperacion == 1) {
													  var filtroAlicuota = [];
													  filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);
													  var columnaAlicuota = [];
													  columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');
													  resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);
													  }*/
													  //if ((!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) || (tipoOperacion == 2)) {
													  let alicuota = "";
													  /*if (tipoOperacion == 1)
													  alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
													  else {
													  if (!isEmpty(infoImpuesto))
													  alicuota = infoImpuesto.porcentaje;
													  }*/
													  //if ((codigoNorma == 28) || (codigoNorma == 29)) {
													  //	alicuota = 0;
													  //} else {
													  alicuota = parseFloat(informacionResultado[i].alicuota, 10);
													  //}
													  if (!isEmpty(alicuota) && (alicuota > 0)) {
														//retencionARCIBA.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);
														retencionARCIBA.retencion.alicuota = padding_left(parseFloat(numberTruncTwoDec(alicuota), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 5);
														// Cargo el Proveedor
														let proveedor = informacionResultado[i].refEntidad;
														// Obtengo el Numero de Documento
														if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {
														  retencionARCIBA.sujeto.idSujetoNetSuite = proveedor;
                                                        
															const jurisdiccion = informacionResultado[i].jurisdiccionOperacion;
															if (!isEmpty(jurisdiccion)) {
															  // Obtengo el Tipo de Contribuyente segun la Jurisdiccion
															  //
															  let resultadoJurisdiccion = "";
															  if (tipoOperacion == 1) {
																const filtroJurisdiccion = [];
																//filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																filtroJurisdiccion[0] = search.createFilter({
																  name: "custrecord_l54_jurisdicciones_iibb_prov",
																  operator: search.Operator.IS,
																  values: proveedor
																});
																//filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);
																filtroJurisdiccion[1] = search.createFilter({
																  name: "custrecord_l54_jurisdicciones_iibb_jur",
																  operator: search.Operator.IS,
																  values: jurisdiccion
																});
																const columnaJurisdiccion = [];
																//columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');
																columnaJurisdiccion[0] = search.createColumn({
																  name: "custrecord_l54_jurisdicciones_iibb_tipo"
																});
																//resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);
																resultadoJurisdiccion = search.create({
																  type: "customrecord_l54_jurisdicciones_iibb",
																  filters: filtroJurisdiccion,
																  columns: columnaJurisdiccion
																}).run().getRange({
																  start: 0,
																  end: 1000
																});
															  }
															  let desc = "IIBB";
                                                            let auxiliar = objTipoContriIIBB.filter(function (obj) {
                                                              return (obj.col0 == informacionResultado[i].tipoContribuyenteIIBB)
                                                            })
                                                            let situacionIIBB = "";
                                                            if(auxiliar.length != 0){
                                                              situacionIIBB = auxiliar[0].col1;
                                                            }
															  if ((!isEmpty(situacionIIBB) && (situacionIIBB == 1)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 2)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 4)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 5))) {
																retencionARCIBA.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																let numeroIIBB = "0";
																
																let nroDocumento = "";
																let expRegNumeros = /[^0-9]/gi;
                                                              nroDocumento = informacionResultado[i].numeroDocSujeto;
																  if (situacionIIBB == 1) {
																	// Busco el Numero de IIBB
                                                                numeroIIBB = informacionResultado[i].numeroIIBB;
																	if (!isEmpty(numeroIIBB)) {
																	  numeroIIBB = numeroIIBB.replace(expRegNumeros, "");
																	}
																  } else {
																	if (((situacionIIBB == 2) && !isEmpty(nroDocumento)) || ((situacionIIBB == 5) && !isEmpty(nroDocumento))) {
																	  numeroIIBB = nroDocumento.replace(expRegNumeros, "");
																	}
                                                                }
																/// AQUI PUEDE IR EL CAMBO DE IIBB CODE PARA QUE SE HEREDE DEL CAMPO DE CUIT O CUIT PAIS ORIGEN.
																if (!isEmpty(numeroIIBB)) {
																  retencionARCIBA.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 11);
																  // Busco la Situacion Frente al IVA
																  //var tipoContribuyenteIVA = "";
																  desc = "IVA";
    
																  const situacionIVA = informacionResultado[i].situiacionIVA;
																  if (!isEmpty(situacionIVA)) {
																	retencionARCIBA.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																	// Obtengo el Importe de la Retencion
																	const importeRetencion = informacionResultado[i].importeOperacion;
																	/* if (tipoOperacion == 1) {
																	  importeTotalRetenciones = resultadoPagoProveedor[0].getValue('custbody_l54_importe_total_retencion', null, 'max');
																	} */
																	if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																		/** Modificación Moneda Local 30/04 *
																	  const cantDecImporteNeto = countDecimales(importeRetencion);
																	  const cantDecTipoCambio = countDecimales(tipoCambio);
																	  const cantidadDecimalesFinal = cantDecImporteNeto + cantDecTipoCambio;
																	  const importeRetencionFinal = Math.abs(parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10));*/
																	  //nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'importeRetencionFinal sin redondeo: ' + importeRetencionFinal + '---- baseCalculo sin redondeo: ' + baseCalculo);
																	  log.debug({
																		title: "generarTXTeArciba",
																		details: "importeRetencionFinal sin redondeo: " + importeRetencionFinal + " ---- baseCalculo sin redondeo: " + baseCalculo
																	  });
																	  if (tipoOperacion == 1) {
																		/** Modificación Moneda Local 30/04 **/
																		var cantDecImporteNeto = countDecimales(importeRetencion);
																		var cantDecTipoCambio = countDecimales(tipoCambio);
																		var cantidadDecimalesFinal = cantDecImporteNeto + cantDecTipoCambio;
																		var importeRetencionFinal = Math.abs(parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10));
																
																		//retencionARCIBA.retencion.importeRetencion = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		//retencionARCIBA.retencion.retencionPracticada = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(importeRetencionFinal), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(numberTruncTwoDec(importeRetencionFinal), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																	  } else {
																		//retencionARCIBA.retencion.importeRetencion = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		//retencionARCIBA.retencion.retencionPracticada = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(importeRetencion), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(numberTruncTwoDec(importeRetencion), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																	  }
																	  if (tipoOperacion == 1) {
																		//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat((parseFloat(importeComprobante, 10) - parseFloat(importeTotalRetenciones, 10)), 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		//retencionARCIBA.retencion.importeComprobante = padding_left(Math.abs(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																	  }
																	  else {
																		////----*** JSalazar: 05-03-2019. Tipo de cambio se cambia por el valor de 1 porque ya viene siempre transformado el importe a pesos
																		//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																		retencionARCIBA.retencion.importeComprobante = padding_left(Math.abs(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																		////-----*** Fin JSalazar.
																	  }
																	  // Obtengo el Tipo de Documento del Sujeto Retenido
                                                                    let tipoDocumento = informacionResultado[i].tipoDocSujeto;
																	  if (!isEmpty(tipoDocumento)) {
                                                                      
																		//var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);
                                                                      const resultadoTipoDocumento = objTipoDocumento.filter(function (obj) {
                                                                        return (obj.id == tipoDocumento)
                                                                      })
																		if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
                                                                        tipoDocumento = resultadoTipoDocumento[0].codigo;
																		  if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																			if (((tipoDocumento == 1) && (situacionIIBB == 4)) || ((tipoDocumento == 2) && (situacionIIBB == 4)) || ((tipoDocumento == 3) && (situacionIIBB == 1)) || ((tipoDocumento == 3) && (situacionIIBB == 2)) || ((tipoDocumento == 3) && (situacionIIBB == 4)) || ((tipoDocumento == 3) && (situacionIIBB == 5))) {
																			  retencionARCIBA.sujeto.tipoDocSujeto = padding_left(tipoDocumento, "0", 1);
																			  // Informacion de Beneficiarios del Exterior
																			  // Verifico si el Proveedor tiene
																			  let otrosConceptos = "";
																			  /*var resultadoMinimoNoImp = null;
																			  if (tipoOperacion == 1) {
																			  // En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																			  var filtroMinimoNoImp = [];
																			  filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);
																			  var columnaMinimoNoImp = [];
																			  columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');
																			  resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);
																			  }*/
																			  //if ((!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) || (tipoOperacion == 2)) {
																			  /*if (tipoOperacion == 1) {
																			  //otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																			  // Imp Comprobante Sin Ret IIBB CABA - Imp IVA - Base de Calculo
																			  otrosConceptos = informacionResultado[i].minimoImp;
																			  } else {
																			  // Imp Comprobante Sin Perc IIBB CABA - Imp IVA - Base de Calculo
																			  otrosConceptos = 0;
																			  }*/
																			  /*if (!isEmpty(otrosConceptos)) {
																			  // Obtengo el Importe de Percepcion del Pago
																			  var importePercepcionPago = "";
																			  if (tipoOperacion == 1) {
																			  importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'group');
																			  } else {
																				importePercepcionPago = 0;
																			  }
																			  if (!isEmpty(importePercepcionPago)) {*/
																			  // Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos
																			  //retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10) - parseFloat(otrosConceptos, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																			  // Obtengo el Importe del IVA
																			  //var importeIVAPago = "";
																			  //importeIVAPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_iva', null, 'group');
																			  // Al Ser Orden de Pago el Importe IVA debe ir en 0
																			  let importeIVAPago = 0;
																			  //if (tipoOperacion == 2 && (retencionARCIBA.retencion.letra == 'A' || retencionARCIBA.retencion.letra == 'M')) {
																			  if (tipoOperacion == 2 && (letra == "A" || letra == "M")) {
																				importeIVAPago = "";
                                                                              
                                                                              var resultadoIVA = objPercepciones.filter(function (obj) {
                                                                                return (obj.col0 == informacionResultado[i].refComprobante)
                                                                              })

                                                                              
																				if ((!isEmpty(resultadoIVA) && resultadoIVA.length > 0)) {
                                                                                importeIVAPago = Math.abs(resultadoIVA[0].col1);
																				}
																			  }
																			  if (!isEmpty(importeIVAPago)) {
																				//retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																				////-----** JSalazar: 05-04-2019. El importe IVA ya viene transformado a pesos por lo tanto no se toma en cuenta el tipo de cambio
																				//retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																				retencionARCIBA.sujeto.iva = padding_left(Math.abs(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(1, 10), 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																				////////--** Fin. JSalazar.
																				// Obtengo el Importe de Otros Conceptos
																				otrosConceptos = 0;
																				let otrosConceptos_aux = 0;
																				if (tipoOperacion == 1) {
																				  //otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																				  // Imp Comprobante Sin Ret IIBB CABA - Imp IVA - Base de Calculo
																				  //otrosConceptos = parseFloat(((parseFloat(importeComprobante, 10) - parseFloat(importeTotalRetenciones, 10)) - parseFloat(importeIVAPago, 10) - parseFloat(baseCalculo, 10)), 10);
																				  //otrosConceptos = informacionResultado[i].minimoImp;
																				  otrosConceptos_aux = parseFloat((parseFloat(importeComprobante, 10) - parseFloat(baseCalculo, 10)), 10);
																				  otrosConceptos = padding_left(Math.abs(parseFloat(parseFloat(otrosConceptos_aux, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																				} else {
																				  // Imp Comprobante Sin Perc IIBB CABA - Imp IVA - Base de Calculo
																				  ////----** JSalazar:: 05-04-2019. Se cambia la manera de cálcular el valor de otros conceptos porque los valores se pasaban mal.
																				  otrosConceptos_aux = parseFloat((parseFloat(importeComprobante, 10) - parseFloat(importeIVAPago, 10) - parseFloat(baseCalculo, 10)), 10);
																				  //nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Otros conceptos: ' + otrosConceptos_aux);
																				  log.debug({
																					title: "generarTXTeArciba",
																					details: "Otros conceptos: " + otrosConceptos_aux
																				  });
																				  otrosConceptos = padding_left(Math.abs(parseFloat(parseFloat(otrosConceptos_aux, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
																				  /////---** Fin. JSalazar.
																				}
																				if (parseFloat(otrosConceptos, 10) < 0.00) {
																				  otrosConceptos = parseFloat(0, 10);
																				}
																				//var otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);
																				retencionARCIBA.sujeto.otrosConceptos = otrosConceptos;
																																								// Genero el Importe de Otros Conceptos
																				// Obtengo el Numero de Documento
																				//var nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');
																				if (!isEmpty(nroDocumento)) {
																				  // Formateo el Documento
																				  expRegNumeros = /[^0-9]/gi;
																				  const numeroDocumentoFinal = nroDocumento.replace(expRegNumeros, "");
																				  //nroDocumento = nroDocumento.replace(/-/g, '');
																				  //nroDocumento = nroDocumento.replace(/\./g, '');
																				  // Elimino Blancos
																				  //var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');
																				  /* if (parseFloat(numeroDocumentoFinal) >= 30000000000)
																					retencionARCIBA.sujeto.tipoDocSujeto = '3'; */
																				  retencionARCIBA.sujeto.numeroDocSujeto = padding_left(numeroDocumentoFinal, "0", 11);
																				  // Obtengo la Razon Social
                                                                                let razonSocial = informacionResultado[i].razonSocial;
																				  if (!isEmpty(razonSocial)) {
																					retencionARCIBA.sujeto.razonSocial = padding_right(razonSocial.substring(0, 29), " ", 30);
																					retencionARCIBA.retencion.aceptacion = informacionResultado[i].aceptacion;
																					retencionARCIBA.retencion.fechaAceptacionExpresa = informacionResultado[i].fechaAceptacionExpresa;
																				  } else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Razon Social del " + entidadStr;
																				  }
																				} else {
																				  errorGlobal = true;
																				  descripcionError = "Error Obteniendo Numero de Documento del " + entidadStr;
																				}
																			  } else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Importe IVA de la Transaccion";
																			  }
																			  /*} else {
																			  errorGlobal = true;
																			  descripcionError = "Error Obteniendo Importe Percepciones";
																			  }*/
																			  /*} else {
																			  errorGlobal = true;
																			  descripcionError = "Minimo No Imponible No Configurado";
																			  }*/
																			  /*} else {
																			  errorGlobal = true;
																			  descripcionError = "Error Obteniendo el Minimo No Imponible";
																			  }*/
																			} else {
																			  errorGlobal = true;
																			  descripcionError = "Error Tipo de Documento ARCIBA y Situación IIBB No Configurado Correctamente";
																			}
																		  } else {
																			errorGlobal = true;
																			descripcionError = "Error Tipo de Documento ARCIBA No Configurado Correctamente";
																		  }
																		} else {
																		  errorGlobal = true;
																		  descripcionError = "Error Obteniendo Tipo de Documento";
																		}
																	  } else {
																		errorGlobal = true;
																		descripcionError = "El Sujeto Retenido/Percibido no Posee Tipo de Documento";
																	  }
																	} else {
																	  errorGlobal = true;
																	  descripcionError = "El Importe de Retencion/Percepcion debe ser mayor a 0.00";
																	}
																  } else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo Situacion de " + desc;
																  }
																  /*} else {
																  errorGlobal = true;
																  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																  }*/
																  /*} else {
																  errorGlobal = true;
																  descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																  }*/
																} else {
																  errorGlobal = true;
																  descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido/Percibido";
																}
															  } else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Situacion de " + desc;
															  }
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
															  }*/
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
															  }*/
															  /*} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del " + entidadStr;
															  }*/
															} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion/Percepcion";
														  }
														} else {
														  errorGlobal = true;
														  descripcionError = "Error Obteniendo " + entidadStr;
														}
													  } else {
														errorGlobal = true;
														descripcionError = "Alicuota Invalida";
													  }
													  /*} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
													  }*/
													  /*} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
													  }*/
													} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Numero de Certificado";
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error Formateando la Fecha de " + tipoOperacionStr;
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "Error Obteniendo Fecha De " + tipoOperacionStr;
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Base De Calculo";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo Codigo De Norma";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Codigo de Operacion Invalido";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Codigo de Operacion";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Codigo de Operacion";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo Importe del Comprobante";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la " + tipoOperacionStr;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo Letra del Comprobante";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
							  }
							  /*} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							  }*/
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Formateando la Fecha del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Fecha del Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la " + tipoOperacionStr;
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionARCIBA.sujeto != null) {
				  if (retencionARCIBA.retencion != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					const error = false;
					const descripcionMensaje = "TXT Retenciones/Percepciones Generado Correctamente";
					contenidoTXT += retencionARCIBA.retencion.codigoOperacion + retencionARCIBA.retencion.codigoNorma + retencionARCIBA.retencion.fechaRetencion + retencionARCIBA.retencion.codigoComprobante +
					  retencionARCIBA.retencion.letra + retencionARCIBA.retencion.numeroComprobante + retencionARCIBA.retencion.fechaComprobante + retencionARCIBA.retencion.importeComprobante +
					  retencionARCIBA.retencion.numeroCertificado + retencionARCIBA.sujeto.tipoDocSujeto + retencionARCIBA.sujeto.numeroDocSujeto + retencionARCIBA.sujeto.situacionIIBB +
					  retencionARCIBA.sujeto.numeroIIBB + retencionARCIBA.sujeto.situacionIVA + retencionARCIBA.sujeto.razonSocial + retencionARCIBA.sujeto.otrosConceptos +
					  retencionARCIBA.sujeto.iva + retencionARCIBA.retencion.baseCalculo + retencionARCIBA.retencion.alicuota + retencionARCIBA.retencion.retencionPracticada +
					  retencionARCIBA.retencion.importeRetencion + retencionARCIBA.retencion.aceptacion + retencionARCIBA.retencion.fechaAceptacionExpresa;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Retencion/Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Retenido/Percibido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: descripcionError
				});
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones/Percepciones eARCIBA');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones/Percepciones eARCIBA"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones/Percepciones Correcta - No se Encontraron Retenciones/Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones/Percepciones eARCIBA');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Retenciones/Percepciones eARCIBA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones/Percepciones - Error : Error Obteniendo Retenciones/Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'No se encontraron Percepciones');
			log.debug({
			  title: "generarTXTeArciba",
			  details: "No se encontraron Percepciones"
			});
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTeArciba', 'Error Generando TXT eARCIBA - Error : ' + e.message);
		  log.error({
			title: "generarTXTeArciba",
			details: "Error Generando TXT eARCIBA - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT eARCIBA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionARCIBA = grabarError(true, "Error Generando TXT de Retenciones/Percepciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionARCIBA = grabarError(false, "Generacion de TXT de Retenciones/Percepciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones/Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Finalizacion - Generacion TXT eARCIBA');
		log.debug({
		  title: "generarTXTeArciba",
		  details: "Finalizacion - Generacion TXT eARCIBA"
		});
		retencionARCIBA.contenidoTXT = contenidoTXT;
		return retencionARCIBA;
	  }
	  //[Lista]
	  function generarTXTeArcibaNC(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'Inicio - Generacion TXT eARCIBA Notas de Credito');
		log.debug({
		  title: "generarTXTeArcibaNC",
		  details: "Inicio - Generacion TXT eARCIBA Notas de Credito"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		try {
		  var percepcionARCIBANC = {};
		  percepcionARCIBANC.percepcion = {};
		  percepcionARCIBANC.sujeto = {};
		  percepcionARCIBANC.existenPercepciones = false;
		  percepcionARCIBANC.error = false;
		  percepcionARCIBANC.descripcionError = "";
		  percepcionARCIBANC.procesoEncolado = false;
		  percepcionARCIBANC.idLog = idRegistroLOG;
		  percepcionARCIBANC.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  let iCont = 0;
		  const filtroTXTPercepcionesARCIBA = [];
		  //filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba_nc');
		  const search2 = search.load({
			id: "customsearch_l54_per_arciba_nc",
			type: "transaction" //opc
		  });
		  search2.filters.push(...filtroTXTPercepcionesARCIBA);
		  const searchResults = search2.run();
		  let resultadoTXTPercepcionesARCIBA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
			  else
				resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'INICIO Recorrer Percepciones');
		  log.debug({
			title: "generarTXTeArcibaNC",
			details: "INICIO Recorrer Percepciones"
		  });
		  for (let i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			const result = resultadoTXTPercepcionesARCIBA[i];
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].idInterno = result.getValue({ name: columns[0] });
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].tipoOperacion = result.getValue({ name: columns[1] });
			informacionResultado[indiceArray].numeroComprobante = result.getValue({ name: columns[2] });
			const fechaOperacionAux = result.getValue({ name: columns[3] });
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  //fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.Type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionAux;
			informacionResultado[indiceArray].montoComprobante = result.getValue({ name: columns[4] });
			informacionResultado[indiceArray].numeroCertificado = result.getValue({ name: columns[5] });
			informacionResultado[indiceArray].tipoComprobanteRef = result.getValue({ name: columns[6] });
			informacionResultado[indiceArray].letraComprobanteRef = result.getValue({ name: columns[7] });
			informacionResultado[indiceArray].numeroComprobanteRef = result.getValue({ name: columns[8] });
			informacionResultado[indiceArray].numeroDocCliente = result.getValue({ name: columns[9] });
			informacionResultado[indiceArray].codigoNormaIIBB = result.getValue({ name: columns[10] });
			informacionResultado[indiceArray].fechaPercepcion = result.getValue({ name: columns[11] });
			informacionResultado[indiceArray].importePercepcion = result.getValue({ name: columns[12] });
			informacionResultado[indiceArray].alicuotaPercepcion = result.getValue({ name: columns[13] });
			informacionResultado[indiceArray].tipoTransOrigen = result.getValue({ name: columns[14] });
			//informacionResultado[indiceArray].montoImpManual = result.getValue(columns[15]);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'INICIO Ordenar');
		  log.debug({
			title: "generarTXTeArcibaNC",
			details: "INICIO Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  percepcionARCIBANC.percepcion = {};
			  percepcionARCIBANC.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  if (!isEmpty(informacionResultado[i].idInterno)) {
				refComprobante = informacionResultado[i].idInterno;
				percepcionARCIBANC.percepcion.idInterno = informacionResultado[i].idInterno;
				if (!isEmpty(informacionResultado[i].tipoOperacion)) {
				  percepcionARCIBANC.percepcion.tipoOperacion = informacionResultado[i].tipoOperacion;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					percepcionARCIBANC.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].fechaComprobante)) {
					  percepcionARCIBANC.percepcion.fechaComprobante = informacionResultado[i].fechaComprobante;
					  if (!isEmpty(informacionResultado[i].montoComprobante)) {
						percepcionARCIBANC.percepcion.montoComprobante = informacionResultado[i].montoComprobante;
						if (!isEmpty(informacionResultado[i].numeroCertificado)) {
						  percepcionARCIBANC.percepcion.numeroCertificado = informacionResultado[i].numeroCertificado;
						  if (!isEmpty(informacionResultado[i].tipoComprobanteRef)) {
							percepcionARCIBANC.percepcion.tipoComprobanteRef = informacionResultado[i].tipoComprobanteRef;
							if ((!isEmpty(informacionResultado[i].letraComprobanteRef) && (informacionResultado[i].tipoTransOrigen = "invoice")) || (isEmpty(informacionResultado[i].letraComprobanteRef) && (informacionResultado[i].tipoTransOrigen != "invoice"))) {
							  percepcionARCIBANC.percepcion.letraComprobanteRef = informacionResultado[i].letraComprobanteRef;
							  if (!isEmpty(informacionResultado[i].numeroComprobanteRef)) {
								percepcionARCIBANC.percepcion.numeroComprobanteRef = informacionResultado[i].numeroComprobanteRef;
								if (!isEmpty(informacionResultado[i].numeroDocCliente)) {
								  percepcionARCIBANC.sujeto.numeroDocCliente = informacionResultado[i].numeroDocCliente;
								  if (!isEmpty(informacionResultado[i].codigoNormaIIBB)) {
									percepcionARCIBANC.percepcion.codigoNormaIIBB = informacionResultado[i].codigoNormaIIBB;
									if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
									  percepcionARCIBANC.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
									  if (!isEmpty(informacionResultado[i].importePercepcion)) {
										percepcionARCIBANC.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
										if (!isEmpty(informacionResultado[i].alicuotaPercepcion)) {
										  percepcionARCIBANC.percepcion.alicuotaPercepcion = informacionResultado[i].alicuotaPercepcion;
										}
										else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo la Alicuota de la Percepcion";
										}
									  }
									  else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto de la Percepcion";
									  }
									}
									else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo la Fecha del Comprobante Origen de la Nota de Credito";
									}
								  }
								  else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Codigo de Norma de IIBB";
								  }
								}
								else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el Numero de Documento del Sujeto Percibido";
								}
							  }
							  else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Numero del Comprobante Origen de la Nota de Credito";
							  }
							}
							else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Letra del Comprobante Origen de la Nota de Credito";
							}
						  }
						  else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Tipo de Comprobante Origen de la Nota de Credito";
						  }
						}
						else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Numero del Comprobante";
						}
					  }
					  else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Monto del Comprobante";
					  }
					}
					else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha del Comprobante";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de la Nota de Credito";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Tipo de Operacion";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionARCIBANC.sujeto != null) {
				  if (percepcionARCIBANC.percepcion != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					const error = false;
					const descripcionMensaje = "TXT Percepciones Generado Correctamente";
					contenidoTXT += percepcionARCIBANC.percepcion.tipoOperacion + percepcionARCIBANC.percepcion.numeroComprobante + percepcionARCIBANC.percepcion.fechaComprobante + percepcionARCIBANC.percepcion.montoComprobante + percepcionARCIBANC.percepcion.numeroCertificado +
					  percepcionARCIBANC.percepcion.tipoComprobanteRef + percepcionARCIBANC.percepcion.letraComprobanteRef + percepcionARCIBANC.percepcion.numeroComprobanteRef +
					  percepcionARCIBANC.sujeto.numeroDocCliente + percepcionARCIBANC.percepcion.codigoNormaIIBB + percepcionARCIBANC.percepcion.fechaPercepcion + percepcionARCIBANC.percepcion.importePercepcion +
					  percepcionARCIBANC.percepcion.alicuotaPercepcion;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones eARCIBA Notas de Credito');
				log.debug({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones eARCIBA Notas de Credito"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT /Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", null, refComprobante, subsidiaria);
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  } else {
			//nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'No se encontraron Percepciones');
			log.debug({
			  title: "generarTXTeArcibaNC",
			  details: "No se encontraron Percepciones"
			});
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTeArcibaNC', 'Error Generando TXT eARCIBA  Notas de Credito - Error : ' + e.message);
		  log.error({
			title: "generarTXTeArcibaNC",
			details: "Error Generando TXT eARCIBA  Notas de Credito - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT eARCIBA  Notas de Credito - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcionARCIBANC = grabarError(true, "Error Generando TXT de Percepciones", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionARCIBANC = grabarError(false, "Generacion de TXT de Percepciones Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'Finalizacion - Generacion TXT eARCIBA Notas de Credito');
		log.debug({
		  title: "generarTXTeArcibaNC",
		  details: "Finalizacion - Generacion TXT eARCIBA Notas de Credito"
		});
		percepcionARCIBANC.contenidoTXT = contenidoTXT;
		return percepcionARCIBANC;
	  }
	  //[Lista]
	  function generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'Inicio - Generacion TXT eSICOL Percepciones Compras');
		log.debug({
		  title: "generarTXTeSICOLPercCompras",
		  details: "Inicio - Generacion TXT eSICOL Percepciones Compras"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		try {
		  var percepcioneSICOLcompras = {};
		  percepcioneSICOLcompras.percepcion = {};
		  percepcioneSICOLcompras.sujeto = {};
		  percepcioneSICOLcompras.existenPercepciones = false;
		  percepcioneSICOLcompras.error = false;
		  percepcioneSICOLcompras.descripcionError = "";
		  percepcioneSICOLcompras.procesoEncolado = false;
		  percepcioneSICOLcompras.idLog = idRegistroLOG;
		  percepcioneSICOLcompras.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  let iCont = 0;
		  const filtroTXTPercepcioneseSICOL = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTPercepcioneseSICOL[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTPercepcioneseSICOL[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria)) {
			// nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'Ingreso en condición isEmpty(subsidiaria): ' + isEmpty(subsidiaria));
			//filtroTXTPercepcioneseSICOL[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTPercepcioneseSICOL[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_esicol_bill');
		  const search2 = search.load({
			id: "customsearch_l54_per_esicol_bill",
			type: "transaction" //opc
		  });
		  search2.filters.push(...filtroTXTPercepcioneseSICOL);
		  const searchResults = search2.run();
		  let resultadoTXTPercepcioneseSICOL = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTPercepcioneseSICOL = resultado; //Primera ve inicializa
			  else
				resultadoTXTPercepcioneseSICOL = resultadoTXTPercepcioneseSICOL.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'INICIO Recorrer Percepciones');
		  log.debug({
			title: "generarTXTeSICOLPercCompras",
			details: "INICIO Recorrer Percepciones"
		  });
		  for (let i = 0; resultadoTXTPercepcioneseSICOL != null && i < resultadoTXTPercepcioneseSICOL.length; i++) {
			const result = resultadoTXTPercepcioneseSICOL[i];
			//var columns = result.getAllColumns();
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].idInterno = result.getValue({ name: columns[0] });
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue({ name: columns[1] });
			informacionResultado[indiceArray].numeroComprobante = result.getValue({ name: columns[2] });
			informacionResultado[indiceArray].fechaPercepcion = result.getValue({ name: columns[3] });
			informacionResultado[indiceArray].nroSucursal = result.getValue({ name: columns[4] });
			informacionResultado[indiceArray].montoImpManual = result.getValue({ name: columns[5] });
			informacionResultado[indiceArray].importePercepcion = result.getValue({ name: columns[6] });
			informacionResultado[indiceArray].tipoComprobante = result.getValue({ name: columns[7] });
			informacionResultado[indiceArray].letraComprobante = result.getValue({ name: columns[8] });
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXT_eSICOL Percepciones Compras', 'INICIO Ordenar');
		  log.debug({
			title: "generarTXT_eSICOL Percepciones Compras",
			details: "INICIO Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  percepcioneSICOLcompras.percepcion = {};
			  percepcioneSICOLcompras.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  if (!isEmpty(informacionResultado[i].idInterno)) {
				refComprobante = informacionResultado[i].idInterno;
				percepcioneSICOLcompras.percepcion.idInterno = informacionResultado[i].idInterno;
				if (!isEmpty(informacionResultado[i].cuit)) {
				  percepcioneSICOLcompras.percepcion.cuit = informacionResultado[i].cuit;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					percepcioneSICOLcompras.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
					  percepcioneSICOLcompras.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
					  if (informacionResultado[i].nroSucursal) {
						percepcioneSICOLcompras.percepcion.nroSucursal = informacionResultado[i].nroSucursal;
						if (!isEmpty(informacionResultado[i].montoImpManual)) {
						  percepcioneSICOLcompras.percepcion.montoImpManual = informacionResultado[i].montoImpManual;
						  if (!isEmpty(informacionResultado[i].importePercepcion)) {
							percepcioneSICOLcompras.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
							if (!isEmpty(informacionResultado[i].tipoComprobante)) {
							  percepcioneSICOLcompras.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
							  if (!isEmpty(informacionResultado[i].letraComprobante)) {
								percepcioneSICOLcompras.percepcion.letraComprobante = informacionResultado[i].letraComprobante;
							  }
							  else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Letra del Comprobante de la Percepción";
							  }
							}
							else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Tipo de Comprobante del Comprobante";
							}
						  }
						  else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Importe de la Percepción";
						  }
						}
						else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Monto Base de la Percepción";
						}
					  }
					  else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Sucursal de la transacción";
					  }
					}
					else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha de la Percepción";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de la transacción";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT de la transacción";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepción";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcioneSICOLcompras.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcioneSICOLcompras.percepcion.cuit + percepcioneSICOLcompras.percepcion.numeroComprobante +
					percepcioneSICOLcompras.percepcion.fechaPercepcion + percepcioneSICOLcompras.percepcion.nroSucursal +
					percepcioneSICOLcompras.percepcion.montoImpManual + percepcioneSICOLcompras.percepcion.importePercepcion +
					percepcioneSICOLcompras.percepcion.tipoComprobante + percepcioneSICOLcompras.percepcion.letraComprobante;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones Compras eSICOL - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras eSICOL');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones Compras eSICOL"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT /Percepciones Compras eSICOL - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Compras eSICOL Correcta - No se Encontraron Percepciones", null, refComprobante, subsidiaria);
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras eSICOL - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT Percepciones Compras eSICOL - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Percepciones Compras eSICOL - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcioneSICOLcompras = grabarError(true, "Error Generando TXT de Percepciones Percepciones Compras eSICOL", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcioneSICOLcompras = grabarError(false, "Generacion de TXT de Percepciones Compras eSICOL Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT Percepciones Compras eSICOL');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT Percepciones Compras eSICOL"
		});
		percepcioneSICOLcompras.contenidoTXT = contenidoTXT;
		return percepcioneSICOLcompras;
	  }
   
	  function generarTXTCatamarcaPercSufridas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug("generarTXTcatamARCAPercSufridas", "Inicio - Generacion TXT Catamarca Percepciones Sufridas");
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		let percepcioneARCAcompras = {};
		try {
		  const catamARCAPercSufridas = {};
		  catamARCAPercSufridas.percepcion = {};
		  catamARCAPercSufridas.sujeto = {};
		  catamARCAPercSufridas.existenPercepciones = false;
		  catamARCAPercSufridas.error = false;
		  catamARCAPercSufridas.descripcionError = "";
		  catamARCAPercSufridas.procesoEncolado = false;
		  catamARCAPercSufridas.idLog = idRegistroLOG;
		  catamARCAPercSufridas.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  let iCont = 0;
		  const filtroTXTPercepcioneseARCA = new Array();
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//Almacenar las fechas de facturas/notas de crédito que estén dentro del rango (fDesd - fHasta)
			filtroTXTPercepcioneseARCA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria)) {
			filtroTXTPercepcioneseARCA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		  //Cargar la búsqueda guardada en NetSuite
		  // const searchLoad = new nlapiLoadSearch("transaction", "customsearch_l54_per_compr_catamarca");
		  const searchLoad = search.load({
			id: "customsearch_l54_per_compr_catamarca",
			type: "transaction"
		  });
		  searchLoad.filters.push(...filtroTXTPercepcioneseARCA);
   
		  const searchResults = searchLoad.run().getRange({ start: 0, end: 1000 });
   
		  const informacionResultado = new Array(); //establecer un objeto por cada resultado
   
		  log.debug("generarTXTcatamARCAPercSufridas", "INICIO Recorrer Percepciones");
		  for (let i = 0; i < searchResults.length; i++) {
			const result = searchResults[i];
			const columns = result.columns;
			informacionResultado[i] = {};
			informacionResultado[i].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[i].idInterno;
			//cuit agente de percepción (1)
			informacionResultado[i].cuit = result.getValue(columns[1]);
			//(2) Número de IIBB
			informacionResultado[i].ingresosBrutos = result.getValue(columns[2]);
			//(3) Tipo de comprobante
			informacionResultado[i].tipoComprobante = result.getValue(columns[3]);
			//(4) letra Comprobante
			informacionResultado[i].letraComprobante = result.getValue(columns[4]);
			//(5)Fecha Percepción
			informacionResultado[i].fechaPercepcion = result.getValue(columns[5]);
			//(6) Sucursal
			informacionResultado[i].nroSucursal = result.getValue(columns[6]);
			//(7) Número Emisión / Número Comprobante
			informacionResultado[i].numeroComprobante = result.getValue(columns[7]);
			//(8) importe Percibido - Anulado
			informacionResultado[i].importePercepcion = result.getValue(columns[8]);
			//indiceArray = parseInt(i, 10) + parseInt(1, 10);
			//informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[3]);
			//informacionResultado[indiceArray].nroSucursal = result.getValue(columns[4]);
			//[Pendiente]
			//informacionResultado[indiceArray].montoImpManual = result.getValue(columns[5]);
			//informacionResultado[indiceArray].importePercepcion = result.getValue(columns[6]);
			//informacionResultado[indiceArray].tipoComprobante = result.getValue(columns[7]);
			//informacionResultado[indiceArray].letraComprobante = result.getValue(columns[8]);
		  }
		  log.debug("generarTXTcatamARCAPercSufridas", "INICIO Ordenar");
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  percepcioneARCAcompras.percepcion = {};
			  percepcioneARCAcompras.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  if (!isEmpty(informacionResultado[i].idInterno)) {
				refComprobante = informacionResultado[i].idInterno;
				percepcioneARCAcompras.percepcion.idInterno = informacionResultado[i].idInterno;
				if (!isEmpty(informacionResultado[i].cuit)) {
				  percepcioneARCAcompras.percepcion.cuit = informacionResultado[i].cuit;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					percepcioneARCAcompras.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
					  percepcioneARCAcompras.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
					  if (informacionResultado[i].nroSucursal) {
						percepcioneARCAcompras.percepcion.nroSucursal = informacionResultado[i].nroSucursal;
						if (!isEmpty(informacionResultado[i].ingresosBrutos)) {
						  percepcioneARCAcompras.percepcion.ingresosBrutos = informacionResultado[i].ingresosBrutos;
						  if (!isEmpty(informacionResultado[i].importePercepcion)) {
							percepcioneARCAcompras.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
							if (!isEmpty(informacionResultado[i].tipoComprobante)) {
							  percepcioneARCAcompras.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
							  if (!isEmpty(informacionResultado[i].letraComprobante)) {
								percepcioneARCAcompras.percepcion.letraComprobante = informacionResultado[i].letraComprobante;
							  }
							  else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Letra del Comprobante de la Percepción";
							  }
							}
							else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Tipo de Comprobante del Comprobante";
							}
						  }
						  else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Importe de la Percepción";
						  }
						}
						else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Número Ingresos Brutos de la Percepción";
						}
					  }
					  else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Sucursal de la transacción";
					  }
					}
					else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha de la Percepción";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de la transacción";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT de la transacción";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepción";
			  }
			  // Si no devuelve ni null nio vacío en ninún campo Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcioneARCAcompras.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcioneARCAcompras.percepcion.cuit + percepcioneARCAcompras.percepcion.ingresosBrutos + percepcioneARCAcompras.percepcion.tipoComprobante +
					percepcioneARCAcompras.percepcion.letraComprobante + percepcioneARCAcompras.percepcion.fechaPercepcion +
					percepcioneARCAcompras.percepcion.nroSucursal + percepcioneARCAcompras.percepcion.numeroComprobante +
					//percepcioneARCAcompras.percepcion.montoImpManual 
					percepcioneARCAcompras.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones Compras ARCA - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error("Proceso Generacion TXT", "Error Generando TXT Percepciones Compras ARCA");
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT /Percepciones Compras ARCA - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000); // ya no se usa en V2
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Compras ARCA Correcta - No se Encontraron Percepciones", null, refComprobante, subsidiaria);
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  // nlapiLogExecution("ERROR", "Proceso Generacion TXT", "Error Generando TXT Percepciones Compras ARCA - Error : " + e.message);
		  log.error("Proceso Generacion TXT", "Error Generando TXT Percepciones Compras ARCA - Error : " + e.message);
		  log.error("error object", JSON.stringify(e));
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Percepciones Compras ARCA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcioneARCAcompras = grabarError(true, "Error Generando TXT de Percepciones Percepciones Compras ARCA", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcioneARCAcompras = grabarError(false, "Generacion de TXT de Percepciones Compras ARCA Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug("Proceso Generacion TXT", "Finalizacion - Generacion TXT Percepciones Compras ARCA");
		percepcioneARCAcompras.contenidoTXT = contenidoTXT;
		return percepcioneARCAcompras;
	  }
   
	  //[Lista]
	  function generarTXTeSICOLRetCobranzas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT eSICOL Retenciones Cobranzas');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT eSICOL Retenciones Cobranzas"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Retenciones Cobranzas eSICOL ";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		try {
		  var retencioneseSICOLcobranzas = {};
		  retencioneseSICOLcobranzas.retencion = {};
		  retencioneseSICOLcobranzas.sujeto = {};
		  retencioneseSICOLcobranzas.existenRetenciones = false;
		  retencioneseSICOLcobranzas.error = false;
		  retencioneseSICOLcobranzas.descripcionError = "";
		  retencioneseSICOLcobranzas.procesoEncolado = false;
		  retencioneseSICOLcobranzas.idLog = idRegistroLOG;
		  retencioneseSICOLcobranzas.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  let iCont = 0;
		  const filtroTXTRetencioneseSICOL = [];
		  //filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTRetencioneseSICOL[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTRetencioneseSICOL[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_esicol_cobranzas');
		  const search2 = search.load({
			id: "customsearch_l54_ret_esicol_cobranzas",
			type: "transaction" //opc
		  });
		  //search.addFilters(filtroTXTRetencioneseSICOL);
		  search2.filters.push(...filtroTXTRetencioneseSICOL);
		  const searchResults = search2.run();
		  let resultadoTXTRetencioneseSICOL = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencioneseSICOL = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencioneseSICOL = resultadoTXTRetencioneseSICOL.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzas', 'INICIO Recorrer Retenciones Cobranzas');
		  log.debug({
			title: "generarTXTeSICOLRetCobranzas",
			details: "INICIO Recorrer Retenciones Cobranzas"
		  });
		  for (let i = 0; resultadoTXTRetencioneseSICOL != null && i < resultadoTXTRetencioneseSICOL.length; i++) {
			const result = resultadoTXTRetencioneseSICOL[i];
			//var columns = result.getAllColumns();
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].idInterno = result.getValue({ name: columns[0] });
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue({ name: columns[1] });
			informacionResultado[indiceArray].fechaPercepcion = result.getValue({ name: columns[2] });
			informacionResultado[indiceArray].numeroComprobante = result.getValue({ name: columns[3] });
			informacionResultado[indiceArray].montoImpManual = result.getValue({ name: columns[4] });
			informacionResultado[indiceArray].importePercepcion = result.getValue({ name: columns[5] });
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzas', 'INICIO Ordenar');
		  log.debug({
			title: "generarTXTeSICOLRetCobranzas",
			details: "INICIO Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  retencioneseSICOLcobranzas.retencion = {};
			  retencioneseSICOLcobranzas.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  if (!isEmpty(informacionResultado[i].idInterno)) {
				refComprobante = informacionResultado[i].idInterno;
				retencioneseSICOLcobranzas.retencion.idInterno = informacionResultado[i].idInterno;
				if (!isEmpty(informacionResultado[i].cuit)) {
				  retencioneseSICOLcobranzas.retencion.cuit = informacionResultado[i].cuit;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					retencioneseSICOLcobranzas.retencion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
					  retencioneseSICOLcobranzas.retencion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
					  if (!isEmpty(informacionResultado[i].montoImpManual)) {
						retencioneseSICOLcobranzas.retencion.montoImpManual = informacionResultado[i].montoImpManual;
						if (!isEmpty(informacionResultado[i].importePercepcion)) {
						  retencioneseSICOLcobranzas.retencion.importePercepcion = informacionResultado[i].importePercepcion;
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Importe de la Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Monto Base de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha de la Retención";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de la transacción";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT de la transacción";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retención";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencioneseSICOLcobranzas.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += retencioneseSICOLcobranzas.retencion.cuit + retencioneseSICOLcobranzas.retencion.fechaPercepcion +
					retencioneseSICOLcobranzas.retencion.numeroComprobante + retencioneseSICOLcobranzas.retencion.montoImpManual +
					retencioneseSICOLcobranzas.retencion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo información de la Retención";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones Cobranzas eSICOL - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones Cobranzas eSICOL');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones Cobranzas eSICOL"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT /Retenciones Cobranzas eSICOL - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Cobranzas eSICOL Correcta - No se Encontraron Retenciones", null, refComprobante, subsidiaria);
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones Cobranzas eSICOL - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT Retenciones Cobranzas eSICOL - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Retenciones Cobranzas eSICOL - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencioneseSICOLcobranzas = grabarError(true, "Error Generando TXT de Retenciones Cobranzas eSICOL", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencioneseSICOLcobranzas = grabarError(false, "Generacion de TXT de Retenciones Cobranzas eSICOL Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Cobranzas Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT Retenciones Cobranzas eSICOL');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT Retenciones Cobranzas eSICOL"
		});
		retencioneseSICOLcobranzas.contenidoTXT = contenidoTXT;
		return retencioneseSICOLcobranzas;
	  }
	  //[Lista]
	  function generarTXTSiprib(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIPRIB');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIPRIB"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let tipoComprobanteNS = "";
		let contenidoTXT = "";
		try {
		  var retencionSIPRIB = {};
		  retencionSIPRIB.retencion = {};
		  retencionSIPRIB.sujeto = {};
		  retencionSIPRIB.existenRetenciones = false;
		  retencionSIPRIB.error = false;
		  retencionSIPRIB.descripcionError = "";
		  retencionSIPRIB.procesoEncolado = false;
		  retencionSIPRIB.idLog = idRegistroLOG;
		  retencionSIPRIB.contenidoTXT = "";
		  // Grabo Registro de TXT
		  const estadoGeneracionTXT = null;
		  const filtro = [];
		  let i = 0;
		  //if (!isEmpty(periodo))
		  //filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //////////////
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_siprib');
		  const search2 = search.load({
			id: "customsearch_l54_ret_siprib",
			type: "customrecord_l54_retencion" //opc
		  });
		  search2.filters.push(...filtro);
		  const searchResults = search2.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_SIPRIB",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);
			log.debug({
			  title: "generarTXT_SIPRIB - Retenciones",
			  details: "Cantidad Retenciones: " + completeResultSet.length
			});
			let errorSubsidiaria = false;
			const arraySubsidiaria = [];
			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
			  const numeroSubsidiaria = -1;
			  retencionSIPRIB.retencion = {};
			  retencionSIPRIB.sujeto = {};
			  const resultadoTXTRetencionesSIPRIB = completeResultSet[i];
			  const columnasSavedSearchRetSIPRIB = resultadoTXTRetencionesSIPRIB.columns;
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idRetencionNetSuite = resultadoTXTRetencionesSIPRIB.getValue({ name: "internalid" });
			  var refComprobante = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			  //var subsidiaria = null;
			  const subsidiariaStr = "";
			  const empresaOneWorld = false;
			  let jurisdiccion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_jurisdiccion" });
			  /*empresaOneWorld = esOneworld();
			  if (empresaOneWorld) {
			  subsidiaria = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_subsidiaria');
			  numeroSubsidiaria = subsidiaria;
			  subsidiariaStr = resultadoTXTRetencionesSIPRIB.getText('custrecord_l54_ret_subsidiaria')
			  if (isEmpty(subsidiaria))
			  subsidiaria = null;
			  }*/
			  if (empresaOneWorld == false || (empresaOneWorld == true && !isEmpty(subsidiaria))) {
				// Si la configuracion de la Subsidiaria no se verifico
				if (arraySubsidiaria.indexOf(numeroSubsidiaria) == -1) {
				  if (!isEmpty(jurisdiccion)) {
					// Obtengo el Art/Inc de Retencion de la Conf de la Empresa
					const filtroEmpresa = [];
					//filtroEmpresa[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
					filtroEmpresa[0] = search.createFilter({
					  name: "isinactive",
					  operator: search.Operator.IS,
					  values: false
					});
					if (empresaOneWorld == true && !isEmpty(subsidiaria))
					  //filtroEmpresa[1] = new nlobjSearchFilter('custrecord_l54_subsidiaria', null, 'is', subsidiaria);
					  filtroEmpresa[1] = search.createFilter({
						name: "custrecord_l54_subsidiaria",
						operator: search.Operator.IS,
						values: subsidiaria
					  });
					const columnaEmpresa = [];
					//columnaEmpresa[0] = new nlobjSearchColumn('custrecord_l54_art_ret_siprib');
					columnaEmpresa[0] = search.createColumn({
					  name: "custrecord_l54_art_ret_siprib"
					});
					//var resultadoEmpresa = new nlapiSearchRecord('customrecord_l54_datos_impositivos_emp', null, filtroEmpresa, columnaEmpresa);
					const resultadoEmpresa = search.create({
					  type: "customrecord_l54_datos_impositivos_emp",
					  filters: filtroEmpresa,
					  columns: columnaEmpresa
					}).run().getRange({
					  start: 0,
					  end: 1000
					});
					if (!isEmpty(resultadoEmpresa) && resultadoEmpresa.length > 0) {
					  const artRetencion = resultadoEmpresa[0].getValue({ name: "custrecord_l54_art_ret_siprib" });
					  if (!isEmpty(artRetencion)) {
						// Obtengo el Codigo del Articulo de Retencion
						const filtroArtRet = [];
						//filtroArtRet[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
						filtroArtRet[0] = search.createFilter({
						  name: "isinactive",
						  operator: search.Operator.IS,
						  values: false
						});
						//filtroArtRet[1] = new nlobjSearchFilter('internalid', null, 'is', artRetencion);
						filtroArtRet[1] = search.createFilter({
						  name: "internalid",
						  operator: search.Operator.IS,
						  values: artRetencion
						});
						//filtroArtRet[2] = new nlobjSearchFilter('custrecord_l54_codigos_art_siprib_tipo', null, 'is', tipoOperacion);
						filtroArtRet[2] = search.createFilter({
						  name: "custrecord_l54_codigos_art_siprib_tipo",
						  operator: search.Operator.IS,
						  values: tipoOperacion
						});
						//filtroArtRet[3] = new nlobjSearchFilter('custrecord_l54_codigos_art_siprib_jur', null, 'is', jurisdiccion);
						filtroArtRet[3] = search.createFilter({
						  name: "custrecord_l54_codigos_art_siprib_jur",
						  operator: search.Operator.IS,
						  values: jurisdiccion
						});
						const columnaArtRet = [];
						//columnaArtRet[0] = new nlobjSearchColumn('custrecord_l54_codigos_art_siprib_codigo');
						columnaArtRet[0] = search.createColumn({
						  name: "custrecord_l54_codigos_art_siprib_codigo"
						});
						//var resultadoArtRet = new nlapiSearchRecord('customrecord_l54_codigos_art_siprib', null, filtroArtRet, columnaArtRet);
						const resultadoArtRet = search.create({
						  type: "customrecord_l54_codigos_art_siprib",
						  filters: filtroArtRet,
						  columns: columnaArtRet
						}).run().getRange({
						  start: 0,
						  end: 1000
						});
						if (!isEmpty(resultadoArtRet) && resultadoArtRet.length > 0) {
						  const codigoArtRet = resultadoArtRet[0].getValue({ name: "custrecord_l54_codigos_art_siprib_codigo" });
						  if (!isEmpty(codigoArtRet)) {
							retencionSIPRIB.retencion.artRetencion = codigoArtRet;
							//
							if (!isEmpty(refComprobante)) {
							  const codigoComprobante = obtenerCodigoComprobante(refComprobante, "siprib", subsidiaria);
							  if (!isEmpty(codigoComprobante)) {
								retencionSIPRIB.retencion.codigoComprobante = padding_left(codigoComprobante, "0", 2);
								// Obtengo el tipo de Comprobante netsuite
								const filtroComprobanteNS = [];
								//filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
								filtroComprobanteNS[0] = search.createFilter({
								  name: "internalid",
								  operator: search.Operator.IS,
								  values: refComprobante
								});
								const columnaComprobanteNS = [];
								//columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');
								columnaComprobanteNS[0] = search.createColumn({
								  name: "recordtype"
								});
								//var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);
								const resultadoComprobanteNS = search.create({
								  type: "transaction",
								  filters: filtroComprobanteNS,
								  columns: columnaComprobanteNS
								}).run().getRange({
								  start: 0,
								  end: 1000
								});
								if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {
								  tipoComprobanteNS = resultadoComprobanteNS[0].getValue({ name: "recordtype" });
								  if (!isEmpty(tipoComprobanteNS)) {
									// Obtengo Informacion Adicional del Pago a Proveedor
   
									//filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);
									const filtroPagoProveedor = search.createFilter({
									  name: "internalid",
									  operator: search.Operator.IS,
									  values: refComprobante
									});
									/* var columnaPagoProveedor = [];
									columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
									columnaPagoProveedor[1] = new nlobjSearchColumn('total');
									columnaPagoProveedor[2] = new nlobjSearchColumn('custbody_l54_importe_iva');
									columnaPagoProveedor[3] = new nlobjSearchColumn('custbody_l54_importe_percepciones');
									columnaPagoProveedor[4] = new nlobjSearchColumn('subsidiary');
									var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
									//var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);
									// var resultadoPagoProveedor = search.create({
									// 	type: tipoComprobanteNS,
									// 	filters: filtroPagoProveedor,
									// 	columns: columns,
									// 	id: 'customsearch_l54_imp_pagos_prov_gen_txt'
									// }).run().getRange({
									// 	start: 0,
									// 	end: 1000
									// });
									const SSresultadoPagoProveedor = search.load({
									  id: "customsearch_l54_imp_pagos_prov_gen_txt"
									});
									SSresultadoPagoProveedor.filters.push(filtroPagoProveedor);
									const resultSet = SSresultadoPagoProveedor.run();
									const resultadoPagoProveedor = resultSet.getRange({
									  start: 0,
									  end: 1000
									});
									if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
									  const columnasResultadoPagoProveedor = resultadoPagoProveedor[0].columns;
									  // Obtengo la Fecha de Emision del Comprobante
									  // var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
									  const fecha = resultadoPagoProveedor[0].getValue({ name: columnasResultadoPagoProveedor[1] });
									  if (!isEmpty(fecha)) {
										// Formateo la Fecha
										//var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
										const fechaDate = format.parse({
										  value: fecha,
										  type: format.Type.DATE
										});
										if (!isEmpty(fechaDate)) {
										  // Obtengo las Componentes de la Fecha
										  const dia = fechaDate.getDate();
										  const mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
										  const anio = fechaDate.getFullYear();
										  const fechaComprobante = padding_left(dia, "0", 2) + "/" + padding_left(mes, "0", 2) + "/" + anio;
										  retencionSIPRIB.retencion.fechaComprobante = fechaComprobante;
										  // Obtengo el Numero del Comprobante
										  const numerador = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
										  if (!isEmpty(numerador)) {
											// Tomo el Numero, Punto de Venta y Letra
											const numeroComprobante = numerador.toString().substr(-8);
											// Tomo el Punto de Venta
											const puntoVenta = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
											// Tomo la Latra del Comprobante
											const letra = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_let_pago_prov" });
											if (!isEmpty(puntoVenta)) {
											  if (!isEmpty(numeroComprobante)) {
												const numCompFinal = puntoVenta + numeroComprobante;
												retencionSIPRIB.retencion.numeroComprobante = padding_right(numCompFinal, " ", 16);
												if (!isEmpty(letra) || (isEmpty(letra) && retencionSIPRIB.retencion.codigoComprobante != "01" && retencionSIPRIB.retencion.codigoComprobante != "06")) {
												  retencionSIPRIB.retencion.letraComprobante = padding_right(letra, " ", 1);
												  // Obtengo Tipo de Cambio de la Retencion
												  const tipoCambio = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_tipo_cambio" });
												  if (!isEmpty(tipoCambio)) {
													// Obtengo el Importe del Comprobante
													// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
													const importeComprobante = resultadoPagoProveedor[0].getValue({ name: columnasResultadoPagoProveedor[7] });
													if (!isEmpty(importeComprobante) && !isNaN(importeComprobante) && parseFloat(importeComprobante, 10) > 0.00) {
													  // retencionSIPRIB.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
													  retencionSIPRIB.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
													  // Obtengo el Codigo de Operacion
													  if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
														const filtroTipoOperacion = [];
														//filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);
														filtroTipoOperacion[0] = search.createFilter({
														  name: "internalid",
														  operator: search.Operator.IS,
														  values: tipoOperacion
														});
														const columnaTipoOperacion = [];
														//columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');
														columnaTipoOperacion[0] = search.createColumn({
														  name: "custrecord_l54_tipo_op_codigo"
														});
														//var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);
														const resultadoTipoOperacion = search.create({
														  type: "customrecord_l54_tipo_operacion",
														  filters: filtroTipoOperacion,
														  columns: columnaTipoOperacion
														}).run().getRange({
														  start: 0,
														  end: 1000
														});
														if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {
														  const codigoOperacion = resultadoTipoOperacion[0].getValue({ name: "custrecord_l54_tipo_op_codigo" });
														  if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
															retencionSIPRIB.retencion.codigoOperacion = codigoOperacion;
															/*
															// Obtengo el Codigo de Norma
															//var codigoNorma = '016'; // RIESGO FISCAL
															var codigoNorma = '';
															codigoNorma = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_ret_ref_norma');
															if (!isEmpty(codigoNorma)) {
															retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, '0', 3);*/
															// Obtengo la Base de Calculo
															//var baseCalculo = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_base_calculo_imp'); //custrecord_l54_ret_base_calculo_imp
															const baseCalculo = resultadoTXTRetencionesSIPRIB.getValue({ name: columnasSavedSearchRetSIPRIB[36] }); //le asignó Monto Imp Ret Manual
															if (!isEmpty(baseCalculo)) {
															  // retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
															  retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
															  // Obtengo Fecha de Retencion
															  const fechaRetencion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_fecha" });
															  if (!isEmpty(fechaRetencion)) {
																// Formateo la Fecha
																//var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																const fechaRetencionDate = format.parse({
																  value: fechaRetencion,
																  type: format.Type.DATE
																});
																if (!isEmpty(fechaRetencionDate)) {
																  // Obtengo las Componentes de la Fecha
																  const diaRetencion = fechaRetencionDate.getDate();
																  const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																  const anioRetencion = fechaRetencionDate.getFullYear();
																  const fechaRetencionFinal = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
																  retencionSIPRIB.retencion.fechaRetencion = fechaRetencionFinal;
																  // Obtengo el Numero de Certificado
																  let numeroCertificado = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_numerador" });
																  numeroCertificado = numeroCertificado.toString().substr(-8);
																  numeroCertificado = puntoVenta + numeroCertificado;
																  if (!isEmpty(numeroCertificado)) {
																	if (numeroCertificado.length <= 12) {
																	  retencionSIPRIB.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 12);
																	  // Obtengo la Alicuota
																	  // Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
																	  const idInternoParametrizacionRetencion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_cod_retencion" });
																	  if (!isEmpty(idInternoParametrizacionRetencion)) {
																		/*var filtroAlicuota = [];
																		filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);
																		var columnaAlicuota = [];
																		columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');
																		//columnaAlicuota[1] = new nlobjSearchColumn('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');
																		var resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);*/
																		//if (!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) {
																		let alicuota = "";
																		let artIncCalculo = "";
																		//alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
																		alicuota = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_alicuota" });
																		//artIncCalculo = resultadoAlicuota[0].getValue('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');
																		if (!isEmpty(alicuota)) {
																		  retencionSIPRIB.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 5);
																		  // Obtengo el Articulo/Inciso del Calculo de la Retencion
																		  const filtroParamRet = [];
																		  //filtroParamRet[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);
																		  filtroParamRet[0] = search.createFilter({
																			name: "internalid",
																			operator: search.Operator.IS,
																			values: idInternoParametrizacionRetencion
																		  });
																		  const columnaParamRet = [];
																		  //columnaParamRet[0] = new nlobjSearchColumn('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');
																		  columnaParamRet[0] = search.createColumn({
																			name: "custrecord_l54_art_calculo_siprib_codigo", //Name of a search column as a string.
																			join: "custrecord_l54_param_ret_art_siprib" //Join ID for a search column as a string																																					
																		  });
																		  //var resultadoParamRet = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroParamRet, columnaParamRet);
																		  const resultadoParamRet = search.create({
																			type: "customrecord_l54_param_ret",
																			filters: filtroParamRet,
																			columns: columnaParamRet
																		  }).run().getRange({
																			start: 0,
																			end: 1000
																		  });
																		  if (!isEmpty(resultadoParamRet) && resultadoParamRet.length > 0) {
																			artIncCalculo = resultadoParamRet[0].getValue({ name: "custrecord_l54_art_calculo_siprib_codigo", join: "custrecord_l54_param_ret_art_siprib" });
																			if (!isEmpty(artIncCalculo)) {
																			  retencionSIPRIB.retencion.artIncCalculo = padding_left(artIncCalculo, "0", 3);
																			  // Cargo el Proveedor
																			  let proveedor = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_ref_proveedor" });
																			  // Obtengo el Numero de Documento
																			  if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {
																				retencionSIPRIB.sujeto.idSujetoNetSuite = proveedor;
																				const filtroProveedor = [];
																				//filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);
																				filtroProveedor[0] = search.createFilter({
																				  name: "internalid",
																				  operator: search.Operator.IS,
																				  values: proveedor
																				});
																				const columnaProveedor = [];
																				//columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																				columnaProveedor[0] = search.createColumn({
																				  name: "custentity_l54_cuit_entity"
																				});
																				//columnaProveedor[1] = new nlobjSearchColumn('custentity_l54_ins_drei');
																				columnaProveedor[1] = search.createColumn({
																				  name: "custentity_l54_ins_drei"
																				});
																				//columnaProveedor[2] = new nlobjSearchColumn('custentity_l54_ins_grav_siprib');
																				columnaProveedor[2] = search.createColumn({
																				  name: "custentity_l54_ins_grav_siprib"
																				});
																				//columnaProveedor[3] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																				columnaProveedor[3] = search.createColumn({
																				  name: "custentity_l54_tipo_contribuyente"
																				});
																				//columnaProveedor[4] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
																				columnaProveedor[4] = search.createColumn({
																				  name: "custentity_l54_porcentaje_excl"
																				});
																				//columnaProveedor[5] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
																				columnaProveedor[5] = search.createColumn({
																				  name: "custentity_l54_fecha_boletin"
																				});
																				//columnaProveedor[6] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																				columnaProveedor[6] = search.createColumn({
																				  name: "custentity_l54_tipo_documento"
																				});
																				//columnaProveedor[7] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																				columnaProveedor[7] = search.createColumn({
																				  name: "custentity_l54_cod_iibb"
																				});
																				//columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																				columnaProveedor[8] = search.createColumn({
																				  name: "custentity_l54_cod_iibb"
																				});
																				//var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);
																				const resultadoProveedor = search.create({
																				  type: "vendor",
																				  filters: filtroProveedor,
																				  columns: columnaProveedor
																				}).run().getRange({
																				  start: 0,
																				  end: 1000
																				});
																				if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
																				  // Obtengo la Marca de Inscripcion en Otros Gravamenes
																				  const inscriptoOtrosGravamanes = resultadoProveedor[0].getValue({ name: "custentity_l54_ins_grav_siprib" });
																				  // Obtengo la Marca de Inscripcion DReI
																				  const inscriptoDReI = resultadoProveedor[0].getValue({ name: "custentity_l54_ins_drei" });
																				  let insOtrosGrav = 0;
																				  if (!isEmpty(inscriptoOtrosGravamanes) && (inscriptoOtrosGravamanes == "T" || inscriptoOtrosGravamanes === true)) {
																					insOtrosGrav = 1;
																				  }
																				  retencionSIPRIB.sujeto.insOtrosGrav = padding_left(insOtrosGrav, "0", 1);
																				  let insDRei = 0;
																				  if (!isEmpty(insDRei) && (insDRei == "T" || insDRei === true)) {
																					insDRei = 1;
																				  }
																				  retencionSIPRIB.sujeto.insDRei = padding_left(insDRei, "0", 1);
																				  // Por Ahora el importe de Otros Gravamenes siempre sera 0
																				  const importeOtrosGrav = 0;
																				  retencionSIPRIB.retencion.importeOtrosGrav = padding_left(parseFloat(importeOtrosGrav, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 12);
																				  // Por Ahora el importe de Otros Gravamenes siempre sera 0
																				  const importeDReI = 0;
																				  retencionSIPRIB.retencion.importeDReI = padding_left(parseFloat(importeDReI, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 12);
																				  jurisdiccion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_jurisdiccion" });
																				  if (!isEmpty(jurisdiccion)) {
																					// Obtengo el Tipo de Contribuyente segun la Jurisdiccion
																					//
																					/*var filtroJurisdiccion = [];
																					filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																					filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);
																					var columnaJurisdiccion = [];
																					columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');
																					//columnaJurisdiccion[1] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_f_exe');
																					columnaJurisdiccion[1] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_caduc');
																					columnaJurisdiccion[2] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_num_c');
																					columnaJurisdiccion[3] = new nlobjSearchColumn('custrecord_l54_tipos_exencion_cod_sip', 'custrecord_l54_jurisdicciones_iibb_tip_e');
																					var resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);*/
																					let desc = "IIBB";
																					//if (!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) {
																					//
																					// Obtengo Codigo Tipo Condicion IIBB
																					let tipoContribuyenteIIBB = "";
																					let tipoExencion = "";
																					let fechaExencion = "";
																					let numCertExencion = "";
																					//tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																					//tipoContribuyenteIIBB = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_tipo');
																					tipoContribuyenteIIBB = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_tipo_contrib_iibb" });
																					//tipoExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_tipos_exencion_cod_sip', 'custrecord_l54_jurisdicciones_iibb_tip_e');
																					tipoExencion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_tipos_exencion_cod_sip", join: "custrecord_l54_ret_tipo_exencion" });
																					// Si el Proveedor no tiene Tipo de Exencion, se envia codigo 0 - No Exento
																					if (isEmpty(tipoExencion)) {
																					  tipoExencion = 0;
																					}
																					//fechaExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_f_exe');
																					//fechaExencionAux = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_caduc');
																					const fechaExencionAux = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_fecha_exencion" });
																					if (!isEmpty(fechaExencionAux)) {
																					  //var fechaExencionDate = nlapiStringToDate(fechaExencionAux, 'datetime');
																					  const fechaExencionDate = format.parse({
																						value: fechaExencionAux,
																						type: format.Type.DATETIME
																					  });
																					  if (!isEmpty(fechaExencionDate)) {
																						const anioExencion = fechaExencionDate.getFullYear();
																						if (!isEmpty(anioExencion)) {
																						  fechaExencion = anioExencion.toString();
																						}
																					  }
																					}
																					//numCertExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_num_c');
																					numCertExencion = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_cert_exencion" });
																					// Verifico Informacion de Exencion
																					if (!isEmpty(tipoExencion)) {
																					  retencionSIPRIB.retencion.tipoExencion = padding_left(tipoExencion, "0", 1);
																					  if (!isEmpty(fechaExencion) || (isEmpty(fechaExencion) && (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3))) {
																						if (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3) {
																						  fechaExencion = "0";
																						}
																						retencionSIPRIB.retencion.fechaExencion = padding_left(fechaExencion, "0", 4);
																						if (!isEmpty(numCertExencion) || (isEmpty(numCertExencion) && (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3))) {
																						  if (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3) {
																							numCertExencion = " ";
																						  }
																						  retencionSIPRIB.retencion.numCertExencion = padding_right(numCertExencion, " ", 6);
																						  if (!isEmpty(tipoContribuyenteIIBB)) {
																							/*var filtroTipoContribuyente = [];
																							filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);
																							var columnaTipoContribuyente = [];
																							columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_sip');
																							var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);*/
																							//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																							//var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_sip');
																							const situacionIIBB = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_tipo_contr_iibb_cod_sip", join: "custrecord_l54_ret_tipo_contrib_iibb" });
																							if (!isEmpty(situacionIIBB)) {
																							  retencionSIPRIB.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																							  let numeroIIBB = "0";
																							  if (situacionIIBB == 1) {
																								// Busco el Numero de IIBB
																								numeroIIBB = resultadoProveedor[0].getValue({ name: "custentity_l54_cod_iibb" });
																							  }
																							  if (!isEmpty(numeroIIBB)) {
																								// Formateo el Documento
																								numeroIIBB = numeroIIBB.replace(/-/g, "");
																								numeroIIBB = numeroIIBB.replace(/\./g, "");
																								// Elimino Blancos
																								numeroIIBB = numeroIIBB.replace(/ /g, "&nbsp");
																								retencionSIPRIB.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 10);
																								// Busco la Situacion Frente al IVA
																								let tipoContribuyenteIVA = "";
																								desc = "IVA";
																								//tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');
																								tipoContribuyenteIVA = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_tipo_contrib_iva" });
																								if (!isEmpty(tipoContribuyenteIVA)) {
																								  /*var filtroTipoContribuyente = [];
																								  filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);
																								  var columnaTipoContribuyente = [];
																								  columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_sip');
																								  var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);*/
																								  //if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																								  //var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_sip');
																								  const situacionIVA = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_tipo_cont_cod_sip", join: "custrecord_l54_ret_tipo_contrib_iva" });
																								  if (!isEmpty(situacionIVA)) {
																									retencionSIPRIB.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																									// Obtengo el Importe de la Retencion
																									// var importeRetencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_importe');
																									const importeRetencion = resultadoTXTRetencionesSIPRIB.getValue({ name: columnasSavedSearchRetSIPRIB[37] });
																									if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																									  // El Impuesto Determinado es la Base de Calculo x la Alicuota -> Importe de Retencion
																									  retencionSIPRIB.retencion.impDeterminado = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
																									  // El Monto Retenido es el Imp Determinado - Importe DRei
																									  // retencionSIPRIB.retencion.montoRet = padding_left(parseFloat((parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)) - (parseFloat(parseFloat(retencionSIPRIB.retencion.importeDReI, 10) * parseFloat(tipoCambio, 10), 10)), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																									  retencionSIPRIB.retencion.montoRet = padding_left(parseFloat(parseFloat(importeRetencion, 10) - parseFloat(importeDReI, 10), 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 14);
																									  //retencionSIPRIB.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																									  // Obtengo el Tipo de Documento del Sujeto Retenido
																									  let tipoDocumento = resultadoProveedor[0].getValue({ name: "custentity_l54_tipo_documento" });
																									  if (!isEmpty(tipoDocumento)) {
																										// Obtengo el Codigo de Tipo de Documento
																										const filtroTipoDocumento = [];
																										//filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);
																										filtroTipoDocumento[0] = search.createFilter({
																										  name: "internalid",
																										  operator: search.Operator.IS,
																										  values: tipoDocumento
																										});
																										const columnaTipoDocumento = [];
																										//columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sip');
																										columnaTipoDocumento[0] = search.createColumn({
																										  name: "custrecord_l54_tipo_doc_sip"
																										});
																										//var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);
																										const resultadoTipoDocumento = search.create({
																										  type: "customrecord_l54_tipo_documento",
																										  filters: filtroTipoDocumento,
																										  columns: columnaTipoDocumento
																										}).run().getRange({
																										  start: 0,
																										  end: 1000
																										});
																										if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																										  tipoDocumento = resultadoTipoDocumento[0].getValue({ name: "custrecord_l54_tipo_doc_sip" });
																										  if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																											retencionSIPRIB.sujeto.tipoDocSujeto = padding_left(tipoDocumento, "0", 1);
																											// Informacion de Beneficiarios del Exterior
																											// Verifico si el Proveedor tiene
																											/*var otrosConceptos = "";
																											// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																											var filtroMinimoNoImp = [];
																											filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);
																											var columnaMinimoNoImp = [];
																											columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');
																											var resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);
																											if (!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) {
																											otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																											if (!isEmpty(otrosConceptos)) {
																											// Obtengo el Importe de Percepcion del Pago
																											var importePercepcionPago = "";
																											importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'group');
																											if (!isEmpty(importePercepcionPago)) {
																											var otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);
																											retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptosFinal, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);*/
																											// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos
																											/* Comentado por JSalazar: 08/05/2019.
																											Esto lo comenté porque en Arciba no es así y la base cálculo debe ser coincidir con la alicuota y el imp. de Ret.
																											//retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																											*/
																											// Obtengo el Importe del IVA
																											let importeIVAPago = "";
																											importeIVAPago = resultadoPagoProveedor[0].getValue({ name: columnasResultadoPagoProveedor[8] });
																											if (!isEmpty(importeIVAPago)) {
																											  if (retencionSIPRIB.sujeto.situacionIVA != "1") {
																												importeIVAPago = 0;
																											  }
																											  // retencionSIPRIB.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
																											  retencionSIPRIB.sujeto.iva = padding_left(parseFloat(importeIVAPago, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 12);
																											  // Cargo informacion del Sujeto Retenido
																											  proveedor = resultadoTXTRetencionesSIPRIB.getValue({ name: "custrecord_l54_ret_ref_proveedor" });
																											  // Obtengo el Numero de Documento
																											  let nroDocumento = resultadoProveedor[0].getValue({ name: "custentity_l54_cuit_entity" });
																											  if (!isEmpty(nroDocumento)) {
																												// Formateo el Documento
																												nroDocumento = nroDocumento.replace(/-/g, "");
																												nroDocumento = nroDocumento.replace(/\./g, "");
																												// Elimino Blancos
																												const numeroDocumentoFinal = nroDocumento.replace(/ /g, "&nbsp");
																												retencionSIPRIB.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
																												//
																											  } else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																											  }
																											} else {
																											  errorGlobal = true;
																											  descripcionError = "Error Obteniendo Importe IVA del Pago";
																											}
																											/*} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo Percepciones";
																											}
																											} else {
																											errorGlobal = true;
																											descripcionError = "Minimo No Imponible No Configurado";
																											}
																											} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo el Minimo No Imponible";
																											}*/
																										  } else {
																											errorGlobal = true;
																											descripcionError = "Error Tipo de Documento SIPRIB No Configurado Correctamente";
																										  }
																										} else {
																										  errorGlobal = true;
																										  descripcionError = "Error Obteniendo Tipo de Documento";
																										}
																									  } else {
																										errorGlobal = true;
																										descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																									  }
																									} else {
																									  errorGlobal = true;
																									  descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																									}
																								  } else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo Situacion de " + desc;
																								  }
																								  /*} else {
																								  errorGlobal = true;
																								  descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																								  }*/
																								} else {
																								  errorGlobal = true;
																								  descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																								}
																							  } else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido";
																							  }
																							} else {
																							  errorGlobal = true;
																							  descripcionError = "Error Obteniendo Situacion de " + desc;
																							}
																							/*} else {
																							errorGlobal = true;
																							descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																							}*/
																						  } else {
																							errorGlobal = true;
																							descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																						  }
																						} else {
																						  errorGlobal = true;
																						  descripcionError = "Error No se Encuentra Configurado el certificado de Exencion del Proveedor";
																						}
																					  } else {
																						errorGlobal = true;
																						descripcionError = "Error No se Encuentra Configurado el A" + "\u00F1" + "o de Exencion del Proveedor";
																					  }
																					} else {
																					  errorGlobal = true;
																					  descripcionError = "Error No se Encuentra Configurado el Tipo de Exencion del Proveedor";
																					}
																					/*} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del Proveedor";
																					}*/
																				  } else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion";
																				  }
																				} else {
																				  errorGlobal = true;
																				  descripcionError = "Error Obteniendo Informacion del Proveedor";
																				}
																			  } else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Proveedor";
																			  }
																			} else {
																			  errorGlobal = true;
																			  descripcionError = "No se encuentra Configurado el Articulo/Inciso del Calculo de la Retencion en la Parametrizacion de Retenciones";
																			}
																		  } else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo Informacion de la Parametrizacion de Retenciones";
																		  }
																		} else {
																		  errorGlobal = true;
																		  descripcionError = "Alicuota Invalida";
																		}
																		/*} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo Alicuota de Retencion";
																		}*/
																	  } else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo Alicuota de Retencion";
																	  }
																	} else {
																	  errorGlobal = true;
																	  descripcionError = "Error La Longitud del Numero de Certificado de Retencion no debe ser mayor a 12";
																	}
																  } else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo Numero de Certificado";
																  }
																} else {
																  errorGlobal = true;
																  descripcionError = "Error Formateando la Fecha de Retencion";
																}
															  } else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Fecha De Retencion";
															  }
															} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo Base De Calculo";
															}
															/*} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Codigo De Norma";
															}*/
														  } else {
															errorGlobal = true;
															descripcionError = "Codigo de Operacion Invalido";
														  }
														} else {
														  errorGlobal = true;
														  descripcionError = "Error Obteniendo el Codigo de Operacion";
														}
													  } else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Codigo de Operacion";
													  }
													} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo Importe del Comprobante";
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "La Letra del Comprobante es Obligatoria en Facturas o Certificados de Obras";
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo el Punto de Venta";
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Numero de Comprobante";
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Formateando la Fecha del Comprobante";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha del Comprobante";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Codigo de Comprobante";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
							}
						  } else {
							arraySubsidiaria.push(numeroSubsidiaria);
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Codigo del Articulo/Inciso de Retencion";
							if (!isEmpty(subsidiaria))
							  descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
						  }
						} else {
						  arraySubsidiaria.push(numeroSubsidiaria);
						  errorGlobal = true;
						  descripcionError = "No se encuentra configurado el Articulo/Inciso de Retencion";
						  if (!isEmpty(subsidiaria))
							descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
						}
					  } else {
						arraySubsidiaria.push(numeroSubsidiaria);
						errorGlobal = true;
						descripcionError = "No se encuentra configurado el Articulo/Inciso de Retencion de Santa Fe";
						if (!isEmpty(subsidiaria))
						  descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
					  }
					} else {
					  arraySubsidiaria.push(numeroSubsidiaria);
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Información de la Empresa";
					  if (!isEmpty(subsidiaria))
						descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
					}
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo la Jurisdiccion de la Retencion";
				}
			  } else {
				errorSubsidiaria = true;
				errorGlobal = true;
				descripcionError = "Error Obteniendo la Subsidiaria de la Retencion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionSIPRIB.sujeto != null) {
				  if (retencionSIPRIB.retencion != null) {
					// Genero Contenido
					//var contenidoTXT = "";
					const error = false;
					const descripcionMensaje = "TXT Retenciones Generado Correctamente";
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					contenidoTXT += retencionSIPRIB.retencion.codigoOperacion + retencionSIPRIB.retencion.fechaRetencion + retencionSIPRIB.retencion.artRetencion + retencionSIPRIB.retencion.codigoComprobante +
					  retencionSIPRIB.retencion.letraComprobante + retencionSIPRIB.retencion.numeroComprobante + retencionSIPRIB.retencion.fechaComprobante + retencionSIPRIB.retencion.importeComprobante +
					  retencionSIPRIB.sujeto.tipoDocSujeto + retencionSIPRIB.sujeto.numeroDocSujeto + retencionSIPRIB.sujeto.situacionIIBB +
					  retencionSIPRIB.sujeto.numeroIIBB + retencionSIPRIB.sujeto.situacionIVA + retencionSIPRIB.sujeto.insOtrosGrav + retencionSIPRIB.sujeto.insDRei + retencionSIPRIB.retencion.importeOtrosGrav +
					  retencionSIPRIB.sujeto.iva + retencionSIPRIB.retencion.baseCalculo + retencionSIPRIB.retencion.alicuota + retencionSIPRIB.retencion.impDeterminado +
					  retencionSIPRIB.retencion.importeDReI + retencionSIPRIB.retencion.montoRet + retencionSIPRIB.retencion.artIncCalculo +
					  retencionSIPRIB.retencion.tipoExencion + retencionSIPRIB.retencion.fechaExencion + retencionSIPRIB.retencion.numCertExencion + retencionSIPRIB.retencion.numeroCertificado;
					// Grabo Registro de TXT
					/*var estadoGeneracionTXTSujetos = null;
					var estadoGeneracionTXT = null;
					estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
					if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
					// Error Generando TXT
					error = true;
					descripcionMensaje = "Error Generando TXT Retenciones";
					if (isEmpty(estadoGeneracionTXT))
					descripcionMensaje = estadoGeneracionTXT.descripcionError;
					errorGeneral = true;
					descripcionError = descripcionMensaje;
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}*/
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Retencion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIPRIB');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones SIPRIB"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRIB');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Retenciones SIPRIB"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIPRIB - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIPRIB - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIPRIB - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionSIPRIB = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIPRIB = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIPRIB');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIPRIB"
		});
		retencionSIPRIB.contenidoTXT = contenidoTXT;
		return retencionSIPRIB;
	  }
	  //[lista]
	  function generarTXTSipribPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIPRIB Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIPRIB Percepciones"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		try {
		  var percepcionSIPRIB = {};
		  percepcionSIPRIB.percepcion = {};
		  percepcionSIPRIB.sujeto = {};
		  percepcionSIPRIB.existenPercepciones = false;
		  percepcionSIPRIB.error = false;
		  percepcionSIPRIB.descripcionError = "";
		  percepcionSIPRIB.procesoEncolado = false;
		  percepcionSIPRIB.idLog = idRegistroLOG;
		  percepcionSIPRIB.contenidoTXT = "";
		  // Grabo Registro de TXT
		  const estadoGeneracionTXT = null;
		  const filtro = [];
		  let i = 0;
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //////////////
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_siprib');
		  const search1 = search.load({
			id: "customsearch_l54_per_siprib",
			type: "transaction" //opc
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB Percepciones', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_SIPRIB Percepciones",
				details: "resultIndex:  " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);
			log.debug({
			  title: "generarTXT_SIPRIB - Percepciones",
			  details: "Cantidad Percepciones: " + completeResultSet.length
			});
			const errorSubsidiaria = false;
			const arraySubsidiaria = [];
			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
			  percepcionSIPRIB.percepcion = {};
			  percepcionSIPRIB.sujeto = {};
			  const result = completeResultSet[i];
			  const columns = result.columns;
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  refComprobante = result.getValue({ name: columns[0] });
			  percepcionSIPRIB.percepcion.codigoOperacion = result.getValue({ name: columns[1] });
			  percepcionSIPRIB.percepcion.fechaPercepcion = result.getValue({ name: columns[2] });
			  percepcionSIPRIB.percepcion.artPercepcion = result.getValue({ name: columns[3] });
			  percepcionSIPRIB.percepcion.codigoComprobante = result.getValue({ name: columns[4] });
			  percepcionSIPRIB.percepcion.letraComprobante = result.getValue({ name: columns[5] });
			  percepcionSIPRIB.percepcion.numeroComprobante = result.getValue({ name: columns[6] });
			  percepcionSIPRIB.percepcion.fechaComprobante = result.getValue({ name: columns[7] });
			  percepcionSIPRIB.percepcion.importeComprobante = result.getValue({ name: columns[8] });
			  percepcionSIPRIB.sujeto.tipoDocSujeto = result.getValue({ name: columns[9] });
			  percepcionSIPRIB.sujeto.numeroDocSujeto = result.getValue({ name: columns[10] });
			  percepcionSIPRIB.sujeto.situacionIIBB = result.getValue({ name: columns[11] });
			  percepcionSIPRIB.sujeto.numeroIIBB = result.getValue({ name: columns[12] });
			  percepcionSIPRIB.sujeto.situacionIVA = result.getValue({ name: columns[13] });
			  percepcionSIPRIB.sujeto.insOtrosGrav = result.getValue({ name: columns[14] });
			  percepcionSIPRIB.sujeto.insDRei = result.getValue({ name: columns[15] });
			  percepcionSIPRIB.percepcion.importeOtrosGrav = result.getValue({ name: columns[16] });
			  percepcionSIPRIB.percepcion.iva = result.getValue({ name: columns[17] });
			  // percepcionSIPRIB.percepcion.baseCalculo=result.getValue({name:columns[18]);
			  percepcionSIPRIB.percepcion.baseCalculo = result.getValue({ name: columns[29] });
			  percepcionSIPRIB.percepcion.alicuota = result.getValue({ name: columns[19] });
			  percepcionSIPRIB.percepcion.impDeterminado = result.getValue({ name: columns[20] });
			  percepcionSIPRIB.percepcion.importeDReI = result.getValue({ name: columns[21] });
			  // percepcionSIPRIB.percepcion.montoPer = result.getValue(columns[22]);
			  percepcionSIPRIB.percepcion.montoPer = result.getValue({ name: columns[31] });
			  percepcionSIPRIB.percepcion.artIncCalculo = result.getValue({ name: columns[23] });
			  percepcionSIPRIB.percepcion.tipoExencion = result.getValue({ name: columns[24] });
			  /* percepcionSIPRIB.percepcion.anioExencion=result.getValue(columns[25]);
			  percepcionSIPRIB.percepcion.numCertExencion=result.getValue(columns[26]);
			  percepcionSIPRIB.percepcion.numeroCertificado=result.getValue(columns[27]); */
			  percepcionSIPRIB.percepcion.anioExencion = result.getValue({ name: columns[32] });
			  percepcionSIPRIB.percepcion.numCertExencion = result.getValue({ name: columns[25] });
			  percepcionSIPRIB.percepcion.numeroCertificado = result.getValue({ name: columns[26] });
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionSIPRIB.sujeto != null) {
				  if (percepcionSIPRIB.percepcion != null) {
					// Genero Contenido
					//var contenidoTXT = "";
					const error = false;
					const descripcionMensaje = "TXT Percepciones Generado Correctamente";
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					/*
					contenidoTXT += percepcionSIPRIB.percepcion.codigoOperacion + percepcionSIPRIB.percepcion.fechaPercepcion + percepcionSIPRIB.percepcion.artPercepcion + percepcionSIPRIB.percepcion.codigoComprobante +
					percepcionSIPRIB.percepcion.letraComprobante + percepcionSIPRIB.percepcion.numeroComprobante + percepcionSIPRIB.percepcion.fechaComprobante + percepcionSIPRIB.percepcion.importeComprobante +
					percepcionSIPRIB.sujeto.tipoDocSujeto + percepcionSIPRIB.sujeto.numeroDocSujeto + percepcionSIPRIB.sujeto.situacionIIBB +
					percepcionSIPRIB.sujeto.numeroIIBB + percepcionSIPRIB.sujeto.situacionIVA + percepcionSIPRIB.sujeto.insOtrosGrav + percepcionSIPRIB.sujeto.insDRei + percepcionSIPRIB.percepcion.importeOtrosGrav +
					percepcionSIPRIB.percepcion.iva + percepcionSIPRIB.percepcion.baseCalculo + percepcionSIPRIB.percepcion.alicuota + percepcionSIPRIB.percepcion.impDeterminado +
					percepcionSIPRIB.percepcion.importeDReI + percepcionSIPRIB.percepcion.montoPer + percepcionSIPRIB.percepcion.artIncCalculo +
					percepcionSIPRIB.percepcion.tipoExencion + percepcionSIPRIB.percepcion.anioExencion + percepcionSIPRIB.percepcion.numCertExencion + percepcionSIPRIB.percepcion.numeroCertificado; */
					contenidoTXT += percepcionSIPRIB.percepcion.codigoOperacion + percepcionSIPRIB.percepcion.fechaPercepcion + percepcionSIPRIB.percepcion.artPercepcion + percepcionSIPRIB.percepcion.codigoComprobante +
					  percepcionSIPRIB.percepcion.letraComprobante + percepcionSIPRIB.percepcion.numeroComprobante + percepcionSIPRIB.percepcion.fechaComprobante + percepcionSIPRIB.percepcion.importeComprobante +
					  percepcionSIPRIB.sujeto.tipoDocSujeto + percepcionSIPRIB.sujeto.numeroDocSujeto + percepcionSIPRIB.sujeto.situacionIIBB +
					  percepcionSIPRIB.sujeto.numeroIIBB + percepcionSIPRIB.sujeto.situacionIVA + percepcionSIPRIB.sujeto.insOtrosGrav + percepcionSIPRIB.sujeto.insDRei + percepcionSIPRIB.percepcion.importeOtrosGrav +
					  percepcionSIPRIB.percepcion.iva + percepcionSIPRIB.percepcion.baseCalculo + percepcionSIPRIB.percepcion.alicuota + percepcionSIPRIB.percepcion.impDeterminado +
					  percepcionSIPRIB.percepcion.importeDReI + percepcionSIPRIB.percepcion.montoPer + percepcionSIPRIB.percepcion.artIncCalculo +
					  percepcionSIPRIB.percepcion.tipoExencion + percepcionSIPRIB.percepcion.anioExencion + percepcionSIPRIB.percepcion.numCertExencion + percepcionSIPRIB.percepcion.numeroCertificado;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIPRIB');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones SIPRIB"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", null, refComprobante, subsidiaria);
				}
				/*else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRIB');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
				}*/
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIPRIB Percepciones - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIPRIB Percepciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIPRIB Percepciones - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcionSIPRIB = grabarError(true, "Error Generando TXT de Percepciones", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSIPRIB = grabarError(false, "Generacion de TXT de Percepciones Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIPRIB Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIPRIB Percepciones"
		});
		percepcionSIPRIB.contenidoTXT = contenidoTXT;
		return percepcionSIPRIB;
	  }
	  // function generarTXTSifereAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
	  // 	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Anterior');
	  // 	var procesoEncolado = false;
	  // 	var idRegistroLOG = idLogErrores;
	  // 	var errorGlobal = false;
	  // 	var errorGeneral = false;
	  // 	var existenRetenciones = false;
	  // 	var mensajeError = "Error Generando TXT de Retenciones";
	  // 	var descripcionError = "";
	  // 	var tipoComprobanteNS = "";
	  // 	var contenidoTXT = "";
	  // 	try {
	  // 		var retencionSIFERE = {};
	  // 		retencionSIFERE.retencion = {};
	  // 		retencionSIFERE.sujeto = {};
	  // 		retencionSIFERE.existenRetenciones = false;
	  // 		retencionSIFERE.error = false;
	  // 		retencionSIFERE.descripcionError = "";
	  // 		retencionSIFERE.procesoEncolado = false;
	  // 		retencionSIFERE.idLog = idRegistroLOG;
	  // 		retencionSIFERE.contenidoTXT = "";
	  // 		// Obtengo la Informacion usando un SavedSearch
	  // 		var iCont = 0;
	  // 		var columnaTXTRetencionesSIFERE = [];
	  // 		columnaTXTRetencionesSIFERE[0] = new nlobjSearchColumn('entity');
	  // 		var filtroTXTRetencionesSIFERE = [];
	  // 		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
	  // 		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
	  // 			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
	  // 		}
	  // 		//if (!isEmpty(ultimaRetencionProcesada))
	  // 		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
	  // 		if (!isEmpty(subsidiaria))
	  // 			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
	  // 		//
	  // 		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_sifere_ant');
	  // 		search.addFilters(filtroTXTRetencionesSIFERE);
	  // 		search.addColumns(columnaTXTRetencionesSIFERE);
	  // 		var searchResults = search.runSearch();
	  // 		var resultadoTXTRetencionesSIFERE = [];
	  // 		// resultIndex points to record starting current "resultado" in the entire results array
	  // 		var resultIndex = 0;
	  // 		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
	  // 		var resultado; // temporary variable used to store the result set
	  // 		do {
	  // 			// fetch one result set
	  // 			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
	  // 			resultado = searchResults.getRange({
	  // 				start: resultIndex,
	  // 				end: resultIndex + resultStep
	  // 			});
	  // 			if (!isEmpty(resultado) && resultado.length > 0) {
	  // 				if (resultIndex == 0)
	  // 					resultadoTXTRetencionesSIFERE = resultado; //Primera ve inicializa
	  // 				else
	  // 					resultadoTXTRetencionesSIFERE = resultadoTXTRetencionesSIFERE.concat(resultado);
	  // 				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
	  // 			}
	  // 			// increase pointer
	  // 			resultIndex = resultIndex + resultStep;
	  // 			// Verifico si debo Encolar el Proceso
	  // 			//checkGovernance(1000);
	  // 			// once no records are returned we already got all of them
	  // 		} while (!isEmpty(resultado) && resultado.length > 0)
	  // 		if (!isEmpty(resultadoTXTRetencionesSIFERE)) {
	  // 			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Retenciones', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIFERE.length);
	  // 			//
	  // 			for (var i = 0; resultadoTXTRetencionesSIFERE != null && i < resultadoTXTRetencionesSIFERE.length && procesoEncolado == false; i++) {
	  // 				retencionSIFERE.retencion = {};
	  // 				retencionSIFERE.sujeto = {};
	  // 				// Obtengo el Codigo de Comprobante
	  // 				//retencionSICORE.existenRetenciones = true;
	  // 				existenRetenciones = true;
	  // 				errorGlobal = false;
	  // 				descripcionError = "";
	  // 				var idRetencionNetSuite = resultadoTXTRetencionesSIFERE[i].getValue('internalid');
	  // 				var refComprobante = resultadoTXTRetencionesSIFERE[i].getValue('internalid');
	  // 				if (!isEmpty(refComprobante)) {
	  // 					//var codigoComprobante = obtenerCodigoComprobante(refComprobante,'sic' , subsidiaria);
	  // 					var codigoComprobante = 'O';
	  // 					//var codigoComprobante = 'R';
	  // 					if (!isEmpty(codigoComprobante)) {
	  // 						retencionSIFERE.retencion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
	  // 						// Obtengo el Numero del Comprobante
	  // 						var numerador = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_numero_localizado');
	  // 						if (!isEmpty(numerador)) {
	  // 							// Tomo el Numero, Punto de Venta y Letra
	  // 							//var arrayNumerador = numerador.split("-");
	  // 							//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
	  // 							//var numeroComprobante = arrayNumerador[2];
	  // 							var numeroComprobante = numerador.toString().substr(-8);
	  // 							// Tomo el Punto de Venta
	  // 							//var puntoVenta = arrayNumerador[1];
	  // 							var puntoVenta = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_boca');
	  // 							// Tomo la Latra del Comprobante
	  // 							//var letra = arrayNumerador[0];
	  // 							var letra = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_letra');
	  // 							if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
	  // 								retencionSIFERE.retencion.numeroComprobante = padding_right(numeroComprobante, " ", 20);
	  // 								retencionSIFERE.retencion.puntoVenta = padding_left(puntoVenta, "0", 4);
	  // 								retencionSIFERE.retencion.letraDocumento = padding_right(" ", " ", 1);
	  // 								//retencionSIFERE.retencion.letraDocumento = padding_right("C", " ", 1);
	  // 								// Obtengo Tipo de Cambio de la Retencion
	  // 								var tipoCambio = resultadoTXTRetencionesSIFERE[i].getValue('exchangerate');
	  // 								if (!isEmpty(tipoCambio)) {
	  // 									// Obtengo Fecha de Retencion
	  // 									var fechaRetencion = resultadoTXTRetencionesSIFERE[i].getValue('trandate');
	  // 									if (!isEmpty(fechaRetencion)) {
	  // 										// Formateo la Fecha
	  // 										var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
	  // 										if (!isEmpty(fechaRetencionDate)) {
	  // 											// Obtengo las Componentes de la Fecha
	  // 											var diaRetencion = fechaRetencionDate.getDate();
	  // 											var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
	  // 											var anioRetencion = fechaRetencionDate.getFullYear();
	  // 											var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
	  // 											retencionSIFERE.retencion.fechaRetencion = fechaRetencionFinal;
	  // 											// Cargo el Proveedor
	  // 											var proveedor = resultadoTXTRetencionesSIFERE[i].getValue('entity');
	  // 											// Obtengo el Numero de Documento
	  // 											if (!isEmpty(proveedor) && parseInt(proveedor, 10)) {
	  // 												retencionSIFERE.sujeto.idSujetoNetSuite = proveedor;
	  // 												var filtroProveedor = [];
	  // 												filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);
	  // 												var columnaProveedor = [];
	  // 												columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_zona_impuestos');
	  // 												var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);
	  // 												if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
	  // 													// Obtengo Codigo De Jurisdiccion del Proveedor
	  // 													var jurisdiccion = resultadoProveedor[0].getValue('custentity_l54_zona_impuestos');
	  // 													if (!isEmpty(jurisdiccion)) {
	  // 														// Obtengo el Codigo de Jurisdiccion
	  // 														var filtroJurisdiccion = [];
	  // 														filtroJurisdiccion[0] = new nlobjSearchFilter('internalid', null, 'is', jurisdiccion);
	  // 														var columnaJurisdiccion = [];
	  // 														columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_zona_impuestos_codigo');
	  // 														var resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_zona_impuestos', null, filtroJurisdiccion, columnaJurisdiccion);
	  // 														if (!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) {
	  // 															var codigoJurisdiccion = resultadoJurisdiccion[0].getValue('custrecord_l54_zona_impuestos_codigo');
	  // 															if (!isEmpty(codigoJurisdiccion)) {
	  // 																retencionSIFERE.sujeto.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);
	  // 																// Obtengo el CUIT del Proveedor
	  // 																var cuitEmpresa = resultadoTXTRetencionesSIFERE[i].getValue('custentity_l54_cuit_entity', 'vendor');
	  // 																if (!isEmpty(cuitEmpresa)) {
	  // 																	// Obtengo el Tamaño del CUIT
	  // 																	var cuitEmpresaString = cuitEmpresa.toString();
	  // 																	cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
	  // 																	cuitEmpresaString = cuitEmpresaString.replace(/\./g, '');
	  // 																	cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
	  // 																	cuitEmpresaString = cuitEmpresaString.toString();
	  // 																	var tam = cuitEmpresaString.length;
	  // 																	if (tam == 11) {
	  // 																		// Agrego los -
	  // 																		var primerosDigitos = cuitEmpresaString.substr(0, 2);
	  // 																		var segundosDigitos = cuitEmpresaString.substr(2, 8);
	  // 																		var tercerosDigitos = cuitEmpresaString.substr(10, 1);
	  // 																		if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
	  // 																			cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
	  // 																			retencionSIFERE.retencion.cuitEmpresa = cuitEmpresa;
	  // 																			// Obtengo El Numero de Constancia
	  // 																			var numeroConstancia = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_ret_iibb_numerador');
	  // 																			if (!isEmpty(numeroConstancia)) {
	  // 																				var posicionSeparador = numeroConstancia.toString().lastIndexOf("-");
	  // 																				var numeroConstanciaFinal = "";
	  // 																				numeroConstanciaFinal = numeroConstancia;
	  // 																				if (posicionSeparador >= 0)
	  // 																					numeroConstanciaFinal = numeroConstancia.toString().substr(posicionSeparador + 1, 255);
	  // 																				if (!isEmpty(numeroConstanciaFinal)) {
	  // 																					retencionSIFERE.retencion.numeroConstancia = padding_left(numeroConstanciaFinal, "0", 16);
	  // 																					// Obtengo el Importe de la Retencion
	  // 																					var importeRetencion = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_iibb_imp_a_retener');
	  // 																					if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
	  // 																						retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
	  // 																					} else {
	  // 																						errorGlobal = true;
	  // 																						descripcionError = "El Importe de Retención debe ser mayor a 0.00";
	  // 																					}
	  // 																				} else {
	  // 																					errorGlobal = true;
	  // 																					descripcionError = "Error Obteniendo Numerador de Retencion";
	  // 																				}
	  // 																			} else {
	  // 																				errorGlobal = true;
	  // 																				descripcionError = "Error Obteniendo Numero de Constancia de la Retencion";
	  // 																			}
	  // 																		} else {
	  // 																			errorGlobal = true;
	  // 																			descripcionError = "Error Aplicando Formato a CUIT del Proveedor";
	  // 																		}
	  // 																	} else {
	  // 																		errorGlobal = true;
	  // 																		descripcionError = "CUIT del Proveedor Invalido";
	  // 																	}
	  // 																} else {
	  // 																	errorGlobal = true;
	  // 																	descripcionError = "Error No se Encuentra Configurado el CUIT del Proveedor";
	  // 																}
	  // 															} else {
	  // 																errorGlobal = true;
	  // 																descripcionError = "Error Codigo de Jurisdiccion No Configurado";
	  // 															}
	  // 														} else {
	  // 															errorGlobal = true;
	  // 															descripcionError = "Error Obteniendo Informacion de Jurisdiccion";
	  // 														}
	  // 													} else {
	  // 														errorGlobal = true;
	  // 														descripcionError = "Error Obteniendo Jurisdiccion del Proveedor";
	  // 													}
	  // 												} else {
	  // 													errorGlobal = true;
	  // 													descripcionError = "Error Obteniendo Informacion del Proveedor";
	  // 												}
	  // 											} else {
	  // 												errorGlobal = true;
	  // 												descripcionError = "Error Obteniendo Proveedor";
	  // 											}
	  // 										} else {
	  // 											errorGlobal = true;
	  // 											descripcionError = "Error Formateando la Fecha de Retencion";
	  // 										}
	  // 									} else {
	  // 										errorGlobal = true;
	  // 										descripcionError = "Error Obteniendo Fecha De Retencion";
	  // 									}
	  // 								} else {
	  // 									errorGlobal = true;
	  // 									descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
	  // 								}
	  // 							} else {
	  // 								errorGlobal = true;
	  // 								descripcionError = "Error Obteniendo Numero de Comprobante";
	  // 							}
	  // 							/*} else {
	  // 							errorGlobal = true;
	  // 							descripcionError = "Error Obteniendo Numero de Comprobante";
	  // 							}*/
	  // 						} else {
	  // 							errorGlobal = true;
	  // 							descripcionError = "Error Obteniendo Numero de Comprobante";
	  // 						}
	  // 					} else {
	  // 						errorGlobal = true;
	  // 						descripcionError = "Error Obteniendo el Codigo de Comprobante";
	  // 					}
	  // 				} else {
	  // 					errorGlobal = true;
	  // 					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
	  // 				}
	  // 				// Genero el Contenido
	  // 				if (errorGlobal == false) {
	  // 					if (retencionSIFERE.sujeto != null) {
	  // 						if (retencionSIFERE.retencion != null) {
	  // 							// Genero Contenido
	  // 							if (!isEmpty(contenidoTXT)) {
	  // 								contenidoTXT += "\r\n";
	  // 							}
	  // 							var error = false;
	  // 							var descripcionMensaje = "TXT Retenciones Generado Correctamente";
	  // 							contenidoTXT += retencionSIFERE.sujeto.codigoJurisdiccion + retencionSIFERE.retencion.cuitEmpresa + retencionSIFERE.retencion.fechaRetencion +
	  // 								retencionSIFERE.retencion.puntoVenta + retencionSIFERE.retencion.numeroConstancia + retencionSIFERE.retencion.codigoComprobante + retencionSIFERE.retencion.letraDocumento +
	  // 								retencionSIFERE.retencion.numeroComprobante + retencionSIFERE.retencion.importeRetencion;
	  // 							// Grabo Registro de TXT
	  // 							/*var estadoGeneracionTXT = null;
	  // 							estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
	  // 							if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
	  // 							// Error Generando TXT
	  // 							error = true;
	  // 							descripcionMensaje = "Error Generando TXT Retenciones";
	  // 							if (isEmpty(estadoGeneracionTXT))
	  // 							descripcionMensaje = estadoGeneracionTXT.descripcionError;
	  // 							errorGeneral = true;
	  // 							descripcionError = descripcionMensaje;
	  // 							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
	  // 							}*/
	  // 						} else {
	  // 							errorGeneral = true;
	  // 							descripcionError = "Error Obteniendo informacion de la Retencion";
	  // 							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
	  // 						}
	  // 					} else {
	  // 						errorGeneral = true;
	  // 						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
	  // 						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
	  // 					}
	  // 				} else {
	  // 					// Error Obteniendo Informacion de Retenciones
	  // 					// Grabo el Error en NetSuite
	  // 					errorGeneral = true;
	  // 					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIFERE ' + descripcionError);
	  // 					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
	  // 				}
	  // 				// Verifico si debo Encolar el Proceso
	  // 				//checkGovernance(1000);
	  // 			}
	  // 			if (errorGeneral == false) {
	  // 				if (existenRetenciones == false) {
	  // 					if (!isEmpty(resultadoTXTRetencionesSIFERE) && resultadoTXTRetencionesSIFERE.length == 0) {
	  // 						// No se Encontraron Retenciones para el Periodo
	  // 						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);
	  // 					} else {
	  // 						// Error Obteniendo Retenciones
	  // 						errorGeneral = true;
	  // 						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIFERE');
	  // 						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', null, refComprobante, subsidiaria);
	  // 					}
	  // 				}
	  // 			}
	  // 		}
	  // 		if (!isEmpty(contenidoTXT)) {
	  // 			contenidoTXT += "\r\n";
	  // 		}
	  // 	} catch (e) {
	  // 		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Error : ' + e.message);
	  // 		errorGeneral = true;
	  // 		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
	  // 		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	  // 	}
	  // 	if (errorGeneral == true) {
	  // 		retencionSIFERE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	  // 	} else {
	  // 		retencionSIFERE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
	  // 		if (procesoEncolado == false) {
	  // 			if (existenRetenciones == true)
	  // 				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
	  // 		}
	  // 	}
	  // 	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE Anterior');
	  // 	retencionSIFERE.contenidoTXT = contenidoTXT;
	  // 	return retencionSIFERE;
	  // }
	  //[Lista]
	  function generarTXTArbaPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT ARBA Percepciones"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones ARBA";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		const marcaGenerarTXT = true;
		const errorParcial = false;
		let contenidoTXT = "";
		try {
		  var percepcionARBA = {};
		  percepcionARBA.retencion = {};
		  percepcionARBA.sujeto = {};
		  percepcionARBA.existenRetenciones = false;
		  percepcionARBA.error = false;
		  percepcionARBA.descripcionError = "";
		  percepcionARBA.procesoEncolado = false;
		  percepcionARBA.idLog = idRegistroLOG;
		  percepcionARBA.retencion.importeRetencion = 0;
		  percepcionARBA.contenidoTXT = "";
		  // Grabo Registro de TXT
		  const estadoGeneracionTXT = null;
		  const filtro = [];
		  let i = 0;
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //////////////
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arba');
		  const search1 = search.load({
			id: "customsearch_l54_per_arba",
			type: "transaction"
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARBA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_ARBA_per",
				details: "resultIndex:" + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);
			log.debug({
			  title: "generarTXT_ARBA - Percepciones",
			  details: "Cantidad Percepciones: " + completeResultSet.length
			});

          var objList = getTipoTransIdNew();
          var objNumerador =  getNumeradores(subsidiaria);
          var objComprobantes = getComprobantes();
			for (i = 0; i < completeResultSet.length; i++) {
			  percepcionARBA.percepcion = {};
			  percepcionARBA.sujeto = {};
			  const resultadoTXTPercepcionesARBA = completeResultSet[i];
			  const columns = resultadoTXTPercepcionesARBA.columns;
			  ///////////////////////////////////////////////////////////////////////////////////////////////
			  //Armo TXT
			  /*
			  Cuit contribuyente Percibido
			  Fecha Percepcion
			  Tipo Comprobante
			  Letra Comprobante
			  Numero Sucursal
			  Numero Emisión
			  Monto Imponible
			  Importe de Percepcion
			  Tipo Operación
			   */
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
			  //var refComprobante = resultadoTXTPercepcionesARBA.getValue('internalid', null, 'group');
			  var refComprobante = resultadoTXTPercepcionesARBA.getValue({
				name: "internalid",
				summary: search.Summary.GROUP
			  });
			  if (!isEmpty(refComprobante)) {
				//var nroDocumento = resultadoTXTPercepcionesARBA.getValue('custbody_54_cuit_entity', null, 'max');
				let nroDocumento = resultadoTXTPercepcionesARBA.getValue({
				  name: "custbody_54_cuit_entity",
				  summary: search.Summary.MAX
				});
				if (!isEmpty(nroDocumento)) {
				  // Formateo el Documento
				  nroDocumento = nroDocumento.replace(/-/g, "");
				  nroDocumento = nroDocumento.replace(/\./g, "");
				  // Elimino Blancos
				  nroDocumento = nroDocumento.replace(/ /g, "&nbsp");
				  if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
					// Formateo el Documento con el Formato Solicitado por ARBA
					const numeroDocumentoFinal = nroDocumento.substring(0, 2) + "-" + nroDocumento.substring(2, 10) + "-" + nroDocumento.substring(10, 11);
					percepcionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
					// Obtengo la Fecha de Retencion
					//var fechaPercepcion = resultadoTXTPercepcionesARBA.getValue('trandate', null, 'group');
					const fechaPercepcion = resultadoTXTPercepcionesARBA.getValue({
					  name: "trandate",
					  summary: search.Summary.GROUP
					});
					if (!isEmpty(fechaPercepcion)) {
					  // Formateo la Fecha
					  //var fechaPercepcionDate = nlapiStringToDate(fechaPercepcion, 'datetimetz');
					  const fechaPercepcionDate = format.parse({
						value: fechaPercepcion,
						type: format.Type.DATE
					  });
					  if (!isEmpty(fechaPercepcionDate)) {
						// Obtengo las Componentes de la Fecha
						const diaPercepcion = fechaPercepcionDate.getDate();
						const mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
						const anioPercepcion = fechaPercepcionDate.getFullYear();
						const fechaPercepcionFinal = padding_left(diaPercepcion, "0", 2) + "/" + padding_left(mesPercepcion, "0", 2) + "/" + anioPercepcion;
						percepcionARBA.percepcion.fechaPercepcion = fechaPercepcionFinal;
						// Obtengo el Tipo de Comprobante
                      
                      var recordtype = resultadoTXTPercepcionesARBA.getValue({ name: "recordtype", summary: search.Summary.GROUP });
                      var esND = resultadoTXTPercepcionesARBA.getValue({ name: "custbody_l54_nd", summary: search.Summary.GROUP });
                      var esCE = resultadoTXTPercepcionesARBA.getValue({ name: "custbody_l54_es_credito_electronico", summary: search.Summary.MAX });
                      var recordList = objList.filter(function (obj) {
                        return (obj.name == recordtype)
                      });
                      log.debug("params", recordtype + '->> ' + esND + " ->> " + esCE)
                      log.debug("recordList", JSON.stringify(recordList))
                      let codigoComprobante = null;
                      let idRecord = recordList;

                      var objNumeradorResult = objNumerador.filter(function (obj) {
                        return (obj.col2 == idRecord[0].id && obj.col3 == esND && obj.col4 == esCE)
                      })
                      log.debug("objNumeradorResult", JSON.stringify(objNumeradorResult))
                      if(objNumeradorResult.length > 0){
                        var objComprobantesResult = objComprobantes.filter(function (obj) {
                          return (obj.col0 == objNumeradorResult[0].col1)
                        })
                        log.debug("objComprobantesResult", JSON.stringify(objComprobantesResult))
                        if(objComprobantesResult.length > 0){
                          codigoComprobante = objComprobantesResult[0].col3
                        }
                      }

                      //const codigoComprobante = obtenerCodigoComprobante(refComprobante, "arba", subsidiaria);
						if (!isEmpty(codigoComprobante)) {
						  percepcionARBA.percepcion.codigoComprobante = codigoComprobante;
						  // Obtengo el Numero de Emision (Numerador)
						  //var numerador = resultadoTXTPercepcionesARBA.getValue('custbody_l54_numero_localizado', null, 'max');
						  const numerador = resultadoTXTPercepcionesARBA.getValue({
							name: "custbody_l54_numero_localizado",
							summary: search.Summary.MAX
						  });
						  if (!isEmpty(numerador)) {
							const numeroComprobante = numerador.toString().substr(-8);
							if (!isEmpty(numeroComprobante)) {
							  percepcionARBA.percepcion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
							  // Obtengo el Numero de Sucursal (Punto de Venta)
							  const puntoVenta = resultadoTXTPercepcionesARBA.getValue(columns[20]);
							  if (!isEmpty(puntoVenta)) {
								// percepcionARBA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
								percepcionARBA.percepcion.puntoVenta = puntoVenta;
								// Obtengo la Letra del Comprobante
								//var letra = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
								const letra = resultadoTXTPercepcionesARBA.getValue({
								  name: "custbody_l54_letra",
								  summary: search.Summary.MAX
								});
								//var letraStr = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
								let letraStr = resultadoTXTPercepcionesARBA.getValue({
								  name: "custbody_l54_letra",
								  summary: search.Summary.MAX
								});
								if (!isEmpty(letraStr) && !isEmpty(letra)) {
								  if (letraStr != "A" && letraStr != "B" && letraStr != "C") {
									letraStr = " ";
								  }
								  percepcionARBA.percepcion.letra = letraStr;
								  // Obtengo el Tipo de Cambio
								  //var tipoCambio = resultadoTXTPercepcionesARBA.getValue('exchangerate', null, 'group');
								  const tipoCambio = resultadoTXTPercepcionesARBA.getValue({
									name: "exchangerate",
									summary: search.Summary.GROUP
								  });
								  if (!isEmpty(tipoCambio)) {
									// Obtengo el Importe de la Percepcion
									// var importePercepcion = resultadoTXTPercepcionesARBA.getValue('taxamount', null, 'sum');
									//var importePercepcion = resultadoTXTPercepcionesARBA.getValue(columns[19]);
									const importePercepcion = resultadoTXTPercepcionesARBA.getValue({
									  name: columns[19]
									});
									/* var cantDecImportePercepcion = countDecimales(importePercepcion);
									var cantDecTipoCambio = countDecimales(tipoCambio);
									var cantidadDecimalesFinal = cantDecImportePercepcion + cantDecTipoCambio;
									var importePercepcionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importePercepcion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */
									if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != "C" && (parseFloat(importePercepcion, 10) > 0.00)) || ((codigoComprobante == "C" || codigoComprobante == "H") && (Math.abs(parseFloat(importePercepcion, 10)) >= 0.00)))) {
									  // Genero el Absoluto
									  const importePercepcionFinal = Math.abs(importePercepcion);
									  // Si es Nota de Credito, Va en Negativo
									  let longitudImporte = 11;
									  let caracterRelleno = "";
									  if (codigoComprobante == "C" || codigoComprobante == "H") {
										longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
										caracterRelleno = "-";
									  }
									  // percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
									  // percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(numberTruncTwoDec(parseFloat(importePercepcionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
									  percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(importePercepcion, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", longitudImporte);
									  // Obtengo el Monto Imponible de Percepcion
									  //var montoImponible = resultadoTXTPercepcionesARBA.getValue('custcol_l54_monto_imp_perc', null, 'sum');
									  let montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[17]);
									  /* if (isEmpty(montoImponible) || montoImponible <= 0) {
										var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[16]);
									  } */
									  if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != "C" && (parseFloat(montoImponible, 10) > 0.00)) || ((codigoComprobante == "C" || codigoComprobante == "H") && (Math.abs(parseFloat(montoImponible, 10)) >= 0.00)))) {
										// Genero el Absoluto
										montoImponible = Math.abs(montoImponible);
										// Si es Nota de Credito, Va en Negativo
										let longitudMontoImponible = 12;
										let caracterRellenoMontoImp = "";
										if (codigoComprobante == "C" || codigoComprobante == "H") {
										  longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
										  caracterRellenoMontoImp = "-";
										}
										percepcionARBA.percepcion.montoImponible = caracterRellenoMontoImp + padding_left(parseFloat(montoImponible, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", longitudMontoImponible);
										// Obtengo el Tipo de Operacion
										//var tipoOperacionPer = resultadoTXTPercepcionesARBA.getValue('formulatext', null, 'group');
										const tipoOperacionPer = resultadoTXTPercepcionesARBA.getValue({
										  name: "formulatext",
										  summary: search.Summary.GROUP
										});
										if (!isEmpty(tipoOperacionPer) && tipoOperacionPer.length == 1) {
										  percepcionARBA.percepcion.tipoOperacionPer = tipoOperacionPer;
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Tipo de Operacion";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "El Monto Imponible es Invalido";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "El Importe de Percepcion es Invalido";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo La Letra del Comprobante";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Codigo de Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Formateando la Fecha de Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De Percepcion";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Numero de Documento del Cliente Invalido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo Numero de Documento del Cliente";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionARBA.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcionARBA.sujeto.numeroDocSujeto + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.codigoComprobante +
					percepcionARBA.percepcion.letra + percepcionARBA.percepcion.puntoVenta + percepcionARBA.percepcion.numeroComprobante +
					percepcionARBA.percepcion.montoImponible + percepcionARBA.percepcion.importePercepcion + percepcionARBA.percepcion.tipoOperacionPer;
				  // Grabo Registro de TXT
				  /*var estadoGeneracionTXT = null;
				  estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);
				  if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
				  // Error Generando TXT
				  error = true;
				  descripcionMensaje = "Error Generando TXT Percepciones";
				  if (isEmpty(estadoGeneracionTXT))
				  descripcionMensaje = estadoGeneracionTXT.descripcionError;
				  errorGeneral = true;
				  descripcionError = descripcionMensaje;
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				  }*/
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones ARCIBA');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones ARCIBA"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", idPercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones ARBA');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Percepciones ARBA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones", idPercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT ARBA - Error: " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT ARBA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcionARBA = grabarError(true, "Error Generando TXT de Percepciones - ARBA", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionARBA = grabarError(false, "Generacion de TXT de Percepciones Correcta - ARBA", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente - ARBA", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT - ARBA",
		  details: "Finalizacion - Generacion TXT ARBA Percepciones"
		});
		percepcionARBA.contenidoTXT = contenidoTXT;
		return percepcionARBA;
	  }
	  //[Lista]
   
	  function generarTXTArbaPercAct7(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
   
		log.debug('Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Percepciones');
		var procesoEncolado = false;
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenPercepciones = false;
		var mensajeError = "Error Generando TXT de Percepciones ARBA";
		var descripcionError = "";
		var tipoComprobanteNS = "";
		var marcaGenerarTXT = true;
		var errorParcial = false;
		var contenidoTXT = "";
	  
		try {
		  var percepcionARBA = new Object();
		  percepcionARBA.retencion = new Object();
		  percepcionARBA.sujeto = new Object();
		  percepcionARBA.existenRetenciones = false;
		  percepcionARBA.error = false;
		  percepcionARBA.descripcionError = "";
		  percepcionARBA.procesoEncolado = false;
		  percepcionARBA.idLog = idRegistroLOG;
		  percepcionARBA.retencion.importeRetencion = 0;
		  percepcionARBA.contenidoTXT = "";
	  
		  // Grabo Registro de TXT
		  var estadoGeneracionTXT = null;
	  
		  var filtro = new Array();
		  var i = 0;
   
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
   
		  if (!isEmpty(subsidiaria)){
			//filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		   
		  const search1 = search.load({
			id: "customsearch_l54_per_arba",
			type: "transaction"
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARBA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_ARBA_per_act7",
				details: "resultIndex:" + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
   
	  
		  if (!isEmpty(completeResultSet)) {
			log.debug('generarTXT_ARBA - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);
	  
			for (i = 0; i < completeResultSet.length; i++) {
			  percepcionARBA.percepcion = new Object();
			  percepcionARBA.sujeto = new Object();
			  const resultadoTXTPercepcionesARBA = completeResultSet[i];
			  const columns = resultadoTXTPercepcionesARBA.columns;
			  ///////////////////////////////////////////////////////////////////////////////////////////////
	  
			  //Armo TXT
	  
			  /*
			  Cuit contribuyente Percibido
			  Fecha Percepcion
			  Tipo Comprobante
			  Letra Comprobante
			  Numero Sucursal
			  Numero Emisión
			  Monto Imponible
			  Importe de Percepcion
			  Tipo Operación
			   */
	  
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
			  var refComprobante = resultadoTXTPercepcionesARBA.getValue({
				name: "internalid",
				summary: search.Summary.GROUP
			  });
			  if (!isEmpty(refComprobante)) {
				let nroDocumento = resultadoTXTPercepcionesARBA.getValue({
				  name: "custbody_54_cuit_entity",
				  summary: search.Summary.MAX
				});
				if (!isEmpty(nroDocumento)) {
				  // Formateo el Documento
				  nroDocumento = nroDocumento.replace(/-/g, '');
				  nroDocumento = nroDocumento.replace(/\./g, '');
				  // Elimino Blancos
				  nroDocumento = nroDocumento.replace(/ /g, '&nbsp');
				  if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
					// Formateo el Documento con el Formato Solicitado por ARBA
					var numeroDocumentoFinal = nroDocumento.substring(0, 2) + '-' + nroDocumento.substring(2, 10) + '-' + nroDocumento.substring(10, 11);
					percepcionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
					// Obtengo la Fecha de Retencion
					var fechaPercepcion = resultadoTXTPercepcionesARBA.getValue({
					  name: "trandate",
					  summary: search.Summary.GROUP
					});
					if (!isEmpty(fechaPercepcion)) {
					  // Formateo la Fecha
					  var fechaPercepcionDate = format.parse({
						value: fechaPercepcion,
						type: format.Type.DATE
					  });
					  if (!isEmpty(fechaPercepcionDate)) {
						// Obtengo las Componentes de la Fecha
						var diaPercepcion = fechaPercepcionDate.getDate();
						var mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
						var anioPercepcion = fechaPercepcionDate.getFullYear();
						var fechaPercepcionFinal = padding_left(diaPercepcion, '0', 2) + "/" + padding_left(mesPercepcion, '0', 2) + "/" + anioPercepcion;
						percepcionARBA.percepcion.fechaPercepcion = fechaPercepcionFinal;
						// Obtengo el Tipo de Comprobante
						var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'arba', subsidiaria);
						if (!isEmpty(codigoComprobante)) {
						  percepcionARBA.percepcion.codigoComprobante = codigoComprobante;
						  // Obtengo el Numero de Emision (Numerador)
						  const numerador = resultadoTXTPercepcionesARBA.getValue({
							name: "custbody_l54_numero_localizado",
							summary: search.Summary.MAX
						  });
						  if (!isEmpty(numerador)) {
							var numeroComprobante = numerador.toString().substr(-8);
							if (!isEmpty(numeroComprobante)) {
							  percepcionARBA.percepcion.numeroComprobante = padding_left(numeroComprobante, '0', 8);
							  // Obtengo el Numero de Sucursal (Punto de Venta)
							  var puntoVenta = resultadoTXTPercepcionesARBA.getValue(columns[20]);
	  
							  if (!isEmpty(puntoVenta)) {
								// percepcionARBA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
	  
								percepcionARBA.percepcion.puntoVenta = puntoVenta;
	  
								// Obtengo la Letra del Comprobante
								const letra = resultadoTXTPercepcionesARBA.getValue({
								  name: "custbody_l54_letra",
								  summary: search.Summary.MAX
								});
								//var letraStr = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
								let letraStr = resultadoTXTPercepcionesARBA.getValue({
								  name: "custbody_l54_letra",
								  summary: search.Summary.MAX
								});
								if (!isEmpty(letraStr) && !isEmpty(letra)) {
								  if (letraStr != 'A' && letraStr != 'B' && letraStr != 'C') {
									letraStr = ' ';
								  }
								  percepcionARBA.percepcion.letra = letraStr;
								  // Obtengo el Tipo de Cambio
								  const tipoCambio = resultadoTXTPercepcionesARBA.getValue({
									name: "exchangerate",
									summary: search.Summary.GROUP
								  });
								  if (!isEmpty(tipoCambio)) {
	  
									// Obtengo el Importe de la Percepcion
									// var importePercepcion = resultadoTXTPercepcionesARBA.getValue('taxamount', null, 'sum');
									var importePercepcion = resultadoTXTPercepcionesARBA.getValue(columns[19]);
									/* var cantDecImportePercepcion = countDecimales(importePercepcion);
									var cantDecTipoCambio = countDecimales(tipoCambio);
									var cantidadDecimalesFinal = cantDecImportePercepcion + cantDecTipoCambio;
									var importePercepcionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importePercepcion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */
	  
									if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != 'C' && (parseFloat(importePercepcion, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(importePercepcion, 10)) >= 0.00)))) {
									  // Genero el Absoluto
									  importePercepcionFinal = Math.abs(importePercepcion);
									  // Si es Nota de Credito, Va en Negativo
									  var longitudImporte = 11;
									  var caracterRelleno = '';
									  if (codigoComprobante == 'C' || codigoComprobante == 'H') {
										longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
										caracterRelleno = '-';
									  }
									  // percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
									  // percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(numberTruncTwoDec(parseFloat(importePercepcionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
									  percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(importePercepcion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
	  
									  // Obtengo el Monto Imponible de Percepcion
									  //var montoImponible = resultadoTXTPercepcionesARBA.getValue('custcol_l54_monto_imp_perc', null, 'sum');
									  var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[17]);
									  /* if (isEmpty(montoImponible) || montoImponible <= 0) {
										var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[16]);
									  } */
	  
									  if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != 'C' && (parseFloat(montoImponible, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(montoImponible, 10)) >= 0.00)))) {
										// Genero el Absoluto
										montoImponible = Math.abs(montoImponible);
										// Si es Nota de Credito, Va en Negativo
										var longitudMontoImponible = 12;
										var caracterRellenoMontoImp = '';
										if (codigoComprobante == 'C' || codigoComprobante == 'H') {
										  longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
										  caracterRellenoMontoImp = '-';
										}
										percepcionARBA.percepcion.montoImponible = caracterRellenoMontoImp + padding_left(parseFloat(montoImponible, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudMontoImponible);
										// Obtengo el Tipo de Operacion
										const tipoOperacionPer = resultadoTXTPercepcionesARBA.getValue({
										  name: "formulatext",
										  summary: search.Summary.GROUP
										});
										if (!isEmpty(tipoOperacionPer) && tipoOperacionPer.length == 1) {
										  percepcionARBA.percepcion.tipoOperacionPer = tipoOperacionPer;
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Tipo de Operacion";
										}
									  } else {
										errorGlobal = true;
										descripcionError = "El Monto Imponible es Invalido";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "El Importe de Percepcion es Invalido";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo La Letra del Comprobante";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Numero de Comprobante";
							}
	  
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numerador de Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Codigo de Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Formateando la Fecha de Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De Percepcion";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Numero de Documento del Cliente Invalido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo Numero de Documento del Cliente";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
	  
			  // Genero el Contenido
			  if (errorGlobal == false) {
	  
				if (percepcionARBA.percepcion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  var error = false;
				  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcionARBA.sujeto.numeroDocSujeto + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.codigoComprobante +
					percepcionARBA.percepcion.letra + percepcionARBA.percepcion.puntoVenta + percepcionARBA.percepcion.numeroComprobante +
					percepcionARBA.percepcion.montoImponible + percepcionARBA.percepcion.importePercepcion + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.tipoOperacionPer;
	  
				  // Grabo Registro de TXT
				  /*var estadoGeneracionTXT = null;
	  
				  estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);
	  
				  if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
				  // Error Generando TXT
				  error = true;
				  descripcionMensaje = "Error Generando TXT Percepciones";
				  if (isEmpty(estadoGeneracionTXT))
				  descripcionMensaje = estadoGeneracionTXT.descripcionError;
				  errorGeneral = true;
				  descripcionError = descripcionMensaje;
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				  }*/
	  
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				}
	  
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('Proceso Generacion TXT', 'Error Generando TXT Percepciones ARCIBA' + descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
			  }
	  
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
	  
			  if (existenPercepciones == false) {
	  
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);
	  
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  log.error('Proceso Generacion TXT', 'Error Obteniendo Percepciones ARBA');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
	  
		} catch (e) {
		  log.error('Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT ARBA - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  percepcionARBA = grabarError(true, 'Error Generando TXT de Percepciones - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionARBA = grabarError(false, 'Generacion de TXT de Percepciones Correcta - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente - ARBA', null, null, subsidiaria);
		  }
		}
	  
		log.debug('Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Percepciones');
	  
		percepcionARBA.contenidoTXT = contenidoTXT;
		return percepcionARBA;
	  }
   
	  function generarTxtPercepMisiones(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
   
		log.debug('generarTxtMisionesPerc', 'Inicio - Generación TXT Percepciones Misiones');
		var procesoEncolado = false;
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenPercepciones = false;
		var mensajeError = "Error Generando TXT de Percepciones Misiones";
		var descripcionError = "";
		var tipoComprobanteNS = "";
		var contenidoTXT = "";
		var refComprobante = "";
	  
		try {
		  var arrayPercepMisiones = new Object();
		  arrayPercepMisiones.percepcion = new Object();
		  arrayPercepMisiones.sujeto = new Object();
		  arrayPercepMisiones.existenPercepciones = false;
		  arrayPercepMisiones.error = false;
		  arrayPercepMisiones.descripcionError = "";
		  arrayPercepMisiones.procesoEncolado = false;
		  arrayPercepMisiones.idLog = idRegistroLOG;
		  arrayPercepMisiones.contenidoTXT = "";
	  
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  var iCont = 0;
		  var arrayFilters = new Array();
		  //arrayFilters[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			arrayFilters[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
	  
		  if (!isEmpty(subsidiaria))
			arrayFilters[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
	  
		  var search1 = search.load({
			id: "customsearch_l54_per_misiones",
			type: "transaction"
		  });
		  search1.filters.push(...arrayFilters);
		  var searchResults = search1.run();
	  
		  var resultPercepcionesMisiones = [];
	  
		  // resultIndex points to record starting current "resultado" in the entire results array
		  var resultIndex = 0;
		  var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  var resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
   
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultPercepcionesMisiones = resultado; //Primera ve inicializa
			  else
				resultPercepcionesMisiones = resultPercepcionesMisiones.concat(resultado);
			}
	  
			// increase pointer
			resultIndex = resultIndex + resultStep;
	  
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
	  
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0)
	  
		  // FIN Obtener la Informacion de PERCEPCIONES
	  
		  var informacionResultado = new Array();
		  var indiceArray = 0;
	  
		  log.debug('generarTxtPercepMisiones', 'INICIO Recorrer Percepciones');
	  
		  for (var i = 0; resultPercepcionesMisiones != null && i < resultPercepcionesMisiones.length; i++) {
			var result = resultPercepcionesMisiones[i];
			var columns = result.columns;
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[0]);
			informacionResultado[indiceArray].tipoTransaccion = result.getValue(columns[1]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[2]);
			informacionResultado[indiceArray].nombre = result.getValue(columns[3]);
			informacionResultado[indiceArray].cuit = result.getValue(columns[4]);
			informacionResultado[indiceArray].montoTotal = Number(result.getValue(columns[5])).toFixed(2);
			informacionResultado[indiceArray].alicuota = Number(result.getValue(columns[6])).toFixed(2);
			informacionResultado[indiceArray].tipoComprobante = result.getValue(columns[7]);
			informacionResultado[indiceArray].numeroComprobanteOriginal = result.getValue(columns[8]);
			informacionResultado[indiceArray].fechaComprobante = result.getValue(columns[9]);
			informacionResultado[indiceArray].cuitComprobante = result.getValue(columns[10]);
			informacionResultado[indiceArray].idInterno = result.getValue(columns[12]);
	  
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
	  
		  log.debug('generarTxtPercepMisiones', 'INICIO Ordenar' + JSON.stringify(informacionResultado));
	  
		  // Ordenar Array
		  var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
	  
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
	  
		  if (!isEmpty(informacionResultado)) {
	  
			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
	  
			  arrayPercepMisiones.percepcion = new Object();
			  arrayPercepMisiones.sujeto = new Object();
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  refComprobante = informacionResultado[i].idInterno;
	  
			  if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
				arrayPercepMisiones.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
				if (!isEmpty(informacionResultado[i].tipoTransaccion)) {
				  arrayPercepMisiones.percepcion.tipoTransaccion = informacionResultado[i].tipoTransaccion;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					arrayPercepMisiones.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].nombre)) {
					  arrayPercepMisiones.percepcion.nombre = informacionResultado[i].nombre;
					  if (!isEmpty(informacionResultado[i].cuit)) {
						arrayPercepMisiones.percepcion.cuit = informacionResultado[i].cuit;
						if (!isEmpty(informacionResultado[i].montoTotal) && parseFloat(informacionResultado[i].montoTotal) > 0) {
						  arrayPercepMisiones.percepcion.montoTotal = informacionResultado[i].montoTotal;
						  if (!isEmpty(informacionResultado[i].alicuota)) {
							arrayPercepMisiones.percepcion.alicuota = informacionResultado[i].alicuota;
	  
							if ((informacionResultado[i].tipoTransaccion).split('_').indexOf('NC') > -1 || (informacionResultado[i].tipoTransaccion).split('_').indexOf('NCE') > -1) {
							  if (!isEmpty(informacionResultado[i].tipoComprobante) ) {
								arrayPercepMisiones.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
								if (!isEmpty(informacionResultado[i].numeroComprobanteOriginal)) {
								  arrayPercepMisiones.percepcion.numeroComprobanteOriginal = informacionResultado[i].numeroComprobanteOriginal;
								  if (!isEmpty(informacionResultado[i].fechaComprobante)) {
									arrayPercepMisiones.percepcion.fechaComprobante = informacionResultado[i].fechaComprobante;
									if (!isEmpty(informacionResultado[i].cuitComprobante)) {
									  arrayPercepMisiones.percepcion.cuitComprobante = informacionResultado[i].cuitComprobante;
									}
									else {
										errorGlobal = true;
										descripcionError = 'El campo CUIT de Comprobante de la Transaccion Relacionada es obligatorio.' ;
									}
								  }
								  else {
									errorGlobal = true;
									descripcionError = 'El campo Fecha de Comprobante de la Transaccion Relacionada es obligatorio. ' ;
								  }
								}
								else {
									errorGlobal = true;
								  descripcionError = 'El campo Numero de Comprobante de la Transaccion Relacionada es obligatorio.' ;
								  }
							  }
							  else {
								errorGlobal = true;
								descripcionError = 'El campo Tipo de Comprobante de la Transaccion Relacionada es obligatorio.' ;
							 }	
							}else{
							  arrayPercepMisiones.percepcion.tipoComprobante = '';
							  arrayPercepMisiones.percepcion.numeroComprobanteOriginal = '';
							  arrayPercepMisiones.percepcion.fechaComprobante = '';
							  arrayPercepMisiones.percepcion.cuitComprobante = '';
							}
	  
						  }
						  else {
							errorGlobal = true;
							descripcionError = 'El campo Alicuota es obligatorio.' ;
						  }
						}
						else {
							errorGlobal = true;
						  descripcionError = 'El campo Monto Operación es obligatorio.' ;
						}
					  }
					  else {
						errorGlobal = true;
						descripcionError = 'El campo CUIT es obligatorio.' ;
					  }
					}
					else {
						errorGlobal = true;
					  descripcionError = 'El campo Razon Social es obligatorio.' ;
					}
				  } else {
					errorGlobal = true;
					descripcionError = 'El campo Punto de Venta + Nro de Comprobante es obligatorio.' ;
				  }
				} else {
					errorGlobal = true;
				  descripcionError = 'El campo Tipo de Comprobante es obligatorio.' ;
				}
			  } else {
				errorGlobal = true;
				descripcionError = 'El campo Fecha es obligatorio.' ;
			  }
	  
			  if(!errorGlobal){
				// Genero el Contenido
				if (arrayPercepMisiones.percepcion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  var error = false;
				  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += arrayPercepMisiones.percepcion.fechaPercepcion + ',' + arrayPercepMisiones.percepcion.tipoTransaccion + ',' + arrayPercepMisiones.percepcion.numeroComprobante + ',' + arrayPercepMisiones.percepcion.nombre + ',' + arrayPercepMisiones.percepcion.cuit +
					',' + arrayPercepMisiones.percepcion.montoTotal + ',' + arrayPercepMisiones.percepcion.alicuota + ',' + arrayPercepMisiones.percepcion.tipoComprobante +
					',' + arrayPercepMisiones.percepcion.numeroComprobanteOriginal + ',' + arrayPercepMisiones.percepcion.fechaComprobante + ',' + arrayPercepMisiones.percepcion.cuitComprobante;
	  
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}
	  
			  }else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('Proceso Generacion TXT', descripcionError);
				log.error('Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
			}
			  
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
	  
			}
	  
			if (errorGeneral == false) {
	  
			  if (existenPercepciones == false) {
	  
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Misiones Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);
	  
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  } else {
			log.debug('generarTxtPercepMisiones', 'No se encontraron Percepciones');
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
	  
		} catch (e) {
		  log.error('generarTxtPercepMisiones', 'Error Generando TXT Percepciones Misiones - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Percepciones Misiones - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  arrayPercepMisiones = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  arrayPercepMisiones = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		  }
		}
	  
		log.debug('generarTxtPercepMisiones', 'Finalizacion - Generacion TXT Percepciones Misiones');
		arrayPercepMisiones.contenidoTXT = contenidoTXT;
		return arrayPercepMisiones;
	  }
   
	  function generarTXTArbaRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Retenciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT ARBA Retenciones"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones ARBA";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		const marcaGenerarTXT = true;
		const errorParcial = false;
		let contenidoTXT = "";
		try {
		  var retencionARBA = {};
		  retencionARBA.retencion = {};
		  retencionARBA.sujeto = {};
		  retencionARBA.existenRetenciones = false;
		  retencionARBA.error = false;
		  retencionARBA.descripcionError = "";
		  retencionARBA.procesoEncolado = false;
		  retencionARBA.idLog = idRegistroLOG;
		  retencionARBA.retencion.importeRetencion = 0;
		  retencionARBA.contenidoTXT = "";
		  // Grabo Registro de TXT
		  const estadoGeneracionTXT = null;
		  const filtro = [];
		  let i = 0;
		  //if (!isEmpty(periodo))
		  //filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //////////////
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arba');
		  const search1 = search.load({
			id: "customsearch_l54_ret_arba",
			type: "customrecord_l54_retencion"
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_ARBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_ARBA_ret",
				details: "'resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);
			log.debug({
			  title: "generarTXT_ARBA - Retenciones",
			  details: "Cantidad Retenciones:  " + completeResultSet.length
			});
			for (i = 0; i < completeResultSet.length; i++) {
			  const columnasSSRetencionesARBA = completeResultSet[i].columns;
			  retencionARBA.retencion = {};
			  retencionARBA.sujeto = {};
			  const resultadoTXTRetencionesARBA = completeResultSet[i];
			  const columns = resultadoTXTRetencionesARBA.columns;
			  ///////////////////////////////////////////////////////////////////////////////////////////////
			  //Armo TXT
			  /*
			  Cuit contribuyente Percibido
			  Fecha Retencion
			  Numero Sucursal
			  Numero Emisión
			  Importe de Retencion
			  Tipo Operación
			   */
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idRetencionNetSuite = resultadoTXTRetencionesARBA.getValue({ name: "internalid" });
			  var refComprobante = resultadoTXTRetencionesARBA.getValue("custrecord_l54_ret_ref_pago_prov");
			  if (!isEmpty(refComprobante)) {
              let nroDocumento = resultadoTXTRetencionesARBA.getValue({ name: "custbody_54_cuit_entity", join: "custrecord_l54_ret_ref_pago_prov" });
				if (!isEmpty(nroDocumento)) {
				  // Formateo el Documento
				  nroDocumento = nroDocumento.replace(/-/g, "");
				  nroDocumento = nroDocumento.replace(/\./g, "");
				  // Elimino Blancos
				  nroDocumento = nroDocumento.replace(/ /g, "&nbsp");
				  if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
					// Formateo el Documento con el Formato Solicitado por ARBA
					const numeroDocumentoFinal = nroDocumento.substring(0, 2) + "-" + nroDocumento.substring(2, 10) + "-" + nroDocumento.substring(10, 11);
					retencionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
					// Obtengo la Fecha de Retencion
					const fechaRetencion = resultadoTXTRetencionesARBA.getValue({ name: "custrecord_l54_ret_fecha" });
					if (!isEmpty(fechaRetencion)) {
					  // Formateo la Fecha
					  //var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
					  const fechaRetencionDate = format.parse({
						value: fechaRetencion,
						type: format.Type.DATE
					  });
					  if (!isEmpty(fechaRetencionDate)) {
						// Obtengo las Componentes de la Fecha
						const diaRetencion = fechaRetencionDate.getDate();
						const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
						const anioRetencion = fechaRetencionDate.getFullYear();
						const fechaRetencionFinal = padding_left(diaRetencion, "0", 2) + "/" + padding_left(mesRetencion, "0", 2) + "/" + anioRetencion;
						retencionARBA.retencion.fechaRetencion = fechaRetencionFinal;
						// Obtengo el Numero de Emision (Numerador)
						const numerador = resultadoTXTRetencionesARBA.getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
						if (!isEmpty(numerador)) {
						  const numeroComprobante = numerador.toString().substr(-8);
						  if (!isEmpty(numeroComprobante)) {
							retencionARBA.retencion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
							// Obtengo el Numero de Sucursal (Punto de Venta)
							// const puntoVenta = resultadoTXTRetencionesARBA.getValue({ name: "custrecord_l54_ret_pv_pago_prov" });
							const puntoVenta = resultadoTXTRetencionesARBA.getValue(columns[11]);
							if (!isEmpty(puntoVenta)) {
							  retencionARBA.retencion.puntoVenta = puntoVenta;
							  // Obtengo el Tipo de Cambio
							  const tipoCambio = resultadoTXTRetencionesARBA.getValue({ name: "custrecord_l54_ret_tipo_cambio" });
							  if (!isEmpty(tipoCambio)) {
								// Obtengo el Importe de la Retencion
								// var importeRetencion = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_importe');
								const importeRetencion = resultadoTXTRetencionesARBA.getValue({ name: columnasSSRetencionesARBA[9] });
								/* var cantDecImporteRetencion = countDecimales(importeRetencion);
								var cantDecTipoCambio = countDecimales(tipoCambio);
								var cantidadDecimalesFinal = cantDecImporteRetencion + cantDecTipoCambio;
								var importeRetencionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */
								if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
								  // retencionARBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
								  /* retencionARBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(parseFloat(importeRetencionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 11); */
								  retencionARBA.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), "0", 11);
								  // Obtengo el Tipo de Operacion
								  // const tipoOperacionRet = resultadoTXTRetencionesARBA.getValue({ name: "formulatext" });
								  const tipoOperacionRet = resultadoTXTRetencionesARBA.getValue(columns[8]);
								  if (!isEmpty(tipoOperacionRet) && tipoOperacionRet.length == 1) {
									retencionARBA.retencion.tipoOperacionRet = tipoOperacionRet;
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Tipo de Operacion";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "El Importe de Retención debe ser mayor a 0.00";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Numero de Comprobante";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Formateando la Fecha de Retencion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De Retencion";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Numero de Documento del Proveedor Invalido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionARBA.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Retenciones Generado Correctamente";
				  contenidoTXT += retencionARBA.sujeto.numeroDocSujeto + retencionARBA.retencion.fechaRetencion + retencionARBA.retencion.puntoVenta +
					retencionARBA.retencion.numeroComprobante + retencionARBA.retencion.importeRetencion + retencionARBA.retencion.tipoOperacionRet;
				  // Grabo Registro de TXT
				  /*var estadoGeneracionTXT = null;
				  estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
				  if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
				  // Error Generando TXT
				  error = true;
				  descripcionMensaje = "Error Generando TXT Retenciones";
				  if (isEmpty(estadoGeneracionTXT))
				  descripcionMensaje = estadoGeneracionTXT.descripcionError;
				  errorGeneral = true;
				  descripcionError = descripcionMensaje;
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }*/
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Retencion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones ARCIBA');
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones ARCIBA"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones ARBA');
				  log.error({ title: "Proceso Generacion TXT", details: "Error Obteniendo Retenciones ARBA" });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT ARBA - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT ARBA - Error  " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionARBA = grabarError(true, "Error Generando TXT de Retenciones - ARBA", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionARBA = grabarError(false, "Generacion de TXT de Retenciones Correcta - ARBA", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente - ARBA", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Retenciones');
		log.debug({
		  title: "Proceso Generacion TXT - ARBA",
		  details: "Finalizacion - Generacion TXT ARBA Retenciones"
		});
		retencionARBA.contenidoTXT = contenidoTXT;
		return retencionARBA;
	  }
	  //[Lista]
	  function generarTXTSifereRet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Retenciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIFERE Retenciones"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionSIFERE = {};
		  retencionSIFERE.retencion = {};
		  retencionSIFERE.sujeto = {};
		  retencionSIFERE.existenRetenciones = false;
		  retencionSIFERE.error = false;
		  retencionSIFERE.descripcionError = "";
		  retencionSIFERE.procesoEncolado = false;
		  retencionSIFERE.idLog = idRegistroLOG;
		  retencionSIFERE.retencion.importeRetencion = 0;
		  retencionSIFERE.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTretencionSIFERE = [];
		  //filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('custbody_l54_fecha_emision_pago', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTretencionSIFERE[iCont++] = search.createFilter({
			  name: "custbody_l54_fecha_emision_pago", //The search return column name
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTretencionSIFERE[iCont++] = search.createFilter({
			  name: "subsidiary", //The search return column name
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_sifere');
		  const search1 = search.load({
			id: "customsearch_l54_ret_sifere",
			type: "transaction" //opc
		  });
		  search1.filters.push(...filtroTXTretencionSIFERE);
		  const searchResults = search1.run();
		  let resultadoTXTretencionesSIFERE = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTretencionesSIFERE = resultado; //Primera ve inicializa
			  else
				resultadoTXTretencionesSIFERE = resultadoTXTretencionesSIFERE.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_SIFERE_ret",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTretencionesSIFERE)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Retenciones', 'Cantidad retenciones:' + resultadoTXTretencionesSIFERE.length);
			log.debug({
			  title: "generarTXT_SIFERE - Retenciones",
			  details: "Cantidad retenciones: " + resultadoTXTretencionesSIFERE.length
			});
			//
			for (let i = 0; resultadoTXTretencionesSIFERE != null && i < resultadoTXTretencionesSIFERE.length; i++) {
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idretencionNetSuite = "";
			  //var refComprobante = resultadoTXTretencionesSIFERE[i].getValue('internalid', null, 'group');
			  var refComprobante = resultadoTXTretencionesSIFERE[i].getValue({
				name: "internalid",
				summary: search.Summary.GROUP
			  });
			  if (!isEmpty(refComprobante)) {
				//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
				//var codigoComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custrecord_l54_tipos_comp_orig_ret_cod', 'custbody_l54_tipo_comp_orig_ret', 'max');
				const codigoComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue({
				  name: "custrecord_l54_tipos_comp_orig_ret_cod",
				  join: "custbody_l54_tipo_comp_orig_ret",
				  summary: search.Summary.MAX,
				  //func: string
				});
				if (!isEmpty(codigoComprobanteOrigen)) {
				  retencionSIFERE.retencion.codigoComprobanteOrigen = padding_right(codigoComprobanteOrigen, " ", 1);
				  // Obtener la Letra del Comprobante que Origino la Retencion
				  //var letraComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_letra_comp_orig_ret', null, 'max');
				  let letraComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue({
					name: "custbody_l54_letra_comp_orig_ret",
					summary: search.Summary.MAX
				  });
				  //var letraComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getText('custbody_l54_letra_comp_orig_ret', null, 'max');
				  if (isEmpty(letraComprobanteOrigen)) {
					letraComprobanteOrigen = " ";
				  }
				  retencionSIFERE.retencion.letraComprobanteOrigen = padding_right(letraComprobanteOrigen, " ", 1);
				  // Obtener el Numero del Comprobante que Origino la Retencion
				  //var numeroComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_comp_orig_ret', null, 'max');
				  const numeroComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue({
					name: "custbody_l54_nro_comp_orig_ret",
					summary: search.Summary.MAX
				  });
				  if (!isEmpty(numeroComprobanteOrigen)) {
					retencionSIFERE.retencion.numeroComprobanteOrigen = padding_left(numeroComprobanteOrigen, "0", 20);
					// Obtengo el Numero de Sucursal de la Retencion
					//var nroSucursalRetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_sucursal_retencion', null, 'max');
					const nroSucursalRetencion = resultadoTXTretencionesSIFERE[i].getValue({
					  name: "custbody_l54_nro_sucursal_retencion",
					  summary: search.Summary.MAX
					});
					if (!isEmpty(nroSucursalRetencion)) {
					  retencionSIFERE.retencion.nroSucursalRetencion = padding_left(nroSucursalRetencion, "0", 4);
					  // Obtener el Numero de Comprobante de Retencion
					  //var nroComprobanteRetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_comp_retencion', null, 'max');
					  const nroComprobanteRetencion = resultadoTXTretencionesSIFERE[i].getValue({
						name: "custbody_l54_nro_comp_retencion",
						summary: search.Summary.MAX
					  });
					  if (!isEmpty(nroComprobanteRetencion)) {
						retencionSIFERE.retencion.nroComprobanteRetencion = padding_left(nroComprobanteRetencion, "0", 16);
						// Obtengo Tipo de Cambio de la Retencion
						//var tipoCambio = Math.abs(resultadoTXTretencionesSIFERE[i].getValue('exchangerate', null, 'max'));
						const tipoCambio = Math.abs(resultadoTXTretencionesSIFERE[i].getValue({
						  name: "exchangerate",
						  summary: search.Summary.MAX
						}));
						if (!isEmpty(tipoCambio)) {
						  // Obtengo Fecha de Retencion
						  //var fecharetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_fecha_emision_pago', null, 'max');
						  const fecharetencion = resultadoTXTretencionesSIFERE[i].getValue({
							name: "custbody_l54_fecha_emision_pago",
							summary: search.Summary.MAX
						  });
						  if (!isEmpty(fecharetencion)) {
							// Formateo la Fecha
							//var fecharetencionDate = nlapiStringToDate(fecharetencion, 'datetimetz');
							const fecharetencionDate = format.parse({
							  value: fecharetencion,
							  type: format.Type.DATE
							});
							if (!isEmpty(fecharetencionDate)) {
							  // Obtengo las Componentes de la Fecha
							  const diaretencion = fecharetencionDate.getDate();
							  const mesretencion = parseInt(fecharetencionDate.getMonth(), 10) + parseInt(1, 10);
							  const anioretencion = fecharetencionDate.getFullYear();
							  const fecharetencionFinal = padding_left(diaretencion, "0", 2) + "/" + padding_left(mesretencion, "0", 2) + "/" + anioretencion;
							  retencionSIFERE.retencion.fecharetencion = fecharetencionFinal;
							  const jurisdiccionStr = "";
							  //var jurisdiccionID = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_prov_origen_retencion', null, 'group');
							  const jurisdiccionID = resultadoTXTretencionesSIFERE[i].getValue({
								name: "custbody_l54_prov_origen_retencion",
								summary: search.Summary.GROUP
							  });
							  /*if(!isEmpty(jurisdiccionID)){
							  jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
							  }*/
							  //var codigoJurisdiccion = resultadoTXTretencionesSIFERE[i].getValue('custrecord_l54_zona_impuestos_codigo', 'custbody_l54_prov_origen_retencion', 'group');
							  const codigoJurisdiccion = resultadoTXTretencionesSIFERE[i].getValue({
								name: "custrecord_l54_zona_impuestos_codigo",
								join: "custbody_l54_prov_origen_retencion",
								summary: search.Summary.GROUP
							  });
							  if (!isEmpty(codigoJurisdiccion)) {
								retencionSIFERE.retencion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);
								// Obtengo el CUIT del Agente de retencion
								//var cuitEmpresa = resultadoTXTretencionesSIFERE[i].getValue('custbody_54_cuit_entity', null, 'MAX');
								let cuitEmpresa = resultadoTXTretencionesSIFERE[i].getValue({
								  name: "custbody_54_cuit_entity",
								  summary: search.Summary.MAX
								});
								if (!isEmpty(cuitEmpresa)) {
								  // Obtengo el Tamaño del CUIT
								  let cuitEmpresaString = cuitEmpresa.toString();
								  cuitEmpresaString = cuitEmpresaString.replace(/-/g, "");
								  cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, "");
								  cuitEmpresaString = cuitEmpresaString.replace(/ /g, "&nbsp");
								  cuitEmpresaString = cuitEmpresaString.toString();
								  const tam = cuitEmpresaString.length;
								  if (tam == 11) {
									// Agrego los -
									const primerosDigitos = cuitEmpresaString.substr(0, 2);
									const segundosDigitos = cuitEmpresaString.substr(2, 8);
									const tercerosDigitos = cuitEmpresaString.substr(10, 1);
									if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
									  cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
									  retencionSIFERE.retencion.cuitEmpresa = cuitEmpresa;
									  // Obtengo el Importe de la Retencion
									  //var importeRetencion = resultadoTXTretencionesSIFERE[i].getValue('formulacurrency', null, 'sum');
									  const importeRetencion = resultadoTXTretencionesSIFERE[i].getValue({
										name: "formulacurrency",
										summary: search.Summary.SUM
									  });
									  if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) != 0.00) {
										if (parseFloat(importeRetencion, 10) < 0.00) {
										  retencionSIFERE.retencion.importeRetencion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importeRetencion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 10);
										} else {
										  retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 11);
										}
										// Esta retención no se multiplica por tipo de cambio porque en este caso netsuite las devuelve en moneda local
										//retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
									  } else {
										errorGlobal = true;
										descripcionError = "El Importe de Retencion no debe ser 0.00";
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Aplicando Formato a CUIT del Cliente";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "CUIT de la Empresa Invalido";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error No se Encuentra Configurado el CUIT del Cliente";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Formateando la Fecha de la Retencion";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Fecha De la Retencion";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero del Comprobante de Retencion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Numero de Sucursal del Comprobante de Retencion";
					}
				  }
				  else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de Comprobante que Origino la Retencion";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante que Origino la Retencion";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante de Pago del Cliente";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionSIFERE.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Retenciones Generado Correctamente";
				  contenidoTXT += retencionSIFERE.retencion.codigoJurisdiccion + retencionSIFERE.retencion.cuitEmpresa + retencionSIFERE.retencion.fecharetencion +
					retencionSIFERE.retencion.nroSucursalRetencion + retencionSIFERE.retencion.nroComprobanteRetencion + retencionSIFERE.retencion.codigoComprobanteOrigen +
					retencionSIFERE.retencion.letraComprobanteOrigen + retencionSIFERE.retencion.numeroComprobanteOrigen + retencionSIFERE.retencion.importeRetencion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Retencion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIFERE ' + descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Retenciones SIFERE  " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTretencionesSIFERE) && resultadoTXTretencionesSIFERE.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idretencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIFERE');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Retenciones SIFERE"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idretencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Retenciones - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIFERE - Retenciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
		  //retencionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  retencionSIFERE = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIFERE = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Retenciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIFERE - Retenciones"
		});
		retencionSIFERE.contenidoTXT = contenidoTXT;
		return retencionSIFERE;
	  }
	  //[Lista]
	  function generarTXTSiferePer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIFERE Percepciones"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var percepcionSIFERE = {};
		  percepcionSIFERE.percepcion = {};
		  percepcionSIFERE.sujeto = {};
		  percepcionSIFERE.existenPercepciones = false;
		  percepcionSIFERE.error = false;
		  percepcionSIFERE.descripcionError = "";
		  percepcionSIFERE.procesoEncolado = false;
		  percepcionSIFERE.idLog = idRegistroLOG;
		  percepcionSIFERE.percepcion.importePercepcion = 0;
		  percepcionSIFERE.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTpercepcionesSIFERE = [];
		  //filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_sifere');
		  const search1 = search.load({
			id: "customsearch_l54_per_sifere",
			type: "transaction"
		  });
		  search1.filters.push(...filtroTXTpercepcionesSIFERE);
		  const searchResults = search1.run();
		  let resultadoTXTpercepcionesSIFERE = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTpercepcionesSIFERE = resultado; //Primera ve inicializa
			  else
				resultadoTXTpercepcionesSIFERE = resultadoTXTpercepcionesSIFERE.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_SIFERE_per",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTpercepcionesSIFERE)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Percepciones', 'Cantidad percepciones:' + resultadoTXTpercepcionesSIFERE.length);
			log.debug({
			  title: "generarTXT_SIFERE - Percepciones",
			  details: "Cantidad percepciones: " + resultadoTXTpercepcionesSIFERE.length
			});
			//
			for (let i = 0; resultadoTXTpercepcionesSIFERE != null && i < resultadoTXTpercepcionesSIFERE.length; i++) {
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idpercepcionNetSuite = "";
			  var refComprobante = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "internalid", summary: search.Summary.GROUP });
			  if (!isEmpty(refComprobante)) {
				//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
				const codigoComprobante = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "formulatext", summary: search.Summary.MAX });
				if (!isEmpty(codigoComprobante)) {
				  percepcionSIFERE.percepcion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
				  // Obtengo el Numero del Comprobante
				  const numerador = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custbody_l54_numero_entero_prov", summary: search.Summary.MAX });
				  if (!isEmpty(numerador)) {
					const numeroComprobante = numerador.toString().substr(-8);
					// Tomo el Punto de Venta
					//var puntoVenta = arrayNumerador[1];
					const puntoVenta = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custbody_l54_punto_venta_prov", summary: search.Summary.MAX });
					// Tomo la Latra del Comprobante
					//var letra = arrayNumerador[0];
					const letra = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custbody_l54_letra", summary: search.Summary.MAX });
					if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
					  percepcionSIFERE.percepcion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
					  percepcionSIFERE.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
					  percepcionSIFERE.percepcion.letraDocumento = padding_right(letra, " ", 1);
					  // Obtengo Tipo de Cambio de la Percepcion
					  const tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE[i].getValue({ name: "exchangerate", summary: search.Summary.MAX }));
					  if (!isEmpty(tipoCambio)) {
						// Obtengo Fecha de Percepcion
						const fechapercepcion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "trandate", summary: search.Summary.MAX });
						if (!isEmpty(fechapercepcion)) {
						  // Formateo la Fecha
						  //var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
						  const fechapercepcionDate = format.parse({
							value: fechapercepcion,
							type: format.Type.DATE
						  });
						  if (!isEmpty(fechapercepcionDate)) {
							// Obtengo las Componentes de la Fecha
							const diapercepcion = fechapercepcionDate.getDate();
							const mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
							const aniopercepcion = fechapercepcionDate.getFullYear();
							const fechapercepcionFinal = padding_left(diapercepcion, "0", 2) + "/" + padding_left(mespercepcion, "0", 2) + "/" + aniopercepcion;
							percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;
							const jurisdiccionStr = "";
							const jurisdiccionID = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custcol_l54_jurisd_iibb_lineas", summary: search.Summary.GROUP });
							/*if(!isEmpty(jurisdiccionID)){
							jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
							}*/
							const codigoJurisdiccion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custrecord_l54_zona_impuestos_codigo", join: "custcol_l54_jurisd_iibb_lineas", summary: search.Summary.GROUP });
							if (!isEmpty(codigoJurisdiccion)) {
							  percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);
							  // Obtengo el CUIT del Agente de percepcion
							  let cuitEmpresa = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custbody_54_cuit_entity", summary: search.Summary.MAX });
							  if (!isEmpty(cuitEmpresa)) {
								// Obtengo el Tamaño del CUIT
								let cuitEmpresaString = cuitEmpresa.toString();
								cuitEmpresaString = cuitEmpresaString.replace(/-/g, "");
								cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, "");
								cuitEmpresaString = cuitEmpresaString.replace(/ /g, "&nbsp");
								cuitEmpresaString = cuitEmpresaString.toString();
								const tam = cuitEmpresaString.length;
								if (tam == 11) {
								  // Agrego los -
								  const primerosDigitos = cuitEmpresaString.substr(0, 2);
								  const segundosDigitos = cuitEmpresaString.substr(2, 8);
								  const tercerosDigitos = cuitEmpresaString.substr(10, 1);
								  if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
									cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
									percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;
									// Obtengo el Importe de la Percepcion
									const importePercepcion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "formulacurrency", summary: search.Summary.SUM });
									if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
									  if (parseFloat(importePercepcion, 10) < 0.00) {
										percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 10);
									  } else {
										percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 11);
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "El Importe de Percepcion no debe ser 0.00";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "CUIT de la Empresa Invalido";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Formateando la Fecha de la Percepcion";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Fecha De la Percepcion";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Numero de Comprobante";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionSIFERE.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
					percepcionSIFERE.percepcion.puntoVenta + percepcionSIFERE.percepcion.numeroComprobante + percepcionSIFERE.percepcion.codigoComprobante + percepcionSIFERE.percepcion.letraDocumento +
					percepcionSIFERE.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIFERE ' + descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones SIFERE " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTpercepcionesSIFERE) && resultadoTXTpercepcionesSIFERE.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones SIFERE');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Percepciones SIFERE"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Percepciones - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIFERE - Percepciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		  //percepcionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  percepcionSIFERE = grabarError(true, "Error Generando TXT de Percepciones", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSIFERE = grabarError(false, "Generacion de TXT de Percepciones Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Percepciones');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIFERE - Percepciones"
		});
		percepcionSIFERE.contenidoTXT = contenidoTXT;
		return percepcionSIFERE;
	  }
	  //[Lista]
	  function generarTXTSiferePerAduaneras(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Percepciones Aduaneras');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIFERE Percepciones Aduaneras"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones Aduaneras";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var percepcionSIFERE = {};
		  percepcionSIFERE.percepcion = {};
		  percepcionSIFERE.sujeto = {};
		  percepcionSIFERE.existenPercepciones = false;
		  percepcionSIFERE.error = false;
		  percepcionSIFERE.descripcionError = "";
		  percepcionSIFERE.procesoEncolado = false;
		  percepcionSIFERE.idLog = idRegistroLOG;
		  percepcionSIFERE.percepcion.importePercepcion = 0;
		  percepcionSIFERE.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTpercepcionesSIFERE = [];
		  //filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_aduaneras_sifere');
		  const search1 = search.load({
			id: "customsearch_l54_per_aduaneras_sifere",
			type: "transaction" //opc
		  });
		  search1.filters.push(...filtroTXTpercepcionesSIFERE);
		  const searchResults = search1.run();
		  let resultadoTXTpercepcionesSIFERE = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTpercepcionesSIFERE = resultado; //Primera ve inicializa
			  else
				resultadoTXTpercepcionesSIFERE = resultadoTXTpercepcionesSIFERE.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_per_aduaneras', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_SIFERE_per_aduaneras",
				details: "resultIndex:  " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTpercepcionesSIFERE)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Percepciones Aduaneras', 'Cantidad percepciones:' + resultadoTXTpercepcionesSIFERE.length);
			log.debug({
			  title: "generarTXT_SIFERE - Percepciones Aduaneras",
			  details: "Cantidad percepciones: " + resultadoTXTpercepcionesSIFERE.length
			});
			//
			for (let i = 0; resultadoTXTpercepcionesSIFERE != null && i < resultadoTXTpercepcionesSIFERE.length; i++) {
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idpercepcionNetSuite = "";
			  var refComprobante = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "internalid", summary: search.Summary.GROUP });
			  if (!isEmpty(refComprobante)) {
				// Obtengo el Numero del Despacho
				const numeroDespacho = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custrecord_l54_despacho_importacion_cod", join: "custbody_l54_despacho_importacion", summary: search.Summary.MAX });
				if (!isEmpty(numeroDespacho)) {
				  percepcionSIFERE.percepcion.numeroDespacho = padding_right(numeroDespacho, " ", 20);
				  // Obtengo Tipo de Cambio de la Percepcion
				  const tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE[i].getValue({ name: "exchangerate", summary: search.Summary.MAX }));
				  if (!isEmpty(tipoCambio)) {
					// Obtengo Fecha de Percepcion
					const fechapercepcion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "trandate", summary: search.Summary.MAX });
					if (!isEmpty(fechapercepcion)) {
					  // Formateo la Fecha
					  //var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
					  const fechapercepcionDate = format.parse({
						value: fechapercepcion,
						type: format.Type.DATE
					  });
					  if (!isEmpty(fechapercepcionDate)) {
						// Obtengo las Componentes de la Fecha
						const diapercepcion = fechapercepcionDate.getDate();
						const mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
						const aniopercepcion = fechapercepcionDate.getFullYear();
						const fechapercepcionFinal = padding_left(diapercepcion, "0", 2) + "/" + padding_left(mespercepcion, "0", 2) + "/" + aniopercepcion;
						percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;
						const jurisdiccionStr = "";
						const jurisdiccionID = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custcol_l54_jurisd_iibb_lineas", summary: search.Summary.GROUP });
						/*if(!isEmpty(jurisdiccionID)){
						jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
						}*/
						const codigoJurisdiccion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custrecord_l54_zona_impuestos_codigo", join: "custcol_l54_jurisd_iibb_lineas", summary: search.Summary.GROUP });
						if (!isEmpty(codigoJurisdiccion)) {
						  percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);
						  // Obtengo el CUIT del Agente de percepcion
						  let cuitEmpresa = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "custbody_54_cuit_entity", summary: search.Summary.MAX });
						  if (!isEmpty(cuitEmpresa)) {
							// Obtengo el Tamaño del CUIT
							let cuitEmpresaString = cuitEmpresa.toString();
							cuitEmpresaString = cuitEmpresaString.replace(/-/g, "");
							cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, "");
							cuitEmpresaString = cuitEmpresaString.replace(/ /g, "&nbsp");
							cuitEmpresaString = cuitEmpresaString.toString();
							const tam = cuitEmpresaString.length;
							if (tam == 11) {
							  // Agrego los -
							  const primerosDigitos = cuitEmpresaString.substr(0, 2);
							  const segundosDigitos = cuitEmpresaString.substr(2, 8);
							  const tercerosDigitos = cuitEmpresaString.substr(10, 1);
							  if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
								cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
								percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;
								// Obtengo el Importe de la Percepcion
								const importePercepcion = resultadoTXTpercepcionesSIFERE[i].getValue({ name: "formulacurrency", summary: search.Summary.SUM });
								if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
								  if (parseFloat(importePercepcion, 10) < 0.00) {
									percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 10);
								  } else {
									percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 11);
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "El Importe de Percepcion no debe ser 0.00";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "CUIT del Proveedor Invalido";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error No se Encuentra Configurado el CUIT del Proveedor";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Formateando la Fecha de la Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De la Percepcion";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Tipo de Cambio del Comprobante de la Percepcion";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo Numero de Despacho del Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionSIFERE.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Aduaneras Generado Correctamente";
				  contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
					percepcionSIFERE.percepcion.numeroDespacho + percepcionSIFERE.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Aduaneras SIFERE ' + descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones Aduaneras SIFERE " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones Aduaneras - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTpercepcionesSIFERE) && resultadoTXTpercepcionesSIFERE.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Aduaneras Correcta - No se Encontraron Percepciones Aduaneras", idpercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones Aduaneras SIFERE');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Percepciones Aduaneras SIFERE"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones Aduaneras - Error : Error Obteniendo Percepciones Aduaneras", idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Percepciones Aduaneras - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT SIFERE - Percepciones Aduaneras - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		  //percepcionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  percepcionSIFERE = grabarError(true, "Error Generando TXT de Percepciones Aduaneras", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSIFERE = grabarError(false, "Generacion de TXT de Percepciones Aduaneras Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Aduaneras Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Percepciones Aduaneras');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIFERE - Percepciones Aduaneras"
		});
		percepcionSIFERE.contenidoTXT = contenidoTXT;
		return percepcionSIFERE;
	  }
	  //[Lista]
	  function generarTXTIVAPer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT IVA Percepciones Sufridas');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT IVA Percepciones Sufridas"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var percepcionIVA = {};
		  percepcionIVA.percepcion = {};
		  percepcionIVA.sujeto = {};
		  percepcionIVA.existenPercepciones = false;
		  percepcionIVA.error = false;
		  percepcionIVA.descripcionError = "";
		  percepcionIVA.procesoEncolado = false;
		  percepcionIVA.idLog = idRegistroLOG;
		  percepcionIVA.percepcion.importePercepcion = 0;
		  percepcionIVA.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTpercepcionesIVA = [];
		  //filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTpercepcionesIVA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTpercepcionesIVA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTpercepcionesIVA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTpercepcionesIVA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_iva');
		  const search1 = search.load({
			id: "customsearch_l54_per_iva",
			type: "transaction" //opc
		  });
		  search1.filters.push(...filtroTXTpercepcionesIVA);
		  const searchResults = search1.run();
		  let resultadoTXTpercepcionesIVA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTpercepcionesIVA = resultado; //Primera ve inicializa
			  else
				resultadoTXTpercepcionesIVA = resultadoTXTpercepcionesIVA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXT_IVA_per",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTpercepcionesIVA)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_IVA - Percepciones', 'Cantidad percepciones:' + resultadoTXTpercepcionesIVA.length);
			log.debug({
			  title: "generarTXT_IVA - Percepciones",
			  details: "Cantidad percepciones: " + resultadoTXTpercepcionesIVA.length
			});
			//
			for (let i = 0; resultadoTXTpercepcionesIVA != null && i < resultadoTXTpercepcionesIVA.length; i++) {
			  const columns = resultadoTXTpercepcionesIVA[i].columns;
			  let numeroComprobante = "";
			  let errorReferenciaN = false;
			  let puntoVenta = "";
			  let letra = "";
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idpercepcionNetSuite = "";
			  percepcionIVA.percepcion.numeroComprobanteFinal = "";
			  var refComprobante = resultadoTXTpercepcionesIVA[i].getValue({ name: "internalid", summary: search.Summary.GROUP });
			  if (!isEmpty(refComprobante)) {
				const codigoRegimen = resultadoTXTpercepcionesIVA[i].getValue({ name: "custrecord_l54_percepcion_cod_regimen", join: "custcol_l54_percepciones", summary: search.Summary.GROUP });
				if (!isEmpty(codigoRegimen)) {
				  //var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
				  //var codigoComprobante = resultadoTXTpercepcionesIVA[i].getValue('formulatext', null, 'max');
				  //if (!isEmpty(codigoComprobante)) {
				  percepcionIVA.percepcion.codigoRegimen = padding_left(codigoRegimen, "0", 3);
				  // Obtengo el Numero del Comprobante
				  const numerador = resultadoTXTpercepcionesIVA[i].getValue({ name: "custbody_l54_numero_entero_prov", summary: search.Summary.MAX });
				  const esDespachoImportacion = resultadoTXTpercepcionesIVA[i].getValue({ name: columns[11] });
				  const referenciaNumerador = resultadoTXTpercepcionesIVA[i].getValue({ name: columns[12] });
				  // if ((!isEmpty(numerador)) || (!isEmpty(esDespachoImportacion) && esDespachoImportacion == 'T' && !isEmpty(referenciaNumerador))) {
				  if (!isEmpty(esDespachoImportacion) && (esDespachoImportacion == "T" || esDespachoImportacion === true)) {
					if (!isEmpty(referenciaNumerador)) {
					  //percepcionIVA.percepcion.numeroComprobanteFinal = padding_left(referenciaNumerador, " ", 16);
					  percepcionIVA.percepcion.numeroComprobanteFinal = referenciaNumerador;
					  percepcionIVA.percepcion.numeroComprobanteInicial = "";
					} else {
					  errorReferenciaN = true;
					}
				  } else {
					numeroComprobante = numerador.toString().substr(-8);
					// Tomo el Punto de Venta
					//var puntoVenta = arrayNumerador[1];
					puntoVenta = resultadoTXTpercepcionesIVA[i].getValue({ name: "custbody_l54_punto_venta_prov", summary: search.Summary.MAX });
					// Tomo la Latra del Comprobante
					//var letra = arrayNumerador[0];
					letra = resultadoTXTpercepcionesIVA[i].getValue({ name: "custbody_l54_letra", summary: search.Summary.MAX });
				  }
				  if (!isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal) || (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra) && !errorReferenciaN)) {
					if (isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal)) {
					  percepcionIVA.percepcion.numeroComprobanteFinal = padding_left(numeroComprobante, "0", 8);
					  percepcionIVA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 5);
					  percepcionIVA.percepcion.letraDocumento = padding_right(letra, " ", 1);
					  //percepcionIVA.percepcion.numeroComprobanteInicial = padding_right(percepcionIVA.percepcion.letraDocumento + "-" + percepcionIVA.percepcion.puntoVenta, " ", 8);
					  percepcionIVA.percepcion.numeroComprobanteInicial = padding_left(percepcionIVA.percepcion.letraDocumento + percepcionIVA.percepcion.puntoVenta, " ", 8);
					}
					// Obtengo Tipo de Cambio de la Percepcion
					const tipoCambio = Math.abs(resultadoTXTpercepcionesIVA[i].getValue({ name: "exchangerate", summary: search.Summary.MAX }));
					if (!isEmpty(tipoCambio)) {
					  // Obtengo Fecha de Percepcion
					  const fechapercepcion = resultadoTXTpercepcionesIVA[i].getValue({ name: "trandate", summary: search.Summary.MAX });
					  if (!isEmpty(fechapercepcion)) {
						// Formateo la Fecha
						//var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
						const fechapercepcionDate = format.parse({
						  value: fechapercepcion,
						  type: format.Type.DATE
						});
						if (!isEmpty(fechapercepcionDate)) {
						  // Obtengo las Componentes de la Fecha
						  const diapercepcion = fechapercepcionDate.getDate();
						  const mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
						  const aniopercepcion = fechapercepcionDate.getFullYear();
						  const fechapercepcionFinal = padding_left(diapercepcion, "0", 2) + "/" + padding_left(mespercepcion, "0", 2) + "/" + aniopercepcion;
						  percepcionIVA.percepcion.fechapercepcion = fechapercepcionFinal;
						  // Obtengo el CUIT del Agente de percepcion
						  let cuitEmpresa = resultadoTXTpercepcionesIVA[i].getValue({ name: "custbody_54_cuit_entity", summary: search.Summary.MAX });
						  if (!isEmpty(cuitEmpresa)) {
							// Obtengo el Tamaño del CUIT
							let cuitEmpresaString = cuitEmpresa.toString();
							cuitEmpresaString = cuitEmpresaString.replace(/-/g, "");
							cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, "");
							cuitEmpresaString = cuitEmpresaString.replace(/ /g, "&nbsp");
							cuitEmpresaString = cuitEmpresaString.toString();
							const tam = cuitEmpresaString.length;
							if (tam == 11) {
							  // Agrego los -													
							  const primerosDigitos = cuitEmpresaString.substr(0, 2);
							  const segundosDigitos = cuitEmpresaString.substr(2, 8);
							  const tercerosDigitos = cuitEmpresaString.substr(10, 1);
							  if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
								cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
								percepcionIVA.percepcion.cuitEmpresa = cuitEmpresa;
								// Obtengo el Importe de la Percepcion
								const importePercepcion = resultadoTXTpercepcionesIVA[i].getValue({ name: "formulacurrency", summary: search.Summary.SUM });
								if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
								  if (parseFloat(importePercepcion, 10) < 0.00) {
									percepcionIVA.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 15);
								  }
								  else {
									percepcionIVA.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
								  }
								  //percepcionIVA.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
								} else {
								  errorGlobal = true;
								  descripcionError = "El Importe de Percepcion no debe ser 0.00";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "CUIT de la Empresa Invalido";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Formateando la Fecha de la Percepcion";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Fecha De la Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
					}
				  } else {
					errorGlobal = true;
					if (isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal) && errorReferenciaN) {
					  descripcionError = "Error Obteniendo el valor Referencia Nº del Comprobante de Despacho de Importación";
					} else {
					  descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
					}
				  }
				  /* } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Numero de Comprobante";
				  } */
				  /*} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				  }*/
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Regimen de la Percepcion";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionIVA.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcionIVA.percepcion.codigoRegimen + percepcionIVA.percepcion.cuitEmpresa + percepcionIVA.percepcion.fechapercepcion +
					percepcionIVA.percepcion.numeroComprobanteInicial + percepcionIVA.percepcion.numeroComprobanteFinal + percepcionIVA.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones IVA ' + descripcionError);
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT Percepciones IVA  " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTpercepcionesIVA) && resultadoTXTpercepcionesIVA.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones IVA');
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Obteniendo Percepciones IVA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT IVA - Percepciones - Error : ' + e.message);
		  log.error({
			title: "Proceso Generacion TXT",
			details: "Error Generando TXT IVA - Percepciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT IVA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		  //percepcionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  percepcionIVA = grabarError(true, "Error Generando TXT de Percepciones", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionIVA = grabarError(false, "Generacion de TXT de Percepciones Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT IVA - Percepciones Sufridas');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT IVA - Percepciones Sufridas"
		});
		percepcionIVA.contenidoTXT = contenidoTXT;
		return percepcionIVA;
	  }
	  //[Lista]
	  function generarTXTIVARet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Inicio - Generacion TXT IVA Retenciones Sufridas');
		log.debug({
		  title: "generarTXTIVARet",
		  details: "Inicio - Generacion TXT IVA Retenciones Sufridas"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionIVA = {};
		  retencionIVA.retencion = {};
		  retencionIVA.sujeto = {};
		  retencionIVA.existenRetenciones = false;
		  retencionIVA.error = false;
		  retencionIVA.descripcionError = "";
		  retencionIVA.procesoEncolado = false;
		  retencionIVA.idLog = idRegistroLOG;
		  retencionIVA.retencion.importeRetencion = 0;
		  retencionIVA.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTretencionesIVA = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTretencionesIVA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTretencionesIVA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_iva_sufridas');
		  const search1 = search.load({
			type: "transaction", //opc
			id: "customsearch_l54_ret_iva_sufridas"
		  });
		  search1.filters.push(...filtroTXTretencionesIVA);
		  const searchResults = search1.run();
		  let resultadoTXTretencionesIVA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTretencionesIVA = resultado; //Primera ve inicializa
			  else
				resultadoTXTretencionesIVA = resultadoTXTretencionesIVA.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTretencionesIVA)) {
			//nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Cantidad retenciones: ' + resultadoTXTretencionesIVA.length);
			log.debug({
			  title: "generarTXTIVARet",
			  details: "Cantidad retenciones: " + resultadoTXTretencionesIVA.length
			});
			for (let i = 0; resultadoTXTretencionesIVA != null && i < resultadoTXTretencionesIVA.length; i++) {
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = "";
			  retencionIVA.retencion = {};
			  retencionIVA.sujeto = {};
			  refComprobante = "";
			  const result = resultadoTXTretencionesIVA[i];
			  //var columns = result.getAllColumns();
			  const columns = result.columns;
			  // Obtengo el Codigo de Comprobante
			  idRetencionNetSuite = "";
			  //refComprobante = result.getValue(columns[6]);
			  refComprobante = result.getValue({ name: columns[0] });
			  log.debug({
				title: "generarTXTIVARet",
				details: "refComprobante o transaction ID: " + refComprobante
			  });
			  if (!isEmpty(result.getValue(columns[1]))) {
				retencionIVA.retencion.codigoRegimen = result.getValue({ name: columns[1] }); // Obtengo el Código de Régimen
				if (!isEmpty(result.getValue(columns[2]))) {
				  retencionIVA.retencion.cuitProveedor = result.getValue({ name: columns[2] }); // Obtengo el CUIT del Proveedor
				  if (!isEmpty(result.getValue(columns[3]))) {
					retencionIVA.retencion.fechaRetencion = result.getValue({ name: columns[3] }); // Obtengo la fecha de retención
					if (!isEmpty(result.getValue(columns[4]))) {
					  retencionIVA.retencion.nroCertificado = result.getValue({ name: columns[4] }); // Obtengo el nro del certificado
					  if (!isEmpty(result.getValue(columns[5]))) {
						retencionIVA.retencion.montoRetencion = result.getValue({ name: columns[5] }); // Obtengo el monto de la retención
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Monto de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Nro del Certificado";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha de la Retención";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT del Proveedor";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Código de Régimen";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionIVA.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  //var error = false;
				  //var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += retencionIVA.retencion.codigoRegimen + retencionIVA.retencion.cuitProveedor + retencionIVA.retencion.fechaRetencion +
					retencionIVA.retencion.nroCertificado + retencionIVA.retencion.montoRetencion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Retención";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Generando TXT Retenciones IVA ' + descripcionError);
				log.debug({
				  title: "generarTXTIVARet",
				  details: "Error Generando TXT Retenciones IVA " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTretencionesIVA) && resultadoTXTretencionesIVA.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Obteniendo Retenciones IVA');
				  log.error({
					title: "generarTXTIVARet",
					details: "Error Obteniendo Retenciones IVA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Generando TXT IVA - Retenciones - Error : ' + e.message);
		  log.error({
			title: "generarTXTIVARet",
			details: "Error Generando TXT IVA - Retenciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT IVA Retenciones - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionIVA = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionIVA = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones IVA Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Finalización - Generación TXT IVA - Retenciones Sufridas');
		log.debug({
		  title: "generarTXTIVARet",
		  details: "Finalización - Generación TXT IVA - Retenciones Sufridas"
		});
		retencionIVA.contenidoTXT = contenidoTXT;
		return retencionIVA;
	  }
	  //[Lista]
	  function generarTXTSaltaPer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Inicio - Generación TXT Percepciones Salta');
		log.debug({
		  title: "generarTXTSaltaPer",
		  details: "Inicio - Generación TXT Percepciones Salta"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var percepcionSALTA = {};
		  percepcionSALTA.percepcion = {};
		  percepcionSALTA.sujeto = {};
		  percepcionSALTA.existenPercepciones = false;
		  percepcionSALTA.error = false;
		  percepcionSALTA.descripcionError = "";
		  percepcionSALTA.procesoEncolado = false;
		  percepcionSALTA.idLog = idRegistroLOG;
		  //percepcionSALTA.percepcion.importeRetencion = 0;
		  percepcionSALTA.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTpercepcionesSalta = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTpercepcionesSalta[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTpercepcionesSalta[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTpercepcionesSalta[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTpercepcionesSalta[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_salta');
		  const search1 = search.load({
			type: "transaction", //opc*
			id: "customsearch_l54_per_salta"
		  });
		  search1.filters.push(...filtroTXTpercepcionesSalta);
		  const searchResults = search1.run();
		  let resultadoTXTpercepcionesSalta = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTpercepcionesSalta = resultado; //Primera ve inicializa
			  else
				resultadoTXTpercepcionesSalta = resultadoTXTpercepcionesSalta.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTpercepcionesSalta)) {
			//nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Cantidad percepciones: ' + resultadoTXTpercepcionesSalta.length);
			log.debug({
			  title: "generarTXTSaltaPer",
			  details: "Cantidad percepciones: " + resultadoTXTpercepcionesSalta.length
			});
			for (let i = 0; resultadoTXTpercepcionesSalta != null && i < resultadoTXTpercepcionesSalta.length; i++) {
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = "";
			  percepcionSALTA.percepcion = {};
			  percepcionSALTA.sujeto = {};
			  refComprobante = "";
			  const result = resultadoTXTpercepcionesSalta[i];
			  const columns = result.columns;
			  // Obtengo el Codigo de Comprobante
			  idRetencionNetSuite = "";
			  //refComprobante = result.getValue(columns[6]);
			  refComprobante = result.getValue({ name: columns[0] });
			  const recordType = result.getValue({ name: columns[9] });
			  //nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'refComprobante o transaction ID: ' + refComprobante);
			  log.debug({
				title: "generarTXTSaltaPer",
				details: "refComprobante o transaction ID: " + refComprobante
			  });
			  if (!isEmpty(result.getValue({ name: columns[1] }))) {
				percepcionSALTA.percepcion.fecha = result.getValue({ name: columns[1] }); // Fecha de la percepción
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  percepcionSALTA.percepcion.tipoComprobante = result.getValue({ name: columns[2] }); // Tipo de Comprobante
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					percepcionSALTA.percepcion.nroComprobante = result.getValue({ name: columns[3] }); // Número de Comprobante
					if (!isEmpty(result.getValue({ name: columns[4] }))) {
					  percepcionSALTA.percepcion.name = result.getValue({ name: columns[4] }); // Nombre
					  if (!isEmpty(result.getValue(columns[5]))) {
						percepcionSALTA.percepcion.cuit = result.getValue({ name: columns[5] }); // CUIT
						if (!isEmpty(result.getValue({ name: columns[6] })) && parseFloat((result.getValue({ name: columns[6] }))) > 0) {
						  percepcionSALTA.percepcion.monto = (recordType == "creditmemo") ? "-" + result.getValue({ name: columns[6] }) : result.getValue({ name: columns[6] }); // Monto total
						  if (!isEmpty(result.getValue({ name: columns[7] })) && parseFloat((result.getValue({ name: columns[6] }))) > 0) {
							percepcionSALTA.percepcion.alicuota = result.getValue({ name: columns[7] }); // Alicuota
							if (!isEmpty(result.getValue({ name: columns[8] })) && parseFloat((result.getValue({ name: columns[6] }))) > 0) {
							  percepcionSALTA.percepcion.importePercepcion = (recordType == "creditmemo") ? "-" + result.getValue({ name: columns[8] }) : result.getValue({ name: columns[8] }); // Importe Percepción
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el Importe de Percepción";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Alícuota";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Monto de la Transacción";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT del Cliente";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Nombre del Cliente";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Número de Comprobante";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Tipo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la Fecha de la Percepción";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionSALTA.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  //var error = false;
				  //var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += percepcionSALTA.percepcion.fecha + percepcionSALTA.percepcion.tipoComprobante + percepcionSALTA.percepcion.nroComprobante + percepcionSALTA.percepcion.name +
					percepcionSALTA.percepcion.cuit + percepcionSALTA.percepcion.monto + percepcionSALTA.percepcion.alicuota + percepcionSALTA.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Percepción";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SIPOT IIBB SALTA - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Generando TXT SIPOT IIBB SALTA: ' + descripcionError);
				log.error({
				  title: "generarTXTSaltaPer",
				  details: "Error Generando TXT SIPOT IIBB SALTA: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SIPOT IIBB SALTA - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTpercepcionesSalta) && resultadoTXTpercepcionesSalta.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT SIPOT IIBB SALTA Correcta - No se Encontraron Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Obteniendo Percepciones SIPOT IIBB SALTA');
				  log.error({
					title: "generarTXTSaltaPer",
					details: "Error Obteniendo Percepciones SIPOT IIBB SALTA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Obteniendo Percepciones SIPOT IIBB SALTA - Error : Error Obteniendo Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + e.message);
		  log.error({
			title: "generarTXTSaltaPer",
			details: "Error Generando TXT SIPOT IIBB SALTA - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIPOT IIBB SALTA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcionSALTA = grabarError(true, "Error Generando TXT SIPOT IIBB SALTA", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSALTA = grabarError(false, "Generación de TXT SIPOT IIBB SALTA Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT SIPOT IIBB SALTA Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Finalización - Generación TXT SIPOT IIBB SALTA');
		log.debug({
		  title: "generarTXTSaltaPer",
		  details: "Finalización - Generación TXT SIPOT IIBB SALTA"
		});
		percepcionSALTA.contenidoTXT = contenidoTXT;
		return percepcionSALTA;
	  }
	  //[Lista]
	  function generarTXT_IVATUR(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Inicio - Generación TXT IVATUR');
		log.debug({
		  title: "generarTXT_IVATUR",
		  details: "Inicio - Generación TXT IVATUR"
		});
		log.debug("parametros", JSON.stringify({ periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria }));
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de IVATUR";
		//var descripcionError = "";
		let descripcionError = [];
		let contenidoTXT = "";
		let contenidoTXT_cabecera = "";
		let contenidoTXT_datos_comprobante = "";
		let contenidoTXT_datos_reintegro = "";
		let contenidoTXT_datos_comp_asociado = "";
		let contenidoTXT_subtotales_iva = "";
		let contenidoTXT_datosItem = "";
		let contenidoTXT_formasPago = "";
		let contenidoTXT_datos_turista = "";
		const procesoEncolado = false;
		let errorDatosTransaccion = false;
		let errorDatosItems = false;
		let errorDatosIVA = false;
		let errorDatosFormasPago = false;
		let errorDatosTurista = false;
		try {
		  var objInfoIVATUR = {};
		  objInfoIVATUR.info = {};
		  objInfoIVATUR.sujeto = {};
		  objInfoIVATUR.existenPercepciones = false;
		  objInfoIVATUR.error = false;
		  objInfoIVATUR.descripcionError = "";
		  objInfoIVATUR.procesoEncolado = false;
		  objInfoIVATUR.idLog = idRegistroLOG;
		  objInfoIVATUR.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  const arrayComprobantes = [];
		  // INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE CABECERA, COMPROBANTE Y COMPROBANTE ASOCIADO.
		  let iCont = 0;
		  const filtroTXTIVATUR = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTIVATUR[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTIVATUR[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTIVATUR[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTIVATUR[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_dat_cab_comp');
		  let search1 = search.load({
			type: "transaction", //*opc
			id: "customsearch_l54_txt_ivatur_dat_cab_comp"
		  });
		  search1.filters.push(...filtroTXTIVATUR);
		  let searchResults = search1.run();
		  let resultadoTXT_IVATUR = [];
		  let resultIndex = 0;
		  let resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXT_IVATUR = resultado; //Primera ve inicializa
			  else
				resultadoTXT_IVATUR = resultadoTXT_IVATUR.concat(resultado);
			}
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE CABECERA, COMPROBANTE Y COMPROBANTE ASOCIADO.
		  // INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE ITEMS.
		  let iCont_items = 0;
		  const filtroTXTIVATUR_items = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTIVATUR_items[iCont_items++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTIVATUR_items[iCont_items++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTIVATUR_items[iCont_items++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTIVATUR_items[iCont_items++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_datos_items');
		  search1 = search.load({
			type: "transaction", //*opc
			id: "customsearch_l54_txt_ivatur_datos_items"
		  });
		  search1.filters.push(...filtroTXTIVATUR_items);
		  searchResults = search1.run();
		  let resultadoTXT_IVATUR_items = [];
		  resultIndex = 0;
		  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  resultado; // temporary variable used to store the result set
		  do {
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXT_IVATUR_items = resultado; //Primera ve inicializa
			  else
				resultadoTXT_IVATUR_items = resultadoTXT_IVATUR_items.concat(resultado);
			}
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE ITEMS.
		  // INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE SUBTOTALES.
		  let iCont_subtotales = 0;
		  const filtroTXTIVATUR_subtotales = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			//filtroTXTIVATUR_subtotales[iCont_subtotales++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTIVATUR_subtotales[iCont_subtotales++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			//filtroTXTIVATUR_subtotales[iCont_subtotales++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTIVATUR_subtotales[iCont_subtotales++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_subtot_iva');
		  search1 = search.load({
			type: "transaction", //*opc
			id: "customsearch_l54_txt_ivatur_subtot_iva"
		  });
		  search1.filters.push(...filtroTXTIVATUR_subtotales);
		  searchResults = search1.run();
		  let resultadoTXT_IVATUR_transaccion_subtotales = [];
		  resultIndex = 0;
		  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  resultado; // temporary variable used to store the result set
		  do {
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXT_IVATUR_transaccion_subtotales = resultado; //Primera ve inicializa
			  else
				resultadoTXT_IVATUR_transaccion_subtotales = resultadoTXT_IVATUR_transaccion_subtotales.concat(resultado);
			}
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE SUBTOTALES.
		  if (!isEmpty(resultadoTXT_IVATUR)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros SS: ' + resultadoTXT_IVATUR.length);
			log.debug({
			  title: "generarTXT_IVATUR",
			  details: "Cantidad registros SS: " + resultadoTXT_IVATUR.length
			});
			//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR: ' + JSON.stringify(resultadoTXT_IVATUR));
			log.debug({
			  title: "generarTXT_IVATUR",
			  details: "LINE-11369 - resultadoTXT_IVATUR: " + JSON.stringify(resultadoTXT_IVATUR)
			});
			const cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
			let periodoConsulta = "";
			let mesConsulta = "";
			let mesConsultaAux = "";
			objInfoIVATUR.info = {};
			objInfoIVATUR.datosTurista = {}; // Obj para guardar datos del cliente
			objInfoIVATUR.datosIVA = {}; // Obj para guardar datos de subtotales IVA
			objInfoIVATUR.datosReintegro = {}; // Obj para guardar datos de Reintegro del comprobante
			objInfoIVATUR.datosItem = {}; // Obj para guardar datos de items
			objInfoIVATUR.formasPago = {}; // Obj para guardar datos de formas de pago
			// Inicio - Extraigo los datos de Cabecera del TXT (Sección 1 del TXT).
			objInfoIVATUR.cabecera = {}; // Obj para guardar datos de cabecera
			objInfoIVATUR.cabecera.tipoRegistro = "01";
			objInfoIVATUR.cabecera.cuitInformante = cuitEmpresa.replace(/[^0-9]+/g, "");
			//periodoConsulta = nlapiStringToDate(periodo.fDesde);
			periodoConsulta = format.parse({
			  value: periodo.fDesde,
			  type: format.Type.DATE
			});
			mesConsultaAux = periodoConsulta.getMonth() + 1;
			mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : "0" + mesConsultaAux.toString();
			objInfoIVATUR.cabecera.periodo = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
			objInfoIVATUR.cabecera.secuencia = "00";
			objInfoIVATUR.cabecera.codigoImpuesto = "0103";
			objInfoIVATUR.cabecera.codigoConcepto = "858";
			objInfoIVATUR.cabecera.nroFormulario = "8089";
			objInfoIVATUR.cabecera.versionSistema = "00100";
			objInfoIVATUR.cabecera.presentacionSinMov = "0";
			// Fin - Extraigo los datos de Cabecera del TXT (Sección 1 del TXT).
			// Inicio - Ingreso los datos de cabecera (sección 01)
			contenidoTXT_cabecera += objInfoIVATUR.cabecera.tipoRegistro + objInfoIVATUR.cabecera.cuitInformante + objInfoIVATUR.cabecera.periodo + objInfoIVATUR.cabecera.secuencia + objInfoIVATUR.cabecera.codigoImpuesto +
			  objInfoIVATUR.cabecera.codigoConcepto + objInfoIVATUR.cabecera.nroFormulario + objInfoIVATUR.cabecera.versionSistema + objInfoIVATUR.cabecera.presentacionSinMov + "\r\n";
			// Fin - Ingreso los datos de cabecera (sección 01)
			for (let i = 0; resultadoTXT_IVATUR != null && i < resultadoTXT_IVATUR.length; i++) {
			  descripcionError = [];
			  objInfoIVATUR.datosComp = {}; // Obj para guardar datos del comprobante
			  objInfoIVATUR.datosCompAsociado = {}; // Obj para guardar datos del Comprobante Asociado
			  objInfoIVATUR.datosReintegro = {}; // Obj para guardar datos del comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  //descripcionError = "";
			  var result = resultadoTXT_IVATUR[i];
			  //var columns = result.getAllColumns();
			  var columns = result.columns;
			  refComprobante = result.getValue({ name: columns[0] });
			  arrayComprobantes.push(refComprobante);
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'refComprobante o transaction ID: ' + refComprobante);
			  log.debug({
				title: "generarTXT_IVATUR",
				details: "refComprobante o transaction ID: " + refComprobante
			  });
			  // Inicio ------ Extraigo los datos del comprobante del TXT (Sección 2 del TXT).
			  if (!isEmpty(result.getValue({ name: columns[1] }))) {
				objInfoIVATUR.datosComp.tipoRegistro = result.getValue({ name: columns[1] });
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  objInfoIVATUR.datosComp.tipoComprobante = result.getValue({ name: columns[2] });
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					objInfoIVATUR.datosComp.puntoVenta = result.getValue({ name: columns[3] });
					if (!isEmpty(result.getValue({ name: columns[4] }))) {
					  objInfoIVATUR.datosComp.numero = result.getValue({ name: columns[4] });
					  if (!isEmpty(result.getValue({ name: columns[5] }))) {
						objInfoIVATUR.datosComp.fechaEmision = result.getValue({ name: columns[5] });
						if (!isEmpty(result.getValue({ name: columns[6] }))) {
						  objInfoIVATUR.datosComp.codDocReceptor = result.getValue({ name: columns[6] });
						  if (!isEmpty(result.getValue({ name: columns[7] }))) {
							objInfoIVATUR.datosComp.nroDocReceptor = result.getValue({ name: columns[7] });
							if (!isEmpty(result.getValue({ name: columns[8] }))) {
							  objInfoIVATUR.datosComp.paisReceptor = result.getValue({ name: columns[8] });
							  if (!isEmpty(result.getValue({ name: columns[9] }))) {
								objInfoIVATUR.datosComp.idImpositivo = result.getValue({ name: columns[9] });
								if (!isEmpty(result.getValue({ name: columns[10] }))) {
								  objInfoIVATUR.datosComp.relacionER = result.getValue({ name: columns[10] });
								  if (!isEmpty(result.getValue({ name: columns[11] })) && (result.getValue({ name: columns[11] }) >= 0)) {
									objInfoIVATUR.datosComp.impGravado = padding_left(result.getValue({ name: columns[11] }).replace(/[^0-9]+/g, ""), "0", 15);
									if (!isEmpty(result.getValue({ name: columns[12] })) && (result.getValue({ name: columns[12] }) >= 0)) {
									  objInfoIVATUR.datosComp.impNoGravado = padding_left(result.getValue({ name: columns[12] }).replace(/[^0-9]+/g, ""), "0", 15);
									  if (!isEmpty(result.getValue({ name: columns[13] })) && (result.getValue({ name: columns[13] }) >= 0)) {
										objInfoIVATUR.datosComp.impExento = padding_left(result.getValue({ name: columns[13] }).replace(/[^0-9]+/g, ""), "0", 15);
										if (!isEmpty(result.getValue({ name: columns[14] })) && (result.getValue({ name: columns[14] }) >= 0)) {
										  objInfoIVATUR.datosComp.impReintegro = padding_left(result.getValue({ name: columns[14] }).replace(/[^0-9]+/g, ""), "0", 15);
										  if (!isEmpty(result.getValue({ name: columns[15] }))) {
											objInfoIVATUR.datosComp.codigoMoneda = result.getValue({ name: columns[15] });
											if (!isEmpty(result.getValue({ name: columns[16] }))) {
											  objInfoIVATUR.datosComp.cotizacionMoneda = result.getValue({ name: columns[16] });
											  if (!isEmpty(result.getValue({ name: columns[17] }))) {
												objInfoIVATUR.datosComp.tipoCodAutotizacion = result.getValue({ name: columns[17] });
												if (!isEmpty(result.getValue({ name: columns[18] }))) {
												  objInfoIVATUR.datosComp.codAutorizacion = result.getValue({ name: columns[18] });
												  if (!isEmpty(result.getValue({ name: columns[19] }))) {
													objInfoIVATUR.datosComp.controladorFiscalCodigo = result.getValue({ name: columns[19] });
													if (!isEmpty(result.getValue({ name: columns[20] }))) {
													  objInfoIVATUR.datosComp.controladorFiscalSerie = result.getValue({ name: columns[20] });
													  if (!isEmpty(result.getValue({ name: columns[21] }))) {
														objInfoIVATUR.datosComp.total = result.getValue({ name: columns[21] });
													  } else {
														errorGlobal = true;
														descripcionError.push("Error obteniendo el Total de la Transacción");
													  }
													} else {
													  errorGlobal = true;
													  descripcionError.push("Error obteniendo el Controlador Fiscal Serie de la Transacción");
													}
												  } else {
													errorGlobal = true;
													descripcionError.push("Error obteniendo el Controlador Fiscal Código de la Transacción");
												  }
												} else {
												  errorGlobal = true;
												  descripcionError.push("Error obteniendo el Código de Autorización (CAE) de la Transacción");
												}
											  } else {
												errorGlobal = true;
												descripcionError.push("Error obteniendo el Tipo Código de Autorización de la Transacción");
											  }
											} else {
											  errorGlobal = true;
											  descripcionError.push("Error obteniendo la Cótización de Moneda de la Transacción");
											}
										  } else {
											errorGlobal = true;
											descripcionError.push("Error obteniendo la Moneda de la Transacción");
										  }
										} else {
										  errorGlobal = true;
										  descripcionError.push("Error obteniendo el Importe de Reintegro de la Transacción");
										}
									  } else {
										errorGlobal = true;
										descripcionError.push("Error obteniendo el Importe Exento de la Transacción");
									  }
									} else {
									  errorGlobal = true;
									  descripcionError.push("Error obteniendo el Importe No Gravado de la Transacción");
									}
								  } else {
									errorGlobal = true;
									descripcionError.push("Error obteniendo el Importe Gravado de la Transacción");
								  }
								} else {
								  errorGlobal = true;
								  descripcionError.push("Error obteniendo la Relación ER de la Transacción");
								}
							  } else {
								errorGlobal = true;
								descripcionError.push("Error obteniendo el ID Impositivo del Receptor de la Transacción");
							  }
							} else {
							  errorGlobal = true;
							  descripcionError.push("Error obteniendo el País del Receptor de la Transacción");
							}
						  } else {
							errorGlobal = true;
							descripcionError.push("Error obteniendo el Número Documento del Receptor de la Transacción");
						  }
						} else {
						  errorGlobal = true;
						  descripcionError.push("Error obteniendo el Código Documento del Receptor de la Transacción");
						}
					  } else {
						errorGlobal = true;
						descripcionError.push("Error obteniendo la Fecha de Emisión de la Transacción");
					  }
					} else {
					  errorGlobal = true;
					  descripcionError.push("Error obteniendo el Número de Comprobante de la Transacción");
					}
				  } else {
					errorGlobal = true;
					descripcionError.push("Error obteniendo el Punto de Venta de la Transacción");
				  }
				} else {
				  errorGlobal = true;
				  descripcionError.push("Error obteniendo el Tipo de Comprobante de la Transacción");
				}
			  } else {
				errorGlobal = true;
				descripcionError.push("Error obteniendo el Tipo de Registro de la Sección de Datos de Comprobante");
			  }
			  // Fin ------ Extraigo los datos del comprobante del TXT (Sección 2 del TXT).
			  // Inicio --- Extraigo los datos del Reintegro (Sección 5 del TXT)
			  objInfoIVATUR.datosReintegro.tipoRegistro = "";
			  if (!isEmpty(result.getValue({ name: columns[22] }))) {
				objInfoIVATUR.datosReintegro.tipoRegistro = result.getValue({ name: columns[22] });
				if (!isEmpty(result.getValue({ name: columns[23] }))) {
				  objInfoIVATUR.datosReintegro.cuitEmisoraReintegro = cuitEmpresa;
				  if (!isEmpty(result.getValue({ name: columns[24] }))) {
					objInfoIVATUR.datosReintegro.tipoComprobante = result.getValue({ name: columns[24] });
					if (!isEmpty(result.getValue({ name: columns[25] }))) {
					  objInfoIVATUR.datosReintegro.puntoVenta = result.getValue({ name: columns[25] });
					  if (!isEmpty(result.getValue({ name: columns[26] }))) {
						objInfoIVATUR.datosReintegro.numeroComprobante = result.getValue({ name: columns[26] });
						if (!isEmpty(result.getValue({ name: columns[27] }))) {
						  objInfoIVATUR.datosReintegro.tipoCodigoAutorizacion = result.getValue({ name: columns[27] });
						  if (!isEmpty(result.getValue({ name: columns[28] }))) {
							objInfoIVATUR.datosReintegro.codigoAutorizacion = result.getValue({ name: columns[28] });
							if (!isEmpty(result.getValue({ name: columns[29] }))) {
							  objInfoIVATUR.datosReintegro.fechaComprobante = result.getValue({ name: columns[29] });
							  if (!isEmpty(result.getValue({ name: columns[30] }))) {
								objInfoIVATUR.datosReintegro.controladorFiscalCodigo = result.getValue({ name: columns[30] });
								if (!isEmpty(result.getValue({ name: columns[31] }))) {
								  objInfoIVATUR.datosReintegro.controladorFiscalSerie = result.getValue({ name: columns[31] });
								  if (!isEmpty(result.getValue({ name: columns[32] })) && (result.getValue({ name: columns[32] }) >= 0)) {
									objInfoIVATUR.datosReintegro.importeReintegro = padding_left(result.getValue({ name: columns[32] }).replace(/[^0-9]+/g, ""), "0", 15);
								  } else {
									errorGlobal = true;
									descripcionError.push("Error obteniendo el Importe de Reintegro del Comprobante que genera el Reintegro");
								  }
								} else {
								  errorGlobal = true;
								  descripcionError.push("Error obteniendo la Serie de Controlador Fiscal del Comprobante que genera el Reintegro");
								}
							  } else {
								errorGlobal = true;
								descripcionError.push("Error obteniendo el Código de Controlador Fiscal del Comprobante que genera el Reintegro");
							  }
							} else {
							  errorGlobal = true;
							  descripcionError.push("Error obteniendo la Fecha del Comprobante que genera el Reintegro");
							}
						  } else {
							errorGlobal = true;
							descripcionError.push("Error obteniendo el Código de Autorización del Comprobante que genera el Reintegro");
						  }
						} else {
						  errorGlobal = true;
						  descripcionError.push("Error obteniendo el Tipo de Código de Autorización del Comprobante que genera el Reintegro");
						}
					  } else {
						errorGlobal = true;
						descripcionError.push("Error obteniendo el Número del Comprobante que genera el Reintegro");
					  }
					} else {
					  errorGlobal = true;
					  descripcionError.push("Error obteniendo el Punto de Venta del Comprobante que genera el Reintegro");
					}
				  } else {
					errorGlobal = true;
					descripcionError.push("Error obteniendo el Tipo de Comprobante que genera el Reintegro");
				  }
				} else {
				  errorGlobal = true;
				  descripcionError.push("Error obteniendo el CUIT de la empresa que genera el Reintegro");
				}
			  }
			  // Fin --- Extraigo los datos del Reintegro (Sección 5 del TXT)	
			  // Inicio --- Extraigo los datos del Comprobante Asociado (Sección 6 del TXT)
			  objInfoIVATUR.datosCompAsociado.tipoRegistro = "";
			  if (!isEmpty(result.getValue({ name: columns[33] }))) {
				objInfoIVATUR.datosCompAsociado.tipoRegistro = result.getValue({ name: columns[33] });
				if (!isEmpty(result.getValue({ name: columns[34] }))) {
				  objInfoIVATUR.datosCompAsociado.codigoCompAsociado = result.getValue({ name: columns[34] });
				  if (!isEmpty(result.getValue({ name: columns[35] }))) {
					objInfoIVATUR.datosCompAsociado.puntoVentaCompAsociado = result.getValue({ name: columns[35] });
					if (!isEmpty(result.getValue({ name: columns[36] }))) {
					  objInfoIVATUR.datosCompAsociado.nroCompAsociado = result.getValue({ name: columns[36] });
					} else {
					  errorGlobal = true;
					  descripcionError.push("Error obteniendo el Número del Comprobante Asociado");
					}
				  } else {
					errorGlobal = true;
					descripcionError.push("Error obteniendo el Punto de Venta del Comprobante Asociado");
				  }
				} else {
				  errorGlobal = true;
				  descripcionError.push("Error obteniendo el Código AFIP Tipo de Comprobante Asociado");
				}
			  }
			  // Fin --- Extraigo los datos del Reintegro (Sección 6 del TXT)				
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (!isEmpty(objInfoIVATUR.cabecera) && !isEmpty(objInfoIVATUR.datosComp) && !isEmpty(objInfoIVATUR.datosCompAsociado) && !isEmpty(objInfoIVATUR.datosReintegro)) {
				  // Inicio - Ingreso los datos del comprobante (sección 02)
				  contenidoTXT_datos_comprobante += objInfoIVATUR.datosComp.tipoRegistro + objInfoIVATUR.datosComp.tipoComprobante + objInfoIVATUR.datosComp.puntoVenta + objInfoIVATUR.datosComp.numero + objInfoIVATUR.datosComp.fechaEmision +
					objInfoIVATUR.datosComp.codDocReceptor + objInfoIVATUR.datosComp.nroDocReceptor + objInfoIVATUR.datosComp.paisReceptor + objInfoIVATUR.datosComp.idImpositivo + objInfoIVATUR.datosComp.relacionER +
					objInfoIVATUR.datosComp.impGravado + objInfoIVATUR.datosComp.impNoGravado + objInfoIVATUR.datosComp.impExento + objInfoIVATUR.datosComp.impReintegro + objInfoIVATUR.datosComp.codigoMoneda +
					objInfoIVATUR.datosComp.cotizacionMoneda + objInfoIVATUR.datosComp.tipoCodAutotizacion + objInfoIVATUR.datosComp.codAutorizacion + objInfoIVATUR.datosComp.controladorFiscalCodigo +
					objInfoIVATUR.datosComp.controladorFiscalSerie + objInfoIVATUR.datosComp.total + "\r\n";
				  // Fin - Ingreso los datos del comprobante (sección 02)
				  // Inicio - Ingreso los datos del Reintegro (sección 05)
				  if (!isEmpty(objInfoIVATUR.datosReintegro.tipoRegistro)) {
					contenidoTXT_datos_reintegro += objInfoIVATUR.datosReintegro.tipoRegistro + objInfoIVATUR.datosReintegro.cuitEmisoraReintegro + objInfoIVATUR.datosReintegro.tipoComprobante + objInfoIVATUR.datosReintegro.puntoVenta +
					  objInfoIVATUR.datosReintegro.numeroComprobante + objInfoIVATUR.datosReintegro.tipoCodigoAutorizacion + objInfoIVATUR.datosReintegro.codigoAutorizacion + objInfoIVATUR.datosReintegro.fechaComprobante +
					  objInfoIVATUR.datosReintegro.controladorFiscalCodigo + objInfoIVATUR.datosReintegro.controladorFiscalSerie + objInfoIVATUR.datosReintegro.importeReintegro + "\r\n";
				  }
				  // Fin - Ingreso los datos del Turista (sección 05)
				  // Inicio - Ingreso los datos del Comprobante Asociado (sección 06)
				  if (!isEmpty(objInfoIVATUR.datosCompAsociado.tipoRegistro)) {
					contenidoTXT_datos_comp_asociado += objInfoIVATUR.datosCompAsociado.tipoRegistro + objInfoIVATUR.datosCompAsociado.codigoCompAsociado + objInfoIVATUR.datosCompAsociado.puntoVentaCompAsociado + objInfoIVATUR.datosCompAsociado.nroCompAsociado + "\r\n";
				  }
				  // Fin - Ingreso los datos del Comprobante Asociado (sección 06)
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Transacción";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Transacción
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + JSON.stringify(descripcionError) + ' -- Ref Comprobante: ' + refComprobante);
				log.debug({
				  title: "generarTXT_IVATUR",
				  details: "Error Generando TXT IVATUR: " + JSON.stringify(descripcionError) + "  -- Ref Comprobante: " + refComprobante
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
			  errorDatosTransaccion = true;
			// INICIO - VERIFICO DATOS DE SUBTOTALES
			if (!isEmpty(resultadoTXT_IVATUR_transaccion_subtotales)) {
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: ' + resultadoTXT_IVATUR_transaccion_subtotales.length);
			  log.debug({
				title: "generarTXT_IVATUR",
				details: "Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: " + resultadoTXT_IVATUR_transaccion_subtotales.length
			  });
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: ' + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales));
			  log.debug({
				title: "generarTXT_IVATUR",
				details: "LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: " + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales)
			  });
			  for (let i = 0; resultadoTXT_IVATUR_transaccion_subtotales != null && i < resultadoTXT_IVATUR_transaccion_subtotales.length; i++) {
				existenPercepciones = true;
				objInfoIVATUR.datosIVA = {}; // Obj para guardar datos de subtotales IVA
				errorGlobal = false;
				descripcionError = "";
				result = resultadoTXT_IVATUR_transaccion_subtotales[i];
				columns = result.columns;
				refComprobante = result.getValue({ name: columns[0] });
				const aplicaReintegro = result.getValue({ name: columns[1] });
				// Inicio ---- Extraigo los datos de subtotales IVA (Sección 3 del TXT).
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  objInfoIVATUR.datosIVA.tipoRegistro = result.getValue({ name: columns[2] });
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					objInfoIVATUR.datosIVA.porcentajeIVA = result.getValue({ name: columns[3] });
					if (!isEmpty(result.getValue({ name: columns[4] })) && (result.getValue({ name: columns[4] }) > 0)) {
					  objInfoIVATUR.datosIVA.baseImponible = padding_left(result.getValue({ name: columns[4] }).replace(/[^0-9]+/g, ""), "0", 15);
					  if (!isEmpty(result.getValue({ name: columns[5] })) && (result.getValue({ name: columns[5] }) > 0)) {
						objInfoIVATUR.datosIVA.importe = padding_left(result.getValue({ name: columns[5] }).replace(/[^0-9]+/g, ""), "0", 15);
					  } else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Importe IVA de la Transacción";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error obteniendo la Base Imponible de la Transacción";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error obteniendo el Porcentaje IVA de la Transacción";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Subtotales IVA";
				}
				// Fin ---- Extraigo los datos de subtotales IVA (Sección 3 del TXT).
				// Genero el Contenido
				if (errorGlobal == false) {
				  if (!isEmpty(objInfoIVATUR.datosIVA)) {
					// Inicio - Ingreso los datos de subtotales IVA (sección 03)
					contenidoTXT_subtotales_iva += objInfoIVATUR.datosIVA.tipoRegistro + objInfoIVATUR.datosIVA.porcentajeIVA + objInfoIVATUR.datosIVA.baseImponible + objInfoIVATUR.datosIVA.importe + "\r\n";
					// Fin - Ingreso los datos de subtotales IVA (sección 03)
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información de los subtotales IVA de la Transacción";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Transacción
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError + ' -- aplicaReintegro: ' + aplicaReintegro);
				  log.error({
					title: "generarTXT_IVATUR",
					details: "Error Generando TXT IVATUR: " + descripcionError + " -- aplicaReintegro: " + aplicaReintegro
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			}
			// FIN - VERIFICO DATOS DE SUBTOTALES
			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
			  errorDatosIVA = true;
			// Verifico si existen transacciones encontradas para determinar los datos del turista de cada transacción
			if (existenPercepciones) {
			  // INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE TURISTAS.
			  var iCont_filter = 0;
			  const filtroTXTIVATUR_datosTuristas = [];
			  if (!isEmpty(arrayComprobantes) && arrayComprobantes.length > 0)
				//filtroTXTIVATUR_datosTuristas[iCont_filter++] = new nlobjSearchFilter('custrecord_l54_datos_turista_transac_ref', null, 'ANYOF', arrayComprobantes);
				filtroTXTIVATUR_datosTuristas[iCont_filter++] = search.createFilter({
				  name: "custrecord_l54_datos_turista_transac_ref",
				  operator: search.Operator.ANYOF,
				  values: arrayComprobantes
				});
			  //var search = new nlapiLoadSearch('customrecord_l54_datos_turista_transac', 'customsearch_l54_txt_ivatur_datos_turist');
			  search1 = search.load({
				type: "customrecord_l54_datos_turista_transac", //*opc
				id: "customsearch_l54_txt_ivatur_datos_turist"
			  });
			  search1.filters.push(...filtroTXTIVATUR_datosTuristas);
			  searchResults = search1.run();
			  let resultadoTXT_IVATUR_datos_turista = [];
			  resultIndex = 0;
			  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			  resultado; // temporary variable used to store the result set
			  do {
				//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
				resultado = searchResults.getRange({
				  start: resultIndex,
				  end: resultIndex + resultStep
				});
				if (!isEmpty(resultado) && resultado.length > 0) {
				  if (resultIndex == 0)
					resultadoTXT_IVATUR_datos_turista = resultado; //Primera ve inicializa
				  else
					resultadoTXT_IVATUR_datos_turista = resultadoTXT_IVATUR_datos_turista.concat(resultado);
				}
				resultIndex = resultIndex + resultStep;
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  } while (!isEmpty(resultado) && resultado.length > 0);
			  // FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE TURISTAS.
			  if (!isEmpty(resultadoTXT_IVATUR_datos_turista)) {
				//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_datos_turista: ' + resultadoTXT_IVATUR_datos_turista.length);
				log.debug({
				  title: "generarTXT_IVATUR",
				  details: "Cantidad registros resultadoTXT_IVATUR_datos_turista: " + resultadoTXT_IVATUR_datos_turista.length
				});
				//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_datos_turista: ' + JSON.stringify(resultadoTXT_IVATUR_datos_turista));
				log.debug({
				  title: "generarTXT_IVATUR",
				  details: "LINE-11369 - resultadoTXT_IVATUR_datos_turista: " + JSON.stringify(resultadoTXT_IVATUR_datos_turista)
				});
				for (let i = 0; i < resultadoTXT_IVATUR_datos_turista.length; i++) {
				  errorGlobal = false;
				  descripcionError = "";
				  result = resultadoTXT_IVATUR_datos_turista[i];
				  columns = result.columns;
				  objInfoIVATUR.datosTurista = {}; // Obj para guardar datos de items
				  refComprobante = result.getValue({ name: columns[1] });
				  const refDatosTurista = result.getValue({ name: columns[0] });
				  // Inicio ---- Extraigo los datos del turista (Sección 4 del TXT).
				  if (!isEmpty(result.getValue({ name: columns[2] }))) {
					objInfoIVATUR.datosTurista.tipoRegistro = result.getValue({ name: columns[2] });
					if (!isEmpty(result.getValue({ name: columns[3] }))) {
					  objInfoIVATUR.datosTurista.tipoDocumento = result.getValue({ name: columns[3] });
					  if (!isEmpty(result.getValue({ name: columns[4] }))) {
						objInfoIVATUR.datosTurista.nroDocumento = result.getValue({ name: columns[4] });
						if (!isEmpty(result.getValue({ name: columns[5] }))) {
						  objInfoIVATUR.datosTurista.paisEmisorDoc = result.getValue({ name: columns[5] });
						  if (!isEmpty(result.getValue({ name: columns[6] }))) {
							objInfoIVATUR.datosTurista.nameTurista = result.getValue({ name: columns[6] });
							if (!isEmpty(result.getValue({ name: columns[7] }))) {
							  objInfoIVATUR.datosTurista.paisNacionalidad = result.getValue({ name: columns[7] });
							  if (!isEmpty(result.getValue({ name: columns[8] }))) {
								objInfoIVATUR.datosTurista.paisResidencia = result.getValue({ name: columns[8] });
							  } else {
								errorGlobal = true;
								descripcionError = "Error obteniendo el País de Residencia del Turista, ID registro datos Turista: " + refDatosTurista;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error obteniendo el País de Nacionalidad del Turista, ID registro datos Turista: " + refDatosTurista;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Apellido y Nombre del Turista, ID registro datos Turista: " + refDatosTurista;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error obteniendo el País Emisor del Documento del Turista, ID registro datos Turista: " + refDatosTurista;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Número Documento del Turista, ID registro datos Turista: " + refDatosTurista;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error obteniendo el Tipo Documento del Turista, ID registro datos Turista: " + refDatosTurista;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Datos del Turista, ID registro datos Turista: " + refDatosTurista;
				  }
				  // Fin ---- Extraigo los datos del turista (Sección 4 del TXT).
				  // Verifico si ocurrieron errores con la extracción de items
				  if (errorGlobal == false) {
					if (objInfoIVATUR.datosTurista != null) {
					  // Inicio - Ingreso los datos del Turista (sección 04)
					  contenidoTXT_datos_turista += objInfoIVATUR.datosTurista.tipoRegistro + objInfoIVATUR.datosTurista.tipoDocumento + objInfoIVATUR.datosTurista.nroDocumento + objInfoIVATUR.datosTurista.paisEmisorDoc +
						objInfoIVATUR.datosTurista.nameTurista + objInfoIVATUR.datosTurista.paisNacionalidad + objInfoIVATUR.datosTurista.paisResidencia + "\r\n";
					  // Fin - Ingreso los datos del Turista (sección 04)
					} else {
					  errorGeneral = true;
					  descripcionError = "Error Obteniendo Información de los Turistas asociados a la transacción";
					  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
				  } else {
					// Error Obteniendo Informacion de Transacción
					// Grabo el Error en NetSuite
					errorGeneral = true;
					//nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
					log.error({
					  title: "generarTXT_IVATUR",
					  details: "Error Generando TXT IVATUR: " + descripcionError
					});
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				  // Verifico si debo Encolar el Proceso
				  //checkGovernance(1000);
				}
			  }
			}
			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
			  errorDatosTurista = true;
			if (!isEmpty(resultadoTXT_IVATUR_items)) {
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: ' + resultadoTXT_IVATUR_transaccion_subtotales.length);
			  log.debug({
				title: "generarTXT_IVATUR",
				details: "Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: " + resultadoTXT_IVATUR_transaccion_subtotales.length
			  });
			  //nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: ' + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales));
			  log.debug({
				title: "generarTXT_IVATUR",
				details: "LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: " + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales)
			  });
			  for (let i = 0; resultadoTXT_IVATUR_items != null && i < resultadoTXT_IVATUR_items.length; i++) {
				existenPercepciones = true;
				objInfoIVATUR.datosItem = {};
				errorGlobal = false;
				descripcionError = "";
				result = resultadoTXT_IVATUR_items[i];
				columns = result.columns;
				refComprobante = result.getValue({ name: columns[0] });
				const refArticulo = result.getValue({ name: columns[1] });
				// Inicio --- Extraigo los datos del Ítem (Sección 7 del TXT)
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  objInfoIVATUR.datosItem.tipoRegistro = result.getValue({ name: columns[2] });
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					objInfoIVATUR.datosItem.tipoItem = result.getValue({ name: columns[3] });
					if (!isEmpty(result.getValue({ name: columns[4] }))) {
					  objInfoIVATUR.datosItem.codigoItemTurismo = result.getValue({ name: columns[4] });
					  if (!isEmpty(result.getValue({ name: columns[5] }))) {
						objInfoIVATUR.datosItem.codigoInternoProdServ = result.getValue({ name: columns[5] });
						if (!isEmpty(result.getValue({ name: columns[6] }))) {
						  objInfoIVATUR.datosItem.cuitAlojamiento = result.getValue({ name: columns[6] });
						  if (!isEmpty(result.getValue({ name: columns[7] }))) {
							objInfoIVATUR.datosItem.fechaIngreso = result.getValue({ name: columns[7] });
							if (!isEmpty(result.getValue({ name: columns[8] }))) {
							  objInfoIVATUR.datosItem.unidad = result.getValue({ name: columns[8] });
							  if (!isEmpty(result.getValue({ name: columns[9] }))) {
								objInfoIVATUR.datosItem.tipoUnidad = result.getValue({ name: columns[9] });
								if (!isEmpty(result.getValue({ name: columns[10] }))) {
								  objInfoIVATUR.datosItem.cantidadPersonas = result.getValue({ name: columns[10] });
								  if (!isEmpty(result.getValue({ name: columns[11] }))) {
									objInfoIVATUR.datosItem.descripcionProdServ = result.getValue({ name: columns[11] });
									if (!isEmpty(result.getValue({ name: columns[12] }))) {
									  objInfoIVATUR.datosItem.cantidadNoches = result.getValue({ name: columns[12] });
									  if (!isEmpty(result.getValue({ name: columns[13] }))) {
										objInfoIVATUR.datosItem.precioUnitario = result.getValue({ name: columns[13] });
										if (!isEmpty(result.getValue({ name: columns[14] }))) {
										  objInfoIVATUR.datosItem.codigoCondicionIVA = result.getValue({ name: columns[14] });
										  if (!isEmpty(result.getValue({ name: columns[15] }))) {
											objInfoIVATUR.datosItem.importeIVA = result.getValue({ name: columns[15] });
											if (!isEmpty(result.getValue({ name: columns[16] }))) {
											  objInfoIVATUR.datosItem.importeTotalItem = result.getValue({ name: columns[16] });
											} else {
											  errorGlobal = true;
											  descripcionError = "Error obteniendo el Importe Total del Ítem, ID referencia Ítem: " + refArticulo;
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Error obteniendo el Importe IVA del Ítem, ID referencia Ítem: " + refArticulo;
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error obteniendo el Código Condición IVA del Ítem, ID referencia Ítem: " + refArticulo;
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error obteniendo el Precio Unitario del Ítem facturado, ID referencia Ítem: " + refArticulo;
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error obteniendo la Cantidad de Noches que se están facturando, ID referencia Ítem: " + refArticulo;
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error obteniendo la Descripción del Producto/Servicio que se está facturando, ID referencia Ítem: " + refArticulo;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error obteniendo la Cantidad de Personas que están incluidas en la facturación, ID referencia Ítem: " + refArticulo;
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error obteniendo el Tipo de Unidad que se está facturando, ID referencia Ítem: " + refArticulo;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error obteniendo la Unidad (cantidad de unidades funcionales incluidas en la factura), ID referencia Ítem: " + refArticulo;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error obteniendo la Fecha de Ingreso del Turista en el servicio que se está facturando, ID referencia Ítem: " + refArticulo;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error obteniendo el CUIT Alojamiento del Servicio que se está facturando, ID referencia Ítem: " + refArticulo;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Código Interno Producto/Servicio del Ítem, ID referencia Ítem: " + refArticulo;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error obteniendo el Código Ítem Turismo del Ítem, ID referencia Ítem: " + refArticulo;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error obteniendo el Tipo de Ítem, ID referencia Ítem: " + refArticulo;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Datos del Ítem, ID referencia Ítem: " + refArticulo;
				}
				// Fin --- Extraigo los datos del Ítem (Sección 7 del TXT)
				// Verifico si ocurrieron errores con la extracción de items
				if (errorGlobal == false) {
				  if (objInfoIVATUR.datosItem != null) {
					// Inicio - Ingreso los datos del Comprobante Asociado (sección 07)
					contenidoTXT_datosItem += objInfoIVATUR.datosItem.tipoRegistro + objInfoIVATUR.datosItem.tipoItem + objInfoIVATUR.datosItem.codigoItemTurismo + objInfoIVATUR.datosItem.codigoInternoProdServ +
					  objInfoIVATUR.datosItem.cuitAlojamiento + objInfoIVATUR.datosItem.fechaIngreso + objInfoIVATUR.datosItem.unidad + objInfoIVATUR.datosItem.tipoUnidad + objInfoIVATUR.datosItem.cantidadPersonas +
					  objInfoIVATUR.datosItem.descripcionProdServ + objInfoIVATUR.datosItem.cantidadNoches + objInfoIVATUR.datosItem.precioUnitario + objInfoIVATUR.datosItem.codigoCondicionIVA +
					  objInfoIVATUR.datosItem.importeIVA + objInfoIVATUR.datosItem.importeTotalItem + "\r\n";
					// Fin - Ingreso los datos del Comprobante Asociado (sección 07)
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información de los Items de la transacción";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Transacción
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
				  log.error({
					title: "generarTXT_IVATUR",
					details: "Error Generando TXT IVATUR: " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			}
			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
			  errorDatosItems = true;
			// Verifico si existen transaccions encontradas para determinar sus formas de pago
			if (existenPercepciones) {
			  // INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE FORMAS DE PAGO.
			  iCont_filter = 0;
			  const filtroTXTIVATUR_formasPago = [];
			  if (!isEmpty(arrayComprobantes) && arrayComprobantes.length > 0)
				//filtroTXTIVATUR_formasPago[iCont_filter++] = new nlobjSearchFilter('custrecord_l54_form_pago_tran_id_trasacc', null, 'ANYOF', arrayComprobantes);
				filtroTXTIVATUR_formasPago[iCont_filter++] = search.createFilter({
				  name: "custrecord_l54_form_pago_tran_id_trasacc",
				  operator: search.Operator.ANYOF,
				  values: arrayComprobantes
				});
			  //var search = new nlapiLoadSearch('customrecord_l54_form_pago_tran', 'customsearch_l54_txt_ivatur_for_pag_tran');
			  search1 = search.load({
				type: "customrecord_l54_form_pago_tran", //*opc
				id: "customsearch_l54_txt_ivatur_for_pag_tran"
			  });
			  search1.filters.push(...filtroTXTIVATUR_formasPago);
			  searchResults = search1.run();
			  let resultadoTXT_IVATUR_formas_pago = [];
			  resultIndex = 0;
			  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			  resultado; // temporary variable used to store the result set
			  do {
				//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
				resultado = searchResults.getRange({
				  start: resultIndex,
				  end: resultIndex + resultStep
				});
				if (!isEmpty(resultado) && resultado.length > 0) {
				  if (resultIndex == 0)
					resultadoTXT_IVATUR_formas_pago = resultado; //Primera ve inicializa
				  else
					resultadoTXT_IVATUR_formas_pago = resultadoTXT_IVATUR_formas_pago.concat(resultado);
				}
				resultIndex = resultIndex + resultStep;
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  } while (!isEmpty(resultado) && resultado.length > 0);
			  // FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE FORMA DE PAGO.
			  for (let i = 0; i < resultadoTXT_IVATUR_formas_pago.length; i++) {
				errorGlobal = false;
				descripcionError = "";
				result = resultadoTXT_IVATUR_formas_pago[i];
				columns = result.columns;
				objInfoIVATUR.formasPago = {}; // Obj para guardar datos de items
				refComprobante = result.getValue({ name: columns[1] });
				const refFormaPago = result.getValue({ name: columns[0] });
				objInfoIVATUR.formasPago.tipoRegistro = "";
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  objInfoIVATUR.formasPago.tipoRegistro = result.getValue({ name: columns[2] });
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					objInfoIVATUR.formasPago.tipoPago = result.getValue({ name: columns[3] });
					if (!isEmpty(result.getValue({ name: columns[4] }))) {
					  objInfoIVATUR.formasPago.swift = result.getValue({ name: columns[4] });
					  if (!isEmpty(result.getValue({ name: columns[5] }))) {
						objInfoIVATUR.formasPago.tipoCuenta = result.getValue({ name: columns[5] });
						if (!isEmpty(result.getValue({ name: columns[6] }))) {
						  objInfoIVATUR.formasPago.nroTarjeta = result.getValue({ name: columns[6] });
						  if (!isEmpty(result.getValue({ name: columns[7] }))) {
							objInfoIVATUR.formasPago.nroCuenta = result.getValue({ name: columns[7] });
							if (!isEmpty(result.getValue({ name: columns[8] }))) {
							  objInfoIVATUR.formasPago.importe = result.getValue({ name: columns[8] });
							} else {
							  errorGlobal = true;
							  descripcionError = "Error obteniendo el Importe de la forma de pago, ID registro forma pago: " + refFormaPago;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Número de Cuenta de la forma de pago, ID registro forma pago: " + refFormaPago;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error obteniendo el Número de Tarjeta de la forma de pago, ID registro forma pago: " + refFormaPago;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Tipo de Cuenta de la forma de pago, ID registro forma pago: " + refFormaPago;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error obteniendo el valor de Swift de la forma de pago, ID registro forma pago: " + refFormaPago;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error obteniendo el Tipo de Forma de pago con que se paga la transacción, ID registro forma pago: " + refFormaPago;
				  }
				}
				// Verifico si ocurrieron errores con la extracción de items
				if (errorGlobal == false) {
				  if (objInfoIVATUR.formasPago != null) {
					// Inicio - Ingreso los datos del Comprobante Asociado (sección 07)
					if (!isEmpty(objInfoIVATUR.formasPago.tipoRegistro)) {
					  contenidoTXT_formasPago += objInfoIVATUR.formasPago.tipoRegistro + objInfoIVATUR.formasPago.tipoPago + objInfoIVATUR.formasPago.swift +
						objInfoIVATUR.formasPago.tipoCuenta + objInfoIVATUR.formasPago.nroTarjeta + objInfoIVATUR.formasPago.nroCuenta +
						objInfoIVATUR.formasPago.importe + "\r\n";
					}
					// Fin - Ingreso los datos del Comprobante Asociado (sección 07)
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información de las formas de pago de la transacción";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Transacción
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
				  log.error({
					title: "generarTXT_IVATUR",
					details: "Error Generando TXT IVATUR: " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT IVATUR - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			}
			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
			  errorDatosFormasPago = true;
			// INICIO - Escribo en el contenido del TXT las diferentes secciones formateadas anteriormente.
			if (!errorDatosTransaccion && !errorDatosIVA && !errorDatosItems && !errorDatosFormasPago && !errorDatosTurista && existenPercepciones) {
			  contenidoTXT += contenidoTXT_cabecera + contenidoTXT_datos_comprobante + contenidoTXT_subtotales_iva + contenidoTXT_datos_turista + contenidoTXT_datos_reintegro + contenidoTXT_datos_comp_asociado + contenidoTXT_datosItem + contenidoTXT_formasPago;
			}
			// FIN - Escribo en el contenido del TXT las diferentes secciones formateadas anteriormente.
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXT_IVATUR) && resultadoTXT_IVATUR.length == 0) {
				  // No se Encontraron Transacciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT IVATUR Correcta - No se Encontraron Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Transacciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Obteniendo Transacciones IVATUR');
				  log.error({
					title: "generarTXT_IVATUR",
					details: "Error Obteniendo Transacciones IVATUR"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Obteniendo Transacciones IVATUR - Error : Error Obteniendo Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR - Error : ' + e.message);
		  log.error({
			title: "generarTXT_IVATUR",
			details: "Error Generando TXT IVATUR - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT IVATUR - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  objInfoIVATUR = grabarError(true, "Error Generando TXT IVATUR", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  objInfoIVATUR = grabarError(false, "Generación de TXT IVATUR Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT IVATUR Generado Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Finalización - Generación TXT IVATUR');
		log.debug({
		  title: "generarTXT_IVATUR",
		  details: "Finalización - Generación TXT IVATUR"
		});
		objInfoIVATUR.contenidoTXT = contenidoTXT;
		return objInfoIVATUR;
	  }
	  //[Lista]
	  function generarTXTSifereRetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Retenciones - PM');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Inicio - Generacion TXT SIFERE Retenciones - PM"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones SIFERE - PM";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionSIFERE_PM = {};
		  retencionSIFERE_PM.retencion = {};
		  retencionSIFERE_PM.sujeto = {};
		  retencionSIFERE_PM.existenRetenciones = false;
		  retencionSIFERE_PM.error = false;
		  retencionSIFERE_PM.descripcionError = "";
		  retencionSIFERE_PM.procesoEncolado = false;
		  retencionSIFERE_PM.idLog = idRegistroLOG;
		  retencionSIFERE_PM.retencion.importeRetencion = 0;
		  retencionSIFERE_PM.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTretencionSIFERE_PM = [];
		  //filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('trandate', 'custrecord_3k_cobranza_ret_payment_id', 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTretencionSIFERE_PM[iCont++] = search.createFilter({
			  name: "trandate",
			  join: "custrecord_3k_cobranza_ret_payment_id",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('subsidiary', 'custrecord_3k_cobranza_ret_payment_id', 'is', subsidiaria);
			filtroTXTretencionSIFERE_PM[iCont++] = search.createFilter({
			  name: "subsidiary",
			  join: "custrecord_3k_cobranza_ret_payment_id",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('customrecord_3k_cobranza_retenciones', 'customsearch_3k_ret_sifere_pago_multiple');
		  const search1 = search.load({
			type: "customrecord_3k_cobranza_retenciones", //*opc
			id: "customsearch_3k_ret_sifere_pago_multiple"
		  });
		  search1.filters.push(...filtroTXTretencionSIFERE_PM);
		  const searchResults = search1.run();
		  let resultadoTXTretencionesSIFERE = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTretencionesSIFERE = resultado; //Primera ve inicializa
			  else
				resultadoTXTretencionesSIFERE = resultadoTXTretencionesSIFERE.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'generarTXTSifereRetPagMult', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  log.debug({
				title: "generarTXTSifereRetPagMult",
				details: "resultIndex: " + resultIndex + ", resultado.length: " + resultado.length
			  });
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTretencionesSIFERE)) {
			//nlapiLogExecution('DEBUG', 'generarTXTSifereRetPagMult', 'Cantidad retenciones:' + resultadoTXTretencionesSIFERE.length);
			log.debug({
			  title: "generarTXTSifereRetPagMult",
			  details: "Cantidad retenciones: " + resultadoTXTretencionesSIFERE.length
			});
			//
			for (let i = 0; resultadoTXTretencionesSIFERE != null && i < resultadoTXTretencionesSIFERE.length; i++) {
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idretencionNetSuite = "";
			  //var refComprobante = resultadoTXTretencionesSIFERE[i].getValue('internalid', null, 'group');
			  const result = resultadoTXTretencionesSIFERE[i];
			  const columns = result.columns;
			  var refComprobante = result.getValue({ name: columns[0] });
			  if (!isEmpty(refComprobante)) {
				if (!isEmpty(result.getValue({ name: columns[1] }))) {
				  retencionSIFERE_PM.retencion.codigoJurisdiccion = result.getValue({ name: columns[1] });
				  if (!isEmpty(result.getValue({ name: columns[2] }))) {
					retencionSIFERE_PM.retencion.cuitEmpresa = result.getValue({ name: columns[2] });
					if (!isEmpty(result.getValue({ name: columns[3] }))) {
					  retencionSIFERE_PM.retencion.fecharetencion = result.getValue({ name: columns[3] });
					  if (!isEmpty(result.getValue({ name: columns[4] }))) {
						retencionSIFERE_PM.retencion.nroSucursalRetencion = result.getValue({ name: columns[4] });
						if (!isEmpty(result.getValue({ name: columns[5] }))) {
						  retencionSIFERE_PM.retencion.nroComprobanteRetencion = result.getValue({ name: columns[5] });
						  if (!isEmpty(result.getValue({ name: columns[6] }))) {
							retencionSIFERE_PM.retencion.codigoComprobanteOrigen = result.getValue({ name: columns[6] });
							if (!isEmpty(result.getValue({ name: columns[7] }))) {
							  retencionSIFERE_PM.retencion.letraComprobanteOrigen = result.getValue({ name: columns[7] });
							  if (!isEmpty(result.getValue({ name: columns[8] }))) {
								retencionSIFERE_PM.retencion.numeroComprobanteOrigen = result.getValue({ name: columns[8] });
								if (!isEmpty(result.getValue({ name: columns[9] }))) {
								  retencionSIFERE_PM.retencion.importeRetencion = result.getValue({ name: columns[9] });
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el Importe de la Retención";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Número de Comprobante que Originó la Retención";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Letra del Comprobante que Originó la Retención";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Código de Comprobante que Originó la Retención";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Número del Comprobante de Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Sucursal del Comprobante de Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De la Retención";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "CUIT Invalido";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Jurisdiccion de la Retención";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante de Pago del Cliente";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionSIFERE_PM.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Retenciones Generado Correctamente";
				  contenidoTXT += retencionSIFERE_PM.retencion.codigoJurisdiccion + retencionSIFERE_PM.retencion.cuitEmpresa + retencionSIFERE_PM.retencion.fecharetencion +
					retencionSIFERE_PM.retencion.nroSucursalRetencion + retencionSIFERE_PM.retencion.nroComprobanteRetencion + retencionSIFERE_PM.retencion.codigoComprobanteOrigen + retencionSIFERE_PM.retencion.letraComprobanteOrigen +
					retencionSIFERE_PM.retencion.numeroComprobanteOrigen + retencionSIFERE_PM.retencion.importeRetencion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Retencion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones SIFERE - PM - Error : " + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Generando TXT Retenciones SIFERE - PM - ' + descripcionError);
				log.error({
				  title: "generarTXTSifereRetPagMult",
				  details: "Error Generando TXT Retenciones SIFERE - PM - " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones SIFERE - PM - Error : " + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTretencionesSIFERE) && resultadoTXTretencionesSIFERE.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idretencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Obteniendo Retenciones SIFERE - PM');
				  log.error({
					title: "generarTXTSifereRetPagMult",
					details: "Error Obteniendo Retenciones SIFERE - PM"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones SIFERE - PM - Error : Error Obteniendo Retenciones", idretencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Generando TXT SIFERE - Retenciones - PM - Error : ' + e.message);
		  log.error({
			title: "generarTXTSifereRetPagMult",
			details: "Error Generando TXT SIFERE - Retenciones - PM - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
		  //retencionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  retencionSIFERE_PM = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIFERE_PM = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Retenciones - PM');
		log.debug({
		  title: "Proceso Generacion TXT",
		  details: "Finalizacion - Generacion TXT SIFERE - Retenciones - PM"
		});
		retencionSIFERE_PM.contenidoTXT = contenidoTXT;
		return retencionSIFERE_PM;
	  }
	  //[Lista=>Roger]
	  function generarTXTIVARetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug("generarTXTIVARetPagMult", "Inicio - Generacion TXT IVA Retenciones Sufridas - PM");
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionIVA_PM = {};
		  retencionIVA_PM.retencion = {};
		  retencionIVA_PM.sujeto = {};
		  retencionIVA_PM.existenRetenciones = false;
		  retencionIVA_PM.error = false;
		  retencionIVA_PM.descripcionError = "";
		  retencionIVA_PM.procesoEncolado = false;
		  retencionIVA_PM.idLog = idRegistroLOG;
		  retencionIVA_PM.retencion.importeRetencion = 0;
		  retencionIVA_PM.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTretencionesIVA = new Array();
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde)) {
			filtroTXTretencionesIVA[iCont++] = search.createFilter({
			  name: "custrecord_3k_cobranza_ret_fecha_em_pago",
			  operator: search.Operator.WITHIN,
			  values: periodo.fDesde
			});
		  }
		  if (!isEmpty(periodo) && !isEmpty(periodo.fHasta)) {
			filtroTXTretencionesIVA[iCont++] = search.createFilter({
			  name: "custrecord_3k_cobranza_ret_fecha_em_pago",
			  operator: search.Operator.WITHIN,
			  values: periodo.fHasta
			});
		  }
		  if (!isEmpty(subsidiaria))
			filtroTXTretencionesIVA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  join: "custrecord_3k_cobranza_ret_payment_id",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  const searchRet = search.load({
			id: "customrecord_3k_cobranza_retenciones"
		  });
		  searchRet.filters.push(...filtroTXTretencionesIVA);
		  const searchResults = searchRet.run().getRange({
			start: 0,
			end: 1000
		  });
		  let resultadoTXTretencionesIVA = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTretencionesIVA = resultado; //Primera ve inicializa
			  else
				resultadoTXTretencionesIVA = resultadoTXTretencionesIVA.concat(resultado);
			  //log.debug('generarTXT_IVA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			// checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTretencionesIVA)) {
			log.debug("generarTXTIVARetPagMult", "Cantidad retenciones: " + resultadoTXTretencionesIVA.length);
			for (let i = 0; resultadoTXTretencionesIVA != null && i < resultadoTXTretencionesIVA.length; i++) {
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = "";
			  retencionIVA_PM.retencion = {};
			  retencionIVA_PM.sujeto = {};
			  refComprobante = "";
			  const result = resultadoTXTretencionesIVA[i];
			  const columns = result.columns;
			  // Obtengo el Codigo de Comprobante
			  idRetencionNetSuite = "";
			  //refComprobante = result.getValue(columns[6]);
			  refComprobante = result.getValue(columns[0]);
			  log.debug("generarTXTIVARetPagMult", "refComprobante o transaction ID: " + refComprobante);
			  if (!isEmpty(result.getValue(columns[1]))) {
				retencionIVA_PM.retencion.codigoRegimen = result.getValue(columns[1]); // Obtengo el Código de Régimen
				if (!isEmpty(result.getValue(columns[2]))) {
				  retencionIVA_PM.retencion.cuitProveedor = result.getValue(columns[2]); // Obtengo el CUIT del Proveedor
				  if (!isEmpty(result.getValue(columns[3]))) {
					retencionIVA_PM.retencion.fechaRetencion = result.getValue(columns[3]); // Obtengo la fecha de retención
					if (!isEmpty(result.getValue(columns[4]))) {
					  retencionIVA_PM.retencion.nroCertificado = result.getValue(columns[4]); // Obtengo el nro del certificado
					  if (!isEmpty(result.getValue(columns[5]))) {
						retencionIVA_PM.retencion.montoRetencion = result.getValue(columns[5]); // Obtengo el monto de la retención
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Monto de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Nro del Certificado";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha de la Retención";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT del Proveedor";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Código de Régimen";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionIVA_PM.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  //var error = false;
				  //var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += retencionIVA_PM.retencion.codigoRegimen + retencionIVA_PM.retencion.cuitProveedor + retencionIVA_PM.retencion.fechaRetencion +
					retencionIVA_PM.retencion.nroCertificado + retencionIVA_PM.retencion.montoRetencion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Retención - PM";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - PM - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error("generarTXTIVARetPagMult", "Error Generando TXT Retenciones IVA - PM - " + descripcionError);
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - PM - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(resultadoTXTretencionesIVA) && resultadoTXTretencionesIVA.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  log.error("generarTXTIVARetPagMult", "Error Obteniendo Retenciones IVA - PM");
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  log.error("generarTXTIVARetPagMult", "Error Generando TXT IVA - Retenciones - PM - Error : " + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT IVA Retenciones - PM - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionIVA_PM = grabarError(true, "Error Generando TXT de Retenciones - PM", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionIVA_PM = grabarError(false, "Generacion de TXT de Retenciones Correcta - PM", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones IVA - PM - Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug("generarTXTIVARetPagMult", "Finalización - Generación TXT IVA - Retenciones Sufridas - PM");
		retencionIVA_PM.contenidoTXT = contenidoTXT;
		return retencionIVA_PM;
	  }
	  //[Listo => Roger]
	  function generarTXTeSICOLRetCobranzasPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug("Proceso Generacion TXT", "Inicio - Generacion TXT eSICOL Retenciones Cobranzas - PM");
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Retenciones Cobranzas eSICOL - PM";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		let refComprobante = "";
		try {
		  var retencioneseSICOLcobranzas = {};
		  retencioneseSICOLcobranzas.retencion = {};
		  retencioneseSICOLcobranzas.sujeto = {};
		  retencioneseSICOLcobranzas.existenRetenciones = false;
		  retencioneseSICOLcobranzas.error = false;
		  retencioneseSICOLcobranzas.descripcionError = "";
		  retencioneseSICOLcobranzas.procesoEncolado = false;
		  retencioneseSICOLcobranzas.idLog = idRegistroLOG;
		  retencioneseSICOLcobranzas.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  let iCont = 0;
		  const filtroTXTRetencioneseSICOL = new Array();
		  //filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde)) {
			filtroTXTRetencioneseSICOL[iCont++] = search.createFilter({
			  name: "custrecord_3k_cobranza_ret_fecha_em_pago",
			  operator: search.Operator.WITHIN,
			  values: periodo.fDesde
			});
		  }
		  if (!isEmpty(periodo) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencioneseSICOL[iCont++] = search.createFilter({
			  name: "custrecord_3k_cobranza_ret_fecha_em_pago",
			  operator: search.Operator.WITHIN,
			  values: periodo.fHasta
			});
		  }
		  if (!isEmpty(subsidiaria))
			filtroTXTRetencioneseSICOL[iCont++] = search.createFilter({
			  name: "subsidiary",
			  join: "custrecord_3k_cobranza_ret_payment_id",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  const searchRet = search.load({
			id: "customrecord_3k_cobranza_retenciones"
		  });
		  searchRet.filters.push(...filtroTXTRetencioneseSICOL);
		  const searchResults = searchRet.run().getRange({
			start: 0,
			end: 1000
		  });
		  let resultadoTXTRetencioneseSICOL = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTRetencioneseSICOL = resultado; //Primera ve inicializa
			  else
				resultadoTXTRetencioneseSICOL = resultadoTXTRetencioneseSICOL.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			// checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES
		  const informacionResultado = new Array();
		  let indiceArray = 0;
		  log.debug("generarTXTeSICOLRetCobranzasPagMult", "INICIO Recorrer Retenciones Cobranzas - PM");
		  for (let i = 0; resultadoTXTRetencioneseSICOL != null && i < resultadoTXTRetencioneseSICOL.length; i++) {
			const result = resultadoTXTRetencioneseSICOL[i];
			const columns = result.columns;
			informacionResultado[indiceArray] = {};
			informacionResultado[indiceArray].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue(columns[1]);
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[2]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[3]);
			informacionResultado[indiceArray].montoImpManual = result.getValue(columns[4]);
			informacionResultado[indiceArray].importePercepcion = result.getValue(columns[5]);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  log.debug("generarTXTeSICOLRetCobranzasPagMult", "INICIO Ordenar");
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  retencioneseSICOLcobranzas.retencion = {};
			  retencioneseSICOLcobranzas.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  if (!isEmpty(informacionResultado[i].idInterno)) {
				refComprobante = informacionResultado[i].idInterno;
				retencioneseSICOLcobranzas.retencion.idInterno = informacionResultado[i].idInterno;
				if (!isEmpty(informacionResultado[i].cuit)) {
				  retencioneseSICOLcobranzas.retencion.cuit = informacionResultado[i].cuit;
				  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
					retencioneseSICOLcobranzas.retencion.numeroComprobante = informacionResultado[i].numeroComprobante;
					if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
					  retencioneseSICOLcobranzas.retencion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
					  if (!isEmpty(informacionResultado[i].montoImpManual)) {
						retencioneseSICOLcobranzas.retencion.montoImpManual = informacionResultado[i].montoImpManual;
						if (!isEmpty(informacionResultado[i].importePercepcion)) {
						  retencioneseSICOLcobranzas.retencion.importePercepcion = informacionResultado[i].importePercepcion;
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Importe de la Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Monto Base de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha de la Retención";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Numero de la transacción";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el CUIT de la transacción";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Originó la Retención";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencioneseSICOLcobranzas.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += retencioneseSICOLcobranzas.retencion.cuit + retencioneseSICOLcobranzas.retencion.fechaPercepcion +
					retencioneseSICOLcobranzas.retencion.numeroComprobante + retencioneseSICOLcobranzas.retencion.montoImpManual +
					retencioneseSICOLcobranzas.retencion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo información de la Retención";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : " + descripcionError, null, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error("generarTXTeSICOLRetCobranzasPagMult", "Error Generando TXT Retenciones Cobranzas eSICOL - PM");
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT /Retenciones Cobranzas eSICOL - PM - Error : " + descripcionError, null, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Cobranzas eSICOL - PM - Correcta - No se Encontraron Retenciones", null, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  log.error("generarTXTeSICOLRetCobranzasPagMult", "Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : " + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencioneseSICOLcobranzas = grabarError(true, "Error Generando TXT de Retenciones Cobranzas eSICOL - PM", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencioneseSICOLcobranzas = grabarError(false, "Generacion de TXT de Retenciones Cobranzas eSICOL - PM - Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Cobranzas - PM - Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug("generarTXTeSICOLRetCobranzasPagMult", "Finalizacion - Generacion TXT Retenciones Cobranzas eSICOL - PM");
		retencioneseSICOLcobranzas.contenidoTXT = contenidoTXT;
		return retencioneseSICOLcobranzas;
	  }
	  //[Lista=>Roger]
	  function generarTXTSiferePerFechaOriginal(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug("generarTXTSiferePerFechaOriginal", "Inicio - Generacion TXT SIFERE Percepciones Compras - Fecha Creacion");
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Percepciones Compras Sifere - Fecha creacion";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var percepcionSIFERE = new Object();
		  percepcionSIFERE.percepcion = new Object();
		  percepcionSIFERE.sujeto = new Object();
		  percepcionSIFERE.existenPercepciones = false;
		  percepcionSIFERE.error = false;
		  percepcionSIFERE.descripcionError = "";
		  percepcionSIFERE.procesoEncolado = false;
		  percepcionSIFERE.idLog = idRegistroLOG;
		  percepcionSIFERE.percepcion.importePercepcion = 0;
		  percepcionSIFERE.contenidoTXT = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTpercepcionesSIFERE = new Array();
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde)) {
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: periodo.fDesde
			});
		  }
		  if (!isEmpty(periodo) && !isEmpty(periodo.fHasta)) {
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: periodo.fHasta
			});
		  }
		  if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesSIFERE[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  const searchl54 = search.load({
			id: "customsearch_l54_per_sifere_fech_creacio",
		  });
		  searchl54.filters.push(...filtroTXTpercepcionesSIFERE);
		  const searchResults = searchl54.run().getRange({
			start: 0,
			end: 1000
		  });
		  let resultadoTXTpercepcionesSIFERE_FechaOrigen = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTpercepcionesSIFERE_FechaOrigen = resultado; //Primera ve inicializa
			  else
				resultadoTXTpercepcionesSIFERE_FechaOrigen = resultadoTXTpercepcionesSIFERE_FechaOrigen.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			// checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(resultadoTXTpercepcionesSIFERE_FechaOrigen)) {
			log.debug("generarTXTSiferePerFechaOriginal", "Cantidad percepciones:" + resultadoTXTpercepcionesSIFERE_FechaOrigen.length);
			for (let i = 0; resultadoTXTpercepcionesSIFERE_FechaOrigen != null && i < resultadoTXTpercepcionesSIFERE_FechaOrigen.length; i++) {
			  let columnasSavedSearch = null;
			  columnasSavedSearch = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].columns;
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idpercepcionNetSuite = "";
			  var refComprobante = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("internalid");
			  if (!isEmpty(refComprobante)) {
				//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
				const codigoComprobante = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("formulatext");
				if (!isEmpty(codigoComprobante)) {
				  percepcionSIFERE.percepcion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
				  // Obtengo el Numero del Comprobante
				  const numerador = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custbody_l54_numero_entero_prov");
				  if (!isEmpty(numerador)) {
					const numeroComprobante = numerador.toString().substr(-8);
					// Tomo el Punto de Venta
					//var puntoVenta = arrayNumerador[1];
					const puntoVenta = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custbody_l54_punto_venta_prov");
					// Tomo la Latra del Comprobante
					//var letra = arrayNumerador[0];
					const letra = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custbody_l54_letra");
					if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
					  percepcionSIFERE.percepcion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
					  percepcionSIFERE.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
					  percepcionSIFERE.percepcion.letraDocumento = padding_right(letra, " ", 1);
					  // Obtengo Tipo de Cambio de la Percepcion
					  const tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("exchangerate"));
					  if (!isEmpty(tipoCambio)) {
						// Obtengo Fecha de Percepcion
						const fechapercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue(columnasSavedSearch[13]);
						log.debug("generarTXTSiferePerFechaOriginal", "Fecha de factura: " + fechapercepcion);
						if (!isEmpty(fechapercepcion)) {
						  // Formateo la Fecha
						  const fechapercepcionDate = format.parse({ value: fechapercepcion, type: format.Type.DATE });
						  if (!isEmpty(fechapercepcionDate)) {
							// Obtengo las Componentes de la Fecha
							const diapercepcion = fechapercepcionDate.getDate();
							const mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
							const aniopercepcion = fechapercepcionDate.getFullYear();
							const fechapercepcionFinal = padding_left(diapercepcion, "0", 2) + "/" + padding_left(mespercepcion, "0", 2) + "/" + aniopercepcion;
							percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;
							const jurisdiccionStr = "";
							const jurisdiccionID = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custcol_l54_jurisd_iibb_lineas");
							const codigoJurisdiccion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custrecord_l54_zona_impuestos_codigo");
							if (!isEmpty(codigoJurisdiccion)) {
							  percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);
							  // Obtengo el CUIT del Agente de percepcion
							  let cuitEmpresa = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue("custbody_54_cuit_entity");
							  if (!isEmpty(cuitEmpresa)) {
								// Obtengo el Tamaño del CUIT
								let cuitEmpresaString = cuitEmpresa.toString();
								cuitEmpresaString = cuitEmpresaString.replace(/-/g, "");
								cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, "");
								cuitEmpresaString = cuitEmpresaString.replace(/ /g, "&nbsp");
								cuitEmpresaString = cuitEmpresaString.toString();
								const tam = cuitEmpresaString.length;
								if (tam == 11) {
								  // Agrego los -
								  const primerosDigitos = cuitEmpresaString.substr(0, 2);
								  const segundosDigitos = cuitEmpresaString.substr(2, 8);
								  const tercerosDigitos = cuitEmpresaString.substr(10, 1);
								  if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {
									cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;
									percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;
									// Obtengo el Importe de la Percepcion
									//var importePercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('formulacurrency', null, 'sum');
									const importePercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue(columnasSavedSearch[14]);
									if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
									  if (parseFloat(importePercepcion, 10) < 0.00) {
										percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 10);
									  } else {
										percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 11);
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "El Importe de Percepcion no debe ser 0.00";
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "CUIT de la Empresa Invalido";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Formateando la Fecha de la Percepcion";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Fecha De la Percepcion";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Numero de Comprobante";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcionSIFERE.percepcion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  const error = false;
				  const descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
					percepcionSIFERE.percepcion.puntoVenta + percepcionSIFERE.percepcion.numeroComprobante + percepcionSIFERE.percepcion.codigoComprobante + percepcionSIFERE.percepcion.letraDocumento +
					percepcionSIFERE.percepcion.importePercepcion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error("generarTXTSiferePerFechaOriginal", "Error Generando TXT Percepciones SIFERE - Fecha Creación: " + descripcionError);
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : " + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTpercepcionesSIFERE_FechaOrigen) && resultadoTXTpercepcionesSIFERE_FechaOrigen.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  log.error("generarTXTSiferePerFechaOriginal", "Error Obteniendo Percepciones SIFERE - Fecha Creación");
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones", idpercepcionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  log.error("generarTXTSiferePerFechaOriginal", "Error Generando TXT SIFERE - Fecha Creación - Percepciones - Error : " + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIFERE - Fecha Creación - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		  //percepcionSICORE.error = true;
		}
		if (errorGeneral == true) {
		  percepcionSIFERE = grabarError(true, "Error Generando TXT de Percepciones", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcionSIFERE = grabarError(false, "Generacion de TXT de Percepciones Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Percepciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug("generarTXTSiferePerFechaOriginal", "Fin - Generacion TXT SIFERE Percepciones Compras - Fecha Creacion");
		percepcionSIFERE.contenidoTXT = contenidoTXT;
		return percepcionSIFERE;
	  }
   
	  function generarTXTARCARet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug("generarTXTARCARet", "Inicio - Generacion TXT ARCA Retenciones Sufridas");
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones ARCA";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionARCA = new Object();
		  retencionARCA.retencion = new Object();
		  retencionARCA.sujeto = new Object();
		  retencionARCA.existenRetenciones = false;
		  retencionARCA.error = false;
		  retencionARCA.descripcionError = "";
		  retencionARCA.procesoEncolado = false;
		  retencionARCA.idLog = idRegistroLOG;
		  retencionARCA.retencion.importeRetencion = 0;
		  retencionARCA.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  // Obtengo la Informacion usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTretencionesARCA = new Array();
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTretencionesARCA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  if (!isEmpty(subsidiaria))
			filtroTXTretencionesARCA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
   
		  const searchLoad = search.load({
			id: "customsearch_ret_iibb_catamarca",
			type: "transaction",
		  });
		  searchLoad.filters.push(...filtroTXTretencionesARCA);
   
		  const searchResults = searchLoad.run().getRange({ start: 0, end: 1000 });
   
		  const resultadoTXTretencionesARCA = [];
   
		  log.debug("generarTXTARCARet", "Cantidad retenciones: " + searchResults.length);
   
		  for (let i = 0; i < searchResults.length; i++) {
			existenRetenciones = true;
			errorGlobal = false;
			descripcionError = "";
			idRetencionNetSuite = "";
			retencionARCA.retencion = {};
			retencionARCA.sujeto = {};
			refComprobante = "";
			const result = searchResults[i];
			const columns = result.columns;
			// Obtengo el Codigo de Comprobante
			idRetencionNetSuite = "";
			//refComprobante = result.getValue(columns[6]);
			refComprobante = result.getValue(columns[0]);
			log.debug("generarTXTARCARet", "refComprobante o transaction ID: " + refComprobante);
			if (!isEmpty(result.getValue(columns[1]))) {
			  retencionARCA.retencion.cuitProveedor = result.getValue(columns[1]); // Obtengo el CUI DEL CLIENTE
			  if (!isEmpty(result.getValue(columns[2]))) {
				retencionARCA.retencion.numeroingresosBrutos = result.getValue(columns[2]); // Obtengo el numero de ingresos brutos
				if (!isEmpty(result.getValue(columns[3]))) {
				  retencionARCA.retencion.fechaRetencion = result.getValue(columns[3]); // Obtengo la fecha de retención
				  if (!isEmpty(result.getValue(columns[4]))) {
					retencionARCA.retencion.nroConstancia = result.getValue(columns[4]); // Obtengo el nro de constancia
					if (!isEmpty(result.getValue(columns[5]))) {
					  retencionARCA.retencion.importeRetenido = result.getValue(columns[5]); // Obtengo el monto de la retención
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el importe Retenido";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Nro de Constancia";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo la Fecha de la Retención";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el número de ingresos brutos";
			  }
			} else {
			  errorGlobal = true;
			  descripcionError = "Error Obteniendo el CUIT del Agente de Retención";
			}
			// Genero el Contenido
			if (errorGlobal == false) {
			  if (retencionARCA.retencion != null) {
				// Genero Contenido
				if (!isEmpty(contenidoTXT)) {
				  contenidoTXT += "\r\n";
				}
				//var error = false;
				//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				contenidoTXT += retencionARCA.retencion.cuitProveedor + retencionARCA.retencion.numeroingresosBrutos +
				  retencionARCA.retencion.fechaRetencion + retencionARCA.retencion.nroConstancia + retencionARCA.retencion.importeRetenido;
			  } else {
				errorGeneral = true;
				descripcionError = "Error Obteniendo Información de la Retención";
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			} else {
			  // Error Obteniendo Informacion de Percepciones
			  // Grabo el Error en NetSuite
			  errorGeneral = true;
			  log.error("generarTXTARCARet", "Error Generando TXT Retenciones ARCA " + descripcionError);
			  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}
			// Verifico si debo Encolar el Proceso
			// checkGovernance(1000);// ya no se hace esto en v2
		  }
		  if (errorGeneral == false) {
			if (existenRetenciones == false) {
			  if (!isEmpty(resultadoTXTretencionesARCA) && resultadoTXTretencionesARCA.length == 0) {
				// No se Encontraron Percepciones para el Periodo
				idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
			  } else {
				// Error Obteniendo Percepciones
				errorGeneral = true;
				log.error("generarTXTARCARet", "Error Obteniendo Retenciones ARCA");
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			}
		  }
   
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  log.error("generarTXTARCARet", "Error Generando TXT ARCA - Retenciones - Error : " + e.message);
		  log.error("error obj", JSON.stringify(e));
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT IVA Retenciones - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionARCA = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionARCA = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones IVA Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		log.debug("generarTXTARCARet", "Finalización - Generación TXT IVA - Retenciones Sufridas");
		retencionARCA.contenidoTXT = contenidoTXT;
		return retencionARCA;
	  }
   
	  //scheduledGenerarTXT()
	  function execute(context) {
		try {
		  log.debug({
			title: "generacionTXT",
			details: "INICIO - script programado"
		  });
		  let errorGeneral = false;
		  let enviarEmail = false;
		  let mensajeOK = "La generacion del TXT";
		  const mensajeOK1 = "Se realizo de Forma Correcta.";
		  let mensajeError = "Error Generando TXT";
		  //var mensajeRetNoEncontradas = "No se Encontraron Retenciones para el Periodo";
		  //var mensajePerNoEncontradas = "No se Encontraron Percepciones para el Periodo";
		  const mensajeRetNoEncontradas = "No se Encontraron Retenciones para las Fechas Indicadas";
		  const mensajePerNoEncontradas = "No se Encontraron Percepciones para las Fechas Indicadas";
		  let archivoTXT = null;
		  let archivoSujetos = null;
		  let archivoNotasCredito = null;
		  let existenRetenciones = false;
		  let archivoTXTRetenciones = null;
		  let archivoTXTPercepciones = null;
		  const fechaAct = new Date();
		  const scriptContext = runtime.getCurrentScript();
		  const periodo = {
			fDesde: "",
			fHasta: ""
		  };
   
		  log.debug("generacionTXT", `scriptContext: ${JSON.stringify(scriptContext)}`);
		  //var fDesde = context.getSetting('SCRIPT', 'custscript_l54_txt_fdesde');
		  const fDesde = scriptContext.getParameter({
			name: "custscript_l54_txt_fdesde_v2"
		  });
   
		  log.debug("generacionTXT", `fDesde: ${fDesde}`);
		  //var fHasta = context.getSetting('SCRIPT', 'custscript_l54_txt_fhasta');
   
		  const fHasta = scriptContext.getParameter({
			name: "custscript_l54_txt_fhasta_v2"
		  });
   
		  log.debug("generacionTXT", `fHasta: ${fHasta}`);
   
		  if (!isEmpty(fDesde)) {
			// var fechaDesdeAux = nlapiStringToDate(fDesde);
			const fechaDesdeAux = format.parse({
			  value: fDesde,
			  type: format.Type.DATE
			});
			if (!isEmpty(fechaDesdeAux)) {
			  // periodo.fDesde = nlapiDateToString(fechaDesdeAux);
			  periodo.fDesde = format.format({
				value: fechaDesdeAux,
				type: format.Type.DATE
			  });
			}
			//var fechaHastaAux = nlapiStringToDate(fHasta);
			const fechaHastaAux = format.parse({
			  value: fHasta,
			  type: format.Type.DATE
			});
			if (!isEmpty(fechaHastaAux)) {
			  //periodo.fHasta = nlapiDateToString(fechaHastaAux);
			  periodo.fHasta = format.format({
				value: fechaHastaAux,
				type: format.Type.DATE
			  });
			}
		  }
   
		  log.debug("generacionTXT", `periodo: ${JSON.stringify(periodo)}`);
   
		  //var regimen = context.getSetting('SCRIPT', 'custscript_l54_txt_regimen');
		  const regimen = scriptContext.getParameter({
			name: "custscript_l54_txt_regimen_v2"
		  });
   
		  log.debug("generacionTXT", `regimen: ${regimen}`);
   
		  //var jurisdiccion = context.getSetting('SCRIPT', 'custscript_l54_txt_jurisdiccion');
		  const jurisdiccion = scriptContext.getParameter({
			name: "custscript_l54_txt_jurisdiccion_v2"
		  });
   
		  log.debug("generacionTXT", `jurisdiccion: ${jurisdiccion}`);
   
		  //var email = context.getSetting('SCRIPT', 'custscript_l54_txt_userEmail');
		  const email = scriptContext.getParameter({
			name: "custscript_l54_txt_useremail_v2"
		  });
   
		  log.debug("generacionTXT", `email: ${email}`);
   
		  //var tipoOperacion = context.getSetting('SCRIPT', 'custscript_l54_txt_operacion');
		  const tipoOperacion = scriptContext.getParameter({
			name: "custscript_l54_txt_operacion_v2"
		  });
   
		  log.debug("generacionTXT", `tipoOperacion: ${tipoOperacion}`);
   
		  //var subsidiaria = context.getSetting('SCRIPT', 'custscript_l54_txt_subsidiaria');
		  const subsidiaria = scriptContext.getParameter({
			name: "custscript_l54_txt_subsidiaria_v2"
		  });
   
		  log.debug("generacionTXT", `subsidiaria: ${subsidiaria}`);
   
		  // var ultimaRetencionProcesada = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_ret_proc');
		  const ultimaRetencionProcesada = scriptContext.getParameter({
			name: "custscript_l54_txt_ult_ret_proc_v2"
		  });
   
		  log.debug("generacionTXT", `ultimaRetencionProcesada: ${ultimaRetencionProcesada}`);
   
		  //var ultimaRetencionEliminada = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_ret_elim');
		  const ultimaRetencionEliminada = scriptContext.getParameter({
			name: "custscript_l54_txt_ult_ret_elim_v2"
		  });
		  //var ultimoSujetoEliminado = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_suj_elim');
		  const ultimoSujetoEliminado = scriptContext.getParameter({
			name: "custscript_l54_txt_ult_suj_elim_v2"
		  });
		  //var ultimoEstado = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_estado');
		  const ultimoEstado = scriptContext.getParameter({
			name: "custscript_l54_txt_ult_estado_v2"
		  });
		  //var idLogErrores = context.getSetting('SCRIPT', 'custscript_l54_txt_log_error');
		  let idLogErrores = scriptContext.getParameter({
			name: "custscript_l54_txt_log_error_v2"
		  });
		  let mensajeInfoFaltante = "";
		  let oneWorld = false;
		  if (esOneworld()) {
			oneWorld = true;
			mensajeInfoFaltante = ",Subsidiaria";
		  }
		  // Obtengo el Separador de Decimales y la URL de NetSuite
		  let errorPanel = false;
		  const filtroPanel = [];
		  //filtroPanel[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
		  filtroPanel[0] = search.createFilter({
			name: "isinactive",
			operator: search.Operator.IS,
			values: false
		  });
		  if (!isEmpty(subsidiaria)) {
			//filtroPanel[1] = new nlobjSearchFilter('custrecord_l54_panel_conf_txt_ret_sub', null, 'is', subsidiaria);
			filtroPanel[1] = search.createFilter({
			  name: "custrecord_l54_panel_conf_txt_ret_sub",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  }
		  const columnaPanel = [];
		  //columnaPanel[0] = new nlobjSearchColumn('internalid');
		  columnaPanel[0] = search.createColumn({
			name: "internalid"
		  });
		  //columnaPanel[1] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_url');
		  columnaPanel[1] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_url"
		  });
		  //columnaPanel[2] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_s_dec');
		  columnaPanel[2] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_s_dec"
		  });
		  //columnaPanel[3] = new nlobjSearchColumn('endDate', 'custrecord_l54_panel_conf_txt_ret_period');
		  columnaPanel[3] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_period",
			label: "endDate"
		  });
		  //columnaPanel[4] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_autor');
		  columnaPanel[4] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_autor"
		  });
		  //columnaPanel[5] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_id_log');
		  columnaPanel[5] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_id_log"
		  });
		  //columnaPanel[6] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_fol_tx');
		  columnaPanel[6] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_fol_tx"
		  });
		  //columnaPanel[7] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_act_ar');
		  columnaPanel[7] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_act_ar"
		  });
		  //columnaPanel[8] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_act_ap');
		  columnaPanel[8] = search.createColumn({
			name: "custrecord_l54_panel_conf_txt_ret_act_ap"
		  });
   
		  // log.debug('generacionTXT', `Datos SS de busqueda guardada de configuracion de TXT - filtroPanel: ${JSON.stringify(filtroPanel)} /  columnaPanel: ${JSON.stringify(columnaPanel)}`);
   
		  //var resultadoPanel = new nlapiSearchRecord('customrecord_l54_panel_conf_txt_ret', null, filtroPanel, columnaPanel);
		  const resultadoPanel = search.create({
			type: "customrecord_l54_panel_conf_txt_ret",
			filters: filtroPanel,
			columns: columnaPanel
		  }).run().getRange({
			start: 0,
			end: 1000
		  });
		  let url = "";
		  let urlLog = "";
		  let separadorDecimal = "";
		  //var fechaPeriodoNuevoProcesoRetencionesAux = "";
		  let idAutorEmail = "";
		  //var fechaPeriodoNuevoProcesoRetenciones = null;
		  let idFolderTXT = "";
		  let codigoActividadRetARBA = "";
		  let codigoActividadPerARBA = "";
   
		  log.debug("generacionTXT", `resultadoPanel: ${JSON.stringify(resultadoPanel)}`);
   
		  if (!isEmpty(resultadoPanel) && resultadoPanel.length > 0) {
			//url = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_url');
			url = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_url"
			});
			//urlLog = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_id_log');
			urlLog = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_id_log"
			});
			//separadorDecimal = resultadoPanel[0].getText('custrecord_l54_panel_conf_txt_ret_s_dec');
			separadorDecimal = resultadoPanel[0].getText({
			  name: "custrecord_l54_panel_conf_txt_ret_s_dec"
			});
			//fechaPeriodoNuevoProcesoRetencionesAux = resultadoPanel[0].getValue('endDate', 'custrecord_l54_panel_conf_txt_ret_period');
			//idAutorEmail = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_autor');
			idAutorEmail = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_autor"
			});
			//idFolderTXT = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_fol_tx');
			idFolderTXT = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_fol_tx"
			});
			//codigoActividadRetARBA = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_act_ar');
			codigoActividadRetARBA = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_act_ar"
			});
			//codigoActividadPerARBA = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_act_ap');
			codigoActividadPerARBA = resultadoPanel[0].getValue({
			  name: "custrecord_l54_panel_conf_txt_ret_act_ap"
			});
			//if (!isEmpty(fechaPeriodoNuevoProcesoRetencionesAux))
			//fechaPeriodoNuevoProcesoRetenciones = nlapiStringToDate(fechaPeriodoNuevoProcesoRetencionesAux);
			//if (!isEmpty(url) && !isEmpty(separadorDecimal) && !isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null)
			if (!isEmpty(url) && !isEmpty(separadorDecimal) && !isEmpty(urlLog) && !isEmpty(idFolderTXT))
			  errorPanel = false;
			else
			  errorPanel = true;
		  } else {
			errorPanel = true;
		  }
		  //nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'Valor al leer el panel de configuración - errorPanel: ' + errorPanel);
		  log.debug({
			title: "scheduledGenerarTXT",
			details: "Valor al leer el panel de configuración - errorPanel:  " + errorPanel
		  });
		  if (errorPanel == false) {
			const separadorMiles = "";
			//if (!isEmpty(periodo) && !isEmpty(regimen) && !isEmpty(email) && !isEmpty(tipoOperacion) && ((oneWorld == false) || (oneWorld == true && !isEmpty(subsidiaria)))) {
			if (!isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta) && !isEmpty(regimen) && !isEmpty(email) && !isEmpty(tipoOperacion) && ((oneWorld == false) || (oneWorld == true && !isEmpty(subsidiaria)))) {
			  // Obtengo la Fecha de Finalizacion del Periodo y el Nombre del Periodo
			  /*var filtroPeriodo = [];
			  filtroPeriodo[0] = new nlobjSearchFilter('internalid', null, 'is', periodo);
			  var columnaPeriodo = [];
			  columnaPeriodo[0] = new nlobjSearchColumn('startDate');
			  columnaPeriodo[1] = new nlobjSearchColumn('periodname');*/
			  // Obtengo las Fechas Desde y Fecha Hasta
			  /*var fechaDesdeDate = nlapiStringToDate(fDesde, 'datetimetz');
			  var fechaHastaDate = nlapiStringToDate(fHasta, 'datetimetz');
			  var periodo={};
			  periodo.fDesde=fechaDesdeDate;
			  periodo.fHasta=fechaHastaDate;*/
			  //var resultadoPeriodo = new nlapiSearchRecord('accountingperiod', null, filtroPeriodo, columnaPeriodo);
			  //if (!isEmpty(resultadoPeriodo) && resultadoPeriodo.length > 0) {
			  //var fechaPeriodoSeleccionadoAux = resultadoPeriodo[0].getValue('startDate');
			  //var fechaPeriodoSeleccionado = nlapiStringToDate(fechaPeriodoSeleccionadoAux);
			  //var nombrePeriodoSeleccionado = resultadoPeriodo[0].getValue('periodname');
			  // Obtener CUIT de la Empresa
			  var cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
			  if (!isEmpty(cuitEmpresa)) {
				// Formateo el Documento
				cuitEmpresa = cuitEmpresa.replace(/-/g, "");
				cuitEmpresa = cuitEmpresa.replace(/\./g, "");
				// Elimino Blancos
				const cuitEmpresaFinal = cuitEmpresa.replace(/ /g, "&nbsp");
				//var fechaDesdeDate = nlapiStringToDate(periodo.fDesde);
				const fechaDesdeDate = format.parse({
				  value: periodo.fDesde,
				  type: format.Type.DATE
				});
				//var fechaHastaDate = nlapiStringToDate(periodo.fHasta);
				const fechaHastaDate = format.parse({
				  value: periodo.fHasta,
				  type: format.Type.DATE
				});
				const anioProceso = fechaDesdeDate.getFullYear();
				const mesProceso = pad(parseInt(fechaDesdeDate.getMonth(), 10) + parseInt(1, 10), 2);
				// Calculo la Quincena
				const diaDesde = fechaDesdeDate.getDate();
				const diaHasta = fechaHastaDate.getDate();
				let quincena = "";
				if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde >= 1 && diaDesde <= 15 && diaHasta >= 1 && diaHasta <= 15) {
				  // Primer Quincena
				  quincena = "1";
				} else {
				  if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde > 15 && diaHasta > 15) {
					// Segunda Quincena
					quincena = "2";
				  } else {
					if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde >= 1 && diaDesde <= 15 && diaHasta > 15) {
					  // Mensual
					  quincena = "0";
					}
				  }
				}
				// Verifico el Tipo de Regimen
				var tipoRegimen = parseInt(regimen, 10);
				//nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'tipoRegimen: ' + tipoRegimen);
				log.debug({
				  title: "scheduledGenerarTXT",
				  details: "tipoRegimen: " + tipoRegimen
				});
				if ((tipoRegimen != 4 && tipoRegimen != 5) || ((tipoRegimen == 4 || tipoRegimen == 5) && (!isEmpty(quincena)))) {
				  const fechaPeriodoSeleccionado = fechaDesdeDate;
				  var nombrePeriodoSeleccionado = obtenerMesStr(fechaDesdeDate);
				  // Verifico el Tipo de Regimen
				  //var tipoRegimen = parseInt(regimen, 10);
				  if ((tipoRegimen != 4 && tipoRegimen != 5) || ((tipoRegimen == 4 || tipoRegimen == 5) && (!isEmpty(codigoActividadRetARBA) && !isEmpty(codigoActividadPerARBA)))) {
					const descripcionMensaje = "";
					var proceso = "";
					switch (tipoRegimen) {
					  case 1:
						// SICORE											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SICORE",
						  details: "Comienzo Proceso"
						});
						proceso = "SICORE";
						// Genero TXT SICORE
						var errorGeneracionTXT = "";
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)											
						errorGeneracionTXT = generarTXTSicore(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSicoreAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  var nombreArchivo = "Retenciones_SICORE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  //archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								var idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  var nombreArchivoSujeto = "Retenciones_SICORE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  //archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								var idArchivoSujeto = archivoSujetos.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 2:
						// ARCIBA											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones ARCIBA",
						  details: "Comienzo Proceso"
						});
						proceso = "ARCIBA";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTArcibaAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_ARCIBA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								description: "This is a plain text file.",
								//encoding: file.Encoding.UTF8,
								folder: idFolderTXT,
								//isOnline: true
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 3:
						// SIFERE RETENCIONES											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SIFERE",
						  details: "Comienzo Proceso"
						});
						proceso = "SIFERE RETENCIONES";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSifereRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSifereAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 4: //ARBA-Percepciones											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones ARBA",
						  details: "Comienzo Proceso"
						});
						proceso = "ARBA-Percepciones";
						// Genero TXT ARBA-Percepciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTArbaPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						//else
						//errorGeneracionTXT = generarTXTArbaPercAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							// Si es ARBA Percepcion se presenta Mensualemnte entonces la quincena siempre es 0
							//quincena='0';
							//var nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadPerARBA + "-" + "Lote1" + ".txt";
							nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadPerARBA + "-Lote1.txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 5: //ARBA-Retenciones											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones ARBA",
						  details: "Comienzo Proceso"
						});
						proceso = "ARBA-Retenciones";
						// Genero TXT ARBA-Retenciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTArbaRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						//else
						//errorGeneracionTXT = generarTXTArbaRetAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadRetARBA + "-Lote1.txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 6: //SIPRIB Retenciones IIBB SANTA FE											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones - SIPRIB",
						  details: "Comienzo Proceso"
						});
						proceso = "SIPRIB-Retenciones";
						// Genero TXT ARBA-Retenciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSiprib(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						//else
						//errorGeneracionTXT = generarTXTSipribAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_SIPRIB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 7:
						// SIFERE PERCEPCIONES											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones SIFERE",
						  details: "Comienzo Proceso"
						});
						proceso = "SIFERE PERCEPCIONES";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSiferePer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 8:
						// eARCIBA											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones eARCIBA",
						  details: "Comienzo Proceso"
						});
						proceso = "eARCIBA";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						errorGeneracionTXT = generarTXTeArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_eARCIBA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 9:
						// IVA PERCEPCIONES SUFRIDAS											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones IVA Sufridas",
						  details: "Comienzo Proceso"
						});
						proceso = "IVA PERCEPCIONES";
						// Genero TXT IVA PERCEPCIONES
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTIVAPer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_IVA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 10:
						// SIFERE PERCEPCIONES ADUANERAS											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones Aduaneras SIFERE",
						  details: "Comienzo Proceso"
						});
						proceso = "SIFERE PERCEPCIONES ADUANERAS";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSiferePerAduaneras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_Aduaneras_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 11:
						// eARCIBA Notas de Credito											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones eARCIBA Notas de Credito",
						  details: "Comienzo Proceso"
						});
						proceso = "eARCIBA Notas de Credito";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						errorGeneracionTXT = generarTXTeArcibaNC(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_eARCIBA_Nota_de_Credito_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 12: //SIPRIB Percepciones IIBB SANTA FE											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones SANTA FE - SIPRIB",
						  details: "Comienzo Proceso"
						});
						proceso = "SIPRIB-Percepciones";
						// Genero TXT SIPRIB-Percepciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSipribPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						//else
						//errorGeneracionTXT = generarTXTSipribAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Percepciones_SIPRIB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 13: //e-SICOL Retenciones											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones eSICOL",
						  details: "Inicio - Generacion TXT eSicol (Retenciones)"
						});
						proceso = "eSICOL-Retenciones";
						// Genero TXT e-SICOL Retenciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTeSicolRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 14:
						//e-SICOL Percepciones											
						log.debug({
						  title: "Proceso Generacion TXT Percepciones eSICOL",
						  details: "Inicio - Generacion TXT eSicol (Percepciones)"
						});
						proceso = "eSICOL-Percepciones";
						// Genero e-SICOL Percepciones
						errorGeneracionTXT = null;
						errorGeneracionTXT = generarTXTeSicolPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 15:
						var jurisdiccionName = utilidades.getLookupFieldsSafe(search.lookupFields({
						  type: "customrecord_l54_zona_impuestos",
						  id: jurisdiccion,
						  columns: "name"
						}), "name");
						// SIRCAR- IIBB
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SIRCAR IIBB",
						  details: "Comienzo Proceso"
						});
						proceso = !isEmpty(jurisdiccionName) ? "SIRCAR-Retenciones de la jurisdicción " + jurisdiccionName : "SIRCAR-Retenciones";
						// Genero TXT SIRE GANANCIAS EXTERIOR
						errorGeneracionTXT = "";
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion);
						/*else
							errorGeneracionTXT = generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_SIRCAR_SANTAFE_IIBB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  nombreArchivoSujeto = "Retenciones_SIRCAR_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								idArchivoSujeto = archivoSujetos.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 16:
						jurisdiccionName = utilidades.getLookupFieldsSafe(search.lookupFields({
						  type: "customrecord_l54_zona_impuestos",
						  id: jurisdiccion,
						  columns: "name"
						}), "name");
						log.debug({
						  title: "Proceso Generacion TXT Percepciones SIRCAR",
						  details: "Comienzo Proceso"
						});
						proceso = !isEmpty(jurisdiccionName) ? "SIRCAR-Percepciones de la jurisdicción " + jurisdiccionName : "SIRCAR-Percepciones";
						// Genero TXT SIRCAR-Percepciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Pecepciones_SIRCAR_SataFe_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 17:
						log.debug({
						  title: "Proceso Generacion TXT Percepciones Compras eSICOL",
						  details: "Comienzo Proceso"
						});
						proceso = "eSICOL-Percepciones Compras";
						// Genero TXT eSICOL-Percepciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Pecepciones_compras_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 18:
						log.debug({
						  title: "Proceso Generacion TXT Retenciones Cobranzas eSICOL",
						  details: "Comienzo Proceso"
						});
						proceso = "eSICOL-Retenciones Cobranzas";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTeSICOLRetCobranzas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_cobranzas_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 19:
						log.debug({
						  title: "Proceso Generacion TXT Retenciones IVA Sufridas",
						  details: "Comienzo Proceso"
						});
						proceso = "IVA - Retenciones Sufridas";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTIVARet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_sufridas_IVA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 20:
						// SIRE - GANANCIAS EXTERIOR											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SIRE - EXTERIOR",
						  details: "Comienzo Proceso"
						});
						proceso = "SIRE - Retenciones Ganancias en el Exterior";
						// Genero TXT SIRE GANANCIAS EXTERIOR
						errorGeneracionTXT = "";
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_SIRE_GANANCIAS_EXTERIOR_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  nombreArchivoSujeto = "Retenciones_SIRE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								idArchivoSujeto = archivoSujetos.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 22:
						// SIRE SUSS											
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SIRE - SUSS",
						  details: "Comienzo Proceso"
						});
						proceso = "SIRE - Retenciones SUSS";
						// Genero TXT SIRE SUSS
						errorGeneracionTXT = "";
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_SIRE_SUSS_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  nombreArchivoSujeto = "Retenciones_SIRE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								idArchivoSujeto = archivoSujetos.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 23:
						log.debug({
						  title: "Proceso Generación TXT SIPOT IIBB SALTA",
						  details: "Comienzo Proceso"
						});
						proceso = "SIPOT IIBB SALTA";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSaltaPer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "SIPOT_IIBB_SALTA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 24:
						log.debug({
						  title: "Proceso Generación TXT IVATUR",
						  details: "Comienzo Proceso"
						});
						proceso = "IVATUR";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXT_IVATUR(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
						  errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
						  var cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
						  var periodoConsulta = format.parse({
							value: periodo.fDesde,
							type: format.Type.DATE
						  });
						  var mesConsultaAux = periodoConsulta.getMonth() + 1;
						  var mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : "0" + mesConsultaAux.toString();
						  var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							//var nombreArchivo = "F8089." + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							nombreArchivo = "F8089." + cuitEmp + "." + periodoName + "00.0000.txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 25:
						log.debug({
						  title: "Proceso Generacion TXT Retenciones SIFERE Pagos Múltiples",
						  details: "Comienzo Proceso"
						});
						proceso = "SIFERE - Retenciones - PM";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSifereRetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_SIFERE_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 26:
						log.debug({
						  title: "Proceso Generacion TXT Retenciones IVA Sufridas Pagos Múltiples",
						  details: "Comienzo Proceso"
						});
						proceso = "IVA - Retenciones Sufridas - PM";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTIVARetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_sufridas_IVA_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 27:
						log.debug({
						  title: "Proceso Generacion TXT Retenciones eSICOL - PM",
						  details: "Comienzo Proceso"
						});
						proceso = "eSICOL - Retenciones Cobranzas - PM";
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTeSICOLRetCobranzasPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
							errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Retenciones_cobranzas_eSICOL_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 28:
						// SIFERE PERCEPCIONES											
						log.debug({
						  title: "generarTXTSiferePerFechaOriginal",
						  details: "Comienzo Proceso"
						});
						proceso = "SIFERE PERCEPCIONES - Fecha Original";
						// Genero TXT ARCIBA
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTSiferePerFechaOriginal(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Percepciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						break;
					  case 29:
						// TXT TUCUMÁN Percepciones											
						log.debug({
						  title: "Proceso Generación TXT TUCUMÁN Percepciones",
						  details: "INICIO --- Proceso"
						});
						proceso = "TUCUMÁN - Proceso Generación TXT Percepciones";
						// Genero TXT TUCUMÁN Percepciones
						errorGeneracionTXT = "";
						var esPercepcion = true;
						var esRetencion = false;
						errorGeneracionTXT = generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
						log.debug({
						  title: "scheduledGenerarTXT",
						  details: "CASE 29 - generarTXT_TUCUMAN - resultado de proceso de generación de TXT TUCUMÁN Percepciones: " + JSON.stringify(errorGeneracionTXT)
						});
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "DATOS.TXT";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  nombreArchivoSujeto = "RETPER.TXT";
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								idArchivoSujeto = archivoSujetos.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTNotasCredito)) {
							  const nombreArchivoNotasCredito = "NCFACT.TXT";
							  archivoNotasCredito = file.create({
								name: nombreArchivoNotasCredito,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTNotasCredito,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoNotasCredito)) {
								const idArchivoNotasCredito = archivoNotasCredito.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						log.debug({
						  title: "Proceso Generación TXT TUCUMÁN Percepciones",
						  details: "FIN --- Proceso"
						});
						enviarEmail = true;
						break;
					  case 30:
						log.debug({
						  title: "Proceso Generación TXT SAREPE - Percepciones",
						  details: "Comienzo Proceso"
						});
						proceso = "SAREPE - Percepciones";
						errorGeneracionTXT = null;
						esPercepcion = true;
						esRetencion = false;
						errorGeneracionTXT = generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
						  cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
						  periodoConsulta = format.parse({
							value: periodo.fDesde,
							type: format.Type.DATE
						  });
						  mesConsultaAux = periodoConsulta.getMonth() + 1;
						  mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : "0" + mesConsultaAux.toString();
						  periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
						  // Si no hubo error Genero el TXT de Percepciones SAREPE
						  if (!isEmpty(errorGeneracionTXT.contenidoTXTPercepciones)) {
							nombreArchivo = "pp." + cuitEmp + periodoName + ".txt";
							archivoTXTPercepciones = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXTPercepciones,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXTPercepciones)) {
							  idArchivo = archivoTXTPercepciones.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 31:
						log.debug({
						  title: "Proceso Generación TXT SAREPE - Retenciones",
						  details: "Comienzo Proceso"
						});
						proceso = "SAREPE - Retenciones";
						errorGeneracionTXT = null;
						esPercepcion = false;
						esRetencion = true;
						errorGeneracionTXT = generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
						  cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
						  periodoConsulta = format.parse({
							value: periodo.fDesde,
							type: format.Type.DATE
						  });
						  mesConsultaAux = periodoConsulta.getMonth() + 1;
						  mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : "0" + mesConsultaAux.toString();
						  periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
						  // Si no hubo error Genero el TXT de Retenciones SAREPE
						  if (!isEmpty(errorGeneracionTXT.contenidoTXTRetenciones)) {
							nombreArchivo = "rr." + cuitEmp + periodoName + ".txt";
							archivoTXTRetenciones = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXTRetenciones,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXTRetenciones)) {
							  idArchivo = archivoTXTRetenciones.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 32:
						// TXT TUCUMÁN Retenciones											
						log.debug({
						  title: "Proceso Generación TXT TUCUMÁN Retenciones",
						  details: "INICIO --- Proceso"
						});
						proceso = "TUCUMÁN - Proceso Generación TXT Retenciones";
						// Genero TXT TUCUMÁN Retenciones
						errorGeneracionTXT = "";
						esPercepcion = false;
						esRetencion = true;
						errorGeneracionTXT = generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
						log.debug({
						  title: "scheduledGenerarTXT",
						  details: "CASE 32 - generarTXT_TUCUMAN - resultado de proceso de generación de TXT TUCUMÁN Retenciones: " + JSON.stringify(errorGeneracionTXT)
						});
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "DATOS.TXT";
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								idArchivo = archivoTXT.save();
							  }
							}
							if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
							  nombreArchivoSujeto = "RETPER.TXT";
							  archivoSujetos = file.create({
								name: nombreArchivoSujeto,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXTSujeto,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoSujetos)) {
								idArchivoSujeto = archivoSujetos.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						log.debug({
						  title: "Proceso Generación TXT TUCUMÁN Retenciones",
						  details: "FIN --- Proceso"
						});
						enviarEmail = true;
						break;
					  case 33:
						log.debug({
						  title: "Proceso Generación TXT SIRE Retenciones IVA F.2005",
						  details: "Case 33 - Comienzo Proceso"
						});
						proceso = "SIRE - Retenciones IVA - F2005";
						errorGeneracionTXT = null;
						errorGeneracionTXT = generarTXTSireRetIVA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, scriptContext, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "SIRE_RET_IVA_F2500_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						log.debug({
						  title: "Proceso Generación TXT SIRE Retenciones IVA F.2005",
						  details: "Case 33 - Fin Proceso"
						});
						break;
					  case 34:
						log.debug("Proceso Generacion TXT Percepciones Sufridas ARCA", "Comienzo Proceso");
						proceso = "Catamarca-Percepciones Sufridas";
						// Genero TXT Catamarca-Percepciones
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						//errorGeneracionTXT = generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						errorGeneracionTXT = generarTXTCatamarcaPercSufridas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						/*else
					  errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							nombreArchivo = "Percepciones_compras_ARCA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 35:
						// ARCA RETENCIONES SUFRIDAS
						log.debug("Proceso Generacion TXT Retenciones ARCA Sufridas", "Comienzo Proceso");
						proceso = "Catamarca-Rentenciones Sufridas";
						// Genero TXT ARCA RETENCIONES
						errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTARCARet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						  enviarEmail = true;
						} else {
						  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							existenRetenciones = errorGeneracionTXT.existenRetenciones;
							// Si no hubo error Genero el TXT
							if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							  nombreArchivo = "Retenciones_ARCA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							  log.debug("Proceso Generacion TXT Retenciones ARCA Sufridas", "Crear Archivo TXT");
							  archivoTXT = file.create({
								name: nombreArchivo,
								fileType: file.Type.PLAINTEXT,
								contents: errorGeneracionTXT.contenidoTXT,
								folder: idFolderTXT
							  });
							  if (!isEmpty(archivoTXT)) {
								log.debug("Proceso Generacion TXT Retenciones ARCA Sufridas", "Enviar Mail Archivo TXT");
								idArchivo = archivoTXT.save();
							  }
							}
							enviarEmail = true;
						  }
						}
						enviarEmail = true;
						log.debug("Proceso Generacion TXT Retenciones ARCA Sufridas", "errorGeneracionTXT: " + errorGeneracionTXT);
						break;
					  case 37:
						//nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones', 'Case 37 - Comienzo Proceso');
						log.debug("Proceso Generación TXT CATAMARCA Retenciones", "Case 37 - Comienzo Proceso");
						proceso = "CATAMARCA - Retenciones";
						var errorGeneracionTXT = null;
						//var tipoFormato = '1';
						errorGeneracionTXT = generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);
   
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							var nombreArchivo = "CATAMARCA_RET_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							//archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						//nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones', 'Case 37 - Fin Proceso');
						log.debug("Proceso Generación TXT CATAMARCA Retenciones", "Case 37 - Comienzo Proceso");
						break;
					  case 38:
						//nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones Web', 'Case 38 - Comienzo Proceso');
						log.debug("Proceso Generación TXT CATAMARCA Retenciones Web", "Case 38 - Comienzo Proceso");
						proceso = "CATAMARCA - Retenciones Web";
						var errorGeneracionTXT = null;
						//var tipoFormato = '2';
						errorGeneracionTXT = generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);
   
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							var nombreArchivo = "CATAMARCA_RET_WEB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						//nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones Web', 'Case 37 - Fin Proceso');
						log.debug("Proceso Generación TXT CATAMARCA Retenciones Web", "Case 38 - Fin Proceso");
						break;
					  case 39:
						//ARBA-Percepciones Actividad 7
						log.debug('Proceso Generacion TXT Percepciones ARBA Actividad 7', 'Comienzo Proceso');
						proceso = "ARBA-Percepciones";
						// Genero TXT ARBA-Percepciones
						var errorGeneracionTXT = null;
						//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
						errorGeneracionTXT = generarTXTArbaPercAct7(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						//else
						//errorGeneracionTXT = generarTXTArbaPercAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
						// Verifico si Hubo Error en la Eliminacion
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							// Si es ARBA Percepcion se presenta Mensualemnte entonces la quincena siempre es 0
							//quincena='0';
							var nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadPerARBA + "-" + "Lote1" + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
						   
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						break;
					  case 40:
						log.debug('Proceso Generación TXT Misiones Retenciones', 'Case 40 - Comienzo Proceso');
						proceso = "MISIONES - Retenciones";
						var errorGeneracionTXT = null;
						//var tipoFormato = '1';
						errorGeneracionTXT = generarTXTMisionesRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);
   
						if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
						  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							idLogErrores = errorGeneracionTXT.idLog;
						  }
						  errorGeneral = true;
						} else {
						  existenRetenciones = errorGeneracionTXT.existenRetenciones;
						  // Si no hubo error Genero el TXT
						  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
							var nombreArchivo = nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
							archivoTXT = file.create({
							  name: nombreArchivo,
							  fileType: file.Type.PLAINTEXT,
							  contents: errorGeneracionTXT.contenidoTXT,
							  folder: idFolderTXT
							});
   
							if (!isEmpty(archivoTXT)) {
							  idArchivo = archivoTXT.save();
							}
						  }
						}
						enviarEmail = true;
						log.debug('Proceso Generación TXT Misiones Retenciones', 'Case 40 - Fin Proceso');
						break;
					  case 41:
						  log.debug('Proceso Generacion TXT Percepciones Misiones', 'Comienzo Proceso');
						  proceso = "TXT Percepciones Misiones";
						  var errorGeneracionTXT = null;
		
						  errorGeneracionTXT = generarTxtPercepMisiones(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
		
						  // Verifico si Hubo Error en la Eliminacion
						  if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
							/*descripcionMensaje = "Error Generando TXT de Retenciones";
							if (isEmpty(errorGeneracionTXT))
							descripcionMensaje = errorGeneracionTXT.descripcionError;
							var descripcionMensajeFinal = descripcionMensaje;*/
							if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
							  idLogErrores = errorGeneracionTXT.idLog;
							}
							errorGeneral = true;
							enviarEmail = true;
						  } else {
							if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
							  existenRetenciones = errorGeneracionTXT.existenRetenciones;
							  // Si no hubo error Genero el TXT
							  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
								var nombreArchivo = "Percepciones_misiones_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
								archivoTXT = file.create({
								  name: nombreArchivo,
								  fileType: file.Type.PLAINTEXT,
								  contents: errorGeneracionTXT.contenidoTXT,
								  folder: idFolderTXT
								});
							   
								if (!isEmpty(archivoTXT)) {
								  idArchivo = archivoTXT.save();
								}
		
							  }
							  enviarEmail = true;
							}
						  }
						  enviarEmail = true;
						  break;
					  case 42:
							log.debug('Proceso Generacion TXT Percepciones RET. SIRTAC', 'Comienzo Proceso');
							proceso = "TXT RET. SIRTAC";
							var errorGeneracionTXT = null;
		  
							errorGeneracionTXT = generarTxtPercepRetSirtac(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
		  
							// Verifico si Hubo Error en la EliminaciÓn
							if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
							  /*descripcionMensaje = "Error Generando TXT de Retenciones";
							  if (isEmpty(errorGeneracionTXT))
							  descripcionMensaje = errorGeneracionTXT.descripcionError;
							  var descripcionMensajeFinal = descripcionMensaje;*/
							  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
								idLogErrores = errorGeneracionTXT.idLog;
							  }
							  errorGeneral = true;
							  enviarEmail = true;
							} else {
							  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
								existenRetenciones = errorGeneracionTXT.existenRetenciones;
								// Si no hubo error Genero el TXT
								if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
								  var nombreArchivo = "Percepciones_sirtac_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
								  archivoTXT = file.create({
									name: nombreArchivo,
									fileType: file.Type.PLAINTEXT,
									contents: errorGeneracionTXT.contenidoTXT,
									folder: idFolderTXT
								  });
								 
								  if (!isEmpty(archivoTXT)) {
									idArchivo = archivoTXT.save();
								  }
		  
								}
								enviarEmail = true;
							  }
							}
							enviarEmail = true;
							break;
						  case 43:
							  log.debug('Proceso Generación TXT Percepciones SIRCREB', 'Comienzo Proceso');
							  proceso = "RET. SIRCREB";
							  var errorGeneracionTXT = null;
			
							  errorGeneracionTXT = generarTxtPercepSircreb(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
			
							  // Verifico si Hubo Error en la Eliminacion
							  if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
								/*descripcionMensaje = "Error Generando TXT de Retenciones";
								if (isEmpty(errorGeneracionTXT))
								descripcionMensaje = errorGeneracionTXT.descripcionError;
								var descripcionMensajeFinal = descripcionMensaje;*/
								if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
								  idLogErrores = errorGeneracionTXT.idLog;
								}
								errorGeneral = true;
								enviarEmail = true;
							  } else {
								if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
								  existenRetenciones = errorGeneracionTXT.existenRetenciones;
								  // Si no hubo error Genero el TXT
								  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
									var nombreArchivo = "Percepciones_sircreb_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
									archivoTXT = file.create({
									  name: nombreArchivo,
									  fileType: file.Type.PLAINTEXT,
									  contents: errorGeneracionTXT.contenidoTXT,
									  folder: idFolderTXT
									});
								   
									if (!isEmpty(archivoTXT)) {
									  idArchivo = archivoTXT.save();
									}
			
								  }
								  enviarEmail = true;
								}
							  }
							  enviarEmail = true;
							  break;
							case 44:
								log.debug('Proceso Generacion TXT Retención Municipal SIPRET', 'Comienzo Proceso');
								proceso = "TXT Retención Municipal SIPRET";
								var errorGeneracionTXT = null;
				
								errorGeneracionTXT = generarTxtSipret(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
								log.debug('errorGeneracionTXT' + JSON.stringify(errorGeneracionTXT));
								// Verifico si Hubo Error en la Eliminacion
								if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
								  /*descripcionMensaje = "Error Generando TXT de Retenciones";
								  if (isEmpty(errorGeneracionTXT))
								  descripcionMensaje = errorGeneracionTXT.descripcionError;
								  var descripcionMensajeFinal = descripcionMensaje;*/
								  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
									idLogErrores = errorGeneracionTXT.idLog;
								  }
								  errorGeneral = true;
								  enviarEmail = true;
								} else {
								  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
									existenRetenciones = errorGeneracionTXT.existenRetenciones;
									// Si no hubo error Genero el TXT
									if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
									  var nombreArchivo = "txt_ret_sipret_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
									  archivoTXT = file.create({
										name: nombreArchivo,
										fileType: file.Type.PLAINTEXT,
										contents: errorGeneracionTXT.contenidoTXT,
										folder: idFolderTXT
									  });
									  if (!isEmpty(archivoTXT)) {
										var idArchivo = archivoTXT.save();
									  }
				
									}
									enviarEmail = true;
								  }
								}
								enviarEmail = true;
						  break;
					  default:
						log.error({
						  title: "Proceso Generacion TXT",
						  details: "Error Generando TXT - Tipo TXT a Generar Invalido"
						});
						errorGeneral = true;
						enviarEmail = true;
						idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idLogErrores, "Tipo TXT a Generar Invalido", null, null, subsidiaria);
					}
				  } else {
					log.error({
					  title: "Proceso Generacion TXT",
					  details: "Error Generando TXT - Falta Ingresar Codigos Actividad de Retencion/Percepcion ARBA en el Panel de Configuracion"
					});
					errorGeneral = true;
					enviarEmail = true;
					idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, regimen, idLogErrores, "Falta Ingresar Codigos Actividad de Retencion/Percepcion ARBA en el Panel de Configuracion", null, null, subsidiaria);
				  }
				} else {
				  log.error({
					title: "Proceso Generacion TXT",
					details: "Error Generando TXT - Error Obteniendo la Quincena/Periodo de Ejecucion"
				  });
				  errorGeneral = true;
				  enviarEmail = true;
				  idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, regimen, idLogErrores, "Error Obteniendo la Quincena/Periodo de Ejecucion", null, null, subsidiaria);
				}
			  } else {
				log.error({
				  title: "Proceso Generacion TXT",
				  details: "Error Generando TXT - Error Obteniendo el CUIT de la Empresa"
				});
				errorGeneral = true;
				enviarEmail = true;
				idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, regimen, idLogErrores, "Error Obteniendo el CUIT de la Empresa", null, null, subsidiaria);
			  }
			  /*} else {
			  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Error Obteniendo Informacion del Periodo');
			  errorGeneral = true;
			  enviarEmail = true;
			  idLogErrores=grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Error Obteniendo Informacion del Periodo', null, null, subsidiaria);
			  }*/
			} else {
			  log.error({
				title: "Proceso Generacion TXT",
				details: "Error Generando TXT - Falta Informacion de Regimen,Perido,Email,Tipo Operacion " + mensajeInfoFaltante
			  });
			  errorGeneral = true;
			  enviarEmail = true;
			  idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, regimen, idLogErrores, "Falta Informacion de Regimen,Perido,Email,Tipo Operacion" + mensajeInfoFaltante, null, null, subsidiaria);
			}
		  } else {
			log.error({
			  title: "Proceso Generacion TXT",
			  details: "Error Generando TXT - Falta Configurar Panel de TXT de Retenciones"
			});
			errorGeneral = true;
			enviarEmail = true;
			idLogErrores = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, regimen, idLogErrores, "Falta Configurar Panel de TXT de Retenciones", null, null, subsidiaria);
		  }
		  if (enviarEmail == true) {
			if (errorGeneral) {
			  if (!isEmpty(proceso))
				mensajeError = mensajeError + " de " + proceso + " ";
			  if (!isEmpty(nombrePeriodoSeleccionado))
				mensajeError = mensajeError + " para el Periodo " + nombrePeriodoSeleccionado + " ";
			  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde))
				mensajeError = mensajeError + " Fecha Desde : " + periodo.fDesde + " ";
			  if (!isEmpty(periodo) && !isEmpty(periodo.fHasta))
				mensajeError = mensajeError + " Fecha Hasta : " + periodo.fHasta + " ";
			  let descripcionMensajeFinal = mensajeError;
			  if (!isEmpty(url) && !isEmpty(idLogErrores))
				descripcionMensajeFinal = "<html><head></head><body><br>" + mensajeError + "<br> Puede Observar el Detalle de Errores desde el Siguiente link <br> <a href=\"" + url + "/app/common/custom/custrecordentry.nl?rectype=" + urlLog + "&id=" + idLogErrores + "\"> Informacion Proceso </a></body></html>";
			  if (!isEmpty(email)) {
				var asunto = "Generación TXT para la cuenta con el CUIT: " + cuitEmpresa;
				if (!isEmpty(subsidiaria)) {
				  var nameSubsidiary = utilidades.getLookupFieldsSafe(search.lookupFields({
					type: search.Type.SUBSIDIARY,
					id: subsidiaria,
					columns: "name"
				  }), "name");
				  asunto = "Generación TXT para la cuenta con el CUIT: " + cuitEmpresa + ", y Subsidiaria: " + nameSubsidiary;
				}
				enviarEmailUsuarioLogueado(email, asunto, descripcionMensajeFinal, email, null, null, null, null, null);
			  }
			} else {
			  let mensajeAdicional = "";
			  if (existenRetenciones == false) {
				mensajeAdicional = "No se encontraron registros para las fechas seleccionadas.";
			  }
			  if (!isEmpty(proceso))
				mensajeOK = mensajeOK + " de " + proceso + " ";
			  if (!isEmpty(nombrePeriodoSeleccionado))
				mensajeOK = mensajeOK + " para el Periodo " + nombrePeriodoSeleccionado + " ";
			  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde))
				mensajeOK = mensajeOK + " Fecha Desde : " + periodo.fDesde + " ";
			  if (!isEmpty(periodo) && !isEmpty(periodo.fHasta))
				mensajeOK = mensajeOK + " Fecha Hasta : " + periodo.fHasta + " ";
			  mensajeOK = mensajeOK + mensajeOK1 + " <br> " + mensajeAdicional;
			  if (!isEmpty(email)) {
				if (!isEmpty(subsidiaria)) {
				  nameSubsidiary = utilidades.getLookupFieldsSafe(search.lookupFields({
					type: search.Type.SUBSIDIARY,
					id: subsidiaria,
					columns: "name"
				  }), "name");
				  asunto = "Generación TXT para la cuenta con el CUIT: " + cuitEmpresa + ", y Subsidiaria: " + nameSubsidiary;
				} else {
				  asunto = "Generación TXT para la cuenta con el CUIT: " + cuitEmpresa;
				}
				enviarEmailUsuarioLogueado(email, asunto, mensajeOK, email, archivoTXT, archivoSujetos, archivoNotasCredito, archivoTXTPercepciones, archivoTXTRetenciones);
			  }
			}
		  }
		} catch (error) {
		  log.error({
			title: "scheduledGenerarTXT",
			details: "Error NetSuite Excepción: " + error.message
		  });
		}
		log.debug({
		  title: "scheduledGenerarTXT",
		  details: "FIN - script programado"
		});
	  }
	  /* SUITELET */
	  // function formGeneracionTXT(request, response) {
	  // 	if (request.getMethod() == 'GET') {
	  // 		var form = nlapiCreateForm("Panel de generación de TXT de Retenciones y Percepciones");
	  // 		form.setScript('customscript_l54_generar_txt');
	  // 		var selectRegimen = form.addField('custpage_field_tipo', 'select', 'Régimen', 'customrecord_l54_tipos_txt');
	  // 		selectRegimen.setMandatory(true);
	  // 		//var selectPeriodos = form.addField('custpage_field_periodo', 'select', 'Periodo', 'accountingperiod');
	  // 		//selectPeriodos.setMandatory(true);
	  // 		//Jurisdiccion
	  // 		var jurisdiccion = form.addField('custpage_field_jurisdiccion', 'select', 'Jurisdicción', 'customrecord_l54_zona_impuestos');
	  // 		//}
	  // 		var fechaDesde = form.addField('custpage_field_fdesde', 'date', 'Fecha Desde', 'Fecha Desde');
	  // 		fechaDesde.setMandatory(true);
	  // 		var fechaHasta = form.addField('custpage_field_fhasta', 'date', 'Fecha Hasta', 'Fecha Hasta');
	  // 		fechaHasta.setMandatory(true);
	  // 		//
	  // 		var oneWorld = false;
	  // 		if (esOneworld()) {
	  // 			oneWorld = true;
	  // 		}
	  // 		var campoSubsidiaria = null;
	  // 		if (oneWorld == true) {
	  // 			var campoSubsidiaria = form.addField('custpage_subsidiaria', 'select', 'Subsidiaria', 'subsidiary');
	  // 		} else {
	  // 			var campoSubsidiaria = form.addField('custpage_subsidiaria', 'text', 'Subsidiaria');
	  // 			campoSubsidiaria.setDefaultValue('');
	  // 			campoSubsidiaria.setDisplayType('hidden');
	  // 		}
	  // 		if (oneWorld == true) {
	  // 			campoSubsidiaria.setMandatory(true);
	  // 		}
	  // 		//Subsidiaria del Usuario por Defecto
	  // 		var context = nlapiGetContext();
	  // 		if (oneWorld == true) {
	  // 			var subsidiariaUsuario = context.getSubsidiary();
	  // 			if (!isEmpty(subsidiariaUsuario)) {
	  // 				campoSubsidiaria.setDefaultValue(subsidiariaUsuario);
	  // 			}
	  // 		}
	  // 		//
	  // 		var myInlineHtml = form.addField('custpage_field_texto', 'inlinehtml');
	  // 		myInlineHtml.setDefaultValue("<html><body><h2><u>Nota:</u> Desde este Panel es posible generar los archivos TXT para la Importacion de Retenciones y Percepciones. Al finalizar la generación del TXT, usted recibira un email informándole.</h2></body></html>");
	  // 		myInlineHtml.setBreakType("startcol");
	  // 		form.addSubmitButton('Generar TXT');
	  // 		response.writePage(form);
	  // 	} else {
	  // 		var form = nlapiCreateForm("Panel de generación de TXT de Retenciones y Percepciones");
	  // 		var subsidiaria = request.getParameter('custpage_subsidiaria');
	  // 		var errorPanel = false;
	  // 		var errorSubsidiaria = false;
	  // 		var url = "";
	  // 		var oneWorld = false;
	  // 		if (esOneworld()) {
	  // 			oneWorld = true;
	  // 		}
	  // 		var mensaje = "Se envió a procesar exitosamente. Cuando el proceso termine, se le comunicará por email.";
	  // 		if (isEmpty(subsidiaria) && oneWorld == true) {
	  // 			errorSubsidiaria = true;
	  // 			mensaje = "Debe Ingresar una Subsidiaria";
	  // 		}
	  // 		// Verifico si esta realizada la Configuracion del Panel de Control de TXT
	  // 		if (errorSubsidiaria == false) {
	  // 			var filtroPanel = [];
	  // 			filtroPanel[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
	  // 			if (!isEmpty(subsidiaria)) {
	  // 				filtroPanel[1] = new nlobjSearchFilter('custrecord_l54_panel_conf_txt_ret_sub', null, 'is', subsidiaria);
	  // 			}
	  // 			var columnaPanel = [];
	  // 			columnaPanel[0] = new nlobjSearchColumn('internalid');
	  // 			columnaPanel[1] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_url');
	  // 			columnaPanel[2] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_id_log');
	  // 			var resultadoPanel = new nlapiSearchRecord('customrecord_l54_panel_conf_txt_ret', null, filtroPanel, columnaPanel);
	  // 			if (!isEmpty(resultadoPanel) && resultadoPanel.length > 0) {
	  // 				url = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_url');
	  // 				urlLog = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_id_log');
	  // 				if (!isEmpty(url) && !isEmpty(urlLog))
	  // 					errorPanel = false;
	  // 				else
	  // 					errorPanel = true;
	  // 			} else
	  // 				errorPanel = true;
	  // 			if (errorPanel == true) {
	  // 				mensaje = "No se Encuentra Configurado el Panel de Configuración de TXT. Por Favor Realice la Configuración.";
	  // 			}
	  // 		}
	  // 		//
	  // 		if (errorPanel == false) {
	  // 			var urlFinal = url;
	  // 			if (isEmpty(urlFinal))
	  // 				urlFinal = "https://system.na1.netsuite.com";
	  // 			//var periodoSeleccionado = request.getParameter('custpage_field_periodo');
	  // 			var fechaDesdeSeleccionada = request.getParameter('custpage_field_fdesde');
	  // 			var fechaHastaSeleccionada = request.getParameter('custpage_field_fhasta');
	  // 			var params = [];
	  // 			var regimenSeleccionado = request.getParameter('custpage_field_tipo');
	  // 			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones y Percepciones', 'Regimen Seleccionado : ' + regimenSeleccionado);
	  // 			var jurisdiccionSeleccionado = request.getParameter('custpage_field_jurisdiccion');
	  // 			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones y Percepciones', 'Jurisdiccion Seleccionado : ' + jurisdiccionSeleccionado);
	  // 			// Obtengo el EMail del Usuario que Ejecuto el Proceso
	  // 			var currentContext = nlapiGetContext();
	  // 			var email = nlapiGetUser();
	  // 			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Email : ' + email);
	  // 			// Obtengo el Tipo de Operacion
	  // 			var tipoOperacion = "";
	  // 			var codigoRegimen = "";
	  // 			var errorProceso = false;
	  // 			mensaje = "Se envió a procesar exitosamente. Cuando el proceso termine, se le comunicará por email.";
	  // 			/*if (isEmpty(periodoSeleccionado)) {
	  // 			errorProceso = true;
	  // 			mensaje = "Falta Seleccionar un Periodo";
	  // 			}*/
	  // 			if (isEmpty(fechaDesdeSeleccionada)) {
	  // 				errorProceso = true;
	  // 				mensaje = "Falta Ingresar Fecha Desde";
	  // 			}
	  // 			if (isEmpty(fechaHastaSeleccionada)) {
	  // 				errorProceso = true;
	  // 				mensaje = "Falta Ingresar Fecha Hasta";
	  // 			}
	  // 		}
	  // 		if (errorProceso == false && errorPanel == false) {
	  // 			if (!isEmpty(regimenSeleccionado)) {
	  // 				var filtroRegimen = [];
	  // 				filtroRegimen[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
	  // 				filtroRegimen[1] = new nlobjSearchFilter('internalid', null, 'is', regimenSeleccionado);
	  // 				var columnaRegimen = [];
	  // 				columnaRegimen[0] = new nlobjSearchColumn('custrecord_l54_tipos_txt_codigo');
	  // 				columnaRegimen[1] = new nlobjSearchColumn('custrecord_l54_tipos_txt_tipo');
	  // 				columnaRegimen[2] = new nlobjSearchColumn('name');
	  // 				var resultadoRegimen = new nlapiSearchRecord('customrecord_l54_tipos_txt', null, filtroRegimen, columnaRegimen);
	  // 				if (!isEmpty(resultadoRegimen) && resultadoRegimen.length > 0) {
	  // 					codigoRegimen = resultadoRegimen[0].getValue('custrecord_l54_tipos_txt_codigo');
	  // 					tipoOperacion = resultadoRegimen[0].getValue('custrecord_l54_tipos_txt_tipo');
	  // 					var nombreRegimen = resultadoRegimen[0].getValue('name');
	  // 					if (isEmpty(nombreRegimen)) {
	  // 						nombreRegimen = "";
	  // 					}
	  // 					if (isEmpty(codigoRegimen) || isEmpty(tipoOperacion)) {
	  // 						errorProceso = true;
	  // 						mensaje = "Falta Configurar Información Adicional para el Regimen " + nombreRegimen;
	  // 					}
	  // 				}
	  // 			} else {
	  // 				errorProceso = true;
	  // 				mensaje = "Falta Seleccionar un Regimen";
	  // 			}
	  // 		}
	  // 		// Genero Mensaje de Respuesta
	  // 		var myInlineHtml = form.addField('custpage_field_texto', 'inlinehtml');
	  // 		myInlineHtml.setDefaultValue("<html><body><h2>" + mensaje + "</h2></body></html>");
	  // 		if (!isEmpty(urlFinal)) {
	  // 			form.addField("enterempslink", "url", "", null, "enteremps").setDisplayType("inline").setLinkText("Volver").setDefaultValue(urlFinal + nlapiResolveURL('SUITELET', 'customscript_l54_interfaz_gen_txt', 'customdeploy_l54_interfaz_gen_txt'));
	  // 		}
	  // 		if (errorProceso == false) {
	  // 			// Llamo a Script Programado para Generar el TXT
	  // 			//params['custscript_l54_txt_periodo'] = periodoSeleccionado;
	  // 			params['custscript_l54_txt_fdesde'] = fechaDesdeSeleccionada;
	  // 			params['custscript_l54_txt_fhasta'] = fechaHastaSeleccionada;
	  // 			params['custscript_l54_txt_regimen'] = codigoRegimen;
	  // 			params['custscript_l54_txt_userEmail'] = email;
	  // 			// Nuevo Configuro el Tipo de Operacion
	  // 			params['custscript_l54_txt_operacion'] = tipoOperacion;
	  // 			// Nuevo Configuro la Subsidiaria
	  // 			params['custscript_l54_txt_subsidiaria'] = subsidiaria;
	  // 			// Nuevo Configuro la Jurisdiccion
	  // 			params['custscript_l54_txt_jurisdiccion'] = jurisdiccionSeleccionado;
	  // 			nlapiScheduleScript('customscript_l54_generador_txt_retencion', null, params);
	  // 		}
	  // 		response.writePage(form);
	  // 	}
	  // }
	  //[Listo]
	  function getTipoTransId(tipoTransStr) {
		const filters = [search.createFilter({
		  name: "name",
		  operator: search.Operator.IS,
		  values: tipoTransStr
		})];
		const columns = [search.createColumn({
		  name: "internalId"
		})];
		const results = search.create({
		  type: "customlist_l54_tipo_transaccion",
		  filters: filters,
		  columns: columns
		}).run().getRange({
		  start: 0,
		  end: 1000
		});
		if (results != null && results.length == 1)
		  return results[0].getValue({ name: "internalId" });
		else
		  return null;
	  }
    function getTipoTransIdNew() {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customlist_l54_tipo_transaccion",
        filters:
        [
        ],
        columns:
        [
          search.createColumn({name: "internalid", label: "Internal ID"}),
           search.createColumn({name: "name", label: "Name"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                id: result.getValue(columns[0]),
                name: result.getValue(columns[1])  
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getTipoOperaciones() {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_tipo_operacion",
        filters:
        [
        ],
        columns:
        [
          search.createColumn({name: "internalid", label: "Internal ID"}),
           search.createColumn({name: "custrecord_l54_tipo_op_codigo", label: "Código Operación"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                id: result.getValue(columns[0]),
                codigoOp: result.getValue(columns[1])  
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getTipoDocumento() {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_tipo_documento",
        filters:
        [
        ],
        columns:
        [
          search.createColumn({name: "internalid", label: "Internal ID"}),
           search.createColumn({name: "custrecord_l54_tipo_doc_arc", label: "Código ARCIBA"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                id: result.getValue(columns[0]),
                codigo: result.getValue(columns[1])  
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getNumeradores(subsidiaria) {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_numerador_transaccion",
        filters:
        [
          ["isinactive","is",false], 
          "AND", 
          ["custrecord_l54_num_trans_subsidiaria","anyof",subsidiaria]
        ],
        columns:
        [
          search.createColumn({name: "internalid"}),
          search.createColumn({name: "custrecord_l54_num_trans_tipo_comp"}),
          search.createColumn({name: "custrecord_l54_tipo_trans_netsuite"}),
          search.createColumn({name: "custrecord_l54_es_nd"}),
          search.createColumn({name: "custrecord_l54_num_trans_es_cred_elect"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1]),
                col2: result.getValue(columns[2]),
                col3: result.getValue(columns[3]),
                col4: result.getValue(columns[4]) 
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getRegimenPercepcion(subsidiaria, jurisdiccion) {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_pv_iibb_config_detalle",
        filters:
        [
           ["isinactive","is","F"], 
           "AND", 
           ["custrecord_l54_pv_det_jurisdiccion","noneof","1","2","26"], 
           "AND", 
           ["custrecord_l54_pv_det_jurisdiccion","anyof",jurisdiccion], 
           "AND", 
           ["custrecord_l54_pv_det_link_padre.custrecord_l54_pv_gral_subsidiaria","anyof",subsidiaria]
        ],
        columns:
        [
           search.createColumn({name: "custrecord_l54_pv_det_alic_perc", label: "Alicuota Percepción"}),
           search.createColumn({name: "custrecord_l54_pv_det_regimen", label: "Regimen de percepcion"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1])
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getComprobantes() {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_tipos_comprobantes",
        filters:
        [
        ],
        columns:
        [
          search.createColumn({name: "internalid"}),
          search.createColumn({name: "custrecord_l54_arc_tipo_comp_codigo"}),
          search.createColumn({name: "custrecord_l54_arc_perc_tipo_comp_codigo"}),
          search.createColumn({name: "custrecord_l54_arba_tipo_comp_codigo"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1]),
                col2: result.getValue(columns[2]),
                col3: result.getValue(columns[3])     
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
    function getTipoContribuyenteIIBB() {
      let resultFinal = [];
      var savedsearch = search.create({
        type: "customrecord_l54_tipo_contribuyente_iibb",
        filters:
        [
        ],
        columns:
        [
          search.createColumn({name: "internalid"}),
          search.createColumn({name: "custrecord_l54_tipo_contr_iibb_cod_arc"}),
          search.createColumn({name: "custrecord_l54_tipo_contr_iibb_cod_agip"}),
          search.createColumn({name: "custrecord_l54_tipo_contr_iibb_cod_arba"})
        ]
     });

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1]),
                col2: result.getValue(columns[2]),
                col3: result.getValue(columns[3])     
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }
	  //[Lista]
	  function tipoComprobanteRet(tipoTransNetSuite, esND, subsidiaria, tipo, esCreditoElectronico) {
		const columns = [search.createColumn({
		  name: "custrecord_l54_num_trans_tipo_comp"
		})];
		const filters = [];
		filters[0] = search.createFilter({
		  name: "custrecord_l54_tipo_trans_netsuite",
		  operator: search.Operator.IS,
		  values: tipoTransNetSuite
		});
		filters[1] = search.createFilter({
		  name: "isinactive",
		  operator: search.Operator.IS,
		  values: false
		});
		if (!isEmpty(esND))
		  filters[2] = search.createFilter({
			name: "custrecord_l54_es_nd",
			operator: search.Operator.IS,
			values: esND
		  });
		else
		  filters[2] = search.createFilter({
			name: "custrecord_l54_es_nd",
			operator: search.Operator.IS,
			values: false
		  });
		if (!isEmpty(esCreditoElectronico))
		  filters[3] = search.createFilter({
			name: "custrecord_l54_num_trans_es_cred_elect",
			operator: search.Operator.IS,
			values: esCreditoElectronico
		  });
		else
		  filters[3] = search.createFilter({
			name: "custrecord_l54_num_trans_es_cred_elect",
			operator: search.Operator.IS,
			values: false
		  });
		if (!isEmpty(subsidiaria))
		  filters[4] = search.createFilter({
			name: "custrecord_l54_num_trans_subsidiaria",
			operator: search.Operator.ANYOF,
			values: subsidiaria
		  });
		const results = search.create({
		  type: "customrecord_l54_numerador_transaccion",
		  filters: filters,
		  columns: columns
		}).run().getRange({
		  start: 0,
		  end: 1000
		});
		if (results != null && results.length > 0) {
		  const idComprobante = results[0].getValue({ name: "custrecord_l54_num_trans_tipo_comp" });
		  if (!isEmpty(idComprobante) && !isEmpty(tipo)) {
			const columnaComprobante = [search.createColumn({
			  name: "custrecord_l54_" + tipo + "_tipo_comp_codigo"
			})];
			const filtroComprobante = [];
			filtroComprobante[0] = search.createFilter({
			  name: "internalid",
			  operator: search.Operator.IS,
			  values: idComprobante
			});
			const resultadoComprobante = search.create({
			  type: "customrecord_l54_tipos_comprobantes",
			  filters: filtroComprobante,
			  columns: columnaComprobante
			}).run().getRange({
			  start: 0,
			  end: 1000
			});
			if (resultadoComprobante != null && resultadoComprobante.length > 0) {
			  return resultadoComprobante[0].getValue({ name: "custrecord_l54_" + tipo + "_tipo_comp_codigo" });
			}
		  }
		}
		return null;
	  }
	  // function obtenerInfoImpuesto(idImpuesto) {
	  // 	var respuesta = {};
	  // 	respuesta.codigoNorma = '';
	  // 	respuesta.porcentaje = '';
	  // 	if (!isEmpty(idImpuesto)) {
	  // 		var filtroImpuesto = new nlobjSearchFilter('internalid', null, 'is', idImpuesto);
	  // 		var columnaImpuesto = [];
	  // 		columnaImpuesto[0] = new nlobjSearchColumn('custrecord_l54_cod_norma');
	  // 		columnaImpuesto[1] = new nlobjSearchColumn('rate');
	  // 		var resultadoImpuesto = new nlapiSearchRecord('salestaxitem', null, filtroImpuesto, columnaImpuesto);
	  // 		if (!isEmpty(resultadoImpuesto) && resultadoImpuesto.length > 0) {
	  // 			respuesta.codigoNorma = resultadoImpuesto[0].getValue('custrecord_l54_cod_norma');
	  // 			respuesta.porcentaje = resultadoImpuesto[0].getValue('rate');
	  // 		}
	  // 	}
	  // 	return respuesta;
	  // }
	  //[Lista=>Roger]
    function obtenerCodigoComprobanteARCIBA(ptipoComprobante, pnotaDebito, pcreditoElectronico, pidTipoComprobante, tipo, subsidiaria) {
      let codigoComprobante = null;
      const tipoComprobante = ptipoComprobante;
      //var subsidiaria = null;
      let esND = false;
      let esCreditoElectronico = false;
      /*if (esOneworld()) {
      subsidiaria = resultadoComprobante[0].getValue('subsidiary');
      if (isEmpty(subsidiaria))
      subsidiaria = null;
      }*/
      const notaDebito = pnotaDebito;
      const creditoElectronico = pcreditoElectronico;
      if (!isEmpty(notaDebito))
        esND = notaDebito;
      if (!isEmpty(creditoElectronico))
        esCreditoElectronico = creditoElectronico;
      if (!isEmpty(tipoComprobante)) {
        var idTipoComprobante = pidTipoComprobante;
        if (!isEmpty(idTipoComprobante)) {
          codigoComprobante = tipoComprobanteRet(idTipoComprobante, esND, subsidiaria, tipo, esCreditoElectronico);
        }
      }
      
      return codigoComprobante;
    }

    function getPagos (arrPagos){
      let resultFinal = [];

      var savedsearch = search.load({
        id: "customsearch_l54_imp_pagos_prov_gen_txt"
     });

     const filtroPagoProveedor = search.createFilter({
       name: "internalid",
       operator: search.Operator.ANYOF,
       values: arrPagos
     });
     savedsearch.filters.push(filtroPagoProveedor);

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      log.debug("savedsearch.filters", savedsearch.filters)
      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1]),
                col2: result.getValue(columns[2]),
                col3: result.getValue(columns[3]),
                col4: result.getValue(columns[4]),
                col5: result.getValue(columns[5]),
                col6: result.getValue(columns[6]),
                col7: result.getValue(columns[7]),
                col8: result.getValue(columns[8])   
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }

    function getPercepciones (arrTransacciones){
      let resultFinal = [];

      var savedsearch = search.load({
        id: "customsearch_l54_imp_iva_transaccion"
     });

     const filtroPagoProveedor = search.createFilter({
       name: "internalid",
       operator: search.Operator.ANYOF,
       values: arrTransacciones
     });
     savedsearch.filters.push(filtroPagoProveedor);

     let pagedData = savedsearch.runPaged({
        pageSize : 1000
      });

      let page, columns;

      pagedData.pageRanges.forEach(function(pageRange) {
          page = pagedData.fetch({
              index : pageRange.index
          });

          page.data.forEach(function(result) {
              let arr = new Object();
              columns = result.columns;
              
              arr = {
                col0: result.getValue(columns[0]),
                col1: result.getValue(columns[1])  
              }
              resultFinal.push(arr)
          });
      });
      return resultFinal;
    }

	  function obtenerCodigoComprobante(refComprobante, tipo, subsidiaria) {
		let codigoComprobante = null;
		const filtroComprobante = new Array();
		filtroComprobante[0] = search.createFilter({
		  name: "internalid",
		  operator: search.Operator.IS,
		  values: refComprobante
		});
		const columnaComprobante = new Array();
		columnaComprobante[0] = search.createColumn({ name: "recordtype" });
		columnaComprobante[1] = search.createColumn({ name: "custbody_l54_nd" });
		columnaComprobante[2] = search.createColumn({ name: "custbody_l54_es_credito_electronico" });
		//columnaComprobante[2] = new nlobjSearchColumn('subsidiary');
		const resultadoComprobante = search.create({
		  type: "transaction",
		  filters: filtroComprobante,
		  columns: columnaComprobante
		}).run().getRange({
		  start: 0,
		  end: 1000
		});
		if (!isEmpty(resultadoComprobante) && resultadoComprobante.length > 0) {
		  const tipoComprobante = resultadoComprobante[0].getValue("recordtype");
		  //var subsidiaria = null;
		  let esND = false;
		  let esCreditoElectronico = false;
		  /*if (esOneworld()) {
		  subsidiaria = resultadoComprobante[0].getValue('subsidiary');
		  if (isEmpty(subsidiaria))
		  subsidiaria = null;
		  }*/
		  const notaDebito = resultadoComprobante[0].getValue("custbody_l54_nd");
		  const creditoElectronico = resultadoComprobante[0].getValue("custbody_l54_es_credito_electronico");
		  if (!isEmpty(notaDebito))
			esND = notaDebito;
		  if (!isEmpty(creditoElectronico))
			esCreditoElectronico = creditoElectronico;
		  if (!isEmpty(tipoComprobante)) {
			const idTipoComprobante = getTipoTransId(tipoComprobante);
			if (!isEmpty(idTipoComprobante)) {
			  codigoComprobante = tipoComprobanteRet(idTipoComprobante, esND, subsidiaria, tipo, esCreditoElectronico);
			}
		  }
		}
		return codigoComprobante;
	  }
	  //[Lista]
	  function grabarError(error, descripcionError, existenRetenciones, procesoEncolado, idRegistroLOG) {
		const objetoError = {};
		objetoError.error = error;
		objetoError.descripcionError = descripcionError;
		objetoError.existenRetenciones = existenRetenciones;
		objetoError.procesoEncolado = procesoEncolado;
		objetoError.idLog = idRegistroLOG;
		return objetoError;
	  }
	  //[Lista]
	  function grabarLogError(estado, periodo, tipoOperacion, tipoRegimen, idLogErrores, detalleError, refRetencion, refPago, subsidiaria) {
		let idInternoLog = idLogErrores;
		const idRL = null;
		let idInternoEstadoLog = null;
		let error = false;
		if (isEmpty(idInternoLog)) {
		  // Genero la Cabecera del Log
		  // Buscar ID Externo Estado LOG
		  //var filtroEstadoLog = new nlobjSearchFilter('externalid', null, 'is', estado);
		  const filtroEstadoLog = search.createFilter({
			name: "externalid",
			operator: search.Operator.IS,
			values: estado
		  });
		  //var columnaEstadoLog = new nlobjSearchColumn('internalid');
		  const columnaEstadoLog = search.createColumn({
			name: "internalid"
		  });
		  //var resultadoEstadoLog = new nlapiSearchRecord('customrecord_l54_estado_proc_txt_ret', null, filtroEstadoLog, columnaEstadoLog);
		  const resultadoEstadoLog = search.create({
			type: "customrecord_l54_estado_proc_txt_ret",
			filters: filtroEstadoLog,
			columns: columnaEstadoLog
		  }).run().getRange({
			start: 0,
			end: 1000
		  });
		  if (!isEmpty(resultadoEstadoLog) && resultadoEstadoLog.length > 0)
			idInternoEstadoLog = resultadoEstadoLog[0].getValue({ name: "internalid" });
		  if (!isEmpty(idInternoEstadoLog)) {
			//var recordLog = nlapiCreateRecord('customrecord_l54_log_gen_txt_ret');
			const recordLog = record.create({
			  type: "customrecord_l54_log_gen_txt_ret"
			});
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_estado', idInternoEstadoLog);
			recordLog.setValue({
			  fieldId: "custrecord_l54_log_gen_txt_estado",
			  value: idInternoEstadoLog
			});
			// Genero la Fecha
			// Grabo la fecha de finalización
			const dt = new Date();
			const dtstring = pad(dt.getDate(), 2)
			  + "/" + pad(dt.getMonth() + 1, 2)
			  + "/" + dt.getFullYear()
			  + " " + pad(dt.getHours() + 4, 2)
			  + ":" + pad(dt.getMinutes(), 2)
			  + ":" + pad(dt.getSeconds(), 2);
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_fecha', dtstring);
			recordLog.setValue({
			  fieldId: "custrecord_l54_log_gen_txt_fecha",
			  value: dtstring
			});
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_periodo', periodo);
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_periodo', '');
			recordLog.setValue({
			  fieldId: "custrecord_l54_log_gen_txt_periodo",
			  value: ""
			});
			if (!isEmpty(periodo)) {
			  if (!isEmpty(periodo.fDesde)) {
				//recordLog.setFieldValue('custrecord_l54_log_gen_txt_fdesde', periodo.fDesde);
   
				const periodoFDesde = format.parse({
				  value: periodo.fDesde,
				  type: format.Type.DATE
				});
   
				recordLog.setValue({
				  fieldId: "custrecord_l54_log_gen_txt_fdesde",
				  value: periodoFDesde
				});
			  }
			  if (!isEmpty(periodo.fHasta)) {
				//recordLog.setFieldValue('custrecord_l54_log_gen_txt_fhasta', periodo.fHasta);
   
				const periodoFHasta = format.parse({
				  value: periodo.fHasta,
				  type: format.Type.DATE
				});
   
				recordLog.setValue({
				  fieldId: "custrecord_l54_log_gen_txt_fhasta",
				  value: periodoFHasta
				});
			  }
			}
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_operacion', tipoOperacion);
			recordLog.setValue({
			  fieldId: "custrecord_l54_log_gen_txt_operacion",
			  value: tipoOperacion
			});
			let idInternoRegimen = "";
			tipoRegimen = tipoRegimen.toString();
			//var filtroRegimen = new nlobjSearchFilter('custrecord_l54_tipos_txt_codigo', null, 'is', tipoRegimen);
			const filtroRegimen = search.createFilter({
			  name: "custrecord_l54_tipos_txt_codigo", //The search return column name
			  operator: search.Operator.IS,
			  values: tipoRegimen
			});
			//var columnaRegimen = new nlobjSearchColumn('internalid');
			const columnaRegimen = search.createColumn({
			  name: "internalid"
			});
			//var resultadoRegimen = new nlapiSearchRecord('customrecord_l54_tipos_txt', null, filtroRegimen, columnaRegimen);
			const resultadoRegimen = search.create({
			  type: "customrecord_l54_tipos_txt",
			  filters: filtroRegimen,
			  columns: columnaRegimen
			}).run().getRange({
			  start: 0,
			  end: 1000
			});
			if (!isEmpty(resultadoRegimen) && resultadoRegimen.length > 0) {
			  idInternoRegimen = resultadoRegimen[0].getValue({ name: "internalid" });
			}
			if (!isEmpty(idInternoRegimen)) {
			  //recordLog.setFieldValue('custrecord_l54_log_gen_txt_regimen', idInternoRegimen);
			  recordLog.setValue({
				fieldId: "custrecord_l54_log_gen_txt_regimen",
				value: idInternoRegimen
			  });
			} else {
			  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Obteniendo El ID Interno del Codigo de Regimen : ' + tipoRegimen);
			  log.error({
				title: "Proceso Generacion TXT Retenciones",
				details: "Error Obteniendo El ID Interno del Codigo de Regimen : " + tipoRegimen
			  });
			}
			if (!isEmpty(subsidiaria)) {
			  //recordLog.setFieldValue('custrecord_l54_log_gen_txt_sub', subsidiaria);
			  recordLog.setValue({
				fieldId: "custrecord_l54_log_gen_txt_sub",
				value: subsidiaria
			  });
			}
			error = false;
			try {
			  //idInternoLog = nlapiSubmitRecord(recordLog);
			  idInternoLog = recordLog.save({
				enableSourcing: true,
				ignoreMandatoryFields: false
			  });
			} catch (e) {
			  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Log de TXT Retenciones - NetSuite error: ' + e.message);
			  log.error({
				title: "Proceso Generacion TXT Retenciones",
				details: "Error Grabando Log de TXT Retenciones - NetSuite error: " + e.message
			  });
			  error = true;
			}
		  } else {
			error = true;
			//nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Obteniendo Estado de LOG');
			log.error({
			  title: "Proceso Generacion TXT Retenciones",
			  details: "Error Obteniendo Estado de LOG"
			});
		  }
		}
		if (!isEmpty(idInternoLog)) {
		  // Genero el Detalle de Log
		  if (error == false) {
			if (Array.isArray(detalleError)) {
			  for (let i = 0; i < detalleError.length; i++) {
				// Grabo el Detalle
				//var recordDetalleLog = nlapiCreateRecord('customrecord_l54_det_log_gen_txt_ret');
				var recordDetalleLog = record.create({
				  type: "customrecord_l54_det_log_gen_txt_ret",
				  isDynamic: true
				});
				//recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_log', idInternoLog);
				recordDetalleLog.setValue({
				  fieldId: "custrecord_l54_det_log_gen_txt_log",
				  value: idInternoLog
				});
				//recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_error', detalleError[i]);
				recordDetalleLog.setValue({
				  fieldId: "custrecord_l54_det_log_gen_txt_error",
				  value: detalleError[i]
				});
				if (!isEmpty(refRetencion))
				  //recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_ret', refRetencion);
				  recordDetalleLog.setValue({
					fieldId: "custrecord_l54_det_log_gen_txt_ret",
					value: refRetencion
				  });
				if (!isEmpty(refPago))
				  //recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_pago', refPago);
				  recordDetalleLog.setValue({
					fieldId: "custrecord_l54_det_log_gen_txt_pago",
					value: refPago
				  });
				try {
				  //var idRDL = nlapiSubmitRecord(recordDetalleLog);
				  var idRDL = recordDetalleLog.save({
					enableSourcing: true,
					ignoreMandatoryFields: false
				  });
				} catch (e) {
				  //nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: ' + e.message);
				  log.error({
					title: "Proceso Generacion TXT Retenciones",
					details: "Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: " + e.message
				  });
				}
			  }
			} else {
			  // Grabo el Detalle
			  //var recordDetalleLog = nlapiCreateRecord('customrecord_l54_det_log_gen_txt_ret');
			  recordDetalleLog = record.create({
				type: "customrecord_l54_det_log_gen_txt_ret",
				isDynamic: true
			  });
			  //recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_log', idInternoLog);
			  recordDetalleLog.setValue({
				fieldId: "custrecord_l54_det_log_gen_txt_log",
				value: idInternoLog
			  });
			  //recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_error', detalleError);
			  recordDetalleLog.setValue({
				fieldId: "custrecord_l54_det_log_gen_txt_error",
				value: detalleError
			  });
			  if (!isEmpty(refRetencion))
				//recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_ret', refRetencion);
				recordDetalleLog.setValue({
				  fieldId: "custrecord_l54_det_log_gen_txt_ret",
				  value: refRetencion
				});
			  if (!isEmpty(refPago))
				//recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_pago', refPago);
				recordDetalleLog.setValue({
				  fieldId: "custrecord_l54_det_log_gen_txt_pago",
				  value: refPago
				});
			  try {
				//var idRDL = nlapiSubmitRecord(recordDetalleLog);
				idRDL = recordDetalleLog.save({
				  enableSourcing: true,
				  ignoreMandatoryFields: false
				});
			  } catch (e) {
				//nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: ' + e.message);
				log.error({
				  title: "Proceso",
				  details: "Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: " + e.message
				});
			  }
			}
		  }
		}
		return idInternoLog;
	  }
	  // function comparacionFechas(fechaInicio, fechaFin) {
	  // 	var fechaInicioNew = (fechaInicio.getFullYear() + pad(parseInt(fechaInicio.getMonth(), 10) + parseInt(1, 10), 2) + pad(parseInt(fechaInicio.getDate(), 10) + parseInt(1, 10), 2));
	  // 	var fechaHastaNew = (fechaFin.getFullYear() + pad(parseInt(fechaFin.getMonth(), 10) + parseInt(1, 10), 2) + pad(parseInt(fechaFin.getDate(), 10) + parseInt(1, 10), 2));
	  // 	return ((fechaInicioNew > fechaHastaNew) - (fechaInicioNew < fechaHastaNew));
	  // }
	  //[lISTO]
	  // Método que me devuelve El CUIT de la Empresa
	  function obtenerInformacionEmpresa(campo, subsidiaria) {
		let infoCampo = "";
		const filtros = [];
		//filtros[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
		filtros[0] = search.createFilter({
		  name: "isinactive", //The search return column name
		  operator: search.Operator.IS,
		  values: false
		});
		if (!isEmpty(subsidiaria)) {
		  //filtros[1] = new nlobjSearchFilter('custrecord_l54_subsidiaria', null, 'is', subsidiaria);
		  filtros[1] = search.createFilter({
			name: "custrecord_l54_subsidiaria", //The search return column name
			operator: search.Operator.IS,
			values: subsidiaria
		  });
		}
		//var columns = [new nlobjSearchColumn(campo)];
		const columns = [search.createColumn({ name: campo })];
		//var searchresults = new nlapiSearchRecord("customrecord_l54_datos_impositivos_emp", null, filtros, columns);
		const searchresults = search.create({
		  type: "customrecord_l54_datos_impositivos_emp",
		  filters: filtros,
		  columns: columns
		}).run().getRange({
		  start: 0,
		  end: 1000
		});
		if (searchresults != null && searchresults.length > 0) {
		  //infoCampo = searchresults[0].getValue(campo);
		  infoCampo = searchresults[0].getValue({
			name: campo
		  });
		}
		return infoCampo;
	  }
	  //[Lista]
	  function obtenerMesStr(fechaDesdeDate) {
		let nombreMes = "";
		if (!isEmpty(fechaDesdeDate)) {
		  const mes = parseInt(fechaDesdeDate.getMonth(), 10);
		  const anio = fechaDesdeDate.getFullYear();
		  const nombresMeses = [
			"Ene", "Feb", "Mar",
			"Abr", "May", "Jun",
			"Jul", "Ago", "Sep",
			"Oct", "Nov", "Dic"
		  ];
		  nombreMes = nombresMeses[mes] + "_" + anio;
		}
		return nombreMes;
	  }
	  //[Listo]
	  function generarTXTeSicolRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'Inicio Proceso');
		log.debug({
		  title: "GenerarTXT eSicol (Retenciones)",
		  details: "Inicio Proceso"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		try {
		  var retencionESICOL = {};
		  retencionESICOL.retencion = {};
		  retencionESICOL.sujeto = {};
		  retencionESICOL.existenRetenciones = false;
		  retencionESICOL.error = false;
		  retencionESICOL.descripcionError = "";
		  retencionESICOL.procesoEncolado = false;
		  retencionESICOL.idLog = idRegistroLOG;
		  retencionESICOL.contenidoTXT = "";
		  // Grabo Registro de TXT
		  const estadoGeneracionTXT = null;
		  const filtro = [];
		  let i = 0;
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_fecha",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtro[i++] = search.createFilter({
			  name: "custrecord_l54_ret_subsidiaria",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_esicol');
		  const search1 = search.load({
			id: "customsearch_l54_ret_esicol",
			type: "customrecord_l54_retencion" //opc
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResultSet = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
			  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10148. resultIndex: ' + resultIndex + '. resultado.length: ' + resultado.length);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  if (!isEmpty(completeResultSet)) {
			//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'Cantidad Retenciones:' + completeResultSet.length);
			log.debug({
			  title: "GenerarTXT eSicol (Retenciones)",
			  details: "Cantidad Retenciones: " + completeResultSet.length
			});
			const errorSubsidiaria = false;
			const arraySubsidiaria = [];
			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
			  const numeroSubsidiaria = -1;
			  retencionESICOL.retencion = {};
			  retencionESICOL.sujeto = {};
			  const resultadoTXTRetencionesESICOL = completeResultSet[i];
			  const columns = resultadoTXTRetencionesESICOL.columns;
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idRetencionNetSuite = resultadoTXTRetencionesESICOL.getValue({ name: "internalid" });
			  var refComprobante = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_ref_pago_prov" });
			  const subsidiariaStr = "";
			  const empresaOneWorld = false;
			  const jurisdiccion = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_jurisdiccion" });
			  if (!isEmpty(refComprobante)) {
				// Obtengo el Numero del Comprobante
				var numerador = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_cod_pago_prov" });
				// Tomo el Numero, Punto de Venta y Letra
				var numeroComprobante = numerador.toString().substr(-8);
				// Obtengo Tipo de Cambio de la Retencion
				const tipoCambio = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_tipo_cambio" });
				if (!isEmpty(tipoCambio)) {
				  // Obtengo la Base de Calculo
				  //var baseCalculo = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_base_calculo_imp');
				  const baseCalculo = resultadoTXTRetencionesESICOL.getValue({ name: columns[29] });
				  if (!isEmpty(baseCalculo)) {
					retencionESICOL.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
					// Obtengo Fecha de Retencion
					const fechaRetencion = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_fecha" });
					//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10205. fechaRetencion: ' + fechaRetencion);
					if (!isEmpty(fechaRetencion)) {
					  // Formateo la Fecha
					  //var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
					  const fechaRetencionDate = format.parse({
						value: fechaRetencion,
						type: format.Type.DATE
					  });
					  if (!isEmpty(fechaRetencionDate)) {
						// Obtengo las Componentes de la Fecha
						const diaRetencion = fechaRetencionDate.getDate();
						const mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
						const anoRetencion = fechaRetencionDate.getFullYear();
						const fechaRetencionFinal = anoRetencion.toString() + padding_left(mesRetencion, "0", 2) + padding_left(diaRetencion, "0", 2);
						retencionESICOL.retencion.fechaRetencion = fechaRetencionFinal;
						//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10219. diaRetencion: '+diaRetencion+ '. mesRetencion: '+mesRetencion+'. anoRetencion: '+anoRetencion+' . fechaRetencionFinal: ' + fechaRetencionFinal);
						const proveedor = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_ref_proveedor" });
						const importeRetencion = resultadoTXTRetencionesESICOL.getValue({ name: "custrecord_l54_ret_importe" });
						if (!isEmpty(importeRetencion)) {
						  retencionESICOL.retencion.montoRet = padding_left(parseFloat((parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
						  if (!isEmpty(proveedor)) {
							const cuitProveedorAux = resultadoTXTRetencionesESICOL.getValue({ name: "custbody_54_cuit_entity", join: "custrecord_l54_ret_ref_pago_prov" });
							let cuitProveedor = cuitProveedorAux.toString();
							cuitProveedor = cuitProveedor.replace(/-/g, "");
							cuitProveedor = cuitProveedor.replace(/\./g, "");
							cuitProveedor = cuitProveedor.replace(/ /g, "&nbsp");
							cuitProveedor = cuitProveedor.toString();
							//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10232. cuitProveedor: ' + cuitProveedor);
							if (!isEmpty(cuitProveedor)) {
							  retencionESICOL.retencion.cuitProveedor = padding_left(cuitProveedor, "0", 11);
							}
							else {
							  errorGlobal = true;
							  descripcionError = "No se encontró Cuit del Proveedor";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Proveedor";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error obteniendo Importe de la Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Formateando la Fecha de Retencion";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo Fecha De Retencion";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Base De Calculo";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionESICOL.retencion != null) {
				  // Genero Contenido
				  const error = false;
				  const descripcionMensaje = "TXT Retenciones Generado Correctamente";
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  numeroComprobante = numerador.toString().substr(-8);
				  retencionESICOL.retencion.numeroComprobante = numeroComprobante;
				  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10290. numeroComprobante: ' + numeroComprobante);
				  contenidoTXT += retencionESICOL.retencion.cuitProveedor + retencionESICOL.retencion.fechaRetencion + retencionESICOL.retencion.numeroComprobante + retencionESICOL.retencion.baseCalculo + retencionESICOL.retencion.montoRet;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Retencion";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Generando TXT eSicol (Retenciones)');
				log.error({
				  title: "GenerarTXT eSicol (Retenciones)",
				  details: "Error Generando TXT eSicol (Retenciones)"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  ////checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Obteniendo eSicol (Retenciones)');
				  log.error({
					title: "GenerarTXT eSicol (Retenciones)",
					details: "Error Obteniendo eSicol (Retenciones"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Generando TXT eSicol (Retenciones) - Error : ' + e.message);
		  log.error({
			title: "GenerarTXT eSicol (Retenciones)",
			details: "Error Generando TXT eSicol (Retenciones) - Error: " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT e-SICOL - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionESICOL = grabarError(true, "Error Generando TXT de Retenciones", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionESICOL = grabarError(false, "Generacion de TXT de Retenciones Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT Retenciones Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones eSICOL', 'Finalizacion - Generacion TXT eSicol (Retenciones)');
		log.debug({
		  title: "Proceso Generacion TXT Retenciones eSICOL",
		  details: "Finalizacion - Generacion TXT eSicol (Retenciones)"
		});
		retencionESICOL.contenidoTXT = contenidoTXT;
		return retencionESICOL;
	  }
	  //[listo]
	  function generarTXTeSicolPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Proceso');
		log.debug({
		  title: "GenerarTXT eSicol (Percepciones)",
		  details: "Inicio Proceso"
		});
		const procesoEncolado = false;
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenRetenciones = false;
		const mensajeError = "Error Generando TXT de Percepciones";
		let descripcionError = "";
		const tipoComprobanteNS = "";
		let contenidoTXT = "";
		try {
		  var percepcioneSICOL = {};
		  percepcioneSICOL.retencion = {};
		  percepcioneSICOL.sujeto = {};
		  percepcioneSICOL.existenRetenciones = false;
		  percepcioneSICOL.error = false;
		  percepcioneSICOL.descripcionError = "";
		  percepcioneSICOL.procesoEncolado = false;
		  percepcioneSICOL.idLog = idRegistroLOG;
		  percepcioneSICOL.contenidoTXT = "";
		  // INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  let iCont = 0;
		  const filtroTXTPercepcionesARCIBA = [];
		  //filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			filtroTXTPercepcionesARCIBA[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //
		  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_esicol');
		  const search1 = search.load({
			id: "customsearch_l54_per_esicol",
			type: "transaction" //opc
		  });
		  search1.filters.push(...filtroTXTPercepcionesARCIBA);
		  const searchResults = search1.run();
		  let resultadoTXTPercepcioneseSICOL = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultadoTXTPercepcioneseSICOL = resultado; //Primera ve inicializa
			  else
				resultadoTXTPercepcioneseSICOL = resultadoTXTPercepcioneseSICOL.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			////checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  // FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  // INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  const informacionResultado = [];
		  let indiceArray = 0;
		  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Recorrer Percepciones');
		  log.debug({
			title: "GenerarTXT eSicol (Percepciones)",
			details: "Inicio Recorrer Percepciones"
		  });
		  for (let i = 0; resultadoTXTPercepcioneseSICOL != null && i < resultadoTXTPercepcioneseSICOL.length; i++) {
			informacionResultado[indiceArray] = {};
			const columns = resultadoTXTPercepcioneseSICOL[i].columns;
			informacionResultado[indiceArray].idInterno = "";
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "internalid", summary: search.Summary.GROUP });
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "custbody_l54_numero_localizado", summary: search.Summary.MAX });
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "custbody_l54_boca", summary: search.Summary.MAX });
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "custbody_l54_letra", summary: search.Summary.MAX });
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "exchangerate", summary: search.Summary.GROUP });
			informacionResultado[indiceArray].cuitEntity = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "custbody_54_cuit_entity", summary: search.Summary.MAX });
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue('custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue({ name: columns[13] }));
			const fechaOperacionAux = resultadoTXTPercepcioneseSICOL[i].getValue({ name: "trandate", summary: search.Summary.GROUP });
			let fechaOperacionDate = "";
			if (!isEmpty(fechaOperacionAux))
			  //fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			  fechaOperacionDate = format.parse({
				value: fechaOperacionAux,
				type: format.Type.DATETIMETZ
			  });
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = "";
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcioneseSICOL[i].getValue({ name: columns[12], summary: search.Summary.GROUP });
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue({ name: "total", summary: search.Summary.SUM }));
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Ordenar');
		  log.debug({
			title: "GenerarTXT eSicol (Percepciones)",
			details: "Inicio Ordenar"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Cantidad Percepciones:' + informacionResultado.length);
			log.debug({
			  title: "GenerarTXT eSicol (Percepciones)",
			  details: "Cantidad Percepciones: " + informacionResultado.length
			});
			for (let i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
			  const tipoOperacionStr = "Percepcion";
			  const entidadStr = "Cliente";
			  percepcioneSICOL.retencion = {};
			  percepcioneSICOL.sujeto = {};
			  // Obtengo el Codigo de Comprobante
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idRetencionNetSuite = "";
			  var refComprobante = informacionResultado[i].refComprobante;
			  if (!isEmpty(refComprobante)) {
				let codigoComprobante = null;
				codigoComprobante = obtenerCodigoComprobante(refComprobante, "sic_perc", subsidiaria);
				//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10492. refComprobante: '+refComprobante+'. subsidiaria: '+subsidiaria+'. codigoComprobante: '+codigoComprobante+'. cuitEntity: '+cuitEntity);					
				if (!isEmpty(codigoComprobante)) {
				  percepcioneSICOL.retencion.codigoComprobante = padding_left(codigoComprobante, "0", 1);
				  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10495. percepcioneSICOL.retencion.codigoComprobante: '+percepcioneSICOL.retencion.codigoComprobante);
				  // Obtengo la Fecha de Emision del Comprobante
				  let fecha = "";
				  fecha = informacionResultado[i].fechaComprobante;
				  if (!isEmpty(fecha)) {
					let fechaDate = "";
					// Formateo la Fecha
					fechaDate = format.parse({
					  value: fecha,
					  type: format.Type.DATE
					});
					if (!isEmpty(fechaDate)) {
					  // Obtengo las Componentes de la Fecha
					  const dia = fechaDate.getDate();
					  const mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
					  const anio = fechaDate.getFullYear();
					  const fechaComprobante = anio + padding_left(mes, "0", 2) + padding_left(dia, "0", 2);
					  percepcioneSICOL.retencion.fechaComprobante = fechaComprobante;
					  // Obtengo el Numero del Comprobante
					  const numerador = informacionResultado[i].codigoComprobante;
					  if (!isEmpty(numerador)) {
						const numeroComprobante = numerador.toString().substr(-8);
						// Tomo el Punto de Venta
						const puntoVenta = informacionResultado[i].puntoVentaComprobante;
						// Tomo la Latra del Comprobante
						const letra = informacionResultado[i].letraComprobante;
						//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10522. codigoComprobante: '+numerador+'. puntoVentaComprobante: '+puntoVenta+'. letraComprobante: '+letra);
						if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
						  const numeroAux = padding_left(puntoVenta.toString(), "0", 8) + padding_left(numeroComprobante.toString(), "0", 8);
						  let faltaLetra = false;
						  percepcioneSICOL.retencion.puntoVenta = puntoVenta;
						  if (isEmpty(letra)) {
							faltaLetra = true;
						  } else {
							percepcioneSICOL.retencion.letra = letra;
						  }
						  if (faltaLetra == false) {
							percepcioneSICOL.retencion.numeroComprobante = padding_left(numeroComprobante.toString(), "0", 8);
							// Obtengo Tipo de Cambio de la Retencion
							const tipoCambio = informacionResultado[i].tipoCambio;
							if (!isEmpty(tipoCambio)) {
							  // Obtengo el Importe del Comprobante
							  let importeComprobante = "";
							  importeComprobante = informacionResultado[i].importeComprobante;
							  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10545. importeComprobante: '+importeComprobante);
							  percepcioneSICOL.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
							  if (!isEmpty(importeComprobante)) {
								const infoImpuesto = null;
								// Obtengo la Base de Calculo
								const baseCalculo = informacionResultado[i].baseCalculo;
								if (!isEmpty(baseCalculo)) {
								  percepcioneSICOL.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), "0", 16);
								  //nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10557. baseCalculo: '+baseCalculo+'. percepcioneSICOL.retencion.baseCalculo: '+percepcioneSICOL.retencion.baseCalculo);
								  // Obtengo Fecha de Retencion
								  let fechaRetencion = "";
								  fechaRetencion = informacionResultado[i].fechaOperacion;
								  const cuitEntity = informacionResultado[i].cuitEntity;
								  if (!isEmpty(cuitEntity)) {
									percepcioneSICOL.retencion.cuitEntity = cuitEntity;
								  }
								  else {
									//percepcioneSICOL.retencion.cuitEntity = padding_left(cuitEntity,'0',11);
									errorGlobal = true;
									descripcionError = "Error Obteniendo Cuit del agente de Percepción";
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo Base De Calculo";
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Importe del Comprobante";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo Tipo de Cambio";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Letra del Comprobante";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Comprobante";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Formateando la Fecha del Comprobante";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha del Comprobante";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Codigo de Comprobante";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Comprobante";
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (percepcioneSICOL.sujeto != null) {
				  if (percepcioneSICOL.retencion != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXT)) {
					  contenidoTXT += "\r\n";
					}
					const error = false;
					const descripcionMensaje = "TXT Percepciones Generado Correctamente";
					//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10632. CuitAgentPercep:'+percepcioneSICOL.retencion.cuitEntity+'. NumeroComprobante: '+percepcioneSICOL.retencion.numeroComprobante+'. FechaComprobante: '+percepcioneSICOL.retencion.fechaComprobante+'. NumSucursal: '+percepcioneSICOL.retencion.puntoVenta+'. MontoBasePercepcion: '+percepcioneSICOL.retencion.baseCalculo+'. ImportePercepcion: '+percepcioneSICOL.retencion.importeComprobante+'. TipoComprobante: '+percepcioneSICOL.retencion.codigoComprobante+'. LetraComprobante: '+percepcioneSICOL.retencion.letra);
					contenidoTXT += percepcioneSICOL.retencion.cuitEntity + percepcioneSICOL.retencion.numeroComprobante + percepcioneSICOL.retencion.fechaComprobante +
					  percepcioneSICOL.retencion.puntoVenta + percepcioneSICOL.retencion.baseCalculo +
					  percepcioneSICOL.retencion.importeComprobante + percepcioneSICOL.retencion.codigoComprobante + percepcioneSICOL.retencion.letra;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo informacion de la Percepcion";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT eSicol (Percepciones) - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT eSicol (Percepciones) - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Generando TXT eSicol (Percepciones)');
				log.error({
				  title: "GenerarTXT eSicol (Percepciones)",
				  details: "Error Generando TXT eSicol (Percepciones)"
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT eSicol (Percepciones) - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenRetenciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generacion de TXT eSicol (Percepciones) Correcta - No se Encontraron Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Obteniendo Percepciones eSicol (Percepciones)');
				  log.error({
					title: "GenerarTXT eSicol (Percepciones)",
					details: "Error Obteniendo Percepciones eSicol (Percepciones)"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT eSicol (Percepciones) - Error : Error Obteniendo Percepciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Generando TXT eSicol (Percepciones) - Error : ' + e.message);
		  log.error({
			title: "GenerarTXT eSicol (Percepciones)",
			details: "Error Generando TXT eSicol (Percepciones) - Error : " + e.message + ")"
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT eSicol (Percepciones) - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  percepcioneSICOL = grabarError(true, "Error Generando TXT eSicol (Percepciones)", existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  percepcioneSICOL = grabarError(false, "Generacion de TXT eSicol (Percepciones) Correcta", existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT eSicol (Percepciones) Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones eSICOL', 'Finalizacion - Generacion TXT eSicol (Percepciones)');
		log.debug({
		  title: "Proceso Generacion TXT Percepciones eSICOL",
		  details: "Finalizacion - Generacion TXT eSicol (Percepciones)"
		});
		percepcioneSICOL.contenidoTXT = contenidoTXT;
		return percepcioneSICOL;
	  }
	  //[Lista]
	  function generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion) {
		//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'Inicio - Generación TXT TUCUMÁN - Percepciones/Retenciones');
		log.debug({
		  title: "generarTXT_TUCUMAN",
		  details: "Inicio - Generación TXT TUCUMÁN - Percepciones/Retenciones"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de TUCUMÁN";
		let descripcionError = "";
		let contenidoTXT = "";
		let contenidoTXTSujeto = "";
		let contenidoTXTNotasCredito = "";
		const procesoEncolado = false;
		try {
		  var info_ret_perc_tucuman = {};
		  info_ret_perc_tucuman.informacion = {};
		  info_ret_perc_tucuman.informacionSujetos = {};
		  info_ret_perc_tucuman.informacionNotasCredito = {};
		  info_ret_perc_tucuman.contenidoTXTSujeto = {};
		  info_ret_perc_tucuman.contenidoTXTNotasCredito = {};
		  info_ret_perc_tucuman.existenRetenciones = false;
		  info_ret_perc_tucuman.error = false;
		  info_ret_perc_tucuman.descripcionError = "";
		  info_ret_perc_tucuman.procesoEncolado = false;
		  info_ret_perc_tucuman.idLog = idRegistroLOG;
		  info_ret_perc_tucuman.contenidoTXT = "";
		  if (esRetencion) {
			//-------- INICIO --- Obtener la Informacion de RETENCIONES usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: " + JSON.stringify(periodo) + " - subsidiaria: " + subsidiaria
			});
			var iCont = 0;
			const filtroTXTRetencionesTucuman = [];
			if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			  //filtroTXTRetencionesTucuman[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			  filtroTXTRetencionesTucuman[iCont++] = search.createFilter({
				name: "custrecord_l54_ret_fecha",
				operator: search.Operator.WITHIN,
				values: [periodo.fDesde, periodo.fHasta]
			  });
			}
			if (!isEmpty(subsidiaria))
			  //filtroTXTRetencionesTucuman[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			  filtroTXTRetencionesTucuman[iCont++] = search.createFilter({
				name: "custrecord_l54_ret_subsidiaria",
				operator: search.Operator.IS,
				values: subsidiaria
			  });
			//var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_tucuman');
			var search1 = search.load({
			  id: "customsearch_l54_ret_tucuman",
			  type: "customrecord_l54_retencion"
			});
			//search.addFilters(filtroTXTRetencionesTucuman);
			search1.filters.push(...filtroTXTRetencionesTucuman);
			var searchResults = search1.run();
			var resultadoTXTRetencionesTUCUMAN = [];
			// resultIndex points to record starting current "resultado" in the entire results array
			var resultIndex = 0;
			var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			var resultado; // temporary variable used to store the result set
			do {
			  // fetch one result set
			  //resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			  resultado = searchResults.getRange({
				start: resultIndex,
				end: resultIndex + resultStep
			  });
			  if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
				  resultadoTXTRetencionesTUCUMAN = resultado; //Primera ve inicializa
				else
				  resultadoTXTRetencionesTUCUMAN = resultadoTXTRetencionesTUCUMAN.concat(resultado);
				// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  }
			  // increase pointer
			  resultIndex = resultIndex + resultStep;
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			  // once no records are returned we already got all of them
			} while (!isEmpty(resultado) && resultado.length > 0);
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Retenciones usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Obtener la Informacion de Retenciones usando un SavedSearch"
			});
			//-------- FIN --- Obtener la Informacion de RETENCIONES usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTRetencionesTUCUMAN: ' + JSON.stringify(resultadoTXTRetencionesTUCUMAN));
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "resultadoTXTRetencionesTUCUMAN: " + JSON.stringify(resultadoTXTRetencionesTUCUMAN)
			});
		  }
		  if (esPercepcion) {
			//-------- INICIO --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: " + JSON.stringify(periodo) + " - subsidiaria: " + subsidiaria
			});
			iCont = 0;
			const filtroTXTPercepcionesTUCUMAN = [];
			if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			  //filtroTXTPercepcionesTUCUMAN[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			  filtroTXTPercepcionesTUCUMAN[iCont++] = search.createFilter({
				name: "trandate",
				operator: search.Operator.WITHIN,
				values: [periodo.fDesde, periodo.fHasta]
			  });
			}
			if (!isEmpty(subsidiaria))
			  //filtroTXTPercepcionesTUCUMAN[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
			  filtroTXTPercepcionesTUCUMAN[iCont++] = search.createFilter({
				name: "subsidiary",
				operator: search.Operator.IS,
				values: subsidiaria
			  });
			//var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_tucuman');
			search1 = search.load({
			  id: "customsearch_l54_per_tucuman",
			  type: "transaction"
			});
			//search.addFilters(filtroTXTPercepcionesTUCUMAN);
			search1.filters.push(...filtroTXTPercepcionesTUCUMAN);
			searchResults = search1.run();
			var resultadoTXTPercepcionesTUCUMAN = [];
			// resultIndex points to record starting current "resultado" in the entire results array
			resultIndex = 0;
			resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			resultado; // temporary variable used to store the result set
			do {
			  // fetch one result set
			  //resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			  resultado = searchResults.getRange({
				start: resultIndex,
				end: resultIndex + resultStep
			  });
			  if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
				  resultadoTXTPercepcionesTUCUMAN = resultado; //Primera ve inicializa
				else
				  resultadoTXTPercepcionesTUCUMAN = resultadoTXTPercepcionesTUCUMAN.concat(resultado);
				// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			  }
			  // increase pointer
			  resultIndex = resultIndex + resultStep;
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			  // once no records are returned we already got all of them
			} while (!isEmpty(resultado) && resultado.length > 0);
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Percepciones usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Obtener la Informacion de Percepciones usando un SavedSearch"
			});
			//-------- FIN --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTPercepcionesTUCUMAN: ' + JSON.stringify(resultadoTXTPercepcionesTUCUMAN));
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "resultadoTXTPercepcionesTUCUMAN: " + JSON.stringify(resultadoTXTPercepcionesTUCUMAN)
			});
		  }
		  //-------- INICIO --- UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  const informacionResultado = [];
		  let indiceArray = 0;
		  const arrayProveedores = [];
		  const arrayClientes = [];
		  const arrayNotasCredito = [];
		  if (esRetencion) {
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Recorrer Retenciones');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Recorrer Retenciones"
			});
			for (let i = 0; resultadoTXTRetencionesTUCUMAN != null && i < resultadoTXTRetencionesTUCUMAN.length; i++) {
			  info_ret_perc_tucuman.existenRetenciones = true;
			  var result = resultadoTXTRetencionesTUCUMAN[i];
			  var columns = result.columns;
			  informacionResultado[indiceArray] = {};
			  // informacionResultado[indiceArray].tipoOperacion = 1;
			  informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[0] });
			  informacionResultado[indiceArray].fechaComprobante = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[1] });
			  informacionResultado[indiceArray].tipoDocumentoAfip = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[2] });
			  informacionResultado[indiceArray].numeroDocumentoCliente = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[3] });
			  informacionResultado[indiceArray].tipoTransaccionAfip = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[4] });
			  informacionResultado[indiceArray].letraDocumento = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[5] });
			  informacionResultado[indiceArray].puntoVenta = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[6] });
			  informacionResultado[indiceArray].numeroComprobante = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[7] });
			  informacionResultado[indiceArray].baseCalculo = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[9] });
			  if (isEmpty(informacionResultado[indiceArray].baseCalculo))
				informacionResultado[indiceArray].baseCalculo = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[8] });
			  informacionResultado[indiceArray].alicuota = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[10] });
			  informacionResultado[indiceArray].importeRetPerc = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[11] });
			  informacionResultado[indiceArray].tipoRegistro = "retencion";
			  informacionResultado[indiceArray].referenciaEntidad = resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[13] });
			  arrayProveedores.push(resultadoTXTRetencionesTUCUMAN[i].getValue({ name: columns[13] }));
			  /* informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue(columns[33]), 10);
			  var fechaOperacionAux = resultadoTXTRetencionesTUCUMAN[i].getValue('custrecord_l54_ret_fecha');
			  var fechaOperacionDate = '';
			  if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz'); */
			  indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Recorrer Retenciones');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Recorrer Retenciones"
			});
		  }
		  if (esPercepcion) {
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Recorrer Percepciones');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Recorrer Percepciones"
			});
			for (let i = 0; resultadoTXTPercepcionesTUCUMAN != null && i < resultadoTXTPercepcionesTUCUMAN.length; i++) {
			  info_ret_perc_tucuman.existenRetenciones = true;
			  result = resultadoTXTPercepcionesTUCUMAN[i];
			  //var columns = result.getAllColumns();
			  columns = result.columns;
			  informacionResultado[indiceArray] = {};
			  informacionResultado[indiceArray].idInterno = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[0] });
			  informacionResultado[indiceArray].fechaComprobante = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[1] });
			  informacionResultado[indiceArray].tipoDocumentoAfip = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[2] });
			  informacionResultado[indiceArray].numeroDocumentoCliente = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[3] });
			  informacionResultado[indiceArray].tipoTransaccionAfip = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[4] });
			  informacionResultado[indiceArray].letraDocumento = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[5] });
			  informacionResultado[indiceArray].puntoVenta = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[6] });
			  informacionResultado[indiceArray].numeroComprobante = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[7] });
			  informacionResultado[indiceArray].baseCalculo = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[9] });
			  if (isEmpty(informacionResultado[indiceArray].baseCalculo))
				informacionResultado[indiceArray].baseCalculo = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[8] });
			  informacionResultado[indiceArray].alicuota = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[10] });
			  informacionResultado[indiceArray].importeRetPerc = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[12] });
			  informacionResultado[indiceArray].tipoRegistro = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[14] });
			  if (!isEmpty(informacionResultado[indiceArray].tipoRegistro) && informacionResultado[indiceArray].tipoRegistro == "creditmemo")
				arrayNotasCredito.push(informacionResultado[indiceArray].idInterno);
			  informacionResultado[indiceArray].tipoRegistro = "percepcion";
			  informacionResultado[indiceArray].referenciaEntidad = resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[15] });
			  arrayClientes.push(resultadoTXTPercepcionesTUCUMAN[i].getValue({ name: columns[15] }));
			  indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Recorrer Percepciones');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Recorrer Percepciones"
			});
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Ordenar Retenciones y Percepciones');
		  log.debug({
			title: "generarTXT_TUCUMAN",
			details: "INICIO - Ordenar Retenciones y Percepciones"
		  });
		  // Ordenar Array
		  const date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
			  return 1;
			if (a.fechaOperacion < b.fechaOperacion)
			  return -1;
			return 0;
		  };
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
		  //-------- FIN --- UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Ordenar Retenciones y Percepciones - informacionResultado: ' + JSON.stringify(informacionResultado));
		  log.debug({
			title: "generarTXT_TUCUMAN",
			details: "FIN - Ordenar Retenciones y Percepciones - informacionResultado: " + JSON.stringify(informacionResultado)
		  });
		  if (esPercepcion) {
			//-------- INICIO --- Obtener la Informacion de Clientes usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Clientes usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Obtener la Informacion de Clientes usando un SavedSearch"
			});
			var resultadoTXTClientesTUCUMAN = [];
			if (!isEmpty(arrayClientes) && arrayClientes.length > 0) {
			  iCont = 0;
			  const filtroTXTClientesTUCUMAN = [];
			  //filtroTXTClientesTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayClientes);
			  filtroTXTClientesTUCUMAN[iCont++] = search.createFilter({
				name: "internalid",
				operator: search.Operator.IS,
				values: arrayClientes
			  });
			  //var search = new nlapiLoadSearch('customer', 'customsearch_l54_txt_tucuman_dat_cliente');
			  search1 = search.load({
				id: "customsearch_l54_txt_tucuman_dat_cliente",
				type: "customer"
			  });
			  search1.filters.push(...filtroTXTClientesTUCUMAN);
			  searchResults = search1.run();
			  // resultIndex points to record starting current "resultado" in the entire results array
			  resultIndex = 0;
			  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			  resultado; // temporary variable used to store the result set
			  do {
				// fetch one result set
				//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
				resultado = searchResults.getRange({
				  start: resultIndex,
				  end: resultIndex + resultStep
				});
				if (!isEmpty(resultado) && resultado.length > 0) {
				  if (resultIndex == 0)
					resultadoTXTClientesTUCUMAN = resultado; //Primera ve inicializa
				  else
					resultadoTXTClientesTUCUMAN = resultadoTXTClientesTUCUMAN.concat(resultado);
				  // nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
				}
				// increase pointer
				resultIndex = resultIndex + resultStep;
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
				// once no records are returned we already got all of them
			  } while (!isEmpty(resultado) && resultado.length > 0);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Clientes usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Obtener la Informacion de Clientes usando un SavedSearch"
			});
			//-------- FIN --- Obtener la Informacion de Clientes usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTClientesTUCUMAN: ' + JSON.stringify(resultadoTXTClientesTUCUMAN));
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "resultadoTXTClientesTUCUMAN: " + JSON.stringify(resultadoTXTClientesTUCUMAN)
			});
		  }
		  if (esRetencion) {
			//-------- INICIO --- Obtener la Informacion de Proveedores usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Proveedores usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Obtener la Informacion de Proveedores usando un SavedSearch"
			});
			var resultadoTXTProveedoresTUCUMAN = [];
			if (!isEmpty(arrayProveedores) && arrayProveedores.length > 0) {
			  iCont = 0;
			  const filtroTXTProveedoresTUCUMAN = [];
			  //filtroTXTProveedoresTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayProveedores);
			  filtroTXTProveedoresTUCUMAN[iCont++] = search.createFilter({
				name: "internalid",
				operator: search.Operator.IS,
				values: arrayProveedores
			  });
			  //var search = new nlapiLoadSearch('vendor', 'customsearch_l54_txt_tucuman_dat_proveed');
			  search1 = search.load({
				id: "customsearch_l54_txt_tucuman_dat_proveed",
				type: "vendor"
			  });
			  search1.filters.push(...filtroTXTProveedoresTUCUMAN);
			  searchResults = search1.run();
			  // resultIndex points to record starting current "resultado" in the entire results array
			  resultIndex = 0;
			  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			  resultado; // temporary variable used to store the result set
			  do {
				// fetch one result set
				resultado = searchResults.getRange({
				  start: resultIndex,
				  end: resultIndex + resultStep
				});
				if (!isEmpty(resultado) && resultado.length > 0) {
				  if (resultIndex == 0)
					resultadoTXTProveedoresTUCUMAN = resultado; //Primera ve inicializa
				  else
					resultadoTXTProveedoresTUCUMAN = resultadoTXTProveedoresTUCUMAN.concat(resultado);
				  // nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
				}
				// increase pointer
				resultIndex = resultIndex + resultStep;
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
				// once no records are returned we already got all of them
			  } while (!isEmpty(resultado) && resultado.length > 0);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Proveedores usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Obtener la Informacion de Proveedores usando un SavedSearch"
			});
			//-------- FIN --- Obtener la Informacion de Proveedores usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTProveedoresTUCUMAN: ' + JSON.stringify(resultadoTXTProveedoresTUCUMAN));
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "resultadoTXTProveedoresTUCUMAN: " + JSON.stringify(resultadoTXTProveedoresTUCUMAN)
			});
		  }
		  const infoSujetosInicial = [];
		  indiceArray = 0;
		  if (esPercepcion) {
			//-------- INICIO --- Recorrer la Informacion de Clientes para almacenarla en un array de objetos.
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos."
			});
			for (let i = 0; i < resultadoTXTClientesTUCUMAN.length; i++) {
			  columns = resultadoTXTClientesTUCUMAN[i].columns;
			  infoSujetosInicial[indiceArray] = {};
			  infoSujetosInicial[indiceArray].idInterno = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[0] });
			  infoSujetosInicial[indiceArray].tipoDocumentoAfip = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[1] });
			  infoSujetosInicial[indiceArray].numeroDocumento = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[2] });
			  infoSujetosInicial[indiceArray].nombreLegal = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[3] });
			  infoSujetosInicial[indiceArray].domicilioFiscal = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[4] });
			  infoSujetosInicial[indiceArray].numeroCalle = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[5] });
			  infoSujetosInicial[indiceArray].localidad = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[6] });
			  infoSujetosInicial[indiceArray].provincia = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[7] });
			  infoSujetosInicial[indiceArray].noUsado = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[8] });
			  infoSujetosInicial[indiceArray].codigoPostal = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[9] });
			  infoSujetosInicial[indiceArray].dirFactDefault = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[12] });
			  infoSujetosInicial[indiceArray].idAddress = resultadoTXTClientesTUCUMAN[i].getValue({ name: columns[13] });
			  infoSujetosInicial[indiceArray].tipoEntidad = "Cliente";
			  indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//-------- FIN --- Recorrer la Informacion de Clientes para almacenarla en un array de objetos.
		  }
		  if (esRetencion) {
			//-------- INICIO --- Recorrer la Informacion de Proveedores para almacenarla en un array de objetos.
			for (let i = 0; i < resultadoTXTProveedoresTUCUMAN.length; i++) {
			  columns = resultadoTXTProveedoresTUCUMAN[i].columns;
			  infoSujetosInicial[indiceArray] = {};
			  infoSujetosInicial[indiceArray].idInterno = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[0] });
			  infoSujetosInicial[indiceArray].tipoDocumentoAfip = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[1] });
			  infoSujetosInicial[indiceArray].numeroDocumento = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[2] });
			  infoSujetosInicial[indiceArray].nombreLegal = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[3] });
			  infoSujetosInicial[indiceArray].domicilioFiscal = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[4] });
			  infoSujetosInicial[indiceArray].numeroCalle = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[5] });
			  infoSujetosInicial[indiceArray].localidad = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[6] });
			  infoSujetosInicial[indiceArray].provincia = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[7] });
			  infoSujetosInicial[indiceArray].noUsado = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[8] });
			  infoSujetosInicial[indiceArray].codigoPostal = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[9] });
			  infoSujetosInicial[indiceArray].dirFactDefault = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[12] });
			  infoSujetosInicial[indiceArray].idAddress = resultadoTXTProveedoresTUCUMAN[i].getValue({ name: columns[13] });
			  infoSujetosInicial[indiceArray].tipoEntidad = "Proveedor";
			  indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos."
			});
			//-------- FIN --- Recorrer la Informacion de Proveedores para almacenarla en un array de objetos.
		  }
		  // INICIO - Manejo de direcciones de clientes/proveedores para dejar predeterminada para facturación o una sola si no existe dirección de facturación preferida
		  const informacionSujetos = [];
		  for (let i = 0; i < infoSujetosInicial.length; i++) {
			// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'infoSujetosInicial[i]: ' + JSON.stringify(infoSujetosInicial[i]));
			let direccionDuplicada = false;
			for (var j = 0; j < informacionSujetos.length; j++) {
			  // nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'informacionSujetos[j]: ' + JSON.stringify(informacionSujetos[j]));
			  if (informacionSujetos[j].idInterno == infoSujetosInicial[i].idInterno) {
				direccionDuplicada = true;
				if (((informacionSujetos[j].dirFactDefault == "F" || informacionSujetos[j].dirFactDefault === false) && (infoSujetosInicial[i].dirFactDefault == "T" || infoSujetosInicial[i].dirFactDefault === true))
				  || ((informacionSujetos[j].dirFactDefault == "F" || informacionSujetos[j].dirFactDefault === false) && (informacionSujetos[j].idAddress > infoSujetosInicial[i].idAddress))) {
				  // nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'ingreso a setear información de dirección, datos de nueva dirección: ' + JSON.stringify(infoSujetosInicial[i]));
				  informacionSujetos[j] = infoSujetosInicial[i];
				  j = informacionSujetos.length + 1;
				  break;
				}
			  }
			}
			if ((j == informacionSujetos.length) && !direccionDuplicada) {
			  informacionSujetos.push(infoSujetosInicial[i]);
			}
			// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'informacionSujetos: ' + JSON.stringify(informacionSujetos));
		  }
		  // FIN - Manejo de direcciones de clientes/proveedores para dejar predeterminada para facturación o una sola si no existe dirección de facturación preferida
		  if (esPercepcion) {
			//-------- INICIO --- Obtener la Informacion de Notas de Créditos usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch"
			});
			let resultadoTXTNotasCreditoTUCUMAN = [];
			if (!isEmpty(arrayNotasCredito) && arrayNotasCredito.length > 0) {
			  iCont = 0;
			  const filtroTXTNotasCreditoTUCUMAN = [];
			  //filtroTXTNotasCreditoTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayNotasCredito);
			  filtroTXTNotasCreditoTUCUMAN[iCont++] = search.createFilter({
				name: "internalid",
				operator: search.Operator.IS,
				values: arrayNotasCredito
			  });
			  //var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_tucuman_dat_nc');
			  search1 = search.load({
				id: "customsearch_l54_txt_tucuman_dat_nc",
				type: "transaction"
			  });
			  search1.filters.push(...filtroTXTNotasCreditoTUCUMAN);
			  searchResults = search1.run();
			  // resultIndex points to record starting current "resultado" in the entire results array
			  resultIndex = 0;
			  resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			  resultado; // temporary variable used to store the result set
			  do {
				// fetch one result set
				//resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
				resultado = searchResults.getRange({
				  start: resultIndex,
				  end: resultIndex + resultStep
				});
				if (!isEmpty(resultado) && resultado.length > 0) {
				  if (resultIndex == 0)
					resultadoTXTNotasCreditoTUCUMAN = resultado; //Primera ve inicializa
				  else
					resultadoTXTNotasCreditoTUCUMAN = resultadoTXTNotasCreditoTUCUMAN.concat(resultado);
				}
				// increase pointer
				resultIndex = resultIndex + resultStep;
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
				// once no records are returned we already got all of them
			  } while (!isEmpty(resultado) && resultado.length > 0);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch"
			});
			//-------- FIN --- Obtener la Informacion de Notas de Créditos usando un SavedSearch
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos."
			});
			var informacionNotasCredito = [];
			indiceArray = 0;
			//-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
			for (let i = 0; i < resultadoTXTNotasCreditoTUCUMAN.length; i++) {
			  columns = resultadoTXTNotasCreditoTUCUMAN[i].columns;
			  informacionNotasCredito[indiceArray] = {};
			  informacionNotasCredito[indiceArray].idInterno = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[0] });
			  informacionNotasCredito[indiceArray].puntoVenta = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[1] });
			  informacionNotasCredito[indiceArray].numeroComprobante = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[2] });
			  informacionNotasCredito[indiceArray].puntoVentaCompAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[3] });
			  informacionNotasCredito[indiceArray].numeroComprobanteAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[4] });
			  informacionNotasCredito[indiceArray].tipoTransaccionAfipComprobanteAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue({ name: columns[5] });
			  indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos."
			});
		  }
		  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT. Cantidad de percepciones/retenciones: ' + informacionResultado.length);
		  log.debug({
			title: "generarTXT_TUCUMAN",
			details: "INICIO --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT. Cantidad de percepciones/retenciones: " + informacionResultado.length
		  });
		  if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las transacciones para armar los TXT.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO --- Recorrer la Informacion de las transacciones para armar los TXT."
			});
			for (let i = 0; informacionResultado != null && i < informacionResultado.length; i++) {
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idRetencionNetSuite = "";
			  var refComprobante = "";
			  info_ret_perc_tucuman.informacion = {};
			  const tipoTransaccion = informacionResultado[i].tipoRegistro;
			  var tipoEntidad = "";
			  if (tipoTransaccion == "retencion") {
				idRetencionNetSuite = informacionResultado[i].idInterno;
				tipoEntidad = "Proveedor";
				//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'idRetencionNetSuite o retención ID: ' + idRetencionNetSuite);
				log.debug({
				  title: "generarTXT_TUCUMAN",
				  details: "idRetencionNetSuite o retención ID: " + idRetencionNetSuite
				});
			  } else {
				refComprobante = informacionResultado[i].idInterno;
				tipoEntidad = "Cliente";
				//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'refComprobante o transacción ID: ' + refComprobante);
				log.debug({
				  title: "generarTXT_TUCUMAN",
				  details: "refComprobante o transacción ID: " + refComprobante
				});
			  }
			  if (!isEmpty(informacionResultado[i].fechaComprobante)) {
				info_ret_perc_tucuman.informacion.fechaComprobante = informacionResultado[i].fechaComprobante; // Fecha de la percepción/retención
				if (!isEmpty(informacionResultado[i].tipoDocumentoAfip)) {
				  info_ret_perc_tucuman.informacion.tipoDocumentoAfip = informacionResultado[i].tipoDocumentoAfip; // Tipo Documento AFIP
				  if (!isEmpty(informacionResultado[i].numeroDocumentoCliente)) {
					info_ret_perc_tucuman.informacion.numeroDocumentoCliente = informacionResultado[i].numeroDocumentoCliente; // Número documento cliente/proveedor
					if (!isEmpty(informacionResultado[i].tipoTransaccionAfip)) {
					  info_ret_perc_tucuman.informacion.tipoTransaccionAfip = informacionResultado[i].tipoTransaccionAfip; // Tipo Transacción AFIP
					  if (!isEmpty(informacionResultado[i].letraDocumento)) {
						info_ret_perc_tucuman.informacion.letraDocumento = informacionResultado[i].letraDocumento; // Letra documento
						if (!isEmpty(informacionResultado[i].puntoVenta)) {
						  info_ret_perc_tucuman.informacion.puntoVenta = informacionResultado[i].puntoVenta;
						  if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							info_ret_perc_tucuman.informacion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].baseCalculo)) {
							  info_ret_perc_tucuman.informacion.baseCalculo = informacionResultado[i].baseCalculo;
							  if (!isEmpty(informacionResultado[i].alicuota)) {
								info_ret_perc_tucuman.informacion.alicuota = informacionResultado[i].alicuota;
								if (!isEmpty(informacionResultado[i].importeRetPerc)) {
								  info_ret_perc_tucuman.informacion.importeRetPerc = informacionResultado[i].importeRetPerc;
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el Importe de la " + tipoTransaccion;
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Alícuota de la " + tipoTransaccion;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Base de Cálculo de la " + tipoTransaccion;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número de Comprobante de la " + tipoTransaccion;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Punto de Venta de la " + tipoTransaccion;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo la Letra de la " + tipoTransaccion;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Tipo de Transacción AFIP de la " + tipoTransaccion;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Número de Documento del " + tipoEntidad + " asociado a la " + tipoTransaccion;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Tipo de Documento del " + tipoEntidad + " asociado a la " + tipoTransaccion;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la Fecha de la " + tipoTransaccion;
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (info_ret_perc_tucuman.informacion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  //var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXT += info_ret_perc_tucuman.informacion.fechaComprobante + info_ret_perc_tucuman.informacion.tipoDocumentoAfip + info_ret_perc_tucuman.informacion.numeroDocumentoCliente + info_ret_perc_tucuman.informacion.tipoTransaccionAfip +
					info_ret_perc_tucuman.informacion.letraDocumento + info_ret_perc_tucuman.informacion.puntoVenta + info_ret_perc_tucuman.informacion.numeroComprobante + info_ret_perc_tucuman.informacion.baseCalculo +
					info_ret_perc_tucuman.informacion.alicuota + info_ret_perc_tucuman.informacion.importeRetPerc;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la " + tipoTransaccion;
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT TUCUMÁN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT TUCUMÁN: ' + descripcionError);
				log.error({
				  title: "generarTXT_TUCUMAN",
				  details: "Error Generando TXT TUCUMÁN: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT TUCUMÁN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las transacciones para armar los TXT.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN --- Recorrer la Informacion de las transacciones para armar los TXT."
			});
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de los sujetos para armar los TXT. Cantidad de sujetos: ' + informacionSujetos.length);
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "INICIO --- Recorrer la Informacion de los sujetos para armar los TXT. Cantidad de sujetos: " + informacionSujetos.length
			});
			for (let i = 0; informacionSujetos != null && i < informacionSujetos.length; i++) {
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = "";
			  refComprobante = "";
			  const refEntidad = informacionSujetos[i].idInterno;
			  info_ret_perc_tucuman.informacionSujetos = {};
			  tipoEntidad = informacionSujetos[i].tipoEntidad;
			  if (!isEmpty(informacionSujetos[i].tipoDocumentoAfip)) {
				info_ret_perc_tucuman.informacionSujetos.tipoDocumentoAfip = informacionSujetos[i].tipoDocumentoAfip;
				if (!isEmpty(informacionSujetos[i].numeroDocumento)) {
				  info_ret_perc_tucuman.informacionSujetos.numeroDocumento = informacionSujetos[i].numeroDocumento;
				  if (!isEmpty(informacionSujetos[i].nombreLegal)) {
					info_ret_perc_tucuman.informacionSujetos.nombreLegal = padding_right(removeDiacritics(informacionSujetos[i].nombreLegal), " ", 40);
					if (!isEmpty(informacionSujetos[i].domicilioFiscal)) {
					  info_ret_perc_tucuman.informacionSujetos.domicilioFiscal = padding_right(removeDiacritics(informacionSujetos[i].domicilioFiscal), " ", 40);
					  if (!isEmpty(informacionSujetos[i].numeroCalle)) {
						info_ret_perc_tucuman.informacionSujetos.numeroCalle = informacionSujetos[i].numeroCalle;
						if (!isEmpty(informacionSujetos[i].localidad)) {
						  info_ret_perc_tucuman.informacionSujetos.localidad = padding_right(removeDiacritics(informacionSujetos[i].localidad), " ", 15);
						  if (!isEmpty(informacionSujetos[i].provincia)) {
							info_ret_perc_tucuman.informacionSujetos.provincia = padding_right(removeDiacritics(informacionSujetos[i].provincia), " ", 15);
							if (!isEmpty(informacionSujetos[i].noUsado)) {
							  info_ret_perc_tucuman.informacionSujetos.noUsado = informacionSujetos[i].noUsado;
							  if (!isEmpty(informacionSujetos[i].codigoPostal)) {
								info_ret_perc_tucuman.informacionSujetos.codigoPostal = padding_right(removeDiacritics(informacionSujetos[i].codigoPostal), " ", 8);
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Código Postal del " + tipoEntidad + ", con id interno: " + refEntidad;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la información del campo No Usado del " + tipoEntidad + ", con id interno: " + refEntidad;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Provincia del " + tipoEntidad + ", con id interno: " + refEntidad;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Localidad del " + tipoEntidad + ", con id interno: " + refEntidad;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Nro de la Calle del " + tipoEntidad + ", con id interno: " + refEntidad;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Domicilio Fiscal del " + tipoEntidad + ", con id interno: " + refEntidad;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Nombre del " + tipoEntidad + ", con id interno: " + refEntidad;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Número Documento del " + tipoEntidad + ", con id interno: " + refEntidad;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo el Tipo Documento AFIP del " + tipoEntidad + ", con id interno: " + refEntidad;
			  }
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (info_ret_perc_tucuman.informacionSujetos != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXTSujeto)) {
					contenidoTXTSujeto += "\r\n";
				  }
				  //var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
				  contenidoTXTSujeto += info_ret_perc_tucuman.informacionSujetos.tipoDocumentoAfip + info_ret_perc_tucuman.informacionSujetos.numeroDocumento + info_ret_perc_tucuman.informacionSujetos.nombreLegal +
					info_ret_perc_tucuman.informacionSujetos.domicilioFiscal + info_ret_perc_tucuman.informacionSujetos.numeroCalle + info_ret_perc_tucuman.informacionSujetos.localidad +
					info_ret_perc_tucuman.informacionSujetos.provincia + info_ret_perc_tucuman.informacionSujetos.noUsado + info_ret_perc_tucuman.informacionSujetos.codigoPostal;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de los clientes/proveedores";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT de Clientes/Proveedores de TUCUMAN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Percepciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT de Clientes/Proveedores de TUCUMAN: ' + descripcionError);
				log.debug({
				  title: "generarTXT_TUCUMAN",
				  details: "Error Generando TXT de Clientes/Proveedores de TUCUMAN: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT de Clientes/Proveedores de TUCUMAN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de los sujetos para armar los TXT.');
			log.debug({
			  title: "generarTXT_TUCUMAN",
			  details: "FIN --- Recorrer la Informacion de los sujetos para armar los TXT."
			});
			if (esPercepcion) {
			  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las Notas de Crédito para armar los TXT. Cantidad de NC: ' + informacionNotasCredito.length);
			  log.debug({
				title: "generarTXT_TUCUMAN",
				details: "INICIO --- Recorrer la Informacion de las Notas de Crédito para armar los TXT. Cantidad de NC: " + informacionNotasCredito.length
			  });
			  for (let i = 0; informacionNotasCredito != null && i < informacionNotasCredito.length; i++) {
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = "";
				refComprobante = informacionNotasCredito[i].idInterno;
				info_ret_perc_tucuman.informacionNotasCredito = {};
				if (!isEmpty(informacionNotasCredito[i].puntoVenta)) {
				  info_ret_perc_tucuman.informacionNotasCredito.puntoVenta = informacionNotasCredito[i].puntoVenta;
				  if (!isEmpty(informacionNotasCredito[i].numeroComprobante)) {
					info_ret_perc_tucuman.informacionNotasCredito.numeroComprobante = informacionNotasCredito[i].numeroComprobante;
					if (!isEmpty(informacionNotasCredito[i].puntoVentaCompAsociado)) {
					  info_ret_perc_tucuman.informacionNotasCredito.puntoVentaCompAsociado = informacionNotasCredito[i].puntoVentaCompAsociado;
					  if (!isEmpty(informacionNotasCredito[i].numeroComprobanteAsociado)) {
						info_ret_perc_tucuman.informacionNotasCredito.numeroComprobanteAsociado = informacionNotasCredito[i].numeroComprobanteAsociado;
						if (!isEmpty(informacionNotasCredito[i].tipoTransaccionAfipComprobanteAsociado)) {
						  info_ret_perc_tucuman.informacionNotasCredito.tipoTransaccionAfipComprobanteAsociado = informacionNotasCredito[i].tipoTransaccionAfipComprobanteAsociado;
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Tipo de Transacción del Comprobante Asociado a la Nota de Crédito";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Comprobante del Comprobante Asociado a la Nota de Crédito";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Punto de Venta del Comprobante Asociado a la Nota de Crédito";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Número Comprobante de la Nota de Crédito";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Punto de Venta de la Nota de Crédito";
				}
				// Genero el Contenido
				if (errorGlobal == false) {
				  if (info_ret_perc_tucuman.informacionNotasCredito != null) {
					// Genero Contenido
					if (!isEmpty(contenidoTXTNotasCredito)) {
					  contenidoTXTNotasCredito += "\r\n";
					}
					contenidoTXTNotasCredito += info_ret_perc_tucuman.informacionNotasCredito.puntoVenta + info_ret_perc_tucuman.informacionNotasCredito.numeroComprobante + info_ret_perc_tucuman.informacionNotasCredito.puntoVentaCompAsociado +
					  info_ret_perc_tucuman.informacionNotasCredito.numeroComprobanteAsociado + info_ret_perc_tucuman.informacionNotasCredito.tipoTransaccionAfipComprobanteAsociado;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información del TXT de las Notas de Crédito";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT de Notas de Crédito de TUCUMAN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Percepciones
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT de Notas de Crédito de TUCUMAN: ' + descripcionError);
				  log.error({
					title: "generarTXT_TUCUMAN",
					details: "Error Generando TXT de Notas de Crédito de TUCUMAN: " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT de Notas de Crédito de TUCUMAN - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las Notas de Crédito para armar los TXT.');
			  log.debug({
				title: "generarTXT_TUCUMAN",
				details: "FIN --- Recorrer la Informacion de las Notas de Crédito para armar los TXT."
			  });
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT TUCUMÁN Correcta - No se Encontraron Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Obteniendo transacciones de Retenciones/Percepciones de TUCUMÁN');
				  log.error({
					title: "generarTXT_TUCUMAN",
					details: "Error Obteniendo transacciones de Retenciones/Percepciones de TUCUMÁN"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Obteniendo transacciones de Retenciones/Percepciones de TUCUMÁN - Error : Error Obteniendo Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		  if (!isEmpty(contenidoTXTSujeto))
			contenidoTXTSujeto += "\r\n";
		  if (!isEmpty(contenidoTXTNotasCredito) && esPercepcion)
			contenidoTXTNotasCredito += "\r\n";
		  //nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT.');
		  log.debug({
			title: "generarTXT_TUCUMAN",
			details: "FIN --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT."
		  });
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT TUCUMÁN - Error : ' + e.message);
		  log.error({
			title: "generarTXT_TUCUMAN",
			details: "Error Generando TXT TUCUMÁN - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT TUCUMÁN - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  info_ret_perc_tucuman = grabarError(true, "Error Generando TXT TUCUMÁN", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  info_ret_perc_tucuman = grabarError(false, "Generación de TXT TUCUMÁN Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT TUCUMÁN Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'Finalización - Generación TXT TUCUMÁN - contenidoTXT: ' + JSON.stringify(contenidoTXT) + ' - contenidoTXTSujeto: ' + JSON.stringify(contenidoTXTSujeto) + ' - contenidoTXTNotasCredito: ' + JSON.stringify(contenidoTXTNotasCredito));
		log.debug({
		  title: "generarTXT_TUCUMAN",
		  details: "Finalización - Generación TXT TUCUMÁN - contenidoTXT: " + JSON.stringify(contenidoTXT) + " - contenidoTXTSujeto: ' " + JSON.stringify(contenidoTXTSujeto) + " - contenidoTXTNotasCredito:  " + JSON.stringify(contenidoTXTNotasCredito)
		});
		info_ret_perc_tucuman.contenidoTXT = contenidoTXT;
		info_ret_perc_tucuman.contenidoTXTSujeto = contenidoTXTSujeto;
		info_ret_perc_tucuman.contenidoTXTNotasCredito = contenidoTXTNotasCredito;
		return info_ret_perc_tucuman;
	  }
	  //[Lista]
	  function generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion) {
		//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'Inicio - Generación TXT SAREPE - Percepciones/Retenciones');
		log.debug({
		  title: "generarTXTSAREPE",
		  details: "Inicio - Generación TXT SAREPE - Percepciones/Retenciones"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de SAREPE";
		let descripcionError = "";
		let contenidoTXTRetenciones = "";
		let contenidoTXTPercepciones = "";
		const procesoEncolado = false;
		const tipoTXT = esPercepcion ? "Percepciones" : "Retenciones";
		try {
		  var info_ret_perc_SAREPE = {};
		  info_ret_perc_SAREPE.informacion = {};
		  info_ret_perc_SAREPE.informacionSujetos = {};
		  info_ret_perc_SAREPE.informacionNotasCredito = {};
		  info_ret_perc_SAREPE.contenidoTXTSujeto = {};
		  info_ret_perc_SAREPE.contenidoTXTNotasCredito = {};
		  info_ret_perc_SAREPE.existenRetenciones = false;
		  info_ret_perc_SAREPE.error = false;
		  info_ret_perc_SAREPE.descripcionError = "";
		  info_ret_perc_SAREPE.procesoEncolado = false;
		  info_ret_perc_SAREPE.idLog = idRegistroLOG;
		  info_ret_perc_SAREPE.contenidoTXTRetenciones = "";
		  info_ret_perc_SAREPE.contenidoTXTPercepciones = "";
		  //-------- INICIO --- Obtener la Informacion de RETENCIONES usando un SavedSearch
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);
		  log.debug({
			title: "generarTXTSAREPE",
			details: "INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: " + JSON.stringify(periodo) + " - subsidiaria: " + subsidiaria
		  });
		  let resultadoTXTRetencionesSAREPE = { resultados: [], error: false };
		  if (esRetencion)
			resultadoTXTRetencionesSAREPE = savedSearchUtility("custrecord_l54_ret_fecha", periodo, "custrecord_l54_ret_subsidiaria", subsidiaria, "customrecord_l54_retencion", "customsearch_l54_ret_mendoza_sarepe");
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN - Obtener la Informacion de Retenciones usando un SavedSearch');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "FIN - Obtener la Informacion de Retenciones usando un SavedSearch"
		  });
		  //-------- FIN --- Obtener la Informacion de RETENCIONES usando un SavedSearch
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'resultadoTXTRetencionesSAREPE: ' + JSON.stringify(resultadoTXTRetencionesSAREPE));
		  log.debug({
			title: "generarTXTSAREPE",
			details: "resultadoTXTRetencionesSAREPE: " + JSON.stringify(resultadoTXTRetencionesSAREPE)
		  });
		  //-------- INICIO --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);
		  log.debug({
			title: "generarTXTSAREPE",
			details: "INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: " + JSON.stringify(periodo) + " - subsidiaria: " + subsidiaria
		  });
		  let resultadoTXTPercepcionesSAREPE = { resultados: [], error: false };
		  if (esPercepcion)
			resultadoTXTPercepcionesSAREPE = savedSearchUtility("trandate", periodo, "subsidiary", subsidiaria, "transaction", "customsearch_l54_per_mendoza_sarepe");
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN - Obtener la Informacion de Percepciones usando un SavedSearch');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "FIN - Obtener la Informacion de Percepciones usando un SavedSearch"
		  });
		  //-------- FIN --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'resultadoTXTPercepcionesSAREPE: ' + JSON.stringify(resultadoTXTPercepcionesSAREPE));
		  log.debug({
			title: "generarTXTSAREPE",
			details: "resultadoTXTPercepcionesSAREPE: " + JSON.stringify(resultadoTXTPercepcionesSAREPE) + ")"
		  });
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos.');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "INICIO --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos."
		  });
		  const informacionResultadoRetenciones = [];
		  let indiceArray = 0;
		  let resultAux = resultadoTXTRetencionesSAREPE.resultados;
		  //-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		  for (let i = 0; i < resultAux.length; i++) {
			const columns = resultAux[i].columns;
			informacionResultadoRetenciones[indiceArray] = {};
			informacionResultadoRetenciones[indiceArray].idInterno = resultAux[i].getValue({ name: columns[0] });
			informacionResultadoRetenciones[indiceArray].idInternoPagoProveedor = resultAux[i].getValue({ name: columns[1] });
			informacionResultadoRetenciones[indiceArray].cuit = resultAux[i].getValue({ name: columns[2] });
			informacionResultadoRetenciones[indiceArray].razonSocial = resultAux[i].getValue({ name: columns[3] });
			informacionResultadoRetenciones[indiceArray].fechaComprobante = resultAux[i].getValue({ name: columns[4] });
			informacionResultadoRetenciones[indiceArray].nroComprobante = resultAux[i].getValue({ name: columns[5] });
			informacionResultadoRetenciones[indiceArray].fecha = resultAux[i].getValue({ name: columns[6] });
			informacionResultadoRetenciones[indiceArray].baseCalculoManual = resultAux[i].getValue({ name: columns[7] });
			informacionResultadoRetenciones[indiceArray].baseCalculoLocal = resultAux[i].getValue({ name: columns[8] });
			informacionResultadoRetenciones[indiceArray].alicuota = resultAux[i].getValue({ name: columns[9] });
			informacionResultadoRetenciones[indiceArray].importeManual = resultAux[i].getValue({ name: columns[10] });
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos.');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "FIN --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos."
		  });
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos.');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "INICIO --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos."
		  });
		  const informacionResultadoPercepciones = [];
		  indiceArray = 0;
		  resultAux = resultadoTXTPercepcionesSAREPE.resultados;
		  //-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		  for (let i = 0; i < resultAux.length; i++) {
			const columns = resultAux[i].columns;
			informacionResultadoPercepciones[indiceArray] = {};
			informacionResultadoPercepciones[indiceArray].idInterno = resultAux[i].getValue({ name: columns[0] });
			informacionResultadoPercepciones[indiceArray].cuit = resultAux[i].getValue({ name: columns[1] });
			informacionResultadoPercepciones[indiceArray].razonSocial = resultAux[i].getValue({ name: columns[2] });
			informacionResultadoPercepciones[indiceArray].fechaComprobante = resultAux[i].getValue({ name: columns[3] });
			informacionResultadoPercepciones[indiceArray].nroComprobante = resultAux[i].getValue({ name: columns[4] });
			informacionResultadoPercepciones[indiceArray].fecha = resultAux[i].getValue({ name: columns[5] });
			informacionResultadoPercepciones[indiceArray].baseCalculoManual = resultAux[i].getValue({ name: columns[6] });
			informacionResultadoPercepciones[indiceArray].baseCalculoLocal = resultAux[i].getValue({ name: columns[7] });
			informacionResultadoPercepciones[indiceArray].alicuota = resultAux[i].getValue({ name: columns[8] });
			informacionResultadoPercepciones[indiceArray].importeManual = resultAux[i].getValue({ name: columns[10] });
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
		  //-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos.');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "FIN --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos."
		  });
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las transacciones para armar los TXT');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "INICIO --- Recorrer la Informacion de las transacciones para armar los TXT"
		  });
		  if ((!isEmpty(resultadoTXTRetencionesSAREPE) && !resultadoTXTRetencionesSAREPE.error) || (!isEmpty(resultadoTXTPercepcionesSAREPE) && !resultadoTXTPercepcionesSAREPE.error)) {
			//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las retenciones para armar los TXT - Cantidad de retenciones: ' + informacionResultadoRetenciones.length);
			log.debug({
			  title: "generarTXTSAREPE",
			  details: "INICIO --- Recorrer la Informacion de las retenciones para armar los TXT - Cantidad de retenciones: ' " + informacionResultadoRetenciones.length
			});
			if (esRetencion) {
			  for (let i = 0; !isEmpty(informacionResultadoRetenciones) && i < informacionResultadoRetenciones.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var refComprobante = informacionResultadoRetenciones[i].idInternoPagoProveedor;
				info_ret_perc_SAREPE.informacion = {};
				var idRetencionNetSuite = informacionResultadoRetenciones[i].idInterno;
				const idRetencion = informacionResultadoRetenciones[i].idInterno;
				//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'idRetencionNetSuite o retención ID: ' + idRetencion + ' - Referencia Pago Proveedor: ' + idRetencionNetSuite);
				log.debug({
				  title: "generarTXTSAREPE",
				  details: "idRetencionNetSuite o retención ID: " + idRetencion + " - Referencia Pago Proveedor: " + idRetencionNetSuite
				});
				if (!isEmpty(informacionResultadoRetenciones[i].cuit)) {
				  info_ret_perc_SAREPE.informacion.cuit = informacionResultadoRetenciones[i].cuit;
				  if (!isEmpty(informacionResultadoRetenciones[i].razonSocial)) {
					info_ret_perc_SAREPE.informacion.razonSocial = informacionResultadoRetenciones[i].razonSocial;
					if (!isEmpty(informacionResultadoRetenciones[i].fechaComprobante)) {
					  info_ret_perc_SAREPE.informacion.fechaComprobante = informacionResultadoRetenciones[i].fechaComprobante;
					  if (!isEmpty(informacionResultadoRetenciones[i].nroComprobante)) {
						info_ret_perc_SAREPE.informacion.nroComprobante = informacionResultadoRetenciones[i].nroComprobante;
						if (!isEmpty(informacionResultadoRetenciones[i].fecha)) {
						  info_ret_perc_SAREPE.informacion.fecha = informacionResultadoRetenciones[i].fecha;
						  if (!isEmpty(informacionResultadoRetenciones[i].baseCalculoLocal) || !isEmpty(informacionResultadoRetenciones[i].baseCalculoManual)) {
							info_ret_perc_SAREPE.informacion.baseCalculoLocal = !isEmpty(informacionResultadoRetenciones[i].baseCalculoLocal) ? informacionResultadoRetenciones[i].baseCalculoLocal : informacionResultadoRetenciones[i].baseCalculoManual;
							if (!isEmpty(informacionResultadoRetenciones[i].alicuota)) {
							  info_ret_perc_SAREPE.informacion.alicuota = informacionResultadoRetenciones[i].alicuota;
							  if (!isEmpty(informacionResultadoRetenciones[i].importeManual)) {
								info_ret_perc_SAREPE.informacion.importe = informacionResultadoRetenciones[i].importeManual;
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Importe de la Retención";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Alícuota de la Retención";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Base de Cálculo de la Retención";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Fecha de la Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Comprobante de la Retención";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha del Comprobante que originó la Retención";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Razón Social/Nombre Legal del Proveedor";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Número de Documento del Proveedor (CUIT)";
				}
				// Genero el Contenido
				if (errorGlobal == false) {
				  if (!isEmpty(info_ret_perc_SAREPE.informacion)) {
					// Genero Contenido
					if (!isEmpty(contenidoTXTRetenciones)) {
					  contenidoTXTRetenciones += "\r\n";
					}
					contenidoTXTRetenciones += info_ret_perc_SAREPE.informacion.cuit + info_ret_perc_SAREPE.informacion.razonSocial + info_ret_perc_SAREPE.informacion.fechaComprobante +
					  info_ret_perc_SAREPE.informacion.nroComprobante + info_ret_perc_SAREPE.informacion.fecha + info_ret_perc_SAREPE.informacion.baseCalculoLocal +
					  info_ret_perc_SAREPE.informacion.alicuota + info_ret_perc_SAREPE.informacion.importe;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información del TXT SAREPE Retenciones";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SAREPE Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Retenciones
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE Retenciones: ' + descripcionError);
				  log.debug({
					title: "generarTXTSAREPE",
					details: "Error Generando TXT SAREPE Retenciones: " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SAREPE Retenciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			}
			//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las retenciones para armar los TXT.');
			log.debug({
			  title: "generarTXTSAREPE",
			  details: "FIN --- Recorrer la Informacion de las retenciones para armar los TXT."
			});
			//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las Percepciones para armar los TXT - Cantidad de percepciones: ' + informacionResultadoPercepciones.length);
			log.debug({
			  title: "generarTXTSAREPE",
			  details: "INICIO --- Recorrer la Informacion de las Percepciones para armar los TXT - Cantidad de percepciones: " + informacionResultadoPercepciones.length
			});
			if (esPercepcion) {
			  for (let i = 0; !isEmpty(informacionResultadoPercepciones) && i < informacionResultadoPercepciones.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = "";
				refComprobante = informacionResultadoPercepciones[i].idInterno;
				info_ret_perc_SAREPE.informacion = {};
				if (!isEmpty(informacionResultadoPercepciones[i].cuit)) {
				  info_ret_perc_SAREPE.informacion.cuit = informacionResultadoPercepciones[i].cuit;
				  if (!isEmpty(informacionResultadoPercepciones[i].razonSocial)) {
					info_ret_perc_SAREPE.informacion.razonSocial = informacionResultadoPercepciones[i].razonSocial;
					if (!isEmpty(informacionResultadoPercepciones[i].fechaComprobante)) {
					  info_ret_perc_SAREPE.informacion.fechaComprobante = informacionResultadoPercepciones[i].fechaComprobante;
					  if (!isEmpty(informacionResultadoPercepciones[i].nroComprobante)) {
						info_ret_perc_SAREPE.informacion.nroComprobante = informacionResultadoPercepciones[i].nroComprobante;
						if (!isEmpty(informacionResultadoPercepciones[i].fecha)) {
						  info_ret_perc_SAREPE.informacion.fecha = informacionResultadoPercepciones[i].fecha;
						  if (!isEmpty(informacionResultadoPercepciones[i].baseCalculoLocal) || !isEmpty(informacionResultadoPercepciones[i].baseCalculoManual)) {
							info_ret_perc_SAREPE.informacion.baseCalculoLocal = !isEmpty(informacionResultadoPercepciones[i].baseCalculoLocal) ? informacionResultadoPercepciones[i].baseCalculoLocal : informacionResultadoPercepciones[i].baseCalculoManual;
							if (!isEmpty(informacionResultadoPercepciones[i].alicuota)) {
							  info_ret_perc_SAREPE.informacion.alicuota = informacionResultadoPercepciones[i].alicuota;
							  if (!isEmpty(informacionResultadoPercepciones[i].importeManual)) {
								info_ret_perc_SAREPE.informacion.importe = informacionResultadoPercepciones[i].importeManual;
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Importe de la Percepción";
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la Alícuota de la Percepcion";
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Base de Cálculo de la Percepción";
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la Fecha de la Percepción";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Comprobante de la Transacción";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la Fecha del Comprobante que originó la Percepción";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Razón Social/Nombre Legal del Cliente";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Número de Documento del Cliente (CUIT)";
				}
				// Genero el Contenido
				if (errorGlobal == false) {
				  if (!isEmpty(info_ret_perc_SAREPE.informacion)) {
					// Genero Contenido
					if (!isEmpty(contenidoTXTPercepciones)) {
					  contenidoTXTPercepciones += "\r\n";
					}
					contenidoTXTPercepciones += info_ret_perc_SAREPE.informacion.cuit + info_ret_perc_SAREPE.informacion.razonSocial + info_ret_perc_SAREPE.informacion.fechaComprobante +
					  info_ret_perc_SAREPE.informacion.nroComprobante + info_ret_perc_SAREPE.informacion.fecha + info_ret_perc_SAREPE.informacion.baseCalculoLocal +
					  info_ret_perc_SAREPE.informacion.alicuota + info_ret_perc_SAREPE.informacion.importe;
				  } else {
					errorGeneral = true;
					descripcionError = "Error Obteniendo Información del TXT SAREPE Percepciones";
					idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SAREPE Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				  }
				} else {
				  // Error Obteniendo Informacion de Percepciones
				  // Grabo el Error en NetSuite
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE Percepciones : ' + descripcionError);
				  log.error({
					title: "generarTXTSAREPE",
					details: "Error Generando TXT SAREPE Percepciones : " + descripcionError
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SAREPE Percepciones - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
				// Verifico si debo Encolar el Proceso
				//checkGovernance(1000);
			  }
			}
			//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las Percepciones para armar los TXT.');
			log.debug({
			  title: "generarTXTSAREPE",
			  details: "FIN --- Recorrer la Informacion de las Percepciones para armar los TXT."
			});
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if ((!isEmpty(informacionResultadoRetenciones) && informacionResultadoRetenciones.length == 0) || (!isEmpty(informacionResultadoPercepciones) && informacionResultadoPercepciones.length == 0)) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT SAREPE Correcta - No se Encontraron Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Transacciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Obteniendo transacciones para crear el TXT SAREPE');
				  log.error({
					title: "generarTXTSAREPE",
					details: "Error Obteniendo transacciones para crear el TXT SAREPE"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Obteniendo transacciones de " + tipoTXT + " del TXT SAREPE - Error : Error Obteniendo Transacciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  } else {
			// Error Obteniendo Transacciones
			errorGeneral = true;
			//nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Obteniendo transacciones de ' + tipoTXT + ' para crear el TXT SAREPE');
			log.error({
			  title: "generarTXTSAREPE",
			  details: "Error Obteniendo transacciones de " + tipoTXT + " para crear el TXT SAREPE"
			});
			idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SAREPE - Se generó un error al buscar las transacciones de " + tipoTXT + ".", idRetencionNetSuite, refComprobante, subsidiaria);
		  }
		  if (!isEmpty(contenidoTXTRetenciones))
			contenidoTXTRetenciones += "\r\n";
		  if (!isEmpty(contenidoTXTPercepciones))
			contenidoTXTPercepciones += "\r\n";
		  //nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las transacciones para armar los TXT.');
		  log.debug({
			title: "generarTXTSAREPE",
			details: "FIN --- Recorrer la Informacion de las transacciones para armar los TXT."
		  });
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE - Error : ' + e.message);
		  log.error({
			title: "generarTXTSAREPE",
			details: "Error Generando TXT SAREPE - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SAREPE - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  info_ret_perc_SAREPE = grabarError(true, "Error Generando TXT SAREPE", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  info_ret_perc_SAREPE = grabarError(false, "Generación de TXT SAREPE Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT SAREPE Generado Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'Finalización - Generación TXT SAREPE - contenidoTXTRetenciones: ' + JSON.stringify(contenidoTXTRetenciones) + ' - contenidoTXTPercepciones: ' + JSON.stringify(contenidoTXTPercepciones));
		log.debug({
		  title: "generarTXTSAREPE",
		  details: "Finalización - Generación TXT SAREPE - contenidoTXTRetenciones: " + JSON.stringify(contenidoTXTRetenciones) + " - contenidoTXTPercepciones: " + JSON.stringify(contenidoTXTPercepciones)
		});
		info_ret_perc_SAREPE.contenidoTXTRetenciones = contenidoTXTRetenciones;
		info_ret_perc_SAREPE.contenidoTXTPercepciones = contenidoTXTPercepciones;
		return info_ret_perc_SAREPE;
	  }
	  // [Lista] Función para elaborar SS
	  function savedSearchUtility(campoFiltroFecha, periodo, campoFiltroSubsidiaria, subsidiaria, tipoRegistroSS, idSavedSearch) {
		try {
		  var response = { resultados: [], error: false };
		  let iCont = 0;
		  const filtro = [];
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//filtro[iCont++] = new nlobjSearchFilter(campoFiltroFecha, null, 'within', periodo.fDesde, periodo.fHasta);
			filtro[iCont++] = search.createFilter({
			  name: campoFiltroFecha,
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
		  if (!isEmpty(subsidiaria))
			//filtro[iCont++] = new nlobjSearchFilter(campoFiltroSubsidiaria, null, 'is', subsidiaria);
			filtro[iCont++] = search.createFilter({
			  name: campoFiltroSubsidiaria,
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
		  //var search = new nlapiLoadSearch(tipoRegistroSS, idSavedSearch);
		  const search1 = search.load({
			type: tipoRegistroSS, //*opc
			id: idSavedSearch
		  });
		  search1.filters.push(...filtro);
		  const searchResults = search1.run();
		  let completeResults = [];
		  // resultIndex points to record starting current "resultado" in the entire results array
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResults = resultado; //Primera ve inicializa
			  else
				completeResults = completeResults.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0);
		  response.resultados = completeResults;
		  return response;
		} catch (error) {
		  //nlapiLogExecution('ERROR', 'savedSearchUtility', 'Error NetSuite Excepción - Detalles: ' + error.message);
		  log.error({
			title: "savedSearchUtility",
			details: "Error NetSuite Excepción - Detalles: " + error.message
		  });
		  response.error = true;
		  return response;
		}
	  }
	  function removeDiacritics(str) {
		const defaultDiacriticsRemovalMap = [
		  { "base": "A", "letters": /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g },
		  { "base": "AA", "letters": /[\uA732]/g },
		  { "base": "AE", "letters": /[\u00C6\u01FC\u01E2]/g },
		  { "base": "AO", "letters": /[\uA734]/g },
		  { "base": "AU", "letters": /[\uA736]/g },
		  { "base": "AV", "letters": /[\uA738\uA73A]/g },
		  { "base": "AY", "letters": /[\uA73C]/g },
		  { "base": "B", "letters": /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g },
		  { "base": "C", "letters": /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g },
		  { "base": "D", "letters": /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g },
		  { "base": "DZ", "letters": /[\u01F1\u01C4]/g },
		  { "base": "Dz", "letters": /[\u01F2\u01C5]/g },
		  { "base": "E", "letters": /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g },
		  { "base": "F", "letters": /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g },
		  { "base": "G", "letters": /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g },
		  { "base": "H", "letters": /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g },
		  { "base": "I", "letters": /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g },
		  { "base": "J", "letters": /[\u004A\u24BF\uFF2A\u0134\u0248]/g },
		  { "base": "K", "letters": /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g },
		  { "base": "L", "letters": /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g },
		  { "base": "LJ", "letters": /[\u01C7]/g },
		  { "base": "Lj", "letters": /[\u01C8]/g },
		  { "base": "M", "letters": /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g },
		  { "base": "N", "letters": /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g },
		  { "base": "NJ", "letters": /[\u01CA]/g },
		  { "base": "Nj", "letters": /[\u01CB]/g },
		  { "base": "O", "letters": /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g },
		  { "base": "OI", "letters": /[\u01A2]/g },
		  { "base": "OO", "letters": /[\uA74E]/g },
		  { "base": "OU", "letters": /[\u0222]/g },
		  { "base": "P", "letters": /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g },
		  { "base": "Q", "letters": /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g },
		  { "base": "R", "letters": /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g },
		  { "base": "S", "letters": /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g },
		  { "base": "T", "letters": /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g },
		  { "base": "TZ", "letters": /[\uA728]/g },
		  { "base": "U", "letters": /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g },
		  { "base": "V", "letters": /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g },
		  { "base": "VY", "letters": /[\uA760]/g },
		  { "base": "W", "letters": /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g },
		  { "base": "X", "letters": /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g },
		  { "base": "Y", "letters": /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g },
		  { "base": "Z", "letters": /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g },
		  { "base": "a", "letters": /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g },
		  { "base": "aa", "letters": /[\uA733]/g },
		  { "base": "ae", "letters": /[\u00E6\u01FD\u01E3]/g },
		  { "base": "ao", "letters": /[\uA735]/g },
		  { "base": "au", "letters": /[\uA737]/g },
		  { "base": "av", "letters": /[\uA739\uA73B]/g },
		  { "base": "ay", "letters": /[\uA73D]/g },
		  { "base": "b", "letters": /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g },
		  { "base": "c", "letters": /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g },
		  { "base": "d", "letters": /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g },
		  { "base": "dz", "letters": /[\u01F3\u01C6]/g },
		  { "base": "e", "letters": /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g },
		  { "base": "f", "letters": /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g },
		  { "base": "g", "letters": /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g },
		  { "base": "h", "letters": /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g },
		  { "base": "hv", "letters": /[\u0195]/g },
		  { "base": "i", "letters": /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g },
		  { "base": "j", "letters": /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g },
		  { "base": "k", "letters": /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g },
		  { "base": "l", "letters": /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g },
		  { "base": "lj", "letters": /[\u01C9]/g },
		  { "base": "m", "letters": /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g },
		  { "base": "n", "letters": /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g },
		  { "base": "nj", "letters": /[\u01CC]/g },
		  { "base": "o", "letters": /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g },
		  { "base": "oi", "letters": /[\u01A3]/g },
		  { "base": "ou", "letters": /[\u0223]/g },
		  { "base": "oo", "letters": /[\uA74F]/g },
		  { "base": "p", "letters": /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g },
		  { "base": "q", "letters": /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g },
		  { "base": "r", "letters": /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g },
		  { "base": "s", "letters": /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g },
		  { "base": "t", "letters": /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g },
		  { "base": "tz", "letters": /[\uA729]/g },
		  { "base": "u", "letters": /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g },
		  { "base": "v", "letters": /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g },
		  { "base": "vy", "letters": /[\uA761]/g },
		  { "base": "w", "letters": /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g },
		  { "base": "x", "letters": /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g },
		  { "base": "y", "letters": /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g },
		  { "base": "z", "letters": /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }
		];
		for (let i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
		  str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
		}
		return str;
	  }
	  //[Listo]
	  function generarTXTSireRetIVA(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		//nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Inicio - Generación TXT Retenciones IVA - F2005');
		log.debug({
		  title: "generarTXTSireRetIVA",
		  details: "Inicio - Generación TXT Retenciones IVA - F2005"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		try {
		  var retencionesSireIVA = {};
		  retencionesSireIVA.retencion = {};
		  retencionesSireIVA.sujeto = {};
		  retencionesSireIVA.existenPercepciones = false;
		  retencionesSireIVA.error = false;
		  retencionesSireIVA.descripcionError = "";
		  retencionesSireIVA.procesoEncolado = false;
		  retencionesSireIVA.idLog = idRegistroLOG;
		  retencionesSireIVA.contenidoTXT = "";
		  var refComprobante = "";
		  var idRetencionNetSuite = "";
		  let resultadoTXTSireRetIVA = { resultados: [], error: false };
		  resultadoTXTSireRetIVA = savedSearchUtility("custrecord_l54_ret_fecha", periodo, "custrecord_l54_ret_subsidiaria", subsidiaria, "customrecord_l54_retencion", "customsearch_l54_ret_sire_iva_f2005");
		  if (!isEmpty(resultadoTXTSireRetIVA)) {
			//nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Cantidad retenciones: ' + resultadoTXTSireRetIVA.resultados.length);
			log.debug({
			  title: "generarTXTSireRetIVA",
			  details: "Cantidad retenciones: " + resultadoTXTSireRetIVA.resultados.length
			});
			for (let i = 0; resultadoTXTSireRetIVA != null && i < resultadoTXTSireRetIVA.resultados.length; i++) {
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = "";
			  retencionesSireIVA.retencion = {};
			  // retencionesSireIVA.sujeto = {};
			  refComprobante = "";
			  const result = resultadoTXTSireRetIVA.resultados[i];
			  const columns = result.columns;
			  // Obtengo el Codigo de Comprobante (OP) y el ID de la retención
			  idRetencionNetSuite = result.getValue({ name: columns[0] }); // ID Retención
			  refComprobante = result.getValue({ name: columns[1] }); // ID orden de pago
			  log.debug({
				title: "generarTXTSireRetIVA",
				details: "refComprobante de orden de pago: " + refComprobante + " - idRetencionNetSuite: " + idRetencionNetSuite
			  });
			  // Versión
			  if (!isEmpty(result.getValue({ name: columns[2] }))) {
				retencionesSireIVA.retencion.versión = result.getValue({ name: columns[2] });
				// Código de Trazabilidad
				if (!isEmpty(result.getValue({ name: columns[3] }))) {
				  retencionesSireIVA.retencion.codigoTrazabilidad = result.getValue({ name: columns[3] });
				  // Código de Impuesto
				  if (!isEmpty(result.getValue({ name: columns[4] }))) {
					retencionesSireIVA.retencion.codigoImpuesto = result.getValue({ name: columns[4] });
					// Código de Régimen
					if (!isEmpty(result.getValue({ name: columns[5] }))) {
					  retencionesSireIVA.retencion.codigoRegimen = result.getValue({ name: columns[5] });
					  // Fecha Retención
					  if (!isEmpty(result.getValue({ name: columns[6] }))) {
						retencionesSireIVA.retencion.fechaRetencion = result.getValue({ name: columns[6] });
						// Código Condición
						if (!isEmpty(result.getValue({ name: columns[7] }))) {
						  retencionesSireIVA.retencion.codigoCondicion = result.getValue({ name: columns[7] });
						  // Imposibilidad de Retención (por defecto es "0": Retención Efectuada)
						  if (!isEmpty(result.getValue({ name: columns[8] }))) {
							retencionesSireIVA.retencion.imposibilidadRetencion = result.getValue({ name: columns[8] });
							// No Retención Motivo
							if (!isEmpty(result.getValue({ name: columns[9] }))) {
							  retencionesSireIVA.retencion.noRetencionMotivo = result.getValue({ name: columns[9] });
							  // Importe Retenido (Moneda Local)
							  if (!isEmpty(result.getValue({ name: columns[10] }))) {
								retencionesSireIVA.retencion.importeRetencion = result.getValue({ name: columns[10] });
								// Base de Cálculo Moneda Local (campo de columna) o Base de Cálculo Manual
								if (!isEmpty(result.getValue({ name: columns[11] })) || !isEmpty(result.getValue({ name: columns[12] }))) {
								  retencionesSireIVA.retencion.baseCalculo = !isEmpty(result.getValue({ name: columns[11] })) ? result.getValue({ name: columns[11] }) : result.getValue({ name: columns[12] });
								  // Régimen de Exclusión (por defecto es "0": No excluido)
								  if (!isEmpty(result.getValue({ name: columns[13] }))) {
									retencionesSireIVA.retencion.regimenExclusion = result.getValue({ name: columns[13] });
									// Porcentaje de Exclusión
									if (!isEmpty(result.getValue({ name: columns[14] }))) {
									  retencionesSireIVA.retencion.porcentajeExclusion = result.getValue({ name: columns[14] });
									  // Fecha de Finalización de Vigencia
									  if (!isEmpty(result.getValue({ name: columns[15] }))) {
										retencionesSireIVA.retencion.fechaFinalizacionVigencia = result.getValue({ name: columns[15] });
										// Tipo Comprobante (orden de pago)
										if (!isEmpty(result.getValue({ name: columns[16] }))) {
										  retencionesSireIVA.retencion.tipoComprobante = result.getValue({ name: columns[16] });
										  // Fecha Comprobante (orden de pago)
										  if (!isEmpty(result.getValue({ name: columns[17] }))) {
											retencionesSireIVA.retencion.fechaComprobante = result.getValue({ name: columns[17] });
											// Número Comprobante (orden de pago)
											if (!isEmpty(result.getValue({ name: columns[18] }))) {
											  retencionesSireIVA.retencion.numeroComprobante = result.getValue({ name: columns[18] });
											  // COE
											  if (!isEmpty(result.getValue({ name: columns[19] }))) {
												retencionesSireIVA.retencion.coe = result.getValue({ name: columns[19] });
												// COE Original
												if (!isEmpty(result.getValue({ name: columns[20] }))) {
												  retencionesSireIVA.retencion.coeOriginal = result.getValue({ name: columns[20] });
												  // CAE
												  if (!isEmpty(result.getValue({ name: columns[21] }))) {
													retencionesSireIVA.retencion.cae = result.getValue({ name: columns[21] });
													// Importe Comprobante
													if (!isEmpty(result.getValue({ name: columns[22] }))) {
													  retencionesSireIVA.retencion.importeComprobante = result.getValue({ name: columns[22] });
													  // Motivo Emisión NC
													  if (!isEmpty(result.getValue({ name: columns[23] }))) {
														retencionesSireIVA.retencion.motivoEmisionNC = result.getValue({ name: columns[23] });
														// Retenido Clave (CUIT)
														if (!isEmpty(result.getValue({ name: columns[24] }))) {
														  retencionesSireIVA.retencion.retenidoClave = result.getValue({ name: columns[24] });
														  // Certificado Original Nro.
														  if (!isEmpty(result.getValue({ name: columns[25] }))) {
															retencionesSireIVA.retencion.certificadoOriginalNro = result.getValue({ name: columns[25] });
															// Certificado Original Fecha Ret.
															if (!isEmpty(result.getValue({ name: columns[26] }))) {
															  retencionesSireIVA.retencion.certificadoOriginalFechaRet = result.getValue({ name: columns[26] });
															  // Certificado Original Importe
															  if (!isEmpty(result.getValue({ name: columns[27] }))) {
																retencionesSireIVA.retencion.certificadoOriginalImporte = result.getValue({ name: columns[27] });
																// Motivo de la anulación
																if (!isEmpty(result.getValue({ name: columns[28] }))) {
																  retencionesSireIVA.retencion.motivoAnulacion = result.getValue({ name: columns[28] });
																} else {
																  errorGlobal = true;
																  descripcionError = "Error Obteniendo el Motivo de Anulación de la retención con ID: " + idRetencionNetSuite;
																}
															  } else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo el Certificado Original Importe de la retención con ID: " + idRetencionNetSuite;
															  }
															} else {
															  errorGlobal = true;
															  descripcionError = "Error Obteniendo el Certificado Original Fecha de la retención con ID: " + idRetencionNetSuite;
															}
														  } else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Certificado Original Nro. de la retención con ID: " + idRetencionNetSuite;
														  }
														} else {
														  errorGlobal = true;
														  descripcionError = "Error Obteniendo el CUIT del proveedor de la retención con ID: " + idRetencionNetSuite;
														}
													  } else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Motivo Emisión NC de la retención con ID: " + idRetencionNetSuite;
													  }
													} else {
													  errorGlobal = true;
													  descripcionError = "Error Obteniendo el Importe del Comprobante de la retención con ID: " + idRetencionNetSuite;
													}
												  } else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el CAE de la retención con ID: " + idRetencionNetSuite;
												  }
												} else {
												  errorGlobal = true;
												  descripcionError = "Error Obteniendo el COE Original de la retención con ID: " + idRetencionNetSuite;
												}
											  } else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el COE de la retención con ID: " + idRetencionNetSuite;
											  }
											} else {
											  errorGlobal = true;
											  descripcionError = "Error Obteniendo el Número Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
											}
										  } else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Fecha Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
										  }
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Tipo Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha de Finalización de Vigencia de la retención con ID: " + idRetencionNetSuite;
									  }
									} else {
									  errorGlobal = true;
									  descripcionError = "Error Obteniendo el Porcentaje de Exclusión de la retención con ID: " + idRetencionNetSuite;
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Régimen de Exclusión de la retención con ID: " + idRetencionNetSuite;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo la Base de Cálculo de la retención con ID: " + idRetencionNetSuite;
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Importe Retenido de la retención con ID: " + idRetencionNetSuite;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el valor de No Retención Motivo de la retención con ID: " + idRetencionNetSuite;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Imposibilidad de Retención de la retención con ID: " + idRetencionNetSuite;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Código Condición de la retención con ID: " + idRetencionNetSuite;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo la Fecha de la retención con ID: " + idRetencionNetSuite;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el Código de Régimen de la retención con ID: " + idRetencionNetSuite;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Código de Impuesto de la retención con ID: " + idRetencionNetSuite;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Código de Trazabilidad de la retención con ID: " + idRetencionNetSuite;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la Versión del TXT de SIRE IVA para la retención con ID: " + idRetencionNetSuite;
			  }
			  // Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
			  /* nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
			  if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
				errorGlobal = true;
				descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
			  } */
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionesSireIVA.retencion != null) {
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  contenidoTXT += retencionesSireIVA.retencion.versión + retencionesSireIVA.retencion.codigoTrazabilidad + retencionesSireIVA.retencion.codigoImpuesto +
					retencionesSireIVA.retencion.codigoRegimen + retencionesSireIVA.retencion.fechaRetencion + retencionesSireIVA.retencion.codigoCondicion +
					retencionesSireIVA.retencion.imposibilidadRetencion + retencionesSireIVA.retencion.noRetencionMotivo + retencionesSireIVA.retencion.importeRetencion +
					retencionesSireIVA.retencion.baseCalculo + retencionesSireIVA.retencion.regimenExclusion + retencionesSireIVA.retencion.porcentajeExclusion +
					retencionesSireIVA.retencion.fechaFinalizacionVigencia + retencionesSireIVA.retencion.tipoComprobante + retencionesSireIVA.retencion.fechaComprobante +
					retencionesSireIVA.retencion.numeroComprobante + retencionesSireIVA.retencion.coe + retencionesSireIVA.retencion.coeOriginal + retencionesSireIVA.retencion.cae +
					retencionesSireIVA.retencion.importeComprobante + retencionesSireIVA.retencion.motivoEmisionNC + retencionesSireIVA.retencion.retenidoClave +
					retencionesSireIVA.retencion.certificadoOriginalNro + retencionesSireIVA.retencion.certificadoOriginalFechaRet +
					retencionesSireIVA.retencion.certificadoOriginalImporte + retencionesSireIVA.retencion.motivoAnulacion;
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Retención";
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SIRE Retenciones IVA - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Generando TXT SIRE Retenciones IVA: ' + descripcionError);
				log.error({
				  title: "generarTXTSireRetIVA",
				  details: "Error Generando TXT SIRE Retenciones IVA: " + descripcionError
				});
				idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Generando TXT SIRE Retenciones IVA - Error : " + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			}
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTSireRetIVA) && resultadoTXTSireRetIVA.resultados.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Generación de TXT SIRE Retenciones IVA Correcta - No se Encontraron Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Obteniendo Retenciones SIRE Retenciones IVA');
				  log.error({
					title: "generarTXTSireRetIVA",
					details: "Error Obteniendo Retenciones SIRE Retenciones IVA"
				  });
				  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "Error Obteniendo Resultados para el TXT SIRE Retenciones IVA - Error : Error Obteniendo Retenciones", idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Generando TXT SIRE Retenciones IVA - Error : ' + e.message);
		  log.error({
			title: "generarTXTSireRetIVA",
			details: "Error Generando TXT SIRE Retenciones IVA - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIRE Retenciones IVA - Error : " + e.message;
		  idRegistroLOG = grabarLogError("EST-LOG-ERROR", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
		if (errorGeneral == true) {
		  retencionesSireIVA = grabarError(true, "Error Generando TXT SIRE Retenciones IVA", existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionesSireIVA = grabarError(false, "Generación de TXT SIRE Retenciones IVA Correcta", existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError("EST-LOG-OK", periodo, tipoOperacion, tipoRegimen, idRegistroLOG, "TXT SIRE Retenciones IVA Generadas Correctamente", null, null, subsidiaria);
		  }
		}
		//nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Finalización - Generación TXT SIRE Retenciones IVA');
		log.debug({
		  title: "generarTXTSireRetIVA",
		  details: "Finalización - Generación TXT SIRE Retenciones IVA"
		});
		retencionesSireIVA.contenidoTXT = contenidoTXT;
		return retencionesSireIVA;
	  }
	  function generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen) {
   
		//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Inicio - Generación TXT Catamarca Retemciones');
		log.debug({
		  title: "generarTXTCATAMARCARet",
		  details: "Inicio - Generación TXT Catamarca Retemciones"
		});
		let idRegistroLOG = idLogErrores;
		let errorGlobal = false;
		let errorGeneral = false;
		let existenPercepciones = false;
		const mensajeError = "Error Generando TXT de Retenciones";
		let descripcionError = "";
		let contenidoTXT = "";
		const procesoEncolado = false;
		let contadorDetalle = 1;
   
		try {
		  var retencionesCatamarca = new Object();
		  retencionesCatamarca.retencion = new Object();
		  retencionesCatamarca.sujeto = new Object();
		  retencionesCatamarca.existenPercepciones = false;
		  retencionesCatamarca.error = false;
		  retencionesCatamarca.descripcionError = "";
		  retencionesCatamarca.procesoEncolado = false;
		  retencionesCatamarca.idLog = idRegistroLOG;
		  retencionesCatamarca.contenidoTXT = "";
		  var refComprobante = '';
		  var idRetencionNetSuite = '';
		  var montoTotal = 0.00;
		  var montoTotalRetenido = 0.00;
   
   
		  var tipoLineaSec1 = '10';
		  var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria).substring(0, 11);
		  var nroIIBBEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_iibb_cia", subsidiaria).substring(0, 10);
   
		  nroIIBBEmpresa = padding_left(nroIIBBEmpresa, "0", 10);
		  //var periodoConsulta = nlapiStringToDate(periodo.fHasta);
		  var periodoConsulta = format.parse({
			value: periodo.fHasta,
			type: format.Type.DATE
		  });
		  var mesConsultaAux = periodoConsulta.getMonth() + 1;
		  var mesConsulta = padding_left(mesConsultaAux, "0", 2);
		  var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
		  contenidoTXT += tipoLineaSec1 + nroIIBBEmpresa + cuitEmpresaAux + periodoName;
   
		  var resultadoTXTCatamarcaRet = { resultados: [], error: false };
		  resultadoTXTCatamarcaRet = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_catamarca');
   
		  if (!isEmpty(resultadoTXTCatamarcaRet)) {
			//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Cantidad retenciones: ' + resultadoTXTCatamarcaRet.resultados.length);
			log.debug({
			  title: "generarTXTCATAMARCARet",
			  details: 'Cantidad retenciones: ' + resultadoTXTCatamarcaRet.resultados.length
			});
			for (var i = 0; resultadoTXTCatamarcaRet != null && i < resultadoTXTCatamarcaRet.resultados.length; i++) {
   
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = '';
			  retencionesCatamarca.retencion = new Object();
			  // retencionesCatamarca.sujeto = new Object();
			  refComprobante = '';
   
			  const result = resultadoTXTCatamarcaRet.resultados[i];
			  const columns = result.columns;
   
			  // Obtengo el Codigo de Comprobante (OP) y el ID de la retención
			  // idRetencionNetSuite = result.getValue(columns[0]); // ID Retención
			  // refComprobante = result.getValue(columns[1]); // ID orden de pago
   
			  //nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);
			  log.debug({
				title: "generarTXTCATAMARCARet",
				details: "refComprobante de orden de pago: " + refComprobante + " - idRetencionNetSuite: " + idRetencionNetSuite
			  });
			  // Versión
			  if (!isEmpty(result.getValue({ name: columns[1] }))) {
				retencionesCatamarca.retencion.tipoLineaSec2 = result.getValue({ name: columns[1] });
				// Código de Trazabilidad
				if (!isEmpty(result.getValue({ name: columns[2] }))) {
				  var nroOperacionCat = padding_left(contadorDetalle.toString(), "0", 6);
				  retencionesCatamarca.retencion.nroOperacion = nroOperacionCat;
				  // Código de Impuesto
				  if (!isEmpty(result.getValue({ name: columns[3] }))) {
					retencionesCatamarca.retencion.nroIIBB = padding_left(result.getValue({ name: columns[3] }), "0", 10);
					// Código de Régimen
					if (!isEmpty(result.getValue({ name: columns[4] }))) {
					  retencionesCatamarca.retencion.cuit = result.getValue({ name: columns[4] });
					  // Fecha Retención
					  if (!isEmpty(result.getValue({ name: columns[5] }))) {
						retencionesCatamarca.retencion.nombreLegal = result.getValue({ name: columns[5] });
						// Código Condición
						if (!isEmpty(result.getValue({ name: columns[6] }))) {
						  retencionesCatamarca.retencion.direccion = result.getValue({ name: columns[6] });
						  if (!isEmpty(result.getValue({ name: columns[7] }))) {
							retencionesCatamarca.retencion.localidad = result.getValue({ name: columns[7] });
							if (!isEmpty(result.getValue({ name: columns[8] }))) {
							  retencionesCatamarca.retencion.provincia = result.getValue({ name: columns[8] });
							  if (!isEmpty(result.getValue({ name: columns[9] }))) {
								retencionesCatamarca.retencion.tipoLineaSec3 = result.getValue({ name: columns[9] });
								if (!isEmpty(result.getValue({ name: columns[10] }))) {
								  retencionesCatamarca.retencion.codigoRubro = result.getValue({ name: columns[10] });
								  //nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retencionesCatamarca.retencion.codigoRubro length:' + retencionesCatamarca.retencion.codigoRubro.length);
								  // Importe Retenido (Moneda Local)
								  if (!isEmpty(result.getValue({ name: columns[11] }))) {
									retencionesCatamarca.retencion.totalFacturado = padding_left(result.getValue({ name: columns[11] }), "0", 13).replace(" ", "0");
									//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retencionesCatamarca.retencion.totalFacturado length:' + retencionesCatamarca.retencion.totalFacturado.length);
									montoTotal = montoTotal + parseFloat(result.getValue({ name: columns[12] }));
									if (tipoRegimen == 38) {
									  if (!isEmpty(result.getValue({ name: columns[13] }))) {
										retencionesCatamarca.retencion.nroRetencion = result.getValue({ name: columns[13] });
										if (!isEmpty(result.getValue({ name: columns[14] }))) {
										  retencionesCatamarca.retencion.totalRetenido = padding_left(result.getValue({ name: columns[14] }), "0", 13).replace(" ", "0");
										  montoTotalRetenido = montoTotalRetenido + parseFloat(result.getValue({ name: columns[15] }));
										} else {
										  errorGlobal = true;
										  descripcionError = "Error Obteniendo el Total Retenido de la retención con ID: " + idRetencionNetSuite;
										}
									  } else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Numero de Constancia de Retención de la retención con ID: " + idRetencionNetSuite;
									  }
									}
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Importe Total de la retención con ID: " + idRetencionNetSuite;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo el valor de Codigo rubro de la retención con ID: " + idRetencionNetSuite;
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de linea Seccion 3 de la retención con ID: " + idRetencionNetSuite;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo la provincia de la retención con ID: " + idRetencionNetSuite;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la localidad de la retención con ID: " + idRetencionNetSuite;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo la direccion de la retención con ID: " + idRetencionNetSuite;
						}
   
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Nombre Legal de la retención con ID: " + idRetencionNetSuite;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo el CUIT del Proveedor de la retención con ID: " + idRetencionNetSuite;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Nro. IIBB de la retención con ID: " + idRetencionNetSuite;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el Nro. Operacion de la retención con ID: " + idRetencionNetSuite;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la Tipo de Linea Seccion 2 para la retención con ID: " + idRetencionNetSuite;
			  }
   
			  // Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
			  /* nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
			  if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
				errorGlobal = true;
				descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
			  } */
   
			  // Genero el Contenido
			  if (errorGlobal == false) {
   
				if (retencionesCatamarca.retencion != null) {
   
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
   
				  if (tipoRegimen == 37) {
					contenidoTXT += retencionesCatamarca.retencion.tipoLineaSec2 + retencionesCatamarca.retencion.nroOperacion + retencionesCatamarca.retencion.nroIIBB +
					  retencionesCatamarca.retencion.cuit + retencionesCatamarca.retencion.nombreLegal + retencionesCatamarca.retencion.direccion +
					  retencionesCatamarca.retencion.localidad + retencionesCatamarca.retencion.provincia + '\n' + retencionesCatamarca.retencion.tipoLineaSec3 +
					  retencionesCatamarca.retencion.codigoRubro + retencionesCatamarca.retencion.totalFacturado;
				  } else {
					contenidoTXT += retencionesCatamarca.retencion.tipoLineaSec2 + retencionesCatamarca.retencion.nroOperacion + retencionesCatamarca.retencion.nroRetencion + retencionesCatamarca.retencion.nroIIBB +
					  retencionesCatamarca.retencion.cuit + retencionesCatamarca.retencion.nombreLegal + retencionesCatamarca.retencion.direccion +
					  retencionesCatamarca.retencion.localidad + retencionesCatamarca.retencion.provincia + retencionesCatamarca.retencion.totalFacturado + retencionesCatamarca.retencion.totalRetenido;
				  }
   
   
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Retención";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT CATAMARCA RET - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
   
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				//nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Generando TXT CATAMARCA RET: ' + descripcionError);
				log.error({
				  title: "generarTXTCATAMARCARet",
				  details: "Error Generando TXT CATAMARCA RET: " + descripcionError
				});
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT CATAMARCA RET - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
   
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
			  contadorDetalle++;
			}
   
			var tipoLineaSec9 = '90';
			var cantidadOperaciones = padding_left((contadorDetalle - 1).toString(), "0", 6);
			var montoTotalLetras = numberTruncTwoDec(montoTotal);
			var importeTotalFacturado = padding_left(montoTotalLetras.replace('.', ''), "0", 13);
   
   
			if (tipoRegimen == 37) {
			  contenidoTXT += '\n' + tipoLineaSec9 + cantidadOperaciones + importeTotalFacturado;
			} else {
			  var montoTotalRetenidoLetras = numberTruncTwoDec(montoTotalRetenido);
			  var importeTotalRetenidoFacturado = padding_left(montoTotalRetenidoLetras.replace('.', ''), "0", 13);
			  contenidoTXT += '\n' + tipoLineaSec9 + cantidadOperaciones + importeTotalFacturado + importeTotalRetenidoFacturado;
			}
   
			if (errorGeneral == false) {
   
			  if (existenPercepciones == false) {
   
				if (!isEmpty(resultadoTXTCatamarcaRet) && resultadoTXTCatamarcaRet.resultados.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT CATAMARCA Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
				  contenidoTXT = "";
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  //nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Obteniendo Retenciones SIRE Retenciones IVA');
				  log.error({
					title: "generarTXTCATAMARCARet",
					details: "Error Obteniendo Retenciones Catamarca Retenciones " + e.message
				  });
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Resultados para el TXT CATAMARCA Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
   
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  //nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Generando TXT CATAMARCA Retenciones - Error : ' + e.message);
		  log.error({
			title: "generarTXTCATAMARCARet",
			details: "Error Generando TXT CATAMARCA Retenciones - Error : " + e.message
		  });
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT CATAMARCA Retenciones - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
   
		if (errorGeneral == true) {
		  retencionesCatamarca = grabarError(true, 'Error Generando TXT CATAMARCA Retenciones', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionesCatamarca = grabarError(false, 'Generación de TXT CATAMARCA Retenciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT CATAMARCA Retenciones Generadas Correctamente', null, null, subsidiaria);
		  }
		}
   
		//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Finalización - Generación TXT CATAMARCA Retenciones');
		log.debug({
		  title: "generarTXTCATAMARCARet",
		  details: "Finalización - Generación TXT CATAMARCA Retenciones"
		});
   
		retencionesCatamarca.contenidoTXT = contenidoTXT;
		return retencionesCatamarca;
	  }
   
	  function generarTXTMisionesRet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
		log.debug('generarTXTMisionesRet', 'Inicio - Generación TXT Retenciones Misiones - F2005');
   
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenPercepciones = false;
		var mensajeError = "Error Generando TXT de Retenciones";
		var descripcionError = "";
		var contenidoTXT = "";
		var procesoEncolado = false;
	  
		try {
		  var retencionesMisiones = new Object();
		  retencionesMisiones.retencion = new Object();
		  retencionesMisiones.sujeto = new Object();
		  retencionesMisiones.existenPercepciones = false;
		  retencionesMisiones.error = false;
		  retencionesMisiones.descripcionError = "";
		  retencionesMisiones.procesoEncolado = false;
		  retencionesMisiones.idLog = idRegistroLOG;
		  retencionesMisiones.contenidoTXT = "";
		  var refComprobante = '';
		  var idRetencionNetSuite = '';
	  
		  var resultadoTXTMisiones = { resultados: [], error: false };
		  resultadoTXTMisiones = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_misiones');
	  
		  if (!isEmpty(resultadoTXTMisiones)) {
			log.debug('generarTXTMisionesRet', 'Cantidad retenciones: ' + resultadoTXTMisiones.resultados.length);
   
			for (var i = 0; resultadoTXTMisiones != null && i < resultadoTXTMisiones.resultados.length; i++) {
	  
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = '';
			  retencionesMisiones.retencion = new Object();
			  // retencionesMisiones.sujeto = new Object();
			  refComprobante = '';
	  
			  var result = resultadoTXTMisiones.resultados[i];
			  var columns = result.columns;
	  
			  // Obtengo el Codigo de Comprobante (OP) y el ID de la retención
			  idRetencionNetSuite = result.getValue(columns[0]); // ID Retención
			  refComprobante = result.getValue(columns[1]); // ID orden de pago
	  
			  log.debug('generarTXTMisionesRet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);
   
			  // FECHA COMPROBANTE
			  if (!isEmpty(result.getValue(columns[2]))) {
				retencionesMisiones.retencion.fechaComprobante = result.getValue(columns[2]);
				// TIPO COMPROBANTE
				if (!isEmpty(result.getValue(columns[3]))) {
				  retencionesMisiones.retencion.tipoComprobante = result.getValue(columns[3]);
				  // NÚMERO COMPROBANTE
				  if (!isEmpty(result.getValue(columns[4]))) {
					retencionesMisiones.retencion.numeroComprobante = result.getValue(columns[4]);
					// RAZÓN SOCIAL
					if (!isEmpty(result.getValue(columns[5]))) {
					  retencionesMisiones.retencion.razonSocial = result.getValue(columns[5]);
					  // CUIT
					  if (!isEmpty(result.getValue(columns[6]))) {
						retencionesMisiones.retencion.cuit = result.getValue(columns[6]);
						// MONTO OPERACIÓN
						if (!isEmpty(result.getValue(columns[7]))) {
						  retencionesMisiones.retencion.montoOperacion = result.getValue(columns[7]);
						  // ALICUOTA
						  if (!isEmpty(result.getValue(columns[8]))) {
							retencionesMisiones.retencion.alicuota = result.getValue(columns[8]);
							// TIPO COMPROBANTE ORIGINAL
							retencionesMisiones.retencion.tipoComprobanteOriginal = result.getValue(columns[9]);
							// NÚMERO COMPROBANTE ORIGINAL
							retencionesMisiones.retencion.numeroComprobanteOriginal = result.getValue(columns[10]);
							// FECHA COMPROBANTE ORIGINAL
							retencionesMisiones.retencion.fechaComprobanteOriginal = result.getValue(columns[11]);
							// CUIT COMPROBANTE ORIGINAL
							retencionesMisiones.retencion.cuitComprobanteOriginal = result.getValue(columns[12]);			
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la ALICUOTA de la retención con ID: " + idRetencionNetSuite;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el MONTO OPERACIÓN de la retención con ID: " + idRetencionNetSuite;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la retención con ID: " + idRetencionNetSuite;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la RAZÓN SOCIAL de la retención con ID: " + idRetencionNetSuite;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el TIPO COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la FECHA COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
			  }
	  
			  // Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
			  /* nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
			  if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
				errorGlobal = true;
				descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
			  } */
	  
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionesMisiones.retencion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
	  
				  // contenidoTXT += retencionesMisiones.retencion.fechaComprobante + retencionesMisiones.retencion.tipoComprobante + retencionesMisiones.retencion.numeroComprobante +
				  // 	retencionesMisiones.retencion.razonSocial + retencionesMisiones.retencion.cuit + retencionesMisiones.retencion.montoOperacion +
				  // 	retencionesMisiones.retencion.alicuota + retencionesMisiones.retencion.tipoComprobanteOriginal + retencionesMisiones.retencion.numeroComprobanteOriginal +
				  // 	retencionesMisiones.retencion.fechaComprobanteOriginal + retencionesMisiones.retencion.cuitComprobanteOriginal;
				  contenidoTXT += retencionesMisiones.retencion.fechaComprobante + "," +
					retencionesMisiones.retencion.tipoComprobante + "," +
					retencionesMisiones.retencion.numeroComprobante + "," +
					retencionesMisiones.retencion.razonSocial + "," +
					retencionesMisiones.retencion.cuit + "," +
					retencionesMisiones.retencion.montoOperacion + "," +
					retencionesMisiones.retencion.alicuota + "," +
					retencionesMisiones.retencion.tipoComprobanteOriginal + "," +
					retencionesMisiones.retencion.numeroComprobanteOriginal + "," +
					retencionesMisiones.retencion.fechaComprobanteOriginal + "," +
					retencionesMisiones.retencion.cuitComprobanteOriginal;
					
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Retención";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Información de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones: ' + descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
	  
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000);
			}
	  
			if (errorGeneral == false) {
			  if (existenPercepciones == false) {
				if (!isEmpty(resultadoTXTMisiones) && resultadoTXTMisiones.resultados.length == 0) {
				  // No se Encontraron Retenciones para el Período
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT Misiones Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
				} else {
				  // Error Obteniendo Retenciones
				  errorGeneral = true;
				  log.error('generarTXTMisionesRet', 'Error Obteniendo Retenciones Misiones Retenciones');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Resultados para el TXT Misiones Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  }
			}
		  }
	  
		  // TXT Anulaciñon de retenciones
		  var resultadoTXTMisionesAnulacion = { resultados: [], error: false };
		  resultadoTXTMisionesAnulacion = savedSearchUtility('custrecord_l54_anul_ret_fecha', periodo, 'custrecord_l54_anul_ret_subsidiaria', subsidiaria, 'customrecord_l54_anulacion_retencion', 'customsearch_l54_anulacion_ret_misiones');
	  
		  if (!isEmpty(resultadoTXTMisionesAnulacion)) {
			log.debug('generarTXTMisionesRet', 'Cantidad anulación retenciones: ' + resultadoTXTMisionesAnulacion.resultados.length);
   
			for (var i = 0; resultadoTXTMisionesAnulacion != null && i < resultadoTXTMisionesAnulacion.resultados.length; i++) { 
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  idRetencionNetSuite = '';
			  retencionesMisiones.retencion = new Object();
			  // retencionesMisiones.sujeto = new Object();
			  refComprobante = '';
	  
			  var result = resultadoTXTMisionesAnulacion.resultados[i];
			  var columns = result.columns;
	  
			  // Obtengo el Codigo de Comprobante (OP) y el ID de la anulación retención
			  idRetencionNetSuite = result.getValue(columns[0]); // ID Anulación Retención
			  refComprobante = result.getValue(columns[1]); // ID orden de pago
	  
			  log.debug('generarTXTMisionesRet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);
   
			  // FECHA COMPROBANTE
			  if (!isEmpty(result.getValue(columns[2]))) {
				retencionesMisiones.retencion.fechaComprobante = result.getValue(columns[2]);
				// TIPO COMPROBANTE
				if (!isEmpty(result.getValue(columns[3]))) {
				  retencionesMisiones.retencion.tipoComprobante = result.getValue(columns[3]);
				  // NÚMERO COMPROBANTE
				  if (!isEmpty(result.getValue(columns[4]))) {
					retencionesMisiones.retencion.numeroComprobante = result.getValue(columns[4]);
					// RAZÓN SOCIAL
					if (!isEmpty(result.getValue(columns[5]))) {
					  retencionesMisiones.retencion.razonSocial = result.getValue(columns[5]);
					  // CUIT
					  if (!isEmpty(result.getValue(columns[6]))) {
						retencionesMisiones.retencion.cuit = result.getValue(columns[6]);
						// MONTO OPERACIÓN
						if (!isEmpty(result.getValue(columns[7]))) {
						  retencionesMisiones.retencion.montoOperacion = result.getValue(columns[7]);
						  // ALICUOTA
						  if (!isEmpty(result.getValue(columns[8]))) {
							retencionesMisiones.retencion.alicuota = result.getValue(columns[8]);
							// TIPO COMPROBANTE ORIGINAL
							if (!isEmpty(result.getValue(columns[9]))) {
							  retencionesMisiones.retencion.tipoComprobanteOriginal = result.getValue(columns[9]);
							  // NÚMERO COMPROBANTE ORIGINAL
							  if (!isEmpty(result.getValue(columns[10]))) {
								retencionesMisiones.retencion.numeroComprobanteOriginal = result.getValue(columns[10]);
								// FECHA COMPROBANTE ORIGINAL
								if (!isEmpty(result.getValue(columns[11]))) {
								  retencionesMisiones.retencion.fechaComprobanteOriginal = result.getValue(columns[11]);
								  // CUIT COMPROBANTE ORIGINAL
								  if (!isEmpty(result.getValue(columns[12]))) {
									retencionesMisiones.retencion.cuitComprobanteOriginal = result.getValue(columns[12]);
								  } else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el CUIT COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
								  }
								} else {
								  errorGlobal = true;
								  descripcionError = "Error Obteniendo la FECHA COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
								}
							  } else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
							  }
							} else {
							  errorGlobal = true;
							  descripcionError = "Error Obteniendo el TIPO COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
							}
						  } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la ALICUOTA de la anulación retención con ID: " + idRetencionNetSuite;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el MONTO OPERACIÓN de la anulación retención con ID: " + idRetencionNetSuite;
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la anulación retención con ID: " + idRetencionNetSuite;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo la RAZÓN SOCIAL de la anulación retención con ID: " + idRetencionNetSuite;
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Error Obteniendo el TIPO COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo la FECHA COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
			  }
	  
			  // Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
			  /* nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
			  if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
				errorGlobal = true;
				descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
			  } */
			  idRetencionNetSuite = '';
			  // Genero el Contenido
			  if (errorGlobal == false) {
				if (retencionesMisiones.retencion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
	  
				  // contenidoTXT += retencionesMisiones.retencion.fechaComprobante + retencionesMisiones.retencion.tipoComprobante + retencionesMisiones.retencion.numeroComprobante +
				  // 	retencionesMisiones.retencion.razonSocial + retencionesMisiones.retencion.cuit + retencionesMisiones.retencion.montoOperacion +
				  // 	retencionesMisiones.retencion.alicuota + retencionesMisiones.retencion.tipoComprobanteOriginal + retencionesMisiones.retencion.numeroComprobanteOriginal +
				  // 	retencionesMisiones.retencion.fechaComprobanteOriginal + retencionesMisiones.retencion.cuitComprobanteOriginal;
				  contenidoTXT += retencionesMisiones.retencion.fechaComprobante + "," +
					retencionesMisiones.retencion.tipoComprobante + "," +
					retencionesMisiones.retencion.numeroComprobante + "," +
					retencionesMisiones.retencion.razonSocial + "," +
					retencionesMisiones.retencion.cuit + "," +
					retencionesMisiones.retencion.montoOperacion + "," +
					retencionesMisiones.retencion.alicuota + "," +
					retencionesMisiones.retencion.tipoComprobanteOriginal + "," +
					retencionesMisiones.retencion.numeroComprobanteOriginal + "," +
					retencionesMisiones.retencion.fechaComprobanteOriginal + "," +
					retencionesMisiones.retencion.cuitComprobanteOriginal;
					
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo Información de la Anulación Retención";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}
			  } else {
				// Error Obteniendo Información de la Anulación Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones: ' + descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			  }
	  
			  // Verifico si debo Encolar el Proceso
			  // checkGovernance(1000);
			}
		  } else {
			log.debug('generarTXTMisionesRet', 'No se encontraron resultados para ANULACIÓN RETENCIONES');
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
		} catch (e) {
		  log.error('generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Misones Retenciones - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  retencionesMisiones = grabarError(true, 'Error Generando TXT Misiones Retenciones', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionesMisiones = grabarError(false, 'Generación de TXT Misiones Retenciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Misiones Retenciones Generadas Correctamente', null, null, subsidiaria);
		  }
		}
	  
		log.debug('generarTXTMisionesRet', 'Finalización - Generación TXT Misiones Retenciones');
   
		retencionesMisiones.contenidoTXT = contenidoTXT;
		return retencionesMisiones;
	  }
   
	  //[Listo=>Roger]
	  function numeroConstanciaFinalSIRCAR(objRecord) {
		const response = { error: false, mensaje: "", numeroConstancia: "" };
		try {
		  const nroTipoDocumentoReferencia = "1";
		  const letraTransaccionReferencia = objRecord.getValue("custbody_l54_letra");
		  const bocaTransaccionReferencia = objRecord.getValue("custbody_l54_boca");
		  let bocaTransaccionReferenciaFinal = "";
		  let letraTransaccionReferenciaFinal = "";
		  if (!isEmpty(bocaTransaccionReferencia) && !isEmpty(letraTransaccionReferencia)) {
			letraTransaccionReferenciaFinal = utilidades.getLookupFieldsSafe(search.lookupFields({
			  type: "customrecord_l54_letra_doc",
			  id: letraTransaccionReferencia,
			  columns: ["name"]
			}), "name");
			letraTransaccionReferenciaFinal = letraTransaccionReferenciaFinal.toString().substring(0, 1);
			bocaTransaccionReferenciaFinal = utilidades.getLookupFieldsSafe(search.lookupFields({
			  type: "customrecord_l54_bocas",
			  id: bocaTransaccionReferencia,
			  columns: ["name"]
			}), "name");
			bocaTransaccionReferenciaFinal = bocaTransaccionReferenciaFinal.toString().substr(-4);
			bocaTransaccionReferenciaFinal = padding_left(bocaTransaccionReferenciaFinal, "0", 4);
			const numeroTransaccionReferencia = !isEmpty(objRecord.getValue("custbody_l54_numero")) ? objRecord.getValue("custbody_l54_numero") : "0";
			const numeroTransaccionReferenciaFinal = padding_left(numeroTransaccionReferencia, "0", 8);
			response.numeroConstancia = nroTipoDocumentoReferencia + letraTransaccionReferenciaFinal + bocaTransaccionReferenciaFinal + numeroTransaccionReferenciaFinal;
		  } else {
			response.error = true;
			response.mensaje = "Error consultando el punto de venta y la letra de la transacción de referencia de la nota de crédito con ID INTERNO: ";
		  }
		} catch (error) {
		  response.error = true;
		  response.mensaje = "Error Excepción NetSuite - Detalles: " + error.message;
		}
		return response;
	  }
  
	  function generarTxtPercepSircreb(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
   
		log.debug('generarTxtPercRET-SIRCREB', 'Inicio - Generación TXT Percepciones RET-SIRCREB');
		var procesoEncolado = false;
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenPercepciones = false;
		var mensajeError = "Error Generando TXT de Percepciones RET-SIRCREB";
		var descripcionError = "";
		var tipoComprobanteNS = "";
		var contenidoTXT = "";
		var refComprobante = "";
	  
		try {
		  var arrayPercepRetSircreb = new Object();
		  arrayPercepRetSircreb.percepcion = new Object();
		  arrayPercepRetSircreb.sujeto = new Object();
		  arrayPercepRetSircreb.existenPercepciones = false;
		  arrayPercepRetSircreb.error = false;
		  arrayPercepRetSircreb.descripcionError = "";
		  arrayPercepRetSircreb.procesoEncolado = false;
		  arrayPercepRetSircreb.idLog = idRegistroLOG;
		  arrayPercepRetSircreb.contenidoTXT = "";
	  
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  var iCont = 0;
		  var arrayFilters = new Array();
		  //arrayFilters[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			arrayFilters[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
	  
		  if (!isEmpty(subsidiaria))
			arrayFilters[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
	  
		  var search1 = search.load({
			id: "customsearch_l54_ret_txt_sir_2",
			type: "transaction"
		  });
		  search1.filters.push(...arrayFilters);
		  var searchResults = search1.run();
	  
		  var resultPercepcionesRetSircreb = [];
	  
		  // resultIndex points to record starting current "resultado" in the entire results array
		  var resultIndex = 0;
		  var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  var resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
   
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultPercepcionesRetSircreb = resultado; //Primera ve inicializa
			  else
				resultPercepcionesRetSircreb = resultPercepcionesRetSircreb.concat(resultado);
			}
	  
			// increase pointer
			resultIndex = resultIndex + resultStep;
	  
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
	  
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0)
	  
		  // FIN Obtener la Informacion de PERCEPCIONES
	  
		  var informacionResultado = new Array();
		  var indiceArray = 0;
	  
		  log.debug('generarTxtPercepRetSircreb', 'INICIO Recorrer Percepciones');
	  
		  for (var i = 0; resultPercepcionesRetSircreb != null && i < resultPercepcionesRetSircreb.length; i++) {
			var result = resultPercepcionesRetSircreb[i];
			var columns = result.columns;
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].codJurisdiccion = result.getValue(columns[1]);
			informacionResultado[indiceArray].cuitAgenteRet = result.getValue(columns[2]);
			informacionResultado[indiceArray].periodoRet = result.getValue(columns[3]);
			informacionResultado[indiceArray].cbu = result.getValue(columns[4]);
			informacionResultado[indiceArray].tipoCuenta = result.getValue(columns[5]);
			informacionResultado[indiceArray].tipoMoneda = result.getValue(columns[6]);
			informacionResultado[indiceArray].impRetenido = result.getValue(columns[7]);
	  
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
	  
		  log.debug('generarTxtPercepRetSircreb', 'INICIO Ordenar' + JSON.stringify(informacionResultado));
	  
		  // Ordenar Array
		  var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.periodoRet > b.periodoRet)
			  return 1;
			if (a.periodoRet < b.periodoRet)
			  return -1;
			return 0;
		  };
	  
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
	  
		  if (!isEmpty(informacionResultado)) {
	  
			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
	  
			  arrayPercepRetSircreb.percepcion = new Object();
			  arrayPercepRetSircreb.sujeto = new Object();
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  refComprobante = informacionResultado[i].idInterno;
	  
			  if (!isEmpty(informacionResultado[i].codJurisdiccion)) {
				arrayPercepRetSircreb.percepcion.codJurisdiccion = informacionResultado[i].codJurisdiccion;
				  if (!isEmpty(informacionResultado[i].cuitAgenteRet)) {
					arrayPercepRetSircreb.percepcion.cuitAgenteRet = informacionResultado[i].cuitAgenteRet;
					if (!isEmpty(informacionResultado[i].periodoRet)) {
					  arrayPercepRetSircreb.percepcion.periodoRet = informacionResultado[i].periodoRet;
					  if (!isEmpty(informacionResultado[i].cbu)) {
						arrayPercepRetSircreb.percepcion.cbu = informacionResultado[i].cbu;
						if (!isEmpty(informacionResultado[i].tipoCuenta)) {
						  arrayPercepRetSircreb.percepcion.tipoCuenta = informacionResultado[i].tipoCuenta;
						  if (!isEmpty(informacionResultado[i].tipoMoneda)) {
							arrayPercepRetSircreb.percepcion.tipoMoneda = informacionResultado[i].tipoMoneda;
							if (!isEmpty(informacionResultado[i].impRetenido) && parseFloat(informacionResultado[i].impRetenido) > 0) {
							  arrayPercepRetSircreb.percepcion.impRetenido = informacionResultado[i].impRetenido;
							} else {
							  errorGlobal = true;
							  descripcionError = 'El campo Importe Retenido es obligatorio.' ;
							}
						  } else {
							errorGlobal = true;
							descripcionError = 'El campo Tipo de Moneda son obligatorios.' ;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = 'El campo Tipo de cuenta es obligatorio.' ;
						}
					  } else {
						errorGlobal = true;
						descripcionError = 'El campo CBU es obligatorio.' ;
					  }
					} else {
						errorGlobal = true;
					  descripcionError = 'El campo Periodo es obligatorio.' ;
					}
				  } else {
					errorGlobal = true;
					descripcionError = 'El campo Cuit Agente de Retención es obligatorio.' ;
				  }
			  } else {
				errorGlobal = true;
				descripcionError = 'El campo Código de jurisdicción es obligatorio.' ;
			  }
	  
			  if(!errorGlobal){
				// Genero el Contenido
				if (arrayPercepRetSircreb.percepcion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  var error = false;
				  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += arrayPercepRetSircreb.percepcion.codJurisdiccion + arrayPercepRetSircreb.percepcion.cuitAgenteRet + arrayPercepRetSircreb.percepcion.periodoRet + arrayPercepRetSircreb.percepcion.cbu + arrayPercepRetSircreb.percepcion.tipoCuenta +
					arrayPercepRetSircreb.percepcion.tipoMoneda + arrayPercepRetSircreb.percepcion.impRetenido;
	  
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepción";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}
	  
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('Proceso Generacion TXT', descripcionError);
				log.error('Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
			  }
			  
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
	  
			}
	  
			if (errorGeneral == false) {
	  
			  if (existenPercepciones == false) {
	  
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT de Percepciones SIRCREB Correcta', null, refComprobante, subsidiaria);
	  
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  } else {
			log.debug('generarTxtPercepSircreb', 'No se encontraron Percepciones');
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
	  
		} catch (e) {
		  log.error('generarTxtPercepSircreb', 'Error Generando TXT Percepciones SIRCREB - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Percepciones SIRCREB - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  arrayPercepRetSircreb = grabarError(true, 'Error Generando TXT de Percepciones SIRCREB', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  arrayPercepRetSircreb = grabarError(false, 'Generacion de TXT de Percepciones SIRCREB Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		  }
		}
	  
		log.debug('generarTxtPercepSircreb', 'Finalización - Generación TXT Percepciones SIRCREB');
		arrayPercepRetSircreb.contenidoTXT = contenidoTXT;
		return arrayPercepRetSircreb;
	  }
  
	  function generarTxtPercepRetSirtac(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
   
		log.debug('generarTxtPercRET-SIRTAC', 'Inicio - Generación TXT Percepciones RET-SIRTAC');
		var procesoEncolado = false;
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenPercepciones = false;
		var mensajeError = "Error Generando TXT de Percepciones RET-SIRTAC";
		var descripcionError = "";
		var tipoComprobanteNS = "";
		var contenidoTXT = "";
		var refComprobante = "";
	  
		try {
		  var arrayPercepRetSirtac = new Object();
		  arrayPercepRetSirtac.percepcion = new Object();
		  arrayPercepRetSirtac.sujeto = new Object();
		  arrayPercepRetSirtac.existenPercepciones = false;
		  arrayPercepRetSirtac.error = false;
		  arrayPercepRetSirtac.descripcionError = "";
		  arrayPercepRetSirtac.procesoEncolado = false;
		  arrayPercepRetSirtac.idLog = idRegistroLOG;
		  arrayPercepRetSirtac.contenidoTXT = "";
	  
		  // INICIO Obtener la Informacion de PERCEPCIONES
		  var iCont = 0;
		  var arrayFilters = new Array();
		  //arrayFilters[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			arrayFilters[iCont++] = search.createFilter({
			  name: "trandate",
			  operator: search.Operator.WITHIN,
			  values: [periodo.fDesde, periodo.fHasta]
			});
		  }
	  
		  if (!isEmpty(subsidiaria))
			arrayFilters[iCont++] = search.createFilter({
			  name: "subsidiary",
			  operator: search.Operator.IS,
			  values: subsidiaria
			});
	  
		  var search1 = search.load({
			id: "customsearch_l54_ret_txt_sir",
			type: "transaction"
		  });
		  search1.filters.push(...arrayFilters);
		  var searchResults = search1.run();
	  
		  var resultPercepcionesRetSirtac = [];
	  
		  // resultIndex points to record starting current "resultado" in the entire results array
		  var resultIndex = 0;
		  var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  var resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			resultado = searchResults.getRange({
			  start: resultIndex,
			  end: resultIndex + resultStep
			});
   
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				resultPercepcionesRetSirtac = resultado; //Primera ve inicializa
			  else
				resultPercepcionesRetSirtac = resultPercepcionesRetSirtac.concat(resultado);
			}
	  
			// increase pointer
			resultIndex = resultIndex + resultStep;
	  
			// Verifico si debo Encolar el Proceso
			//checkGovernance(1000);
	  
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0)
	  
		  // FIN Obtener la Informacion de PERCEPCIONES
	  
		  var informacionResultado = new Array();
		  var indiceArray = 0;
	  
		  log.debug('generarTxtPercepRetSirtac', 'INICIO Recorrer Percepciones');
	  
		  for (var i = 0; resultPercepcionesRetSirtac != null && i < resultPercepcionesRetSirtac.length; i++) {
			var result = resultPercepcionesRetSirtac[i];
			var columns = result.columns;
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].codJurisdiccion = result.getValue(columns[1]);
			informacionResultado[indiceArray].cuitAgenteRet = result.getValue(columns[2]);
			informacionResultado[indiceArray].fechaRet = result.getValue(columns[3]);
			informacionResultado[indiceArray].numSucursal = result.getValue(columns[4]);
			informacionResultado[indiceArray].numConstancia = result.getValue(columns[5]);
			informacionResultado[indiceArray].letraTipoComprobante = result.getValue(columns[6]);
			informacionResultado[indiceArray].impRetenido = result.getValue(columns[7]);
	  
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		  }
	  
		  log.debug('generarTxtPercepRetSirtac', 'INICIO Ordenar' + JSON.stringify(informacionResultado));
	  
		  // Ordenar Array
		  var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaRet > b.fechaRet)
			  return 1;
			if (a.fechaRet < b.fechaRet)
			  return -1;
			return 0;
		  };
	  
		  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		  }
	  
		  if (!isEmpty(informacionResultado)) {
	  
			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
	  
			  arrayPercepRetSirtac.percepcion = new Object();
			  arrayPercepRetSirtac.sujeto = new Object();
			  // Obtengo el Codigo de Comprobante
			  existenPercepciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  refComprobante = informacionResultado[i].idInterno;
	  
			  if (!isEmpty(informacionResultado[i].codJurisdiccion)) {
				arrayPercepRetSirtac.percepcion.codJurisdiccion = informacionResultado[i].codJurisdiccion;
				  if (!isEmpty(informacionResultado[i].cuitAgenteRet)) {
					arrayPercepRetSirtac.percepcion.cuitAgenteRet = informacionResultado[i].cuitAgenteRet;
					if (!isEmpty(informacionResultado[i].fechaRet)) {
					  arrayPercepRetSirtac.percepcion.fechaRet = informacionResultado[i].fechaRet;
					  if (!isEmpty(informacionResultado[i].numSucursal)) {
						arrayPercepRetSirtac.percepcion.numSucursal = informacionResultado[i].numSucursal;
						if (!isEmpty(informacionResultado[i].numConstancia)) {
						  arrayPercepRetSirtac.percepcion.numConstancia = informacionResultado[i].numConstancia;
						  if (!isEmpty(informacionResultado[i].letraTipoComprobante)) {
							arrayPercepRetSirtac.percepcion.letraTipoComprobante = informacionResultado[i].letraTipoComprobante;
							if (!isEmpty(informacionResultado[i].impRetenido) && parseFloat(informacionResultado[i].impRetenido) > 0) {
							  arrayPercepRetSirtac.percepcion.impRetenido = informacionResultado[i].impRetenido;
							} else {
							  errorGlobal = true;
							  descripcionError = 'El campo Importe Retenido es obligatorio.' ;
							}
						  } else {
							errorGlobal = true;
							descripcionError = 'El campo Letra y Tipo son obligatorios.' ;
						  }
						} else {
						  errorGlobal = true;
						  descripcionError = 'El campo Número de constancia es obligatorio.' ;
						}
					  } else {
						errorGlobal = true;
						descripcionError = 'El campo Número de Sucursal es obligatorio.' ;
					  }
					} else {
						errorGlobal = true;
					  descripcionError = 'El campo Fecha es obligatorio.' ;
					}
				  } else {
					errorGlobal = true;
					descripcionError = 'El campo Cuit Agente de Retención es obligatorio.' ;
				  }
			  } else {
				errorGlobal = true;
				descripcionError = 'El campo Código de jurisdicción es obligatorio.' ;
			  }
	  
			  if(!errorGlobal){
				// Genero el Contenido
				if (arrayPercepRetSirtac.percepcion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  var error = false;
				  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
				  contenidoTXT += arrayPercepRetSirtac.percepcion.codJurisdiccion + arrayPercepRetSirtac.percepcion.cuitAgenteRet + arrayPercepRetSirtac.percepcion.fechaRet + arrayPercepRetSirtac.percepcion.numSucursal + arrayPercepRetSirtac.percepcion.numConstancia +
					arrayPercepRetSirtac.percepcion.letraTipoComprobante + arrayPercepRetSirtac.percepcion.impRetenido;
	  
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepción";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}
	  
			  }else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				log.error('Proceso Generacion TXT', descripcionError);
				log.error('Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
			}
			  
			  // Verifico si debo Encolar el Proceso
			  //checkGovernance(1000);
	  
			}
	  
			if (errorGeneral == false) {
	  
			  if (existenPercepciones == false) {
	  
				if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
				  // No se Encontraron Percepciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones SIRTAC Correcta', null, refComprobante, subsidiaria);
	  
				}
				/*else {
				  // Error Obteniendo Percepcion
				  errorGeneral = true;
				  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
				}*/
			  }
			}
		  } else {
			log.debug('generarTxtPercepSirtac', 'No se encontraron Percepciones');
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
	  
		} catch (e) {
		  log.error('generarTxtPercepSirtac', 'Error Generando TXT Percepciones SIRTAC - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT Percepciones SIRTAC - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  arrayPercepRetSirtac = grabarError(true, 'Error Generando TXT de Percepciones SIRTAC', existenPercepciones, procesoEncolado, idRegistroLOG);
		} else {
		  arrayPercepRetSirtac = grabarError(false, 'Generacion de TXT de Percepciones SIRTAC Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenPercepciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		  }
		}
	  
		log.debug('generarTxtPercepSirtac', 'Finalización - Generación TXT Percepciones SIRTAC');
		arrayPercepRetSirtac.contenidoTXT = contenidoTXT;
		return arrayPercepRetSirtac;
	  }
  
	  function generarTxtSipret(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
  
		log.debug('generarTxtSipret', 'Proceso Generacion TXT' + 'Inicio - Generacion TXT SIPRET RETENCIONES');
		var procesoEncolado = false;
		var idRegistroLOG = idLogErrores;
		var errorGlobal = false;
		var errorGeneral = false;
		var existenRetenciones = false;
		var mensajeError = "Error Generando TXT SIPRET RETENCIONES";
		var descripcionError = "";
		var tipoComprobanteNS = "";
		var marcaGenerarTXT = true;
		var errorParcial = false;
		var contenidoTXT = "";
	  
		try {
		  var retencionSIPRET = new Object();
		  retencionSIPRET.retencion = new Object();
		  retencionSIPRET.sujeto = new Object();
		  retencionSIPRET.existenRetenciones = false;
		  retencionSIPRET.error = false;
		  retencionSIPRET.descripcionError = "";
		  retencionSIPRET.procesoEncolado = false;
		  retencionSIPRET.idLog = idRegistroLOG;
		  retencionSIPRET.retencion.importeRetencion = 0;
		  retencionSIPRET.contenidoTXT = "";
	  
		  // Grabo Registro de TXT
		  var estadoGeneracionTXT = null;
	  
		  var filtro = new Array();
		  var i = 0;
	  
		  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = search.createFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		  }
		  if (!isEmpty(subsidiaria))
			filtro[i++] = search.createFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
		  //////////////
	  
		  var search = search.load({
			  id: "customsearch_l54_ret_sicore",
			  type: "customrecord_l54_retencion"
			});
		  search_.filters.push(...filtro);
		  const searchResults = search_.run();
		  let completeResultSet = [];
		  let resultIndex = 0;
		  const resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		  let resultado; // temporary variable used to store the result set
		  do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
	  
			if (!isEmpty(resultado) && resultado.length > 0) {
			  if (resultIndex == 0)
				completeResultSet = resultado; //Primera ve inicializa
			  else
				completeResultSet = completeResultSet.concat(resultado);
	  
				log.debug('generarTXT_SIPRET_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
	  
			}
	  
			// increase pointer
			resultIndex = resultIndex + resultStep;
	  
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);
	  
			// once no records are returned we already got all of them
		  } while (!isEmpty(resultado) && resultado.length > 0)
	  
		  if (!isEmpty(completeResultSet)) {
			log.debug('generarTXT_SIPRET - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);
	  
			for (i = 0; i < completeResultSet.length; i++) {
			  retencionSIPRET.retencion = new Object();
			  retencionSIPRET.sujeto = new Object();
			  var resultadoTXTRetencionesSIPRET = completeResultSet[i];
			  var columns = resultadoTXTRetencionesSIPRET.columns;
			  log.debug('generarTXT_SIPRET - Retenciones',  'resultadoTXTRetencionesSIPRET:' + JSON.stringify(resultadoTXTRetencionesSIPRET));
	  
			  existenRetenciones = true;
			  errorGlobal = false;
			  descripcionError = "";
			  var idPercepcionNetSuite = null;
			  var fechaRetencionDate = resultadoTXTRetencionesSIPRET.getValue(columns[6]);
			  if (!isEmpty(fechaRetencionDate)) {
				retencionSIPRET.retencion.fecha = fechaRetencionDate;
				var nroRetencion = resultadoTXTRetencionesSIPRET.getValue(columns[7]);
				if (!isEmpty(nroRetencion)) {
				  retencionSIPRET.retencion.nroRet = nroRetencion;
				  var refProveedor = resultadoTXTRetencionesSIPRET.getValue(columns[8]);
				  if (!isEmpty(refProveedor)) {
					retencionSIPRET.retencion.refProveedor = refProveedor;
					var cuitProveedor = resultadoTXTRetencionesSIPRET.getValue(columns[4]);
					if (!isEmpty(cuitProveedor)) {
					  retencionSIPRET.retencion.cuitProveedor = cuitProveedor;
					  var nPadron = resultadoTXTRetencionesSIPRET.getValue(columns[11]);
					  if (!isEmpty(nPadron)) {
						retencionSIPRET.retencion.nPadron = nPadron;
						var importeRet = resultadoTXTRetencionesSIPRET.getValue(columns[9]);
						if (!isEmpty(importeRet)) {
						  retencionSIPRET.retencion.importeRet = importeRet;
						} else {
						  errorGlobal = true;
						  descripcionError = "Error Obteniendo el Importe Retención";
						}
					  } else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Número Padrón";
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = "Error Obteniendo CUIT Proveedor";
					}
				  } else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Referencia Provedor";
				  }
				} else {
				  errorGlobal = true;
				  descripcionError = "Numero de Retención Invalido";
				}
			  } else {
				errorGlobal = true;
				descripcionError = "Error Obteniendo Fecha Retención";
			  }
	  
			  // Genero el Contenido
			  if (errorGlobal == false) {
	  
				if (retencionSIPRET.retencion != null) {
	  
				  // Genero Contenido
				  if (!isEmpty(contenidoTXT)) {
					contenidoTXT += "\r\n";
				  }
				  var error = false;
				  var descripcionMensaje = "TXT Retenciones Generado Correctamente";
				  contenidoTXT += retencionSIPRET.retencion.fecha + '@' + retencionSIPRET.retencion.nroRet + '@' + retencionSIPRET.retencion.refProveedor + '@' + retencionSIPRET.retencion.cuitProveedor + '@' + retencionSIPRET.retencion.nPadron + '@' + retencionSIPRET.retencion.importeRet + '@';
	  
				  // Grabo Registro de TXT
				  /*var estadoGeneracionTXT = null;
	  
				  estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);
	  
				  if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
				  // Error Generando TXT
				  error = true;
				  descripcionMensaje = "Error Generando TXT Percepciones";
				  if (isEmpty(estadoGeneracionTXT))
				  descripcionMensaje = estadoGeneracionTXT.descripcionError;
				  errorGeneral = true;
				  descripcionError = descripcionMensaje;
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				  }*/
	  
				} else {
				  errorGeneral = true;
				  descripcionError = "Error Obteniendo informacion de la Percepcion";
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
				}
	  
			  } else {
				// Error Obteniendo Informacion de Retenciones
				// Grabo el Error en NetSuite
				errorGeneral = true;
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIPRET');
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
			  }
	  
			  // Verifico si debo Encolar el Proceso
			  checkGovernance(1000);
			}
			if (errorGeneral == false) {
	  
			  if (existenRetenciones == false) {
	  
				if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
				  // No se Encontraron Retenciones para el Periodo
				  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idPercepcionNetSuite, nroRetencion, subsidiaria);
	  
				} else {
				  // Error Obteniendo Percepciones
				  errorGeneral = true;
				  log.error('Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRET');
				  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idPercepcionNetSuite, nroRetencion, subsidiaria);
				}
			  }
			}
		  }
	  
		  if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		  }
	  
		} catch (e) {
		  log.error('Proceso Generacion TXT', 'Error Generando TXT SIPRET - Error : ' + e.message);
		  errorGeneral = true;
		  descripcionError = "Error Generando TXT SIPRET - Error : " + e.message;
		  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
		}
	  
		if (errorGeneral == true) {
		  retencionSIPRET = grabarError(true, 'Error Generando TXT de Retenciones - SIPRET', existenRetenciones, procesoEncolado, idRegistroLOG);
		} else {
		  retencionSIPRET = grabarError(false, 'Generacion de TXT de Retenciones Correcta - SIPRET', existenRetenciones, procesoEncolado, idRegistroLOG);
		  if (procesoEncolado == false) {
			if (existenRetenciones == true)
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente - SIPRET', null, null, subsidiaria);
		  }
		}
	  
		log.debug('Proceso Generacion TXT - SIPRET', 'Finalizacion - Generación TXT SIPRET Retenciones');
	  
		retencionSIPRET.contenidoTXT = contenidoTXT;
		return retencionSIPRET;
	  }
  
	  return {
		execute: execute
	  };
	});