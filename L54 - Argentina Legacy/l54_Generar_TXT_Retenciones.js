/* Generacion TXT REtenciones y Percepciones */
/* 3ksys - Argentina */
/* auxiliar functions - txt process */
/* **************************** */

// Para Formatear a MONEDA

Number.prototype.formatMoney = function (decPlaces, thouSeparator, decSeparator) {
	var n = this,
		decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
		decSeparator = decSeparator == undefined ? "." : decSeparator,
		thouSeparator = thouSeparator == undefined ? "" : thouSeparator, // decia ","
		sign = n < 0 ? "-" : "",
		i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
		j = (j = i.length) > 3 ? j % 3 : 0;
	return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
};

String.prototype.formatMoney = function (decPlaces, thouSeparator, decSeparator) {
	var n = this,
		decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
		decSeparator = decSeparator == undefined ? "." : decSeparator,
		thouSeparator = thouSeparator == undefined ? "" : thouSeparator, // decia ","
		sign = n < 0 ? "-" : "",
		i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
		j = (j = i.length) > 3 ? j % 3 : 0;
	return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
};

Number.prototype.toFixedOK = function (decimals) {
	var sign = this >= 0 ? 1 : -1;
	return (Math.round((this * Math.pow(10, decimals)) + (sign * 0.001)) / Math.pow(10, decimals)).toFixed(decimals);
};
// version vieja
// function numberTruncTwoDec(nStr) {
// 	x = nStr.toString().split('.');
// 	x1 = x[0];
// 	x2 = x.length > 1 ? '.' + x[1] : '.00';
// 	x2 = x2.length < 3 ? x2 + '0' : x2.substring(0, 3);
// 	return x1 + x2;
// }

function numberTruncTwoDec(nStr) {
	return parseFloat(nStr, 10).toFixedOK(2);
}

// Función que sirve para retornar cuantos decimales posee un número
function countDecimales(number) {

	var cantidadDecimales = 0;

	if (!isEmpty(number)) {
		var arrayNumber = parseFloat(number, 10).toString().split('.');
		cantidadDecimales = (arrayNumber.length == 2) ? arrayNumber[1].length : 0;
	}

	return cantidadDecimales;
}

// Función que sirve para eliminar el separador decimal y transformar un número en entero.
function convertToInteger(number) {

	var numberConvert = 0.0;

	if (!isEmpty(number))
		numberConvert = parseFloat(number, 10).toString().replace('.', '');

	return parseFloat(numberConvert, 10);
}

// FUNCTION: isEmpty
function isEmpty(value) {

	if (value === '') {
		return true;
	}

	if (value === '- None -') {
		return true;
	}

	if (value === null) {
		return true;
	}

	if (value === 'null') {
		return true;
	}

	if (value === undefined) {
		return true;
	}

	if (value === 'undefined') {
		return true;
	}

	return false;
}

function esOneworld() {
	var filters = [new nlobjSearchFilter('isinactive', null, 'is', 'F'),
	new nlobjSearchFilter('custrecord_l54_es_oneworld', null, 'is', 'T')];

	var searchresults = new nlapiSearchRecord("customrecord_l54_datos_impositivos_emp", null, filters, null);

	if (searchresults != null && searchresults.length > 0)
		return true;
	else
		return false;
}

/*function pad(width, string, padding) {

return (width <= string.length) ? string : pad(width, padding + string, padding);
}

function padV2(n, width, z) {

z = z || '0';
n = n + '';
return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}*/

function pad(number, length) {

	var str = '' + number;
	while (str.length < length) {
		str = '0' + str;
	}
	return str;
}

// left padding s with c to a total of n chars
// padding_left('eureka', '*', 10)
function padding_left(s, c, n) {

	if (!s || !c || s.toString().length >= n) {
		return s;
	}
	var max = (n - s.toString().length) / c.toString().length;
	for (var i = 0; i < max; i++) {
		s = c + s;
	}
	return s;
}

// right padding s with c to a total of n chars
// padding_right('eureka', '*', 10)
function padding_right(s, c, n) {

	if (!s || !c || s.toString().length >= n) {
		return s;
	}
	var max = (n - s.toString().length) / c.toString().length;
	for (var i = 0; i < max; i++) {
		s += c;
	}
	return s;
}

/*var STR_PAD_LEFT = 1;
var STR_PAD_RIGHT = 2;
var STR_PAD_BOTH = 3;

function pad(str, len, pad, dir) {

if (typeof(len) == "undefined") {
var len = 0;
}
if (typeof(pad) == "undefined") {
var pad = ' ';
}
if (typeof(dir) == "undefined") {
var dir = STR_PAD_RIGHT;
}

if (len + 1 >= str.length) {

switch (dir) {

case STR_PAD_LEFT:
str = Array(len + 1 - str.length).join(pad) + str;
break;

case STR_PAD_BOTH:
var right = Math.ceil((padlen = len - str.length) / 2);
var left = padlen - right;
str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);
break;

default:
str = str + Array(len + 1 - str.length).join(pad);
break;

} // switch

}

return str;

}*/

var normalize = (function () {
	var from = "ÃÀÁÄÂÈÉËÊÌÍÏÎÒÓÖÔÙÚÜÛãàáäâèéëêìíïîòóöôùúüûÑñÇç°º",
		to = "AAAAAEEEEIIIIOOOOUUUUaaaaaeeeeiiiioooouuuunncc  ",
		mapping = {};

	for (var i = 0, j = from.length; i < j; i++)
		mapping[from.charAt(i)] = to.charAt(i);

	return function (str) {
		var ret = [];
		for (var i = 0, j = str.length; i < j; i++) {
			var c = str.charAt(i);
			if (mapping.hasOwnProperty(str.charAt(i)))
				ret.push(mapping[c]);
			else
				ret.push(c);
		}
		return ret.join('');
	}

})();

function enviarEmailUsuarioLogueado(email, asunto, contenido, idAutor, archivoTXT, archivoSujeto, archivoNotasCredito, archivoTXTPercepciones, archivoTXTRetenciones) {
	if (!isEmpty(idAutor)) {
		var attachments = null;
		attachments = [];
		if (!isEmpty(archivoTXT)) {
			attachments.push(archivoTXT);
		}
		if (!isEmpty(archivoSujeto)) {
			attachments.push(archivoSujeto);
		}
		if (!isEmpty(archivoNotasCredito)) {
			attachments.push(archivoNotasCredito);
		}
		if (!isEmpty(archivoTXTPercepciones)) {
			attachments.push(archivoTXTPercepciones);
		}
		if (!isEmpty(archivoTXTRetenciones)) {
			attachments.push(archivoTXTRetenciones);
		}
		nlapiSendEmail(idAutor, email, asunto, contenido, null, null, null, attachments);
	}
}

function isPersonProveedor(id_proveedor) {
	var filters = new Array();
	filters[0] = new nlobjSearchFilter('internalid', null, 'is', id_proveedor);
	var columns = new Array();
	columns[0] = new nlobjSearchColumn('isperson');

	var results = new nlapiSearchRecord('vendor', null, filters, columns);
	var tipo_proveedor = results[0].getValue('isperson');
	return tipo_proveedor;
}

function countryProveedor(id_country) {
	var filters = new Array();
	filters[0] = new nlobjSearchFilter('internalid', null, 'is', id_country);
	var columns = new Array();
	columns[0] = new nlobjSearchColumn('custrecord_l54_cod_pais_fex');

	var results = new nlapiSearchRecord('customrecord_l54_paises_fex', null, filters, columns);
	var codigo_pais = results[0].getValue('custrecord_l54_cod_pais_fex');
	return codigo_pais;
}

/* Funcion Para Generar los TXT de Retenciones */
function generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idLogErrores, idRetencionNetSuite, subsidiaria) {
	var estadoGeneracionTXT = new Object();
	estadoGeneracionTXT.errorGeneracion = false;
	estadoGeneracionTXT.descripcionError = "";

	// Obtengo la Informacion
	if (!isEmpty(periodo) && !isEmpty(tipoOperacion) && !isEmpty(tipoRegimen) && !isEmpty(contenidoTXT)) {

		// Genero los Registros Nuevos

		try {
			var recordTXTRetencion = nlapiCreateRecord('customrecord_l54_inf_txt_retenciones');
			recordTXTRetencion.setFieldValue('custrecord_l54_inf_txt_ret_periodo', periodo);
			recordTXTRetencion.setFieldValue('custrecord_l54_inf_txt_ret_operacion', tipoOperacion);
			recordTXTRetencion.setFieldValue('custrecord_l54_inf_txt_ret_regimen', tipoRegimen);
			recordTXTRetencion.setFieldValue('custrecord_l54_inf_txt_ret_contenido', contenidoTXT);
			if (!isEmpty(subsidiaria))
				recordTXTRetencion.setFieldValue('custrecord_l54_inf_txt_ret_subsidiaria', subsidiaria);
			var idRTXTR = nlapiSubmitRecord(recordTXTRetencion);
		} catch (e) {
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Se produjo el siguiente error mientras se Generaban los Registros : ' + e.message);
			estadoGeneracionTXT.errorGeneracion = true;
			estadoGeneracionTXT.descripcionError = "Error Generando TXT";
		}

	} else {
		estadoGeneracionTXT.errorGeneracion = true;
		estadoGeneracionTXT.descripcionError = "Error Generando TXT";
	}

	return estadoGeneracionTXT;
}

/* Funcion Para Generar los TXT de los Sujetos Retenidos */
function generarTXTSujetos(periodo, tipoOperacion, tipoRegimen, idSujeto, contenidoTXT, idLogErrores, idRetencionNetSuite, subsidiaria) {

	var estadoGeneracionTXTSujetos = new Object();
	estadoGeneracionTXTSujetos.errorGeneracion = false;
	estadoGeneracionTXTSujetos.descripcionError = "";

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Sujetos Retenidos', 'Inicio');

	// Obtengo la Informacion
	if (!isEmpty(periodo) && !isEmpty(tipoOperacion) && !isEmpty(tipoRegimen) && !isEmpty(idSujeto) && !isEmpty(contenidoTXT)) {
		// Genero los Registros Nuevos de los Sujetos Retenidos

		try {

			// Busco si ya esta cargado el Sujeto para No Duplicarlo
			var filtroTXTSujetos = new Array();
			filtroTXTSujetos[0] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_periodo', null, 'is', periodo);
			filtroTXTSujetos[1] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_operacion', null, 'is', tipoOperacion);
			filtroTXTSujetos[2] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_regimen', null, 'is', tipoRegimen);
			filtroTXTSujetos[3] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_sujeto', null, 'is', idSujeto);
			if (!isEmpty(subsidiaria))
				filtroTXTSujetos[4] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_subsidiaria', null, 'is', subsidiaria);

			var columnaTXTSujetos = new nlobjSearchColumn('internalid');

			var resultadoTXTSujetos = new nlapiSearchRecord('customrecord_l54_inf_txt_sujetos', null, filtroTXTSujetos, columnaTXTSujetos);

			if (isEmpty(resultadoTXTSujetos) || (!isEmpty(resultadoTXTSujetos) && isEmpty(resultadoTXTSujetos.length)) || (!isEmpty(resultadoTXTSujetos) && !isEmpty(resultadoTXTSujetos.length) && resultadoTXTSujetos.length == 0)) {

				var recordTXTSujeto = nlapiCreateRecord('customrecord_l54_inf_txt_sujetos');
				recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_periodo', periodo);
				recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_operacion', tipoOperacion);
				recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_regimen', tipoRegimen);
				recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_sujeto', idSujeto);
				recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_contenido', contenidoTXT);
				if (!isEmpty(subsidiaria))
					recordTXTSujeto.setFieldValue('custrecord_l54_inf_txt_suj_subsidiaria', subsidiaria);

				var idRTXTS = nlapiSubmitRecord(recordTXTSujeto);

			}
		} catch (e) {
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT Sujetos Retenidos', 'Se produjo el siguiente error mientras se Generaban los Sujetos Retenidos : ' + e.message);
			estadoGeneracionTXTSujetos.errorGeneracion = true;
			estadoGeneracionTXTSujetos.descripcionError = "Error Generando TXT Sujetos Retenidos";
		}

	} else {
		estadoGeneracionTXTSujetos.errorGeneracion = true;
		estadoGeneracionTXTSujetos.descripcionError = "Error Generando TXT Sujetos Retenidos";
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Sujetos Retenidos', 'Finalizacion');

	return estadoGeneracionTXTSujetos;
}

function eliminarSujetosRetenidos(periodo, tipoOperacion, tipoRegimen, ultimoSujetoEliminado, context, idLogErrores, url, separadorDecimal, separadorMiles, email, subsidiaria) {

	var estadoEliminacionTXTSujetos = new Object();
	estadoEliminacionTXTSujetos.errorEliminacion = false;
	estadoEliminacionTXTSujetos.descripcionError = "";
	estadoEliminacionTXTSujetos.procesoEncolado = false;

	nlapiLogExecution('DEBUG', 'Proceso Eliminacion TXT Sujetos Retenidos', 'Inicio');

	// Obtengo la Informacion
	if (!isEmpty(periodo) && !isEmpty(tipoOperacion) && !isEmpty(tipoRegimen)) {

		// Elimino Registros del Mismo Periodo,TipoOperacion y Tipo Regimen
		//try {
		var iCont = 0;
		var filtroTXTSujetos = new Array();
		filtroTXTSujetos[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_periodo', null, 'is', periodo);
		filtroTXTSujetos[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_operacion', null, 'is', tipoOperacion);
		filtroTXTSujetos[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_regimen', null, 'is', tipoRegimen);
		if (!isEmpty(ultimoSujetoEliminado))
			filtroTXTSujetos[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimoSujetoEliminado, 10));

		if (!isEmpty(subsidiaria)) {
			filtroTXTSujetos[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_suj_subsidiaria', null, 'is', subsidiaria);
		}

		var columnaTXTSujetos = new nlobjSearchColumn('internalid').setSort();

		var resultadoTXTSujetos = new nlapiSearchRecord('customrecord_l54_inf_txt_sujetos', null, filtroTXTSujetos, columnaTXTSujetos);

		var completeResultSujetos = resultadoTXTSujetos;
		while (resultadoTXTSujetos != null && resultadoTXTSujetos.length == 1000) {
			var lastId = resultadoTXTSujetos[999].getValue('internalid');
			filtroTXTSujetos[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', lastId);
			resultadoTXTSujetos = new nlapiSearchRecord('customrecord_l54_inf_txt_sujetos', null, filtroTXTSujetos, columnaTXTSujetos);
			completeResultSujetos = completeResultSujetos.concat(resultadoTXTSujetos);
		}

		var errorEliminacion = false;
		var procesoEncolado = false;

		for (var i = 0; completeResultSujetos != null && i < completeResultSujetos.length && errorEliminacion == false && procesoEncolado == false; i++) {

			var searchresult = completeResultSujetos[i];
			var idInternoTXTSujeto = searchresult.getValue('internalid');

			if (!isEmpty(idInternoTXTSujeto) && idInternoTXTSujeto > 0) {
				try {

					nlapiDeleteRecord('customrecord_l54_inf_txt_sujetos', idInternoTXTSujeto);

					checkGovernance(1000);

				} catch (e) {
					nlapiLogExecution('ERROR', 'Proceso Eliminacion TXT Sujetos Retenidos', 'Error Eliminando TXT de Sujetos Retenidos : ' + e.message);
					errorEliminacion = true;
					estadoEliminacionTXTSujetos.errorEliminacion = true;
					estadoEliminacionTXTSujetos.descripcionError = "Error Eliminando TXT Sujetos Retenidos";
					// Grabo el Error en NetSuite
					//grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idLogErrores, 'Error Eliminando Sujetos Retenidos', null);
				}

			}

		}
		/*} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones SICORE', 'Se produjo el siguiente error mientras se Eliminaban Sujetos Retenidos : ' + e.message);
		estadoEliminacionTXTSujetos.errorEliminacion = true;
		estadoEliminacionTXTSujetos.descripcionError = "Error Eliminando TXT Sujetos Retenidos";
		}*/

	} else {
		estadoEliminacionTXTSujetos.errorEliminacion = true;
		estadoEliminacionTXTSujetos.descripcionError = "Error Eliminando TXT Sujetos Retenidos";
	}

	nlapiLogExecution('DEBUG', 'Proceso Eliminacion TXT Sujetos Retenidos', 'Finalizacion');

	return estadoEliminacionTXTSujetos;

}

function eliminarRetenciones(periodo, tipoOperacion, tipoRegimen, ultimoRetencionEliminada, context, idLogErrores, url, separadorDecimal, separadorMiles, email, proceso, subsidiaria) {

	var estadoEliminacionTXTRetenciones = new Object();
	estadoEliminacionTXTRetenciones.errorEliminacion = false;
	estadoEliminacionTXTRetenciones.descripcionError = "";
	estadoEliminacionTXTRetenciones.procesoEncolado = false;

	nlapiLogExecution('DEBUG', 'Proceso Eliminacion TXT', 'Inicio');

	// Obtengo la Informacion
	if (!isEmpty(periodo) && !isEmpty(tipoOperacion) && !isEmpty(tipoRegimen)) {

		// Elimino Registros del Mismo Periodo,TipoOperacion y Tipo Regimen
		//try {
		var iCont = 0;
		var filtroTXTRetencion = new Array();
		filtroTXTRetencion[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_ret_periodo', null, 'is', periodo);
		filtroTXTRetencion[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_ret_operacion', null, 'is', tipoOperacion);
		filtroTXTRetencion[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_ret_regimen', null, 'is', tipoRegimen);
		if (!isEmpty(ultimoRetencionEliminada))
			filtroTXTRetencion[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimoRetencionEliminada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencion[iCont++] = new nlobjSearchFilter('custrecord_l54_inf_txt_ret_subsidiaria', null, 'is', subsidiaria);

		var columnaTXTRetencion = new nlobjSearchColumn('internalid').setSort();

		var resultadoTXTRetencion = new nlapiSearchRecord('customrecord_l54_inf_txt_retenciones', null, filtroTXTRetencion, columnaTXTRetencion);

		var completeResultRetencion = resultadoTXTRetencion;
		while (resultadoTXTRetencion != null && resultadoTXTRetencion.length == 1000) {
			var lastId = resultadoTXTRetencion[999].getValue('internalid');
			filtroTXTRetencion[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', lastId);
			resultadoTXTRetencion = new nlapiSearchRecord('customrecord_l54_inf_txt_retenciones', null, filtroTXTRetencion, columnaTXTRetencion);
			completeResultRetencion = completeResultRetencion.concat(resultadoTXTRetencion);
		}

		var errorEliminacion = false;
		var procesoEncolado = false;

		for (var i = 0; completeResultRetencion != null && i < completeResultRetencion.length && errorEliminacion == false && procesoEncolado == false; i++) {

			var searchresult = completeResultRetencion[i];
			var idInternoTXTRetencion = searchresult.getValue('internalid');

			if (!isEmpty(idInternoTXTRetencion) && idInternoTXTRetencion > 0) {
				try {

					nlapiDeleteRecord('customrecord_l54_inf_txt_retenciones', idInternoTXTRetencion);

					checkGovernance(1000);

				} catch (e) {
					nlapiLogExecution('ERROR', 'Proceso Eliminacion TXT' + proceso, 'Error Eliminando TXT de Retenciones Previas : ' + e.message);
					errorEliminacion = true;
					estadoEliminacionTXTRetenciones.errorEliminacion = true;
					estadoEliminacionTXTRetenciones.descripcionError = "Error Eliminando TXT Retenciones Previas";
				}

			}

		}
		/*} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones SICORE', 'Se produjo el siguiente error mientras se Eliminaban las Retenciones Previas : ' + e.message);
		estadoEliminacionTXTRetenciones.errorEliminacion = true;
		estadoEliminacionTXTRetenciones.descripcionError = "Error Eliminando TXT Retenciones Previas";
		}*/

	} else {
		estadoEliminacionTXTRetenciones.errorEliminacion = true;
		estadoEliminacionTXTRetenciones.descripcionError = "Error Eliminando TXT Retenciones Previas";
	}

	nlapiLogExecution('DEBUG', 'Proceso Eliminacion TXT', 'Finalizacion');

	return estadoEliminacionTXTRetenciones;

}

function generarTXTSicoreAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SICORE Anterior');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXTSujeto = "";
	var contenidoTXT = "";

	try {
		var retencionSICORE = new Object();
		retencionSICORE.retencion = new Object();
		retencionSICORE.sujeto = new Object();
		retencionSICORE.existenRetenciones = false;
		retencionSICORE.error = false;
		retencionSICORE.descripcionError = "";
		retencionSICORE.procesoEncolado = false;
		retencionSICORE.idLog = idRegistroLOG;
		retencionSICORE.contenidoTXT = "";
		retencionSICORE.contenidoTXTSujeto = "";

		var iCont = 0;
		// Obtengo la Informacion usando un SavedSearch
		var columnaTXTRetencionesSICORE = new Array();
		columnaTXTRetencionesSICORE[0] = new nlobjSearchColumn('entity');
		var filtroTXTRetencionesSICORE = new Array();
		//filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(ultimaRetencionProcesada))
			filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		//////////////
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_sicore_ant');
		search.addFilters(filtroTXTRetencionesSICORE);
		search.addColumns(columnaTXTRetencionesSICORE);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesSICORE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSICORE = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSICORE = resultadoTXTRetencionesSICORE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SICORE', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)
		if (!isEmpty(resultadoTXTRetencionesSICORE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Retenciones', 'Cantidad Retenciones:' + resultadoTXTRetencionesSICORE.length);
			//

			for (var i = 0; resultadoTXTRetencionesSICORE != null && i < resultadoTXTRetencionesSICORE.length && procesoEncolado == false; i++) {
				// Primero Obtengo las Retenciones de Ganancia y Luego la de IVA
				var codigoRetencionGanancias = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_new_cod_ret_gan');
				var codigoRetencionIVA = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_new_cod_ret_iva');
				var idTipoRetencion = "";
				for (var k = 0; k < 2; k++) {
					if ((k == 0 && !isEmpty(codigoRetencionGanancias)) || (k == 1 && !isEmpty(codigoRetencionIVA))) {
						if (k == 0)
							idTipoRetencion = 1;
						else
							idTipoRetencion = 2;
						retencionSICORE.retencion = new Object();
						retencionSICORE.sujeto = new Object();
						// Obtengo el Codigo de Comprobante
						//retencionSICORE.existenRetenciones = true;
						existenRetenciones = true;
						errorGlobal = false;
						descripcionError = "";
						var idRetencionNetSuite = resultadoTXTRetencionesSICORE[i].getValue('internalid');
						var refComprobante = resultadoTXTRetencionesSICORE[i].getValue('internalid');

						if (!isEmpty(refComprobante)) {
							var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'sic', subsidiaria);
							if (!isEmpty(codigoComprobante)) {
								retencionSICORE.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
								// Obtengo el tipo de Comprobante netsuite
								var filtroComprobanteNS = new Array();
								filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

								var columnaComprobanteNS = new Array();
								columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

								var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

								if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

									tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

									if (!isEmpty(tipoComprobanteNS)) {
										// Obtengo Informacion Adicional del Pago a Proveedor
										var filtroPagoProveedor = new Array();
										filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

										var columnaPagoProveedor = new Array();
										columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
										columnaPagoProveedor[1] = new nlobjSearchColumn('total');

										var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null);

										if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
											// Obtengo la Fecha de Emision del Comprobante
											var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
											if (!isEmpty(fecha)) {
												// Formateo la Fecha
												var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
												if (!isEmpty(fechaDate)) {
													// Obtengo las Componentes de la Fecha
													var dia = fechaDate.getDate();
													var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
													var anio = fechaDate.getFullYear();
													var fechaComprobante = padding_left(dia.toString(), '0', 2) + "/" + padding_left(mes.toString(), '0', 2) + "/" + anio;
													retencionSICORE.retencion.fechaComprobante = fechaComprobante;
													// Obtengo el Numero del Comprobante
													var numerador = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_numero_localizado');
													if (!isEmpty(numerador)) {
														// Tomo el Numero, Punto de Venta y Letra
														//var arrayNumerador = numerador.split("-");
														//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
														//var numeroComprobante = arrayNumerador[2];
														var numeroComprobante = numerador.toString().substr(-8);
														// Tomo el Punto de Venta
														//var puntoVenta = arrayNumerador[1];
														var puntoVenta = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_boca');
														// Tomo la Latra del Comprobante
														//var letra = arrayNumerador[0];
														var letra = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_letra');
														//if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
														if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
															var numeroAux = puntoVenta.toString() + numeroComprobante.toString();
															retencionSICORE.retencion.numeroComprobante = padding_left(numeroAux, "0", 16);
															// Obtengo Tipo de Cambio de la Retencion
															var tipoCambio = resultadoTXTRetencionesSICORE[i].getValue('exchangerate');
															if (!isEmpty(tipoCambio)) {
																// Obtengo el Importe del Comprobante
																var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
																if (!isEmpty(importeComprobante)) {
																	retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																	// Obtengo el Tipo de Impuesto (Ganancias o IVA)
																	// por ahora pregunto si es ganancia o IVA, pero cambiarlo para que la lista de tipo retencion (Ganancia , IVA ,IIBB , SUSS)
																	// Sea un recordType y tenga el codigo del tipo de Impuesto.
																	var tipoRetencion = idTipoRetencion;
																	if (tipoRetencion)
																		var tipoImpuesto = "";
																	if (!isEmpty(tipoRetencion)) {
																		if (parseInt(tipoRetencion, 10) == 1) {
																			// GANANCIAS - Preguntar si es Beneficiario del Exterior es 218
																			tipoImpuesto = 217;
																		} else {
																			if (parseInt(tipoRetencion, 10) == 2) {
																				// IVA
																				tipoImpuesto = 767;
																			}
																		}
																		if (!isEmpty(tipoImpuesto)) {
																			retencionSICORE.retencion.tipoImpuesto = padding_left(tipoImpuesto, '0', 3);
																			// Obtengo el Codigo de Regimen
																			var filtroCodigoRegimen = new Array();
																			if (idTipoRetencion == 1) {
																				filtroCodigoRegimen[0] = new nlobjSearchFilter('custrecord_l54_param_ret_cod_ret', null, 'is', codigoRetencionGanancias);
																			} else {
																				filtroCodigoRegimen[0] = new nlobjSearchFilter('custrecord_l54_param_ret_cod_ret', null, 'is', codigoRetencionIVA);
																			}
																			filtroCodigoRegimen[1] = new nlobjSearchFilter('custrecord_l54_param_ret_tipo_ret', null, 'is', tipoRetencion);

																			var columnaCodigoRegimen = new Array();
																			columnaCodigoRegimen[0] = new nlobjSearchColumn('custrecord_l54_param_ret_cod_regimen');

																			var resultadoCodigoRegimen = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroCodigoRegimen, columnaCodigoRegimen);

																			if (!isEmpty(resultadoCodigoRegimen) && resultadoCodigoRegimen.length > 0) {
																				var codigoRegimen = resultadoCodigoRegimen[0].getValue('custrecord_l54_param_ret_cod_regimen');
																				if (!isEmpty(codigoRegimen) && parseInt(codigoRegimen, 10) > 0) {
																					retencionSICORE.retencion.codigoRegimen = padding_left(codigoRegimen, '0', 3);
																					// Obtengo el Codigo de Operacion
																					if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
																						var filtroTipoOperacion = new Array();
																						filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);

																						var columnaTipoOperacion = new Array();
																						columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');

																						var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);

																						if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {
																							var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
																							if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																								retencionSICORE.retencion.codigoOperacion = codigoOperacion;
																								// Obtengo la Base de Calculo
																								var baseCalculo = "";
																								if (idTipoRetencion == 1)
																									baseCalculo = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_base_calculo_ret_gan');
																								else
																									baseCalculo = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_base_calculo_ret_iva');
																								if (!isEmpty(baseCalculo)) {
																									retencionSICORE.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																									// Obtengo Fecha de Retencion
																									var fechaRetencion = resultadoTXTRetencionesSICORE[i].getValue('trandate');
																									if (!isEmpty(fechaRetencion)) {
																										// Formateo la Fecha
																										var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																										if (!isEmpty(fechaRetencionDate)) {
																											// Obtengo las Componentes de la Fecha
																											var diaRetencion = fechaRetencionDate.getDate();
																											var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																											var anioRetencion = fechaRetencionDate.getFullYear();
																											var fechaRetencionFinal = padding_left(diaRetencion.toString(), '0', 2) + "/" + padding_left(mesRetencion.toString(), '0', 2) + "/" + anioRetencion;
																											retencionSICORE.retencion.fechaRetencion = fechaRetencionFinal;
																											// Cargo el Proveedor
																											var proveedor = resultadoTXTRetencionesSICORE[i].getValue('entity');
																											// Obtengo el Numero de Documento
																											if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {
																												retencionSICORE.sujeto.idSujetoNetSuite = proveedor;
																												/*var filtroProveedor = new Array();
																												filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);
																												var columnaProveedor = new Array();
																												columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																												columnaProveedor[1] = new nlobjSearchColumn('companyname');
																												columnaProveedor[2] = new nlobjSearchColumn('lastname');
																												columnaProveedor[3] = new nlobjSearchColumn('firstname');
																												columnaProveedor[4] = new nlobjSearchColumn('address1');
																												columnaProveedor[5] = new nlobjSearchColumn('city');
																												columnaProveedor[6] = new nlobjSearchColumn('zipcode');
																												columnaProveedor[7] = new nlobjSearchColumn('state');
																												columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																												columnaProveedor[9] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_gan');
																												columnaProveedor[10] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																												columnaProveedor[11] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
																												columnaProveedor[12] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
																												columnaProveedor[13] = new nlobjSearchColumn('custentity_l54_tipo_documento');*/

																												//var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);
																												var resultadoProveedor = new nlapiLoadRecord('vendor', proveedor, {
																													disabletriggers: true
																												});

																												//if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
																												if (!isEmpty(resultadoProveedor)) {

																													// Obtengo Codigo Condicion del Proveedor
																													var tipoContribuyente = "";
																													var desc = "";
																													var recordTypeTipoContribuyente = "";
																													if (parseInt(tipoRetencion, 10) == 1) {
																														// GANANCIAS
																														desc = "Ganancias";
																														recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente_gan";
																														tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente_gan');
																													} else {
																														if (parseInt(tipoRetencion, 10) == 2) {
																															// IVA
																															desc = "IVA";
																															recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente";
																															tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente');
																														}
																													}

																													if (!isEmpty(tipoContribuyente)) {

																														var filtroTipoContribuyente = new Array();
																														filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyente);

																														var columnaTipoContribuyente = new Array();
																														if (desc == "Ganancias") {
																															columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
																															columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
																														} else {
																															columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_cont_cod_sic');
																															columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_cont_cod_sic');
																														}

																														var resultadoTipoContribuyente = new nlapiSearchRecord(recordTypeTipoContribuyente, null, filtroTipoContribuyente, columnaTipoContribuyente);

																														if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																															var codigoCondicion = "";
																															var tipoSuspension = "";
																															if (desc == "Ganancias") {
																																codigoCondicion = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
																																tipoSuspension = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
																															} else {
																																codigoCondicion = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_cont_cod_sic');
																																tipoSuspension = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_cont_cod_sic');
																															}

																															if (!isEmpty(codigoCondicion) && !isEmpty(tipoSuspension)) {

																																retencionSICORE.retencion.codigoCondicion = padding_left(codigoCondicion, "0", 2);
																																// Configuro el Codigo de Suspension del Sujeto
																																var filtroSuspension = new Array();
																																filtroSuspension[0] = new nlobjSearchFilter('internalid', null, 'is', tipoSuspension);

																																var columnaSuspension = new Array();
																																columnaSuspension[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_susp_codigo');

																																var resultadoSuspension = new nlapiSearchRecord('customrecord_l54_sic_tipo_suspension', null, filtroSuspension, columnaSuspension);

																																if (!isEmpty(resultadoSuspension) && resultadoSuspension.length > 0) {

																																	var codigoSuspension = resultadoSuspension[0].getValue('custrecord_l54_sic_tipo_susp_codigo');
																																	if (!isEmpty(codigoSuspension)) {
																																		retencionSICORE.retencion.codigoSujetoSusp = codigoSuspension;
																																		// Obtengo el Importe de la Retencion
																																		var importeRetencion = "";
																																		if (desc == "Ganancias")
																																			importeRetencion = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_gan_imp_a_retener');
																																		else
																																			importeRetencion = resultadoTXTRetencionesSICORE[i].getValue('custbody_l54_iva_imp_a_retener');
																																		if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																																			retencionSICORE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																			// Porcentaje Exclusion , lo Obtengo del Proveedor
																																			var existePorcenaje = false;
																																			var porcentaje = '0';
																																			var porcentaje = resultadoProveedor.getFieldValue('custentity_l54_porcentaje_excl');
																																			var porcentajeFinal = '0';
																																			if (!isEmpty(porcentaje)) {
																																				existePorcenaje = true;
																																				// Quito el Simbolo %
																																				var porcentajeFinal = porcentaje.substring(0, porcentaje.length - 1);
																																			}
																																			if (isEmpty(porcentajeFinal))
																																				porcentajeFinal = '0';
																																			retencionSICORE.retencion.porcentajeExcl = padding_left(porcentajeFinal.formatMoney(2, separadorMiles, separadorDecimal), '0', 6);
																																			// Fecha Boletin
																																			var fechaBoletin = resultadoProveedor.getFieldValue('custentity_l54_fecha_boletin');
																																			var fechaBoletinFinal = " ";
																																			var errorFechaBoletin = false;
																																			if (!isEmpty(fechaBoletin)) {
																																				var fechaBoletinDate = nlapiStringToDate(fechaBoletin, 'datetimetz');
																																				if (!isEmpty(fechaBoletinDate)) {
																																					// Obtengo las Componentes de la Fecha
																																					var diaBoletin = fechaBoletinDate.getDate();
																																					var mesBoletin = parseInt(fechaBoletinDate.getMonth(), 10) + parseInt(1, 10);
																																					var anioBoletin = fechaBoletinDate.getFullYear();
																																					fechaBoletinFinal = padding_left(diaBoletin, '0', 2) + "/" + padding_left(mesBoletin, '0', 2) + "/" + anioBoletin;
																																				}
																																			} else {
																																				// Si no Tiene Fecha de Boletin pero si Porcentaje de Exclusion -> Error
																																				if (existePorcenaje == true)
																																					errorFechaBoletin = true;
																																			}
																																			if (isEmpty(fechaBoletinFinal))
																																				fechaBoletinFinal = " ";
																																			if (errorFechaBoletin == false) {
																																				retencionSICORE.retencion.fechaBoletin = padding_right(fechaBoletinFinal, " ", 10);
																																				// Obtengo el Tipo de Documento del Sujeto Retenido
																																				var tipoDocumento = resultadoProveedor.getFieldValue('custentity_l54_tipo_documento');
																																				if (!isEmpty(tipoDocumento)) {
																																					// Obtengo el Codigo de Tipo de Documento
																																					var filtroTipoDocumento = new Array();
																																					filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																					var columnaTipoDocumento = new Array();
																																					columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sic');

																																					var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);

																																					if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																						var tipoDocumento = resultadoTipoDocumento[0].getValue('custrecord_l54_tipo_doc_sic');
																																						if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																							retencionSICORE.retencion.tipoDocSujeto = padding_left(tipoDocumento, '0', 2);
																																							// Informacion de Beneficiarios del Exterior
																																							retencionSICORE.retencion.numeroCertificado = padding_left('0', '0', 14);
																																							retencionSICORE.retencion.denominacion = padding_right(" ", " ", 30);
																																							retencionSICORE.retencion.acrecentamiento = "0";
																																							retencionSICORE.retencion.cuitPaisRetenido = padding_right("0", "0", 11);
																																							retencionSICORE.retencion.cuitOrdenante = padding_right("0", "0", 11);

																																							// Cargo informacion del Sujeto Retenido

																																							var proveedor = resultadoTXTRetencionesSICORE[i].getValue('entity');

																																							// Obtengo el Numero de Documento

																																							var nroDocumento = resultadoProveedor.getFieldValue('custentity_l54_cuit_entity');
																																							if (!isEmpty(nroDocumento)) {
																																								// Formateo el Documento
																																								nroDocumento = nroDocumento.replace(/-/g, '');
																																								nroDocumento = nroDocumento.replace(/\./g, '');
																																								// Elimino Blancos
																																								var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');

																																								retencionSICORE.retencion.numeroDocumento = padding_right(numeroDocumentoFinal, " ", 20);
																																								retencionSICORE.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);

																																								// Obtengo la Razon Social
																																								var razonSocial = resultadoProveedor.getFieldValue('companyname');
																																								if (isEmpty(razonSocial)) {
																																									// Busco Nombre y Apellido
																																									var apellido = resultadoProveedor.getFieldValue('lastname');
																																									var nombre = resultadoProveedor.getFieldValue('firstname');
																																									razonSocial = apellido + " " + nombre;
																																								}

																																								if (!isEmpty(razonSocial)) {
																																									retencionSICORE.sujeto.razonSocial = padding_right(razonSocial.substring(0, 19), " ", 20);
																																									// Nuevo
																																									var cantidadDirecciones = resultadoProveedor.getLineItemCount('addressbook');

																																									var numeroLinea = 0;
																																									if (cantidadDirecciones > 0) {
																																										if (cantidadDirecciones > 1) {
																																											// Busco la de Facturacion Predeterminado
																																											var numLinea = resultadoProveedor.findLineItemValue('addressbook', 'defaultbilling', 'T');
																																											if (!isEmpty(numLinea) && numLinea > 0) {
																																												numeroLinea = numLinea;
																																											} else {
																																												// Tomo la Primera
																																												numeroLinea = 1;
																																											}

																																										} else {
																																											numeroLinea = 1;
																																										}

																																									} else {
																																										numeroLinea = 0;
																																									}

																																									// Nuevo
																																									if (!isEmpty(numeroLinea) && numeroLinea > 0) {
																																										// Obtengo Domicilio Fiscal
																																										//var domicilioFiscal = resultadoProveedor[0].getValue('address1');
																																										var domicilioFiscal = resultadoProveedor.getLineItemValue('addressbook', 'addr1', numeroLinea);
																																										if (!isEmpty(domicilioFiscal)) {
																																											retencionSICORE.sujeto.domicilioFiscal = padding_right(domicilioFiscal.substring(0, 19), " ", 20);
																																											// Obtengo Localidad
																																											//var localidad = resultadoProveedor[0].getValue('city');
																																											var localidad = resultadoProveedor.getLineItemValue('addressbook', 'city', numeroLinea);
																																											if (!isEmpty(localidad)) {
																																												retencionSICORE.sujeto.localidad = padding_right(localidad.substring(0, 19), " ", 20);
																																												// Obtengo Codigo de Provincia
																																												//var provincia = resultadoProveedor[0].getValue('state');
																																												//var provincia = resultadoProveedor.getLineItemValue('addressbook', 'custrecord_l54_provincia', numeroLinea);
																																												var subrecordAddress = resultadoProveedor.viewLineItemSubrecord('addressbook', 'addressbookaddress', numeroLinea);
																																												if (!isEmpty(subrecordAddress)) {
																																													var provincia = subrecordAddress.getFieldValue('custrecord_l54_provincia'); // get 'country' field of address subrecord
																																													if (!isEmpty(provincia)) {
																																														// Busco el Codigo de Provincia SICORE
																																														var filtroProvincia = new Array();
																																														//filtroProvincia[0] = new nlobjSearchFilter('custrecord_l54_sic_codigo_prov_provincia', null, 'is', provincia);
																																														filtroProvincia[0] = new nlobjSearchFilter('internalid', null, 'is', provincia);

																																														var columnaProvincia = new Array();
																																														columnaProvincia[0] = new nlobjSearchColumn('custrecord_l54_sic_codigo_prov_codigo');

																																														var resultadoProvincia = new nlapiSearchRecord('customrecord_l54_sic_codigo_provincia', null, filtroProvincia, columnaProvincia);

																																														if (!isEmpty(resultadoProvincia) && resultadoProvincia.length > 0) {
																																															var codigoProvincia = resultadoProvincia[0].getValue('custrecord_l54_sic_codigo_prov_codigo');
																																															if (!isEmpty(codigoProvincia)) {
																																																retencionSICORE.sujeto.codigoProvincia = padding_left(codigoProvincia, 0, 2);

																																																// Obtengo Codigo Postal
																																																//var codigoPostal = resultadoProveedor[0].getValue('zipcode');
																																																var codigoPostal = resultadoProveedor.getLineItemValue('addressbook', 'zip', numeroLinea);
																																																if (!isEmpty(codigoPostal)) {
																																																	retencionSICORE.sujeto.codigoPostal = padding_right(codigoPostal.substring(0, 7), " ", 8);
																																																	// Obtengo Tipo de Documento
																																																	var tipoDocumento = resultadoProveedor.getFieldValue('custentity_l54_tipo_documento');
																																																	if (!isEmpty(tipoDocumento)) {
																																																		// Obtengo el Codigo de Documento SICORE
																																																		var filtroTipoDoc = new Array();
																																																		filtroTipoDoc[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																																		var columnaTipoDoc = new Array();
																																																		columnaTipoDoc[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sic');

																																																		var resultadoTipoDoc = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDoc, columnaTipoDoc);

																																																		if (!isEmpty(resultadoTipoDoc) && resultadoTipoDoc.length > 0) {
																																																			var codigoTipoDocumento = resultadoTipoDoc[0].getValue('custrecord_l54_tipo_doc_sic');
																																																			if (!isEmpty(codigoTipoDocumento)) {
																																																				retencionSICORE.sujeto.tipoDocumento = padding_left(codigoTipoDocumento, 0, 2);
																																																			} else {
																																																				errorGlobal = true;
																																																				descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																																																			}
																																																		} else {
																																																			errorGlobal = true;
																																																			descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																																																		}
																																																	} else {
																																																		errorGlobal = true;
																																																		descripcionError = "Error Obteniendo Tipo De Documento del Proveedor";
																																																	}

																																																} else {
																																																	errorGlobal = true;
																																																	descripcionError = "Error Obteniendo Codigo Postal del Proveedor";
																																																}
																																															} else {
																																																errorGlobal = true;
																																																descripcionError = "Codigo de Provincia Invalido";
																																															}
																																														} else {
																																															errorGlobal = true;
																																															descripcionError = "Error Obteniendo Codigo de Provincia";
																																														}
																																													} else {
																																														errorGlobal = true;
																																														descripcionError = "Error Obteniendo Provincia del Proveedor";
																																													}
																																												} else {
																																													errorGlobal = true;
																																													descripcionError = "Error Obteniendo SubRecord de Direccion del Proveedor";
																																												}

																																											} else {
																																												errorGlobal = true;
																																												descripcionError = "Error Obteniendo Localidad del Proveedor";
																																											}
																																										} else {
																																											errorGlobal = true;
																																											descripcionError = "Error Obteniendo Domicilio Fiscal del Proveedor";
																																										}
																																									} else {
																																										errorGlobal = true;
																																										descripcionError = "Error Obteniendo Linea de Direccion del Proveedor";
																																									}

																																								} else {
																																									errorGlobal = true;
																																									descripcionError = "Error Obteniendo Razon Social del Proveedor";
																																								}

																																							} else {
																																								errorGlobal = true;
																																								descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																																							}

																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Tipo de Documento SICORE No Configurado Correctamente";
																																						}
																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "Error Obteniendo Tipo de Documento";
																																					}

																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																																				}
																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "Falta Configurar Fecha de Boletin del Proveedor";
																																			}

																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																																		}
																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "Falta Configurar Codigo de Suspension del Sujeto Retenido";
																																	}
																																} else {
																																	errorGlobal = true;
																																	descripcionError = "Error Obteniendo el Codigo de Suspension del Sujeto Retenido";
																																}
																															} else {
																																errorGlobal = true;
																																descripcionError = "Error Obteniendo el Codigo de Condicion";
																															}
																														} else {
																															errorGlobal = true;
																															descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																														}
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																													}

																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo Informacion del Proveedor";
																												}

																											} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Proveedor";
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error Formateando la Fecha de Retencion";
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo Fecha De Retencion";
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo Base De Calculo";
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError = "Codigo de Operacion Invalido";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo el Codigo de Operacion";
																						}

																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo el Codigo de Operacion";
																					}

																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo el Codigo de Regimen";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo El Codigo de Regimen";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo El Tipo De Impuesto";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo El Tipo De Impuesto";
																	}

																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo Importe del Comprobante";
																}

															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
														}

														/*} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Numero de Comprobante";
														}*/
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Numero de Comprobante";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Formateando la Fecha del Comprobante";
												}

											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Fecha del Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Codigo de Comprobante";
							}

						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
						}

						// Genero el Contenido
						if (errorGlobal == false) {

							if (retencionSICORE.sujeto != null) {

								if (retencionSICORE.retencion != null) {

									// Genero Contenido
									if (!isEmpty(contenidoTXT)) {
										contenidoTXT += "\r\n";
									}
									if (!isEmpty(contenidoTXTSujeto)) {
										contenidoTXTSujeto += "\r\n";
									}

									var error = false;
									var descripcionMensaje = "TXT Retenciones Generado Correctamente";
									contenidoTXT += retencionSICORE.retencion.codigoComprobante + retencionSICORE.retencion.fechaComprobante + retencionSICORE.retencion.numeroComprobante +
										retencionSICORE.retencion.importeComprobante + retencionSICORE.retencion.tipoImpuesto + retencionSICORE.retencion.codigoRegimen + retencionSICORE.retencion.codigoOperacion +
										retencionSICORE.retencion.baseCalculo + retencionSICORE.retencion.fechaRetencion + retencionSICORE.retencion.codigoCondicion + retencionSICORE.retencion.codigoSujetoSusp +
										retencionSICORE.retencion.importeRetencion + retencionSICORE.retencion.porcentajeExcl + retencionSICORE.retencion.fechaBoletin +
										retencionSICORE.retencion.tipoDocSujeto + retencionSICORE.retencion.numeroDocumento + retencionSICORE.retencion.numeroCertificado + retencionSICORE.retencion.denominacion +
										retencionSICORE.retencion.acrecentamiento + retencionSICORE.retencion.cuitPaisRetenido + retencionSICORE.retencion.cuitOrdenante;
									// Para Informacion del Sujeto Retenido
									contenidoTXTSujeto += retencionSICORE.sujeto.numeroDocSujeto + retencionSICORE.sujeto.razonSocial + retencionSICORE.sujeto.domicilioFiscal + retencionSICORE.sujeto.localidad +
										retencionSICORE.sujeto.codigoProvincia + retencionSICORE.sujeto.codigoPostal + retencionSICORE.sujeto.tipoDocumento;

									// Grabo Registro de TXT
									/*var estadoGeneracionTXTSujetos = null;
									var estadoGeneracionTXT = null;
									estadoGeneracionTXTSujetos = generarTXTSujetos(periodo, tipoOperacion, tipoRegimen, retencionSICORE.sujeto.idSujetoNetSuite, contenidoTXTSujeto, idRegistroLOG, idRetencionNetSuite);
									if (isEmpty(estadoGeneracionTXTSujetos) || !isEmpty(estadoGeneracionTXTSujetos) && estadoGeneracionTXTSujetos.errorGeneracion == true) {
									// Error Generando TXT
									error = true;
									descripcionMensaje = "Error Generando TXT Sujetos Retenidos";
									if (isEmpty(estadoGeneracionTXTSujetos))
									descripcionMensaje = estadoGeneracionTXTSujetos.descripcionError;
									errorGeneral = true;
									descripcionError = descripcionMensaje;
									idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
									}
									if (error == false) {
									estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
									}

									if (error == false) {
									if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
									// Error Generando TXT
									error = true;
									descripcionMensaje = "Error Generando TXT Retenciones";
									if (isEmpty(estadoGeneracionTXT))
									descripcionMensaje = estadoGeneracionTXT.descripcionError;
									errorGeneral = true;
									descripcionError = descripcionMensaje;
									idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
									}
									}*/

								} else {
									errorGeneral = true;
									descripcionError = "Error Obteniendo informacion de la Retencion";
									idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
								}

							} else {
								errorGeneral = true;
								descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
								idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
							}

						} else {
							// Error Obteniendo Informacion de Retenciones
							// Grabo el Error en NetSuite
							errorGeneral = true;
							nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SICORE : ' + descripcionError);
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
						}
					}
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSICORE) && resultadoTXTRetencionesSICORE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SICORE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', null, refComprobante, subsidiaria);
					}
				}
			}
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SICORE - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SICORE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
		//retencionSICORE.error = true;
	}

	if (errorGeneral == true) {
		retencionSICORE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSICORE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SICORE Anterior');
	retencionSICORE.contenidoTXT = contenidoTXT;
	retencionSICORE.contenidoTXTSujeto = contenidoTXTSujeto;

	return retencionSICORE;
}

function generarTXTSicore(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSicore', 'Inicio - Generacion TXT SICORE');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXTSujeto = "";
	var contenidoTXT = "";

	try {
		var retencionSICORE = new Object();
		retencionSICORE.retencion = new Object();
		retencionSICORE.sujeto = new Object();
		retencionSICORE.existenRetenciones = false;
		retencionSICORE.error = false;
		retencionSICORE.descripcionError = "";
		retencionSICORE.procesoEncolado = false;
		retencionSICORE.idLog = idRegistroLOG;
		retencionSICORE.contenidoTXT = "";
		retencionSICORE.contenidoTXTSujeto = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTRetencionesSICORE = new Array();
		//filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		//if (!isEmpty(ultimaRetencionProcesada))
		//filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSICORE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sicore');
		search.addFilters(filtroTXTRetencionesSICORE);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesSICORE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSICORE = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSICORE = resultadoTXTRetencionesSICORE.concat(resultado);

				//nlapiLogExecution('DEBUG', 'generarTXT_SICORE', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)
		if (!isEmpty(resultadoTXTRetencionesSICORE)) {
			nlapiLogExecution('DEBUG', 'generarTXTSicore', 'Cantidad Retenciones:' + resultadoTXTRetencionesSICORE.length);
			//

			for (var i = 0; resultadoTXTRetencionesSICORE != null && i < resultadoTXTRetencionesSICORE.length && procesoEncolado == false; i++) {
				retencionSICORE.retencion = new Object();
				retencionSICORE.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				//retencionSICORE.existenRetenciones = true;
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var columns = resultadoTXTRetencionesSICORE[i].getAllColumns();
				var idRetencionNetSuite = resultadoTXTRetencionesSICORE[i].getValue('internalid');
				var refComprobante = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_ref_pago_prov');

				if (!isEmpty(refComprobante)) {
					var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'sic', subsidiaria);
					if (!isEmpty(codigoComprobante)) {
						retencionSICORE.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
						// Obtengo el tipo de Comprobante netsuite
						var filtroComprobanteNS = new Array();
						filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

						var columnaComprobanteNS = new Array();
						columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

						var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

						if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

							tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

							if (!isEmpty(tipoComprobanteNS)) {
								// Obtengo Informacion Adicional del Pago a Proveedor
								var filtroPagoProveedor = new Array();
								filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

								/* var columnaPagoProveedor = new Array();
								columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
								columnaPagoProveedor[1] = new nlobjSearchColumn('total');

								var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
								var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);

								if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
									// Obtengo la Fecha de Emision del Comprobante
									// var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
									var columnasResultadoPagoProveedor = resultadoPagoProveedor[0].getAllColumns();
									var fecha = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[1]);
									if (!isEmpty(fecha)) {
										// Formateo la Fecha
										var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
										if (!isEmpty(fechaDate)) {
											// Obtengo las Componentes de la Fecha
											var dia = fechaDate.getDate();
											var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
											var anio = fechaDate.getFullYear();
											var fechaComprobante = padding_left(dia, '0', 2) + "/" + padding_left(mes, '0', 2) + "/" + anio;
											retencionSICORE.retencion.fechaComprobante = fechaComprobante;
											// Obtengo el Numero del Comprobante
											var numerador = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_cod_pago_prov');
											if (!isEmpty(numerador)) {
												// Tomo el Numero, Punto de Venta y Letra
												//var arrayNumerador = numerador.split("-");
												//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
												//var numeroComprobante = arrayNumerador[2];
												var numeroComprobante = numerador.toString().substr(-8);
												// Tomo el Punto de Venta
												//var puntoVenta = arrayNumerador[1];
												var puntoVenta = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_pv_pago_prov');
												// Tomo la Latra del Comprobante
												//var letra = arrayNumerador[0];
												var letra = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_let_pago_prov');
												//if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
												if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
													var numeroAux = padding_left(puntoVenta.toString(), '0', 5) + padding_left(numeroComprobante.toString(), '0', 8);
													retencionSICORE.retencion.numeroComprobante = padding_left(numeroAux, "0", 16);
													// Obtengo Tipo de Cambio de la Retencion
													var tipoCambio = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_tipo_cambio');
													if (!isEmpty(tipoCambio)) {
														// Obtengo el Importe del Comprobante
														// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
														var importeComprobante = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[7]);
														if (!isEmpty(importeComprobante) && (parseFloat(importeComprobante) > 0)) {
															/* retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
															Comentado por: Jesus Salazar. 
															Se comentó esta instrucción porque generaba error al momento de calcular importe de comprobante con moneda extranjera, se multiplicaba 
															de nuevo por el tipo de cambio el campo de paidamount que ya venía transformado a moneda local, se recalculaba y era erróneo el proceso
															*/
															// Cambio realizado por Jesús Salazar el 14/02/2019, para obtener el importe comprobante del SS Importe Pagos Proveedores que ya viene transformado a moneda
															//retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
															retencionSICORE.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
															// fin Cambio

															// Obtengo el Tipo de Impuesto (Ganancias o IVA)
															// por ahora pregunto si es ganancia o IVA, pero cambiarlo para que la lista de tipo retencion (Ganancia , IVA ,IIBB , SUSS)
															// Sea un recordType y tenga el codigo del tipo de Impuesto.
															var tipoRetencion = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_tipo');
															var esRetencionBeneficiariosExterior = resultadoTXTRetencionesSICORE[i].getValue(columns[29]);
															var tipoImpuesto = null;
															if (!isEmpty(tipoRetencion)) {
																if (parseInt(tipoRetencion, 10) == 1) {
																	// GANANCIAS - Si es retención de ganancias a un beneficiario del exterior se le asigna 218, si no se le asigna 217
																	tipoImpuesto = (!isEmpty(esRetencionBeneficiariosExterior) && esRetencionBeneficiariosExterior == 'T') ? 218 : 217;
																} else {
																	if (parseInt(tipoRetencion, 10) == 2) {
																		// IVA
																		tipoImpuesto = 767;
																	}
																}
																if (!isEmpty(tipoImpuesto)) {
																	retencionSICORE.retencion.tipoImpuesto = padding_left(tipoImpuesto, '0', 4);
																	// Obtengo el Codigo de Regimen
																	var codigoRegimen = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_codigo_regimen');
																	if (!isEmpty(codigoRegimen) && parseInt(codigoRegimen, 10) > 0) {
																		retencionSICORE.retencion.codigoRegimen = padding_left(codigoRegimen, '0', 3);
																		// Obtengo el Codigo de Operacion
																		if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {

																			var filtroTipoOperacion = new Array();
																			filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);

																			var columnaTipoOperacion = new Array();
																			columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');

																			var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);

																			if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {

																				var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
																				if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																					retencionSICORE.retencion.codigoOperacion = codigoOperacion;
																					// Obtengo la Base de Calculo
																					/* Comentado por: JSalazar. 08/05/19.
																					El valor de base cálculo ya viene transformado a pesos desde el SS.
																					var baseCalculo = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_base_calculo_imp');
																					 */
																					var baseCalculo = resultadoTXTRetencionesSICORE[i].getValue(columns[27]); // Monto base cálculo en moneda local
																					if (isEmpty(baseCalculo) || (parseFloat(baseCalculo, 10) <= 0)) {
																						baseCalculo = resultadoTXTRetencionesSICORE[i].getValue(columns[26]); // monto base cálculo en moneda local sacado mediante formula del SS, por si no existe el monto en moneda local
																					}

																					if (!isEmpty(baseCalculo) && (parseFloat(baseCalculo, 10) > 0)) {

																						// retencionSICORE.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																						retencionSICORE.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);

																						// Obtengo Fecha de Retencion
																						var fechaRetencion = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_fecha');

																						if (!isEmpty(fechaRetencion)) {
																							// Formateo la Fecha
																							var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																							if (!isEmpty(fechaRetencionDate)) {

																								// Obtengo las Componentes de la Fecha
																								var diaRetencion = fechaRetencionDate.getDate();
																								var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																								var anioRetencion = fechaRetencionDate.getFullYear();
																								var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
																								retencionSICORE.retencion.fechaRetencion = fechaRetencionFinal;
																								// Cargo el Proveedor
																								var proveedor = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_ref_proveedor');

																								// Obtengo el Numero de Documento
																								if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {

																									retencionSICORE.sujeto.idSujetoNetSuite = proveedor;

																									/*var filtroProveedor = new Array();
																									filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

																									var columnaProveedor = new Array();
																									columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																									columnaProveedor[1] = new nlobjSearchColumn('companyname');
																									columnaProveedor[2] = new nlobjSearchColumn('lastname');
																									columnaProveedor[3] = new nlobjSearchColumn('firstname');
																									columnaProveedor[4] = new nlobjSearchColumn('address1');
																									columnaProveedor[5] = new nlobjSearchColumn('city');
																									columnaProveedor[6] = new nlobjSearchColumn('zipcode');
																									columnaProveedor[7] = new nlobjSearchColumn('state');
																									columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																									columnaProveedor[9] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_gan');
																									columnaProveedor[10] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																									columnaProveedor[11] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
																									columnaProveedor[12] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
																									columnaProveedor[13] = new nlobjSearchColumn('custentity_l54_tipo_documento');*/

																									//var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);
																									var resultadoProveedor = new nlapiLoadRecord('vendor', proveedor, {
																										disabletriggers: true
																									});

																									//if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {
																									if (!isEmpty(resultadoProveedor)) {
																										// Obtengo Codigo Condicion del Proveedor
																										var tipoContribuyente = "";
																										var desc = "";
																										var recordTypeTipoContribuyente = "";
																										if (parseInt(tipoRetencion, 10) == 1) {
																											// GANANCIAS
																											desc = "Ganancias";
																											recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente_gan";
																											//tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente_gan');
																											tipoContribuyente = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_tipo_contrib_gan');
																										} else {
																											if (parseInt(tipoRetencion, 10) == 2) {
																												// IVA
																												desc = "IVA";
																												recordTypeTipoContribuyente = "customrecord_l54_tipo_contribuyente";
																												//tipoContribuyente = resultadoProveedor.getFieldValue('custentity_l54_tipo_contribuyente');
																												tipoContribuyente = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_tipo_contrib_iva');
																											}
																										}

																										if (!isEmpty(tipoContribuyente)) {

																											var filtroTipoContribuyente = new Array();
																											filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyente);

																											var columnaTipoContribuyente = new Array();
																											if (desc == "Ganancias") {
																												columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
																												columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
																											} else {
																												columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_cont_cod_sic');
																												columnaTipoContribuyente[1] = new nlobjSearchColumn('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_cont_cod_sic');
																											}

																											var resultadoTipoContribuyente = new nlapiSearchRecord(recordTypeTipoContribuyente, null, filtroTipoContribuyente, columnaTipoContribuyente);

																											if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																												var codigoCondicion = "";
																												var tipoSuspension = "";
																												if (desc == "Ganancias") {
																													if (retencionSICORE.retencion.codigoRegimen == '966' || retencionSICORE.retencion.codigoRegimen == '965') {
																														codigoCondicion = "00";
																													} else {
																														codigoCondicion = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_contr_gan_cod_sic');
																													}
																													tipoSuspension = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_contr_gan_cod_sic');
																												} else {
																													if (retencionSICORE.retencion.codigoRegimen == '966' || retencionSICORE.retencion.codigoRegimen == '965') {
																														codigoCondicion = "00";
																													} else {
																														codigoCondicion = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_codigo', 'custrecord_l54_tipo_cont_cod_sic');
																													}
																													tipoSuspension = resultadoTipoContribuyente[0].getValue('custrecord_l54_sic_tipo_cond_susp', 'custrecord_l54_tipo_cont_cod_sic');
																												}

																												if (!isEmpty(codigoCondicion) && !isEmpty(tipoSuspension)) {

																													retencionSICORE.retencion.codigoCondicion = padding_left(codigoCondicion, "0", 2);
																													// Configuro el Codigo de Suspension del Sujeto
																													var filtroSuspension = new Array();
																													filtroSuspension[0] = new nlobjSearchFilter('internalid', null, 'is', tipoSuspension);

																													var columnaSuspension = new Array();
																													columnaSuspension[0] = new nlobjSearchColumn('custrecord_l54_sic_tipo_susp_codigo');

																													var resultadoSuspension = new nlapiSearchRecord('customrecord_l54_sic_tipo_suspension', null, filtroSuspension, columnaSuspension);

																													if (!isEmpty(resultadoSuspension) && resultadoSuspension.length > 0) {

																														var codigoSuspension = resultadoSuspension[0].getValue('custrecord_l54_sic_tipo_susp_codigo');
																														if (!isEmpty(codigoSuspension)) {
																															retencionSICORE.retencion.codigoSujetoSusp = codigoSuspension;

																															// Obtengo el Importe de la Retencion
																															// var importeRetencion = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_importe');
																															var importeRetencion = resultadoTXTRetencionesSICORE[i].getValue(columns[28]);
																															if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																																//retencionSICORE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																retencionSICORE.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																// Porcentaje Exclusion , lo Obtengo del Proveedor
																																var existePorcenaje = false;
																																var porcentaje = '0';
																																var porcentaje = resultadoProveedor.getFieldValue('custentity_l54_porcentaje_excl');
																																var porcentajeFinal = '0';
																																if (!isEmpty(porcentaje)) {
																																	existePorcenaje = true;
																																	// Quito el Simbolo %
																																	var porcentajeFinal = porcentaje.substring(0, porcentaje.length - 1);
																																}
																																if (isEmpty(porcentajeFinal))
																																	porcentajeFinal = '0';
																																retencionSICORE.retencion.porcentajeExcl = padding_left(porcentajeFinal.formatMoney(2, separadorMiles, separadorDecimal), '0', 6);
																																// Fecha Boletin
																																var fechaBoletin = resultadoProveedor.getFieldValue('custentity_l54_fecha_boletin');
																																var fechaBoletinFinal = " ";
																																var errorFechaBoletin = false;
																																if (!isEmpty(fechaBoletin)) {
																																	var fechaBoletinDate = nlapiStringToDate(fechaBoletin, 'datetimetz');
																																	if (!isEmpty(fechaBoletinDate)) {
																																		// Obtengo las Componentes de la Fecha
																																		var diaBoletin = fechaBoletinDate.getDate();
																																		var mesBoletin = parseInt(fechaBoletinDate.getMonth(), 10) + parseInt(1, 10);
																																		var anioBoletin = fechaBoletinDate.getFullYear();
																																		fechaBoletinFinal = padding_left(diaBoletin, '0', 2) + "/" + padding_left(mesBoletin, '0', 2) + "/" + anioBoletin;
																																	}
																																} else {
																																	// Si no Tiene Fecha de Boletin pero si Porcentaje de Exclusion -> Error
																																	if (existePorcenaje == true)
																																		errorFechaBoletin = true;
																																}
																																if (isEmpty(fechaBoletinFinal))
																																	fechaBoletinFinal = " ";

																																if (errorFechaBoletin == false) {
																																	retencionSICORE.retencion.fechaBoletin = padding_right(fechaBoletinFinal, " ", 10);
																																	// Obtengo el Tipo de Documento del Sujeto Retenido
																																	var tipoDocumento = resultadoProveedor.getFieldValue('custentity_l54_tipo_documento');
																																	if (!isEmpty(tipoDocumento)) {

																																		// Obtengo el Codigo de Tipo de Documento
																																		var filtroTipoDocumento = new Array();
																																		filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																		var columnaTipoDocumento = new Array();
																																		columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sic');

																																		var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);

																																		if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																			var tipoDocumento = resultadoTipoDocumento[0].getValue('custrecord_l54_tipo_doc_sic');
																																			if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																				retencionSICORE.retencion.tipoDocSujeto = padding_left(tipoDocumento, '0', 2);
																																				// Informacion de Beneficiarios del Exterior
																																				// Verifico si el Proveedor tiene
																																				retencionSICORE.retencion.numeroCertificado = padding_left('0', '0', 14);
																																				retencionSICORE.retencion.denominacion = padding_right(" ", " ", 30);
																																				retencionSICORE.retencion.acrecentamiento = "0";
																																				retencionSICORE.retencion.cuitPaisRetenido = padding_right("0", "0", 11);
																																				retencionSICORE.retencion.cuitOrdenante = padding_right("0", "0", 11);

																																				// Cargo informacion del Sujeto Retenido

																																				var proveedor = resultadoTXTRetencionesSICORE[i].getValue('custrecord_l54_ret_ref_proveedor');

																																				// Obtengo el Numero de Documento

																																				var nroDocumento = resultadoProveedor.getFieldValue('custentity_l54_cuit_entity');
																																				if (!isEmpty(nroDocumento)) {

																																					// Formateo el Documento
																																					nroDocumento = nroDocumento.replace(/-/g, '');
																																					nroDocumento = nroDocumento.replace(/\./g, '');
																																					// Elimino Blancos
																																					var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');

																																					retencionSICORE.retencion.numeroDocumento = padding_right(numeroDocumentoFinal, " ", 20);
																																					retencionSICORE.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);

																																					// Obtengo la Razon Social
																																					var razonSocial = resultadoProveedor.getFieldValue('companyname');
																																					if (isEmpty(razonSocial)) {
																																						// Busco Nombre y Apellido
																																						var apellido = resultadoProveedor.getFieldValue('lastname');
																																						var nombre = resultadoProveedor.getFieldValue('firstname');
																																						razonSocial = apellido + " " + nombre;
																																					}

																																					razonSocial = razonSocial.replace(/(?:\r\n|\r|\n)/g, '');

																																					if (!isEmpty(razonSocial)) {
																																						retencionSICORE.sujeto.razonSocial = padding_right(normalize(razonSocial.substring(0, 19)), " ", 20);
																																						// Nuevo
																																						var cantidadDirecciones = resultadoProveedor.getLineItemCount('addressbook');

																																						var numeroLinea = 0;
																																						if (cantidadDirecciones > 0) {
																																							if (cantidadDirecciones > 1) {
																																								// Busco la de Facturacion Predeterminado
																																								var numLinea = resultadoProveedor.findLineItemValue('addressbook', 'defaultbilling', 'T');
																																								if (!isEmpty(numLinea) && numLinea > 0) {
																																									numeroLinea = numLinea;
																																								} else {
																																									// Tomo la Primera
																																									numeroLinea = 1;
																																								}

																																							} else {
																																								numeroLinea = 1;
																																							}

																																						} else {
																																							numeroLinea = 0;
																																						}

																																						var valorSiNoPExisteDato = 'NO POSEE';

																																						// Nuevo
																																						if (!isEmpty(numeroLinea) && numeroLinea > 0) {
																																							// Obtengo Domicilio Fiscal
																																							//var domicilioFiscal = resultadoProveedor[0].getValue('address1');
																																							var domicilioFiscal = isEmpty(resultadoProveedor.getLineItemValue('addressbook', 'addr1', numeroLinea)) ? valorSiNoPExisteDato : resultadoProveedor.getLineItemValue('addressbook', 'addr1', numeroLinea);

																																							if (!isEmpty(domicilioFiscal)) {

																																								domicilioFiscal = domicilioFiscal.replace(/(?:\r\n|\r|\n)/g, '');
																																								retencionSICORE.sujeto.domicilioFiscal = padding_right(normalize(domicilioFiscal.substring(0, 19)), " ", 20);
																																								// Obtengo Localidad
																																								//var localidad = resultadoProveedor[0].getValue('city');
																																								var localidad = isEmpty(resultadoProveedor.getLineItemValue('addressbook', 'city', numeroLinea)) ? valorSiNoPExisteDato : resultadoProveedor.getLineItemValue('addressbook', 'city', numeroLinea);

																																								if (!isEmpty(localidad)) {

																																									localidad = localidad.replace(/(?:\r\n|\r|\n)/g, '');
																																									retencionSICORE.sujeto.localidad = padding_right(normalize(localidad.substring(0, 19)), " ", 20);
																																									// Obtengo Codigo de Provincia
																																									//var provincia = resultadoProveedor[0].getValue('state');
																																									//var provincia = resultadoProveedor.getLineItemValue('addressbook', 'custrecord_l54_provincia', numeroLinea);
																																									var subrecordAddress = resultadoProveedor.viewLineItemSubrecord('addressbook', 'addressbookaddress', numeroLinea);
																																									if (!isEmpty(subrecordAddress)) {

																																										var provincia = isEmpty(subrecordAddress.getFieldValue('custrecord_l54_provincia')) ? valorSiNoPExisteDato : subrecordAddress.getFieldValue('custrecord_l54_provincia'); // get 'country' field of address subrecord

																																										if (!isEmpty(provincia)) {
																																											//nlapiLogExecution('DEBUG', 'generarTXT_SICORE - Retenciones', 'Provincia ID : ' + provincia);

																																											var codigoProvincia = '';

																																											if (provincia == valorSiNoPExisteDato) {

																																												codigoProvincia = '99';

																																											} else {
																																												// Busco el Codigo de Provincia SICORE
																																												var filtroProvincia = new Array();
																																												//filtroProvincia[0] = new nlobjSearchFilter('custrecord_l54_sic_codigo_prov_provincia', null, 'is', provincia);
																																												filtroProvincia[0] = new nlobjSearchFilter('internalid', null, 'is', provincia);

																																												var columnaProvincia = new Array();
																																												columnaProvincia[0] = new nlobjSearchColumn('custrecord_l54_sic_codigo_prov_codigo');

																																												var resultadoProvincia = new nlapiSearchRecord('customrecord_l54_sic_codigo_provincia', null, filtroProvincia, columnaProvincia);
																																											}

																																											if ((!isEmpty(resultadoProvincia) && resultadoProvincia.length > 0) || !isEmpty(codigoProvincia)) {

																																												codigoProvincia = isEmpty(codigoProvincia) ? resultadoProvincia[0].getValue('custrecord_l54_sic_codigo_prov_codigo') : codigoProvincia;

																																												//nlapiLogExecution('DEBUG', 'generarTXT_SICORE - Retenciones', 'Codigo Prov ID : ' + codigoProvincia);

																																												if (!isEmpty(codigoProvincia)) {
																																													retencionSICORE.sujeto.codigoProvincia = padding_left(codigoProvincia, 0, 2);

																																													// Obtengo Codigo Postal
																																													//var codigoPostal = resultadoProveedor[0].getValue('zipcode');
																																													var codigoPostal = isEmpty(resultadoProveedor.getLineItemValue('addressbook', 'zip', numeroLinea)) ? ' ' : resultadoProveedor.getLineItemValue('addressbook', 'zip', numeroLinea);

																																													if (!isEmpty(codigoPostal)) {

																																														retencionSICORE.sujeto.codigoPostal = padding_right(codigoPostal.substring(0, 7), " ", 8);
																																														// Obtengo Tipo de Documento

																																														var tipoDocumento = resultadoProveedor.getFieldValue('custentity_l54_tipo_documento');
																																														if (!isEmpty(tipoDocumento)) {

																																															// Obtengo el Codigo de Documento SICORE
																																															var filtroTipoDoc = new Array();
																																															filtroTipoDoc[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																															var columnaTipoDoc = new Array();
																																															columnaTipoDoc[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sic');

																																															var resultadoTipoDoc = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDoc, columnaTipoDoc);

																																															if (!isEmpty(resultadoTipoDoc) && resultadoTipoDoc.length > 0) {
																																																var codigoTipoDocumento = resultadoTipoDoc[0].getValue('custrecord_l54_tipo_doc_sic');
																																																if (!isEmpty(codigoTipoDocumento)) {
																																																	retencionSICORE.sujeto.tipoDocumento = padding_left(codigoTipoDocumento, 0, 2);
																																																} else {
																																																	errorGlobal = true;
																																																	descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																																																}
																																															} else {
																																																errorGlobal = true;
																																																descripcionError = "Error Obteniendo Codigo De Tipo De Documento del Proveedor";
																																															}
																																														} else {
																																															errorGlobal = true;
																																															descripcionError = "Error Obteniendo Tipo De Documento del Proveedor";
																																														}

																																													} else {
																																														errorGlobal = true;
																																														descripcionError = "Error Obteniendo Codigo Postal del Proveedor";
																																													}
																																												} else {
																																													errorGlobal = true;
																																													descripcionError = "Codigo de Provincia Invalido";
																																												}
																																											} else {
																																												errorGlobal = true;
																																												descripcionError = "Error Obteniendo Codigo de Provincia";
																																											}
																																										} else {
																																											errorGlobal = true;
																																											descripcionError = "Error Obteniendo Provincia del Proveedor";
																																										}
																																									} else {
																																										errorGlobal = true;
																																										descripcionError = "Error Obteniendo SubRecord de Direccion del Proveedor";
																																									}

																																								} else {
																																									errorGlobal = true;
																																									descripcionError = "Error Obteniendo Localidad del Proveedor";
																																								}
																																							} else {
																																								errorGlobal = true;
																																								descripcionError = "Error Obteniendo Domicilio Fiscal del Proveedor";
																																							}
																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Obteniendo Linea de Direccion del Proveedor";
																																						}

																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "Error Obteniendo Razon Social del Proveedor";
																																					}

																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																																				}

																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "Error Tipo de Documento SICORE No Configurado Correctamente";
																																			}
																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "Error Obteniendo Tipo de Documento";
																																		}

																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																																	}
																																} else {
																																	errorGlobal = true;
																																	descripcionError = "Falta Configurar Fecha de Boletin del Proveedor";
																																}

																															} else {
																																errorGlobal = true;
																																descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																															}
																														} else {
																															errorGlobal = true;
																															descripcionError = "Falta Configurar Codigo de Suspension del Sujeto Retenido";
																														}
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Obteniendo el Codigo de Suspension del Sujeto Retenido";
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo el Codigo de Condicion";
																												}
																											} else {
																												errorGlobal = true;
																												descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																										}

																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo Informacion del Proveedor";
																									}

																								} else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo Proveedor";
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Formateando la Fecha de Retencion";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo Fecha De Retencion";
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo Base De Calculo";
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Codigo de Operacion Invalido";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo el Codigo de Operacion";
																			}

																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo el Codigo de Operacion";
																		}

																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Codigo de Regimen";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo El Tipo De Impuesto";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo El Tipo De Impuesto";
															}

														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Importe del Comprobante";
														}

													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
												}

												/*} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
												}*/
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha del Comprobante";
										}

									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha del Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}

				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSICORE.sujeto != null) {

						if (retencionSICORE.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							if (!isEmpty(contenidoTXTSujeto)) {
								contenidoTXTSujeto += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Retenciones Generado Correctamente";
							contenidoTXT += retencionSICORE.retencion.codigoComprobante + retencionSICORE.retencion.fechaComprobante + retencionSICORE.retencion.numeroComprobante +
								retencionSICORE.retencion.importeComprobante + retencionSICORE.retencion.tipoImpuesto + retencionSICORE.retencion.codigoRegimen + retencionSICORE.retencion.codigoOperacion +
								retencionSICORE.retencion.baseCalculo + retencionSICORE.retencion.fechaRetencion + retencionSICORE.retencion.codigoCondicion + retencionSICORE.retencion.codigoSujetoSusp +
								retencionSICORE.retencion.importeRetencion + retencionSICORE.retencion.porcentajeExcl + retencionSICORE.retencion.fechaBoletin +
								retencionSICORE.retencion.tipoDocSujeto + retencionSICORE.retencion.numeroDocumento + retencionSICORE.retencion.numeroCertificado + retencionSICORE.retencion.denominacion +
								retencionSICORE.retencion.acrecentamiento + retencionSICORE.retencion.cuitPaisRetenido + retencionSICORE.retencion.cuitOrdenante;
							// Para Informacion del Sujeto Retenido
							contenidoTXTSujeto += retencionSICORE.sujeto.numeroDocSujeto + retencionSICORE.sujeto.razonSocial + retencionSICORE.sujeto.domicilioFiscal + retencionSICORE.sujeto.localidad +
								retencionSICORE.sujeto.codigoProvincia + retencionSICORE.sujeto.codigoPostal + retencionSICORE.sujeto.tipoDocumento;

							// Grabo Registro de TXT
							/*var estadoGeneracionTXTSujetos = null;
							var estadoGeneracionTXT = null;
							estadoGeneracionTXTSujetos = generarTXTSujetos(periodo, tipoOperacion, tipoRegimen, retencionSICORE.sujeto.idSujetoNetSuite, contenidoTXTSujeto, idRegistroLOG, idRetencionNetSuite);
							if (isEmpty(estadoGeneracionTXTSujetos) || !isEmpty(estadoGeneracionTXTSujetos) && estadoGeneracionTXTSujetos.errorGeneracion == true) {
							// Error Generando TXT
							error = true;
							descripcionMensaje = "Error Generando TXT Sujetos Retenidos";
							if (isEmpty(estadoGeneracionTXTSujetos))
							descripcionMensaje = estadoGeneracionTXTSujetos.descripcionError;
							errorGeneral = true;
							descripcionError = descripcionMensaje;
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
							}
							if (error == false) {
							estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);
							}

							if (error == false) {
							if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
							// Error Generando TXT
							error = true;
							descripcionMensaje = "Error Generando TXT Retenciones";
							if (isEmpty(estadoGeneracionTXT))
							descripcionMensaje = estadoGeneracionTXT.descripcionError;
							errorGeneral = true;
							descripcionError = descripcionMensaje;
							//retencionSICORE = grabarError(true, descripcionMensaje, true);
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
							}
							}*/

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSicore', 'Error Generando TXT Retenciones SICORE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSICORE) && resultadoTXTRetencionesSICORE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSicore', 'Error Obteniendo Retenciones SICORE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSicore', 'No se encontraron resultados para SICORE - Retenciones');
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
		if (!isEmpty(contenidoTXTSujeto)) {
			contenidoTXTSujeto += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSicore', 'Error Generando TXT SICORE - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SICORE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSICORE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSICORE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSicore', 'Finalizacion - Generacion TXT SICORE');

	retencionSICORE.contenidoTXT = contenidoTXT;
	retencionSICORE.contenidoTXTSujeto = contenidoTXTSujeto;
	return retencionSICORE;
}

function generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Inicio - Generacion TXT SIRE GANANCIAS EXTERIOR');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXTSujeto = "";

	try {
		var retencionSIRE_ganancias = new Object();
		retencionSIRE_ganancias.existenRetenciones = false;
		retencionSIRE_ganancias.error = false;
		retencionSIRE_ganancias.descripcionError = "";
		retencionSIRE_ganancias.procesoEncolado = false;
		retencionSIRE_ganancias.idLog = idRegistroLOG;
		retencionSIRE_ganancias.contenidoTXTSujeto = "";
		var iCont = 0;
		var filtroTXTRetencionesSIRE_ganancias = new Array();
		retencionSIRE_ganancias.contenidoTXT = "";
		var contenidoTXT = '';

		//se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTRetencionesSIRE_ganancias[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSIRE_ganancias[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		//Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sire_ext');
		search.addFilters(filtroTXTRetencionesSIRE_ganancias);
		var searchResults = search.runSearch();
		var resultadoTXTRetencionesSIREGanancias = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSIREGanancias = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSIREGanancias = resultadoTXTRetencionesSIREGanancias.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTRetencionesSIREGanancias)) {
			var columns = searchResults.getColumns();
			nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIREGanancias.length);

			for (var i = 0; i < resultadoTXTRetencionesSIREGanancias.length && procesoEncolado == false; i++) {
				retencionSIRE_ganancias.retencion = new Object();
				retencionSIRE_ganancias.sujeto = new Object();
				// Campos inicializados que se deben incluir en el TXT
				retencionSIRE_ganancias.retencion.formulario = '2003';
				retencionSIRE_ganancias.retencion.version = '0100';
				retencionSIRE_ganancias.retencion.cod_trazabilidad = padding_right(' ', ' ', 10);
				retencionSIRE_ganancias.retencion.impuesto = '218';
				//retencionSIRE.contenidoTXT = retencionSIRE.retencion.formulario + retencionSIRE.retencion.version + retencionSIRE.retencion.cod_trazabilidad;
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var refComprobante = resultadoTXTRetencionesSIREGanancias[i].getValue('custrecord_l54_ret_ref_pago_prov');

				// Verifico si existe referencia de pago a proveedor
				if (!isEmpty(refComprobante)) {
					var idRetencionNetSuite = resultadoTXTRetencionesSIREGanancias[i].getId();
					var tipoComprobante = obtenerCodigoComprobante(refComprobante, 'sire', subsidiaria);

					if (!isEmpty(tipoComprobante)) {
						if (tipoComprobante === '01' || tipoComprobante === '02' || tipoComprobante === '03' || tipoComprobante === '04' || tipoComprobante === '05' || tipoComprobante === '06' || tipoComprobante === '09') {
							var regimen = '';
							// Obtengo los valores de los campos que necesito y lleno el contenido del TXT
							retencionSIRE_ganancias.retencion.tipoComprobante = padding_left(tipoComprobante, '0', 2);
							// Obtengo el tipo de Comprobante netsuite
							var filtroComprobanteNS = new Array();
							filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

							var columnaComprobanteNS = new Array();
							columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

							var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

							if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

								tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

								if (!isEmpty(tipoComprobanteNS)) {
									// Obtengo Informacion Adicional del Pago a Proveedor
									var filtroPagoProveedor = new Array();
									filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

									/* var columnaPagoProveedor = new Array();
									columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
									columnaPagoProveedor[1] = new nlobjSearchColumn('total');

									var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */

									var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);

									if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
										var columnasResultadoPagoProveedor = resultadoPagoProveedor[0].getAllColumns();
										var cuit_subsidiaria = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[4]);
										retencionSIRE_ganancias.retencion.cuit = padding_left(cuit_subsidiaria.replace(/\-/g, ''), '0', 11);

										if (!isEmpty(retencionSIRE_ganancias.retencion.cuit)) {
											regimen = resultadoTXTRetencionesSIREGanancias[i].getValue('custrecord_l54_ret_codigo_regimen');

											if (!isEmpty(regimen)) {
												retencionSIRE_ganancias.retencion.regimen = padding_left(regimen, '0', 3);
												retencionSIRE_ganancias.retencion.cuit_ord = padding_left(resultadoTXTRetencionesSIREGanancias[i].getValue(columns[53]), '0', 11);
												// Fecha retención y tratamiento de la data
												var fechaRetencion = resultadoTXTRetencionesSIREGanancias[i].getValue('custrecord_l54_ret_fecha');

												if (!isEmpty(fechaRetencion)) {

													var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz'),
														diaRetencion = fechaDate_ret.getDate(),
														mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10),
														anioRetencion = fechaDate_ret.getFullYear();

													//var fecha_ret = new Date(anioRetencion, mesRetencion - 1, diaRetencion);
													var fecha_sire_menor = new Date(2015, 02, 01); //los meses van desde 0 a 11, empezando por enero con el mes 0

													if (fechaDate_ret > fecha_sire_menor) {
														fechaRetencion = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
														retencionSIRE_ganancias.retencion.fecha = fechaRetencion;
														// Fecha del comprobante y tratamiento de la data
														var fechaComprobante = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[13]);

														if (!isEmpty(fechaComprobante)) {
															var fechaDate_comp = nlapiStringToDate(fechaComprobante, 'datetimetz'),
																dia_comp = fechaDate_comp.getDate(),
																mes_comp = parseInt(fechaDate_comp.getMonth(), 10) + parseInt(1, 10),
																anio_comp = fechaDate_comp.getFullYear();

															if (fechaDate_comp <= fechaDate_ret) {
																if (tipoComprobante === '03') {
																	retencionSIRE_ganancias.retencion.fechaComprobante = retencionSIRE_ganancias.retencion.fecha;
																} else {
																	fechaComprobante = padding_left(dia_comp, '0', 2) + "/" + padding_left(mes_comp, '0', 2) + "/" + anio_comp;
																	retencionSIRE_ganancias.retencion.fechaComprobante = fechaComprobante;
																}

																// Nro comprobante
																var numerador = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[14]);
																if (!isEmpty(numerador)) {
																	var numero_aux = numerador.toString().substr(-8);
																	var numero_comprobante = '';
																	var puntoVenta = resultadoTXTRetencionesSIREGanancias[i].getValue('custrecord_l54_ret_pv_pago_prov');
																	if (tipoComprobante === '01' || tipoComprobante === '02' || tipoComprobante === '03' || tipoComprobante === '04') {
																		numero_comprobante = padding_left(puntoVenta.toString(), '0', 5) + '-' + padding_left(numero_aux.toString(), '0', 8);
																	} else {
																		if (tipoComprobante === '05' || tipoComprobante === '09') {
																			numero_comprobante = padding_left(puntoVenta.toString(), '0', 5) + padding_left(numero_aux.toString(), '0', 11);
																		} else {
																			numero_comprobante = padding_left(puntoVenta.toString(), '0', 5) + padding_left(numero_aux.toString(), '0', 8);
																		}
																	}
																	retencionSIRE_ganancias.retencion.numeroComprobante = padding_right(numero_comprobante, ' ', 16);
																	//Importe Comprobante
																	// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
																	var importeComprobante = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[7]);
																	var noRetencion = '0';
																	if (!isEmpty(importeComprobante)) {

																		if (noRetencion === '0' && parseFloat(importeComprobante) > 0) {
																			retencionSIRE_ganancias.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																			// Los campos que no son obligatorios los dejé en blanco
																			var filler = padding_right(' ', ' ', 14),
																				nro_certificado = padding_left('0', '0', 25),
																				fecha_certificado = padding_left(' ', ' ', 10),
																				importe_certificado = padding_left('0.00', '0', 14),
																				motivo_EmisionNC = padding_right(' ', ' ', 30),
																				motivo_noRetencion = padding_right(' ', ' ', 30),
																				aplica_cdi = '0', //PREGUNTAR SI APLICA O NO
																				aplica_acrecentamiento = '0';

																			//Codigo alicuota sacado de acuerdo al tipo de regimen
																			retencionSIRE_ganancias.retencion.codigo_alicuota = retencionSIRE_ganancias.retencion.regimen === '903' ? '020' : '006';
																			//Cuit proveedor país de origen
																			var claveNIF = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[44]);
																			if (!isEmpty(claveNIF)) {
																				retencionSIRE_ganancias.retencion.NIF = padding_right(claveNIF, ' ', 50);
																				var fullname_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[45]);

																				if (!isEmpty(fullname_proveedor)) {
																					retencionSIRE_ganancias.retencion.fullName = padding_right(fullname_proveedor, ' ', 60);
																					var country_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[46]),
																						state_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[47]),
																						city_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[48]),
																						zipcode_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[49]),
																						address_proveedor = '';

																					address_proveedor = country_proveedor + ' ' + state_proveedor + ' ' + city_proveedor + ' ' + zipcode_proveedor;

																					if (!isEmpty(address_proveedor)) {
																						retencionSIRE_ganancias.retencion.address_proveedor = address_proveedor.length > 60 ? normalize(address_proveedor.substr(0, 60)) : padding_right(normalize(address_proveedor), ' ', 60);
																						var pais_origen_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue(columns[52]);

																						if (!isEmpty(pais_origen_proveedor)) {
																							//Extraigo el código del país desde la tabla Paises FEX
																							var codigo_pais = countryProveedor(pais_origen_proveedor);
																							retencionSIRE_ganancias.retencion.pais_proveedor = padding_left(codigo_pais, '0', 3);
																							//nlapiLogExecution('DEBUG', 'codigo pais', codigo_pais);

																							var id_proveedor = resultadoTXTRetencionesSIREGanancias[i].getValue('custrecord_l54_ret_ref_proveedor');
																							var isperson = isPersonProveedor(id_proveedor);
																							//Pregunto si es false o true por el tipo de persona
																							if (isperson === 'F') {
																								retencionSIRE_ganancias.retencion.tipo_proveedor = 'J'; //persona jurídica
																							} else {
																								retencionSIRE_ganancias.retencion.tipo_proveedor = 'F'; //persona física
																							}

																							//nlapiLogExecution('DEBUG', 'tipo proveedor', isperson);

																							contenidoTXT += retencionSIRE_ganancias.retencion.formulario + retencionSIRE_ganancias.retencion.version + retencionSIRE_ganancias.retencion.cod_trazabilidad +
																								retencionSIRE_ganancias.retencion.cuit + retencionSIRE_ganancias.retencion.impuesto + retencionSIRE_ganancias.retencion.regimen + retencionSIRE_ganancias.retencion.cuit_ord +
																								retencionSIRE_ganancias.retencion.fecha + retencionSIRE_ganancias.retencion.tipoComprobante + retencionSIRE_ganancias.retencion.fechaComprobante +
																								retencionSIRE_ganancias.retencion.numeroComprobante + retencionSIRE_ganancias.retencion.importeComprobante + filler + nro_certificado + fecha_certificado +
																								importe_certificado + motivo_EmisionNC + noRetencion + motivo_noRetencion + aplica_cdi + retencionSIRE_ganancias.retencion.codigo_alicuota +
																								aplica_acrecentamiento + retencionSIRE_ganancias.retencion.NIF + retencionSIRE_ganancias.retencion.fullName + retencionSIRE_ganancias.retencion.address_proveedor +
																								retencionSIRE_ganancias.retencion.pais_proveedor + retencionSIRE_ganancias.retencion.tipo_proveedor + "\r\n";

																							///falta hacer la parte de tipo de persona
																							/*nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', contenidoTXT);
																							nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', contenidoTXT.length);*/
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo el País de residencia del Proveedor";
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo la Dirección del Proveedor";
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo el Nombre y Apellido del Proveedor";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo la Clave NIF del Proveedor";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "El Importe del Comprobante debe ser mayor que cero (0)";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Importe del Comprobante";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Número del Comprobante";
																}
															} else {
																errorGlobal = true;
																descripcionError = "La Fecha del Comprobante no puede ser mayor a la Fecha de la Retención";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo la Fecha del Comprobante";
														}
													} else {
														errorGlobal = true;
														descripcionError = "La Fecha de la Retención no puede ser menor al 01 de marzo de 2015";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo la Fecha de la Retención";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Regimen del Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el CUIT del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Información Adicional del pago a proveedor";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Información del tipoComprobanteNS";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Información del resultadoComprobanteNS";
							}
						} else {
							errorGlobal = true;
							descripcionError = "El Tipo de Comprobante no es válido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				if (errorGlobal == true) {
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Generando TXT Retenciones SIRE Ganancias Exterior: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIREGanancias) && resultadoTXTRetencionesSIREGanancias.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Obteniendo Retenciones SIRE Ganancias Exterior');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'No se encontraron resultados para SIRE - Ganancias del Exterior');
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSireGananciasExt', 'Error Generando TXT SIRE Ganancias Exterior - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIRE Ganancias Exterior - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIRE_ganancias = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIRE_ganancias = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSireGananciasExt', 'Finalizacion - Generacion TXT SIRE Ganancias Exterior');

	if (!isEmpty(contenidoTXT)) {
		retencionSIRE_ganancias.contenidoTXT = contenidoTXT;
	}

	return retencionSIRE_ganancias;

}

function generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Inicio - Generacion TXT SIRE SUSS');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXTSujeto = "";

	try {
		var retencionSIRE_SUSS = new Object();
		retencionSIRE_SUSS.existenRetenciones = false;
		retencionSIRE_SUSS.error = false;
		retencionSIRE_SUSS.descripcionError = "";
		retencionSIRE_SUSS.procesoEncolado = false;
		retencionSIRE_SUSS.idLog = idRegistroLOG;
		retencionSIRE_SUSS.contenidoTXTSujeto = "";
		var iCont = 0;
		var filtroTXTRetencionesSIRE_SUSS = new Array();
		var contenidoTXT = '';
		retencionSIRE_SUSS.contenidoTXT = '';

		var oneWorld = false;
		if (esOneworld()) {
			oneWorld = true;
		}

		var cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
		var cuitEmpresaFinal = '';
		if (!isEmpty(cuitEmpresa)) {
			// Formateo el Documento
			cuitEmpresa = cuitEmpresa.replace(/-/g, '');
			cuitEmpresa = cuitEmpresa.replace(/\./g, '');
			// Elimino Blancos
			cuitEmpresaFinal = cuitEmpresa.replace(/ /g, '&nbsp');
		}

		//se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTRetencionesSIRE_SUSS[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSIRE_SUSS[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
		//Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sire_suss');
		search.addFilters(filtroTXTRetencionesSIRE_SUSS);
		var searchResults = search.runSearch();
		var resultadoTXTRetencionesSIRESuus = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSIRESuus = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSIRESuus = resultadoTXTRetencionesSIRESuus.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTRetencionesSIRESuus)) {
			var columns = searchResults.getColumns();
			nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIRESuus.length);

			for (var i = 0; i < resultadoTXTRetencionesSIRESuus.length && procesoEncolado == false; i++) {
				retencionSIRE_SUSS.retencion = new Object();
				retencionSIRE_SUSS.sujeto = new Object();
				// Campos inicializados que se deben incluir en el TXT
				retencionSIRE_SUSS.retencion.formulario = '2004';
				retencionSIRE_SUSS.retencion.version = '0100';
				retencionSIRE_SUSS.retencion.cod_trazabilidad = padding_right(' ', ' ', 10);
				retencionSIRE_SUSS.retencion.impuesto = '353';
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var refComprobante = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_ref_pago_prov');
				// Verifico si existe referencia de pago a proveedor
				if (!isEmpty(refComprobante)) {
					var idRetencionNetSuite = resultadoTXTRetencionesSIRESuus[i].getId();
					var tipoComprobante = obtenerCodigoComprobante(refComprobante, 'siresuss', subsidiaria);
					if (!isEmpty(tipoComprobante)) {
						if (tipoComprobante === '01' || tipoComprobante === '02' || tipoComprobante === '03' || tipoComprobante === '05') {
							var regimen = '';
							retencionSIRE_SUSS.retencion.tipoComprobante = padding_left(tipoComprobante, '0', 2);
							// Obtengo el tipo de Comprobante netsuite
							var filtroComprobanteNS = new Array();
							filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

							var columnaComprobanteNS = new Array();
							columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

							var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

							if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

								tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

								if (!isEmpty(tipoComprobanteNS)) {
									// Obtengo Informacion Adicional del Pago a Proveedor
									var filtroPagoProveedor = new Array();
									filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

									/* var columnaPagoProveedor = new Array();
									columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
									columnaPagoProveedor[1] = new nlobjSearchColumn('total');

									var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */
									var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);

									if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
										var columnasResultadoPagoProveedor = resultadoPagoProveedor[0].getAllColumns();
										// Obtengo los valores de los campos que necesito y lleno el contenido del TXT
										if (oneWorld) {
											var cuit_subsidiaria = resultadoTXTRetencionesSIRESuus[i].getValue(columns[4]);
											retencionSIRE_SUSS.retencion.cuit = padding_left(cuit_subsidiaria.replace(/\-/g, ''), '0', 11);
										} else {
											retencionSIRE_SUSS.retencion.cuit = padding_left(cuitEmpresaFinal, '0', 11);
										}

										if (!isEmpty(retencionSIRE_SUSS.retencion.cuit)) {
											//retencionSIRE_SUSS.contenidoTXT += retencionSIRE_SUSS.retencion.cuit + retencionSIRE_SUSS.retencion.impuesto;
											regimen = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_codigo_regimen');

											if (!isEmpty(regimen)) {
												retencionSIRE_SUSS.retencion.regimen = padding_left(regimen, '0', 3);
												retencionSIRE_SUSS.retencion.cuit_ord = padding_left(resultadoTXTRetencionesSIRESuus[i].getValue(columns[44]), '0', 11);
												// Fecha retención y tratamiento de la data
												var fechaRetencion = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_fecha');

												if (!isEmpty(fechaRetencion)) {
													var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz'),
														diaRetencion = fechaDate_ret.getDate(),
														mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10),
														anioRetencion = fechaDate_ret.getFullYear();

													var fecha_sire_menor = new Date(2015, 02, 01); //los meses van desde 0 a 11, empezando por enero con el mes 0

													if (fechaDate_ret > fecha_sire_menor) {
														fechaRetencion = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
														retencionSIRE_SUSS.retencion.fecha = fechaRetencion;
														// Fecha del comprobante y tratamiento de la data
														var fechaComprobante = resultadoTXTRetencionesSIRESuus[i].getValue(columns[12]);

														if (!isEmpty(fechaComprobante)) {
															var fechaDate_comp = nlapiStringToDate(fechaComprobante, 'datetimetz'),
																dia_comp = fechaDate_comp.getDate(),
																mes_comp = parseInt(fechaDate_comp.getMonth(), 10) + parseInt(1, 10),
																anio_comp = fechaDate_comp.getFullYear();

															if (fechaDate_comp <= fechaDate_ret) {
																if (tipoComprobante === '03') {
																	retencionSIRE_SUSS.retencion.fechaComprobante = retencionSIRE_SUSS.retencion.fecha;
																} else {
																	fechaComprobante = padding_left(dia_comp, '0', 2) + "/" + padding_left(mes_comp, '0', 2) + "/" + anio_comp;
																	retencionSIRE_SUSS.retencion.fechaComprobante = fechaComprobante;
																}

																// Nro comprobante
																var numerador = resultadoTXTRetencionesSIRESuus[i].getValue(columns[13]);
																if (!isEmpty(numerador)) {
																	var numero_aux = numerador.toString().substr(-8);
																	var numero_comprobante = '';
																	var puntoVenta = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_pv_pago_prov');
																	if (tipoComprobante === '01' || tipoComprobante === '02' || tipoComprobante === '03') {
																		numero_comprobante = padding_left(puntoVenta.toString(), '0', 5) + '-' + padding_left(numero_aux.toString(), '0', 8);
																	} else {
																		if (tipoComprobante === '05') {
																			numero_comprobante = padding_left(puntoVenta.toString(), '0', 5) + padding_left(numero_aux.toString(), '0', 11);
																		}
																	}
																	retencionSIRE_SUSS.retencion.numeroComprobante = padding_right(numero_comprobante, ' ', 16);
																	//Importe Comprobante
																	// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
																	var importeComprobante = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[7]);
																	if (!isEmpty(importeComprobante)) {
																		if (parseFloat(importeComprobante) > 0) {
																			retencionSIRE_SUSS.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																			var tipoCambio = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_tipo_cambio');
																			// var importeRetencion = resultadoTXTRetencionesSIRESuus[i].getValue('custrecord_l54_ret_importe');
																			var importeRetencion = resultadoTXTRetencionesSIRESuus[i].getValue(columns[47]);

																			if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0) {
																				if (parseFloat(importeRetencion, 10) <= parseFloat(importeComprobante, 10)) {
																					retencionSIRE_SUSS.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);

																					// Los campos que no son obligatorios los dejé en blanco
																					var nro_certificado = padding_left(' ', ' ', 25),
																						fecha_certificado = padding_left(' ', ' ', 10),
																						importe_certificado = padding_left('0.00', '0', 14),
																						otros_datos = padding_right(' ', ' ', 30);

																					contenidoTXT += retencionSIRE_SUSS.retencion.formulario + retencionSIRE_SUSS.retencion.version + retencionSIRE_SUSS.retencion.cod_trazabilidad +
																						retencionSIRE_SUSS.retencion.cuit + retencionSIRE_SUSS.retencion.impuesto + retencionSIRE_SUSS.retencion.regimen + retencionSIRE_SUSS.retencion.cuit_ord +
																						retencionSIRE_SUSS.retencion.fecha + retencionSIRE_SUSS.retencion.tipoComprobante + retencionSIRE_SUSS.retencion.fechaComprobante +
																						retencionSIRE_SUSS.retencion.numeroComprobante + retencionSIRE_SUSS.retencion.importeComprobante + retencionSIRE_SUSS.retencion.importeRetencion +
																						nro_certificado + fecha_certificado + importe_certificado + otros_datos + "\r\n";

																					/*nlapiLogExecution('DEBUG', 'Contenido del TXT', contenidoTXT);
																					nlapiLogExecution('DEBUG', 'Longitud del TXT', contenidoTXT.length);*/
																				} else {
																					errorGlobal = true;
																					descripcionError = "El Importe de la Retención no puede ser mayor al Importe de Comprobante";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo el Importe de la Retención";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "El Importe del Comprobante debe ser mayor que cero (0)";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Importe del Comprobante";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Número del Comprobante";
																}
															} else {
																errorGlobal = true;
																descripcionError = "La Fecha del Comprobante no puede ser mayor a la Fecha de la Retención";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo la Fecha del Comprobante";
														}
													} else {
														errorGlobal = true;
														descripcionError = "La Fecha de la Retención no puede ser menor al 01 de marzo de 2015";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo la Fecha de la Retención";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Regimen del Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el CUIT del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo los Resultados de Pago Proveedor";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo Comprobante NS o RT";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Resultado del Comprobante NS";
							}
						} else {
							errorGlobal = true;
							descripcionError = "El Tipo de Comprobante no es válido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				if (errorGlobal == true) {
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIRE SUSS: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIRESuus) && resultadoTXTRetencionesSIRESuus.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIRE SUSS');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'No se encontraron resultados para Retenciones SIRE - SUSS');
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSireSUUS', 'Error Generando TXT SIRE SUSS - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIRE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIRE_SUSS = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIRE_SUSS = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSireSUUS', 'Finalizacion - Generacion TXT SIRE RETENCIONES SUSS');

	if (!isEmpty(contenidoTXT)) {
		retencionSIRE_SUSS.contenidoTXT = contenidoTXT;
	}

	return retencionSIRE_SUSS;
}

function generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion) {

	nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Inicio - Generacion TXT SIRCAR - RETENCION');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXTSujeto = "";

	try {
		var retencionSIRCAR = new Object();
		retencionSIRCAR.existenRetenciones = false;
		retencionSIRCAR.error = false;
		retencionSIRCAR.descripcionError = "";
		retencionSIRCAR.procesoEncolado = false;
		retencionSIRCAR.idLog = idRegistroLOG;
		retencionSIRCAR.contenidoTXTSujeto = "";
		var iCont = 0;
		var iContAn = 0;
		var filtroTXTRetencionesSIRCAR = new Array();
		var filtroTXTAnulacionRetencionesSIRCAR = new Array();
		var contenidoTXT = '';
		retencionSIRCAR.contenidoTXT = '';
		var idRetencionNetSuite = '';
		var refComprobante = '';

		//se carga como filtro el rango de fecha y la subsidiaria seleccionado en el SUITELET
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			filtroTXTAnulacionRetencionesSIRCAR[iContAn++] = new nlobjSearchFilter('custrecord_l54_anul_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria)) {
			filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
			filtroTXTAnulacionRetencionesSIRCAR[iContAn++] = new nlobjSearchFilter('custrecord_l54_anul_ret_subsidiaria', null, 'is', subsidiaria);
		}

		if (!isEmpty(jurisdiccion)) {
			filtroTXTRetencionesSIRCAR[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_jurisdiccion', null, 'anyof', jurisdiccion);
			filtroTXTAnulacionRetencionesSIRCAR[iContAn++] = new nlobjSearchFilter('custrecord_l54_anul_ret_jurisdiccion', null, 'anyof', jurisdiccion);
		}

		//Obtengo la información llamando al SaveSearch de SIRE - Ret. exterior y le añado los filtros para enontrar las retenciones
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sircar_santafe');
		search.addFilters(filtroTXTRetencionesSIRCAR);
		var searchResults = search.runSearch();
		var resultadoTXTRetencionesSIRCAR = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSIRCAR = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSIRCAR = resultadoTXTRetencionesSIRCAR.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		var search1 = new nlapiLoadSearch('customrecord_l54_anulacion_retencion', 'customsearch_l54_anul_ret_sircar_santafe');
		search1.addFilters(filtroTXTAnulacionRetencionesSIRCAR);
		var searchResults1 = search1.runSearch();
		var resultadoTXTAnulacionRetencionesSIRCAR = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado1; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado1 = searchResults1.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado1) && resultado1.length > 0) {
				if (resultIndex == 0)
					resultadoTXTAnulacionRetencionesSIRCAR = resultado1; //Primera ve inicializa
				else
					resultadoTXTAnulacionRetencionesSIRCAR = resultadoTXTAnulacionRetencionesSIRCAR.concat(resultado1);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado1) && resultado1.length > 0)
		//var aux_num_renglon = 1;
		if (!isEmpty(resultadoTXTRetencionesSIRCAR)) {
			var columns = searchResults.getColumns();
			var formatoTXTSircar = "";
            
			nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIRCAR.length);

			if (resultadoTXTRetencionesSIRCAR.length > 0) {
				formatoTXTSircar = resultadoTXTRetencionesSIRCAR[0].getValue(columns[44]);
			}

			if ((!isEmpty(formatoTXTSircar) && formatoTXTSircar > 0) || (resultadoTXTRetencionesSIRCAR.length == 0 && (isEmpty(formatoTXTSircar) || formatoTXTSircar == ""))) {
				for (var i = 0; i < resultadoTXTRetencionesSIRCAR.length && procesoEncolado == false; i++) {
					var a = i + 1;
              		var num_renglon = padding_left(a.toString(), "0", 5);
					retencionSIRCAR.retencion = new Object();
					retencionSIRCAR.sujeto = new Object();
					// Campos inicializados que se deben incluir en el TXT
					//var num_reglon_string = aux_num_renglon.toString();
					retencionSIRCAR.retencion.nro_renglon = num_renglon;
					aux_num_renglon = aux_num_renglon + 1;
					retencionSIRCAR.retencion.origen_comprobante = '1'; // Significa que el comprobante es Generado por Software propio del Agente
					retencionSIRCAR.retencion.tipo_comprobante = '1'; // Significa que es Comprobante de Retención
					// Obtengo el Codigo de Comprobante
					existenRetenciones = true;
					errorGlobal = false;
					descripcionError = "";
					refComprobante = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_ref_pago_prov');

					// Verifico si existe referencia de pago a proveedor
					if (!isEmpty(refComprobante)) {
						idRetencionNetSuite = resultadoTXTRetencionesSIRCAR[i].getId();

						// 4.- Obtengo el Nro Comprobante
						var numerador = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_cod_pago_prov');

						if (!isEmpty(numerador)) {
							var numero_aux = numerador.toString().substr(-8);
							var numero_comprobante = '';
							var puntoVenta = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_pv_pago_prov');
							numero_comprobante = padding_left(puntoVenta.toString(), '0', 4) + padding_left(numero_aux.toString(), '0', 8);
							if (formatoTXTSircar == 2 && (resultadoTXTRetencionesSIRCAR[i].getValue(columns[6]) == '914' || resultadoTXTRetencionesSIRCAR[i].getValue(columns[6]) == '904')) {
								numero_comprobante = '000000000000';
							}
							retencionSIRCAR.retencion.numeroComprobante = padding_right(numero_comprobante, ' ', 12);

							// 5.- Obtengo el cuit del contribuyente
							var cuit_contribuyente = resultadoTXTRetencionesSIRCAR[i].getValue(columns[4]);
							retencionSIRCAR.retencion.cuit = padding_left(cuit_contribuyente.replace(/\-/g, ''), '0', 11);

							if (!isEmpty(retencionSIRCAR.retencion.cuit)) {

								// 6.- Obtengo la fecha de la retención
								var fechaRetencion = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_fecha');

								if (!isEmpty(fechaRetencion)) {

									var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz');
									var diaRetencion = fechaDate_ret.getDate();
									var mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10);
									var anioRetencion = fechaDate_ret.getFullYear();

									fechaRetencion = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
									retencionSIRCAR.retencion.fecha = fechaRetencion;

									// 7.- Monto Sujeto a Retención o base cálculo.
									//var monto_suj_retencion = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_base_calculo');
									var monto_suj_retencion = resultadoTXTRetencionesSIRCAR[i].getValue(columns[43]);

									if (!isEmpty(monto_suj_retencion)) {

										//retencionSIRCAR.retencion.monto_suj_retencion = padding_left(monto_suj_retencion.toString().replace(/,/g, ''), '0', 12);
										retencionSIRCAR.retencion.monto_suj_retencion = padding_left(parseFloat(parseFloat(monto_suj_retencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, '.'), '0', 12);

										// 9.- Importe de la Retención, Monto Retenido.
										var importeRetencion = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_importe');
										var tipoCambio = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_tipo_cambio');
										if (!isEmpty(importeRetencion)) {

											//retencionSIRCAR.retencion.monto_retenido = padding_left(importeRetencion.toString().replace(/,/g, ''), '0', 12);
											retencionSIRCAR.retencion.monto_retenido = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, '.'), '0', 12);

											// 8.- Alicuota de la Retención.
											var alicuota = resultadoTXTRetencionesSIRCAR[i].getValue(columns[36]);
											if (!isEmpty(alicuota)) {
												retencionSIRCAR.retencion.alicuota = padding_left(alicuota.toString().replace(/,/g, ''), '0', 6);

												// 10.- Código de Régimen correspondiente
												var cod_regimen = resultadoTXTRetencionesSIRCAR[i].getValue('custrecord_l54_ret_codigo_regimen');

												if (!isEmpty(cod_regimen)) {

													retencionSIRCAR.retencion.cod_regimen = padding_left(cod_regimen, '0', 3);

													// 11.- Código de Jurisdicción (código en Convenio Multilateral de la jurisdicción a la cual está presentando la DDJJ)
													var cod_jurisdiccion = resultadoTXTRetencionesSIRCAR[i].getValue(columns[6]);

													if (!isEmpty(cod_jurisdiccion)) {

														retencionSIRCAR.retencion.cod_jurisdiccion = padding_left(cod_jurisdiccion, '0', 3);

														// NUEVO - Formato TXT Sircar 2021
														if (formatoTXTSircar == 2) {

															retencionSIRCAR.retencion.tipoOperacionRetencion = 1; // Retención Efectuada

															var fechaConstancia = resultadoTXTRetencionesSIRCAR[i].getValue(columns[45]);

															if (!isEmpty(fechaConstancia)) {

																retencionSIRCAR.retencion.fechaConstancia = padding_left(fechaConstancia, ' ', 10);
																var numeroConstanciaRetencion = resultadoTXTRetencionesSIRCAR[i].getValue(columns[5]);

																if (!isEmpty(numeroConstanciaRetencion)) {

																	var expRegNumeros = /[^0-9]/gi;
																	numeroConstanciaRetencion = numeroConstanciaRetencion.toString().replace(expRegNumeros, '');
																	numeroConstanciaRetencion = numeroConstanciaRetencion.toString().substr(-14);
																	retencionSIRCAR.retencion.numeroConstanciaRetencion = padding_left(numeroConstanciaRetencion, '0', 14);
																	retencionSIRCAR.retencion.nroConstanciaOriginal = padding_left('0', '0', 14);; // Número de Constancia Original - sólo aplica a retención de anulaciones - Como no existe, se deja en 0

																	contenidoTXT += retencionSIRCAR.retencion.nro_renglon + ',' + retencionSIRCAR.retencion.origen_comprobante + ',' + retencionSIRCAR.retencion.tipo_comprobante + ',' +
																		retencionSIRCAR.retencion.numeroComprobante + ',' + retencionSIRCAR.retencion.cuit + ',' + retencionSIRCAR.retencion.fecha + ',' +
																		retencionSIRCAR.retencion.monto_suj_retencion + ',' + retencionSIRCAR.retencion.alicuota + ',' + retencionSIRCAR.retencion.monto_retenido + ',' +
																		retencionSIRCAR.retencion.cod_regimen + ',' + retencionSIRCAR.retencion.cod_jurisdiccion + ',' + retencionSIRCAR.retencion.tipoOperacionRetencion + ',' +
																		retencionSIRCAR.retencion.fechaConstancia + ',' + retencionSIRCAR.retencion.numeroConstanciaRetencion + ',' + retencionSIRCAR.retencion.nroConstanciaOriginal + "\r\n";
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Número de Emisión de la Constancia";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo la Fecha de Emisión de la Constancia";
															}
														} else {

															contenidoTXT += retencionSIRCAR.retencion.nro_renglon + ',' + retencionSIRCAR.retencion.origen_comprobante + ',' + retencionSIRCAR.retencion.tipo_comprobante + ',' +
																retencionSIRCAR.retencion.numeroComprobante + ',' + retencionSIRCAR.retencion.cuit + ',' + retencionSIRCAR.retencion.fecha + ',' +
																retencionSIRCAR.retencion.monto_suj_retencion + ',' + retencionSIRCAR.retencion.alicuota + ',' + retencionSIRCAR.retencion.monto_retenido + ',' +
																retencionSIRCAR.retencion.cod_regimen + ',' + retencionSIRCAR.retencion.cod_jurisdiccion + "\r\n";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Código de la Jurisdicción";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Código de Regimen del Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Alicuota";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Importe de Retención";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto Sujeto a Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Fecha de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el CUIT del Contribuyente";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número del Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
					}

					if (errorGlobal == true) {
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIRCAR: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			} else {
				errorGeneral = true;
				descripcionError = 'Error Obteniendo el Formato del TXT SIRCAR para la jurisdicción seleccionada. Debe configurar el formato del TXT SIRCAR a utilizar de dicha jurisdicción, en el RT "Zona de Impuestos".';
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIRCAR) && resultadoTXTRetencionesSIRCAR.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSircarRetencion', 'Error Obteniendo Retenciones SIRCAR');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'No se encontraron resultados para SIRCAR - RETENCIONES');
		}

		if (!isEmpty(resultadoTXTAnulacionRetencionesSIRCAR)) {
			var columns = searchResults1.getColumns();
			var formatoTXTSircar = "";
            //var aux_num_renglon = 1;
			nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Cantidad Retenciones:' + resultadoTXTAnulacionRetencionesSIRCAR.length);

			if (resultadoTXTAnulacionRetencionesSIRCAR.length > 0) {
				formatoTXTSircar = resultadoTXTAnulacionRetencionesSIRCAR[0].getValue(columns[44]);
			}

			if ((!isEmpty(formatoTXTSircar) && formatoTXTSircar > 0) || (resultadoTXTAnulacionRetencionesSIRCAR.length == 0 && (isEmpty(formatoTXTSircar) || formatoTXTSircar == ""))) {
				for (var i = 0; i < resultadoTXTAnulacionRetencionesSIRCAR.length && procesoEncolado == false; i++) {
					retencionSIRCAR.retencion = new Object();
					retencionSIRCAR.sujeto = new Object();
					// Campos inicializados que se deben incluir en el TXT
                    var num_reglon_string = aux_num_renglon.toString();
					retencionSIRCAR.retencion.nro_renglon = padding_left(num_reglon_string.replace(/.,/g, ''), '0', 5);
					aux_num_renglon = aux_num_renglon + 1;
    				retencionSIRCAR.retencion.origen_comprobante = '1'; // Significa que el comprobante es Generado por Software propio del Agente
					retencionSIRCAR.retencion.tipo_comprobante = '2'; // Significa que es Comprobante de Retención
					// Obtengo el Codigo de Comprobante
					existenRetenciones = true;
					errorGlobal = false;
					descripcionError = "";
					refComprobante = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_anul_ret_ref_pago_prov');

					// Verifico si existe referencia de pago a proveedor
					if (!isEmpty(refComprobante)) {
						idRetencionNetSuite = resultadoTXTAnulacionRetencionesSIRCAR[i].getId();

						// 4.- Obtengo el Nro Comprobante
						var numerador = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_anul_ret_cod_pago_prov');

						if (!isEmpty(numerador)) {
							var numero_aux = numerador.toString().substr(-8);
							var numero_comprobante = '';
							var puntoVenta = resultadoTXTAnulacionRetencionesSIRCAR[i].getText('custrecord_l54_anul_ret_punt_vent');
							numero_comprobante = padding_left(puntoVenta.toString(), '0', 4) + padding_left(numero_aux.toString(), '0', 8);
							if (formatoTXTSircar == 2 && (resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[6]) == '914' || resultadoTXTRetencionesSIRCAR[i].getValue(columns[6]) == '904')) {
								numero_comprobante = '000000000000';
							}
							retencionSIRCAR.retencion.numeroComprobante = padding_right(numero_comprobante, ' ', 12);

							// 5.- Obtengo el cuit del contribuyente
							var cuit_contribuyente = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[4]);
							retencionSIRCAR.retencion.cuit = padding_left(cuit_contribuyente.replace(/\-/g, ''), '0', 11);

							if (!isEmpty(retencionSIRCAR.retencion.cuit)) {

								// 6.- Obtengo la fecha de la retención
								var fechaRetencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[23]);
								var fechaAnulacionRetencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_anul_ret_fecha');


								if (!isEmpty(fechaRetencion)) {

									var fechaDate_ret = nlapiStringToDate(fechaRetencion, 'datetimetz');
									var diaRetencion = fechaDate_ret.getDate();
									var mesRetencion = parseInt(fechaDate_ret.getMonth(), 10) + parseInt(1, 10);
									var anioRetencion = fechaDate_ret.getFullYear();

									fechaRetencion = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
									retencionSIRCAR.retencion.fecha = fechaRetencion;

									// 7.- Monto Sujeto a Retención o base cálculo.
									//var monto_suj_retencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_ret_base_calculo');
									var monto_suj_retencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[43]);

									if (!isEmpty(monto_suj_retencion)) {

										//retencionSIRCAR.retencion.monto_suj_retencion = padding_left(monto_suj_retencion.toString().replace(/,/g, ''), '0', 12);
										retencionSIRCAR.retencion.monto_suj_retencion = '-'+padding_left(parseFloat(parseFloat(monto_suj_retencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, '.'), '0', 11);

										// 9.- Importe de la Retención, Monto Retenido.
										var importeRetencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[7]);
										var tipoCambio = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[16]);
										if (!isEmpty(importeRetencion)) {

											//retencionSIRCAR.retencion.monto_retenido = padding_left(importeRetencion.toString().replace(/,/g, ''), '0', 12);
											retencionSIRCAR.retencion.monto_retenido = '-'+padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, '.'), '0', 11);

											// 8.- Alicuota de la Retención.
											var alicuota = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[36]);
											if (!isEmpty(alicuota)) {
												retencionSIRCAR.retencion.alicuota = padding_left(alicuota.toString().replace(/,/g, ''), '0', 6);

												// 10.- Código de Régimen correspondiente
												var cod_regimen = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[19]);

												if (!isEmpty(cod_regimen)) {

													retencionSIRCAR.retencion.cod_regimen = padding_left(cod_regimen, '0', 3);

													// 11.- Código de Jurisdicción (código en Convenio Multilateral de la jurisdicción a la cual está presentando la DDJJ)
													var cod_jurisdiccion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[6]);

													if (!isEmpty(cod_jurisdiccion)) {

														retencionSIRCAR.retencion.cod_jurisdiccion = padding_left(cod_jurisdiccion, '0', 3);

														// NUEVO - Formato TXT Sircar 2021
														if (formatoTXTSircar == 2) {

															retencionSIRCAR.retencion.tipoOperacionRetencion = 2; // Retención Efectuada

															var fechaConstancia = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_anul_ret_fecha');

															if (!isEmpty(fechaConstancia)) {
																var fechaDate_anul_ret = nlapiStringToDate(fechaConstancia, 'datetimetz');
																var diaAnulRetencion = fechaDate_anul_ret.getDate();
																var mesAnulRetencion = parseInt(fechaDate_anul_ret.getMonth(), 10) + parseInt(1, 10);
																var anioAnulRetencion = fechaDate_anul_ret.getFullYear();

																fechaAnulRetencion = padding_left(diaAnulRetencion, '0', 2) + "/" + padding_left(mesAnulRetencion, '0', 2) + "/" + anioAnulRetencion;

																retencionSIRCAR.retencion.fechaConstancia = padding_left(fechaAnulRetencion, ' ', 10);
																var numeroConstanciaRetencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue(columns[5]);
																var numeroConstanciaAnulacionRetencion = resultadoTXTAnulacionRetencionesSIRCAR[i].getValue('custrecord_l54_anul_ret_numerador');

																if (!isEmpty(numeroConstanciaRetencion)) {

																	var expRegNumeros = /[^0-9]/gi;
																	numeroConstanciaRetencion = numeroConstanciaRetencion.toString().replace(expRegNumeros, '');
																	numeroConstanciaRetencion = numeroConstanciaRetencion.toString().substr(-14);
																	retencionSIRCAR.retencion.nroConstanciaOriginal = padding_left(numeroConstanciaRetencion, '0', 14);
																	numeroConstanciaAnulacionRetencion = numeroConstanciaAnulacionRetencion.toString().replace(expRegNumeros, '');
																	numeroConstanciaAnulacionRetencion = numeroConstanciaAnulacionRetencion.toString().substr(-14);
																	retencionSIRCAR.retencion.numeroConstanciaRetencion = padding_left(numeroConstanciaAnulacionRetencion, '0', 14);
																	//retencionSIRCAR.retencion.nroConstanciaOriginal = padding_left('0', '0', 14);; // Número de Constancia Original - sólo aplica a retención de anulaciones - Como no existe, se deja en 0

																	contenidoTXT += retencionSIRCAR.retencion.nro_renglon + ',' + retencionSIRCAR.retencion.origen_comprobante + ',' + retencionSIRCAR.retencion.tipo_comprobante + ',' +
																		retencionSIRCAR.retencion.numeroComprobante + ',' + retencionSIRCAR.retencion.cuit + ',' + retencionSIRCAR.retencion.fecha + ',' +
																		retencionSIRCAR.retencion.monto_suj_retencion + ',' + retencionSIRCAR.retencion.alicuota + ',' + retencionSIRCAR.retencion.monto_retenido + ',' +
																		retencionSIRCAR.retencion.cod_regimen + ',' + retencionSIRCAR.retencion.cod_jurisdiccion + ',' + retencionSIRCAR.retencion.tipoOperacionRetencion + ',' +
																		retencionSIRCAR.retencion.fechaConstancia + ',' + retencionSIRCAR.retencion.numeroConstanciaRetencion + ',' + retencionSIRCAR.retencion.nroConstanciaOriginal + "\r\n";
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Número de Emisión de la Constancia";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo la Fecha de Emisión de la Constancia";
															}
														} else {

															contenidoTXT += retencionSIRCAR.retencion.nro_renglon + ',' + retencionSIRCAR.retencion.origen_comprobante + ',' + retencionSIRCAR.retencion.tipo_comprobante + ',' +
																retencionSIRCAR.retencion.numeroComprobante + ',' + retencionSIRCAR.retencion.cuit + ',' + retencionSIRCAR.retencion.fecha + ',' +
																retencionSIRCAR.retencion.monto_suj_retencion + ',' + retencionSIRCAR.retencion.alicuota + ',' + retencionSIRCAR.retencion.monto_retenido + ',' +
																retencionSIRCAR.retencion.cod_regimen + ',' + retencionSIRCAR.retencion.cod_jurisdiccion + "\r\n";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Código de la Jurisdicción";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Código de Regimen del Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Alicuota";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Importe de Retención";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto Sujeto a Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Fecha de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el CUIT del Contribuyente";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número del Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
					}

					if (errorGlobal == true) {
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIRCAR: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			} else {
				errorGeneral = true;
				descripcionError = 'Error Obteniendo el Formato del TXT SIRCAR para la jurisdicción seleccionada. Debe configurar el formato del TXT SIRCAR a utilizar de dicha jurisdicción, en el RT "Zona de Impuestos".';
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIRCAR) && resultadoTXTRetencionesSIRCAR.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSircarRetencion', 'Error Obteniendo Retenciones SIRCAR');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'No se encontraron resultados para SIRCAR - RETENCIONES');
		}

	} catch (e) {
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIRCAR; Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIRCAR = grabarError(true, 'Error Generando TXT de Retenciones SIRCAR', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIRCAR = grabarError(false, 'Generacion de TXT de Retenciones SIRCAR Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones SIRCAR Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSircarRetencion', 'Finalizacion - Generacion TXT DE RETENCIONES SIRCAR');

	if (!isEmpty(contenidoTXT)) {
		retencionSIRCAR.contenidoTXT = contenidoTXT.replace(/ /gi, '');
	}

	return retencionSIRCAR;
}

function generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion) {

	nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'Inicio - Generacion TXT SIRCAR Percepciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones SIRCAR";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";
	var idRetencionNetSuite = '';

	try {
		var percepcionSIRCAR = new Object();
		percepcionSIRCAR.retencion = new Object();
		percepcionSIRCAR.sujeto = new Object();
		percepcionSIRCAR.existenRetenciones = false;
		percepcionSIRCAR.error = false;
		percepcionSIRCAR.descripcionError = "";
		percepcionSIRCAR.procesoEncolado = false;
		percepcionSIRCAR.idLog = idRegistroLOG;
		percepcionSIRCAR.contenidoTXT = "";
		var formatoTXTSircar = '';
		var refComprobante = '';
		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria)) {
			filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		}

		nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'jurisdiccion: ' + jurisdiccion);
		if (!isEmpty(jurisdiccion)) {
			filtro[i++] = new nlobjSearchFilter('custcol_l54_jurisd_iibb_lineas', null, 'anyof', jurisdiccion);
		}

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_sircar_santafe');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			var aux_num_renglon = 1;
			nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'Cantidad Percepciones:' + completeResultSet.length);
			var columns = searchResults.getColumns();

			if (completeResultSet.length > 0) {
				formatoTXTSircar = completeResultSet[0].getValue(columns[15]);
			}

			if ((!isEmpty(formatoTXTSircar) && formatoTXTSircar > 0) || (completeResultSet.length == 0 && (isEmpty(formatoTXTSircar) || formatoTXTSircar == ""))) {
				var regimenes = getRegimenPercepcion(subsidiaria, jurisdiccion)
				nlapiLogExecution("DEBUG","regimenes", JSON.stringify(regimenes))
				for (i = 0; i < completeResultSet.length; i++) {
					percepcionSIRCAR.percepcion = new Object();
					percepcionSIRCAR.sujeto = new Object();
					var resultadoTXTPercepcionesSIRCAR = completeResultSet[i];
					existenPercepciones = true;
					errorGlobal = false;
					descripcionError = "";
					var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
					refComprobante = resultadoTXTPercepcionesSIRCAR.getValue('internalid');

					if (!isEmpty(refComprobante)) {
						var nroDocumento = resultadoTXTPercepcionesSIRCAR.getValue('custbody_54_cuit_entity');
						if (!isEmpty(nroDocumento)) {
							// Formateo el Documento
							nroDocumento = nroDocumento.replace(/-/g, '');
							nroDocumento = nroDocumento.replace(/\./g, '');
							// Elimino Blancos
							nroDocumento = nroDocumento.replace(/ /g, '&nbsp');
							if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
								// Formateo el Cuit
								percepcionSIRCAR.percepcion.cuit = padding_left(nroDocumento, "0", 11);
								// Obtengo la Fecha de Retencion
								var fechaPercepcion = resultadoTXTPercepcionesSIRCAR.getValue('trandate');
								if (!isEmpty(fechaPercepcion)) {
									// Formateo la Fecha
									var fechaPercepcionDate = nlapiStringToDate(fechaPercepcion, 'datetimetz');
									if (!isEmpty(fechaPercepcionDate)) {
										// Obtengo las Componentes de la Fecha
										var diaPercepcion = fechaPercepcionDate.getDate();
										var mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
										var anioPercepcion = fechaPercepcionDate.getFullYear();
										var fechaPercepcionFinal = padding_left(diaPercepcion, '0', 2) + "/" + padding_left(mesPercepcion, '0', 2) + "/" + anioPercepcion;
										percepcionSIRCAR.percepcion.fechaPercepcion = fechaPercepcionFinal;
										// Obtengo el Tipo de Comprobante
										var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'sircar', subsidiaria);

										if (!isEmpty(codigoComprobante)) {
											percepcionSIRCAR.percepcion.codigoComprobante = padding_left(codigoComprobante, '0', 3);
											// Obtengo el Numero de Emision (Numerador)
											var nro_comprobante = resultadoTXTPercepcionesSIRCAR.getValue(columns[4]);
											// Obtengo el Numero de Sucursal (Punto de Venta)
											var puntoVenta = resultadoTXTPercepcionesSIRCAR.getValue('custbody_l54_boca');

											if (!isEmpty(puntoVenta)) {
												percepcionSIRCAR.percepcion.numeroComprobante = nro_comprobante;
												// Obtengo la Letra del Comprobante
												var letraStr = resultadoTXTPercepcionesSIRCAR.getValue(columns[2]);
												percepcionSIRCAR.percepcion.letra = letraStr;
												// Obtengo el tipo de Cambio
												var tipoCambio = resultadoTXTPercepcionesSIRCAR.getValue('exchangerate');
												if (!isEmpty(tipoCambio)) {
													// Obtengo el Importe de la Percepcion

													var importePercepcion = resultadoTXTPercepcionesSIRCAR.getValue(columns[7]);
													// Genero el Absoluto
													var abs_importePercepcion = Math.abs(importePercepcion);
													//if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != '102' && (parseFloat(importePercepcion, 10) > 0.00)) || (codigoComprobante == '102' && (parseFloat(importePercepcion, 10) < 0.00)))) {
													if (!isEmpty(abs_importePercepcion) && abs_importePercepcion >= 0) {
														// Si es Nota de Credito, Va en Negativo
														var longitudImporte = 11;
														var caracterRelleno = '';
														if (codigoComprobante == '102') {
															//longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
															caracterRelleno = '-';
														}
														//percepcionSIRCAR.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
														
														if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[6] }) == "CustCred"){
														percepcionSIRCAR.percepcion.importePercepcion = "-" + padding_left(parseFloat(importePercepcion, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
														}else{
														percepcionSIRCAR.percepcion.importePercepcion = importePercepcion;
														}
														// Obtengo el Monto Imponible de Percepcion
														var montoImponible = resultadoTXTPercepcionesSIRCAR.getValue(columns[14]);
														// Genero el Absoluto
														var abs_montoImponible = Math.abs(montoImponible);
														//if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != '102' && (parseFloat(montoImponible, 10) > 0.00)) || (codigoComprobante == '102' && (parseFloat(montoImponible, 10) >= 0.00)))) {
														if (!isEmpty(abs_montoImponible) && abs_montoImponible >= 0) {
															// Si es Nota de Credito, Va en Negativo
															var longitudMontoImponible = 12;
															var caracterRellenoMontoImp = '';

															if (codigoComprobante == '102') {
																//longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
																caracterRellenoMontoImp = '-';
															}
															//percepcionSIRCAR.percepcion.montoImponible = caracterRelleno + padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
															//percepcionSIRCAR.percepcion.montoImponible = montoImponible;
															if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[6] }) == "CustCred"){
																percepcionSIRCAR.percepcion.montoImponible = "-" + padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 11);
															  }else{
																percepcionSIRCAR.percepcion.montoImponible = padding_left(parseFloat(parseFloat(montoImponible, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, "."), "0", 12);
															  }
															var cod_jurisdiccion = resultadoTXTPercepcionesSIRCAR.getValue(columns[10]);

															if (!isEmpty(cod_jurisdiccion)) {

																percepcionSIRCAR.percepcion.cod_jurisdiccion = padding_left(cod_jurisdiccion, '0', 3);
																var alicuota = resultadoTXTPercepcionesSIRCAR.getValue(columns[9]);
																percepcionSIRCAR.percepcion.alicuota = padding_left(alicuota, '0', 6);
																var regimenesResult = regimenes.filter(function (obj) {
																	return (obj.col0 == Number(percepcionSIRCAR.percepcion.alicuota))
																  })
																  nlapiLogExecution("DEBUG","regimenesResult", JSON.stringify(regimenesResult))
																  if(regimenesResult.length > 0){
																	var cod_regimen = regimenesResult[0].col1;
																  }else{
																	var cod_regimen = resultadoTXTPercepcionesSIRCAR.getValue(columns[12]);
																  }

																percepcionSIRCAR.percepcion.cod_regimen = padding_left(cod_regimen, '0', 3);

																if (formatoTXTSircar == 2) {
																	// NUEVO 2020 - Formato #2 del TXT SIRCAR
																	percepcionSIRCAR.percepcion.tipoOperacionPercepcion = '1'; // Operacion Efectuada

																	try {
																		if (codigoComprobante == '102') {
																			var recordTypeTransaction = resultadoTXTPercepcionesSIRCAR.getValue(columns[16]);

																			nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'recordTypeTransaction: ' + recordTypeTransaction + ' - refComprobante: ' + refComprobante);

																			var recordTransaction = nlapiLoadRecord(recordTypeTransaction, refComprobante);
																			var transaccion_referencia = recordTransaction.getFieldValue('createdfrom');

																			nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Se cargó el registro de la NC.');

																			if (isEmpty(transaccion_referencia)) {
																				transaccion_referencia = recordTransaction.getFieldValue('custbody_l54_transaccion_referencia');
																			}

																			// Se verifican los datos de la transacción de referencia
																			if (!isEmpty(transaccion_referencia)) {

																				var errorCargarTransaccion = false;

																				try {
																					var resultadoTransRef = nlapiLoadRecord('invoice', transaccion_referencia);
																					nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Es invoice');
																				} catch (errorInvoice) {
																					errorCargarTransaccion = true;
																					nlapiLogExecution('ERROR', 'percepcionesSIRCAR', 'Error al intentar cargar transacción - errorInvoice:' + errorInvoice.message);
																				}

																				if (errorCargarTransaccion) {
																					try {
																						var resultadoTransRef = nlapiLoadRecord('returnauthorization', transaccion_referencia);
																						nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'Es Autorización');
																					} catch (errorAutorizacion) {
																						nlapiLogExecution('ERROR', 'percepcionesSIRCAR', 'Error al intentar cargar transacción - errorAutorizacion:' + errorAutorizacion.message);
																					}
																				}

																				if (!isEmpty(resultadoTransRef)) {

																					var recordTypeTransRef = resultadoTransRef.getFieldValue('recordtype');
																					nlapiLogExecution('DEBUG', 'percepcionesSIRCAR', 'recordTypeTransRef: ' + recordTypeTransRef);

																					if (recordTypeTransRef == 'returnauthorization') {

																						var idCreatedFromAutorizacion = resultadoTransRef.getFieldValue('createdfrom');
																						var referenciaOfTransRef = nlapiLoadRecord('invoice', idCreatedFromAutorizacion);

																						if (!isEmpty(referenciaOfTransRef)) {

																							var nroConstanciaFinalSircar = numeroConstanciaFinalSIRCAR(referenciaOfTransRef);

																							if (!isEmpty(nroConstanciaFinalSircar) && !nroConstanciaFinalSircar.error) {
																								percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left(nroConstanciaFinalSircar.numeroConstancia, '0', 14);
																							} else {
																								errorGlobal = true;
																								descripcionError = nroConstanciaFinalSircar.mensaje + refComprobante;
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + '. No se encontró en NetSuite la transacción de referencia de la NC asociada a una autorización de devolución.';
																						}
																					} else {

																						var nroConstanciaFinalSircar = numeroConstanciaFinalSIRCAR(resultadoTransRef);

																						if (!isEmpty(nroConstanciaFinalSircar) && !nroConstanciaFinalSircar.error) {
																							percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left(nroConstanciaFinalSircar.numeroConstancia, '0', 14);
																						} else {
																							errorGlobal = true;
																							descripcionError = nroConstanciaFinalSircar.mensaje + refComprobante;
																						}
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + '. No se encontró en NetSuite la transacción de referencia de la NC.';
																				}
																			} else {

																				var nroTipoDocumentoReferencia = '1';
																				// Se verifican los campos de cabecera de la nota de crédito que hacen referencia a la transacción de referencia
																				var letraDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_letra_doc_ref');
																				var puntoVentaDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_pv_doc_ref');
																				var numeroDocumentoReferencia = recordTransaction.getFieldValue('custbody_l54_nro_doc_ref');

																				if (!isEmpty(letraDocumentoReferencia) && !isEmpty(puntoVentaDocumentoReferencia) && !isEmpty(numeroDocumentoReferencia)) {

																					var letraDocumentoReferenciaFinal = nlapiLookupField('customrecord_l54_letra_doc', letraDocumentoReferencia, 'name');
																					letraDocumentoReferenciaFinal = letraDocumentoReferenciaFinal.toString().substring(0, 1);

																					var puntoVentaDocumentoReferenciaFinal = nlapiLookupField('customrecord_l54_bocas', puntoVentaDocumentoReferencia, 'name');
																					puntoVentaDocumentoReferenciaFinal = puntoVentaDocumentoReferenciaFinal.toString().substr(-4);
																					puntoVentaDocumentoReferenciaFinal = padding_left(puntoVentaDocumentoReferenciaFinal, '0', 4);

																					var numeroDocumentoReferenciaFinal = padding_left(numeroDocumentoReferencia, '0', 8);

																					percepcionSIRCAR.percepcion.nroConstanciaOriginal = nroTipoDocumentoReferencia + letraDocumentoReferenciaFinal + puntoVentaDocumentoReferenciaFinal + numeroDocumentoReferenciaFinal;

																				} else {
																					errorGlobal = true;
																					descripcionError = "Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + '. No se encontró en NetSuite la transacción de referencia de la NC por los campos de cabecera.';
																				}
																			}
																		} else {
																			percepcionSIRCAR.percepcion.nroConstanciaOriginal = padding_left('0', '0', 14);
																		}
																	} catch (errorConsultaTransaccionReferencia) {
																		errorGlobal = true;
																		descripcionError = "EXCEPCION - Error consultando la transacción de referencia de la nota de crédito con ID INTERNO: " + refComprobante + ' - Detalles del Error: ' + errorConsultaTransaccionReferencia.message;
																	}
																}
															} else {
																nlapiLogExecution('DEBUG', 'ERROR COD. JURISDICCION', 'COD. JURISDICCION: ' + cod_jurisdiccion);
																errorGlobal = true;
																descripcionError = "El Codigo de Jurisdicción es Inválido";
															}
														} else {
															nlapiLogExecution('DEBUG', 'ERROR MONTO IMPONIBLE', 'MONTO IMPONIBLE: ' + montoImponible);
															errorGlobal = true;
															descripcionError = "El Monto Imponible es Invalido";
														}
													} else {
														nlapiLogExecution('DEBUG', 'ERROR importe percepcion', 'Importe Perc: ' + importePercepcion);
														errorGlobal = true;
														descripcionError = "El Importe de Percepcion es Invalido";
													}
												} else {
													nlapiLogExecution('DEBUG', 'ERROR tipo cambio', 'Tipo cambio: ' + tipoCambio);
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Tipo de Cambio";
												}
											} else {
												nlapiLogExecution('DEBUG', 'ERROR Punto de venta', 'Punto de Venta: ' + puntoVenta);
												errorGlobal = true;
												descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
											}
										} else {
											nlapiLogExecution('DEBUG', 'ERROR tipo Comprobante', 'Tipo Comprobante: ' + codigoComprobante);
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Codigo de Comprobante";
										}
									} else {
										nlapiLogExecution('DEBUG', 'ERROR fecha', 'formateando fecha: ' + fechaPercepcionDate);
										errorGlobal = true;
										descripcionError = "Error Formateando la Fecha de Percepcion";
									}
								} else {
									nlapiLogExecution('DEBUG', 'ERROR fecha', 'obteniendo fecha: ' + fechaPercepcionDate);
									errorGlobal = true;
									descripcionError = "Error Obteniendo Fecha De Percepcion";
								}
							} else {
								nlapiLogExecution('DEBUG', 'ERROR CUIT', 'CUIT INVALIDO: ' + nroDocumento);
								errorGlobal = true;
								descripcionError = "Numero de Documento del Cliente Invalido";
							}
						} else {
							nlapiLogExecution('DEBUG', 'ERROR CUIT', 'CUIT INVALIDO: ' + nroDocumento);
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Documento del Cliente";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
					}

					// Genero el Contenido
					if (errorGlobal == false) {

						if (percepcionSIRCAR.percepcion != null) {

							var error = false;
							var descripcionMensaje = "TXT Percepciones Generado Correctamente";
                            // var num_reglon_string = aux_num_renglon.toString();
							// var num_renglon_set = padding_left(num_reglon_string.replace(/.,/g, ''), '0', 5);
							var a = i + 1;
							var num_renglon_set = padding_left(a.toString(), "0", 5);
							if (formatoTXTSircar == 1) {
								if (!isEmpty(contenidoTXT)) {
									contenidoTXT += "\r\n";
								}

								contenidoTXT += num_renglon_set + ',' + percepcionSIRCAR.percepcion.codigoComprobante + ',' + percepcionSIRCAR.percepcion.letra + ',' + percepcionSIRCAR.percepcion.numeroComprobante + ',' +
									percepcionSIRCAR.percepcion.cuit + ',' + percepcionSIRCAR.percepcion.fechaPercepcion + ',' + percepcionSIRCAR.percepcion.montoImponible + ',' + percepcionSIRCAR.percepcion.alicuota + ',' +
									percepcionSIRCAR.percepcion.importePercepcion + ',' + percepcionSIRCAR.percepcion.cod_regimen + ',' + percepcionSIRCAR.percepcion.cod_jurisdiccion;
                                
                                // aux_num_renglon = aux_num_renglon + 1;
							} else {
								if (formatoTXTSircar == 2) {
									if(resultadoTXTPercepcionesSIRCAR.getValue({ name: columns[10] }) == "914") {
										percepcionSIRCAR.percepcion.nroConstanciaOriginal = "0";
									  } 
									if (!isEmpty(contenidoTXT)) {
										contenidoTXT += "\r\n";
									}
									
									contenidoTXT += num_renglon_set + ',' + percepcionSIRCAR.percepcion.codigoComprobante + ',' + percepcionSIRCAR.percepcion.letra + ',' + percepcionSIRCAR.percepcion.numeroComprobante + ',' +
										percepcionSIRCAR.percepcion.cuit + ',' + percepcionSIRCAR.percepcion.fechaPercepcion + ',' + percepcionSIRCAR.percepcion.montoImponible + ',' + percepcionSIRCAR.percepcion.alicuota + ',' +
										percepcionSIRCAR.percepcion.importePercepcion + ',' + percepcionSIRCAR.percepcion.cod_regimen + ',' + percepcionSIRCAR.percepcion.cod_jurisdiccion + ',' +
										percepcionSIRCAR.percepcion.tipoOperacionPercepcion + ',' + percepcionSIRCAR.percepcion.nroConstanciaOriginal;
                                        
                                    // aux_num_renglon = aux_num_renglon + 1;
								}
							}

							nlapiLogExecution('DEBUG', 'Contenido del TXT de PERCEPCION - SIRCAR', 'Contenido: ' + contenidoTXT);
							nlapiLogExecution('DEBUG', 'Longitud del TXT de PERCEPCION - SIRCAR', 'Longitud del txt: ' + contenidoTXT.length);

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						// Error Obteniendo Informacion de Percepciones
						// Grabo el Error en NetSuite
						errorGeneral = true;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIRCAR');
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			} else {
				errorGeneral = true;
				descripcionError = 'Error Obteniendo el Formato del TXT SIRCAR para la jurisdicción seleccionada. Debe configurar el formato del TXT SIRCAR a utilizar de dicha jurisdicción, en el RT "Zona de Impuestos".';
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
				idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones SIRCAR');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTSircarPercepcion', 'No se encontraron resultados para SIRCAR - PERCEPCIONES');
		}

		/*if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}*/

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIRCAR - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIRCAR - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionSIRCAR = grabarError(true, 'Error Generando TXT de Percepciones - SIRCAR', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSIRCAR = grabarError(false, 'Generacion de TXT de Percepciones Correcta - SIRCAR', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente - SIRCAR', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - SIRCAR', 'Finalizacion - Generacion TXT SIRCAR Percepciones');

	if (!isEmpty(contenidoTXT)) {
		percepcionSIRCAR.contenidoTXT = contenidoTXT.replace(/ /gi, '');
	}

	return percepcionSIRCAR;

}

function generarTXTArcibaAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARCIBA');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionARCIBA = new Object();
		retencionARCIBA.retencion = new Object();
		retencionARCIBA.sujeto = new Object();
		retencionARCIBA.existenRetenciones = false;
		retencionARCIBA.error = false;
		retencionARCIBA.descripcionError = "";
		retencionARCIBA.procesoEncolado = false;
		retencionARCIBA.idLog = idRegistroLOG;
		retencionARCIBA.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var columnaTXTRetencionesARCIBA = new Array();
		columnaTXTRetencionesARCIBA[0] = new nlobjSearchColumn('entity');
		var filtroTXTRetencionesARCIBA = new Array();
		//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		//if (!isEmpty(ultimaRetencionProcesada))
		//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_arciba_ant');
		search.addFilters(filtroTXTRetencionesARCIBA);
		search.addColumns(columnaTXTRetencionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesARCIBA = resultadoTXTRetencionesARCIBA.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)
		if (!isEmpty(resultadoTXTRetencionesARCIBA)) {
			nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Cantidad Retenciones:' + resultadoTXTRetencionesARCIBA.length);
			//

			for (var i = 0; resultadoTXTRetencionesARCIBA != null && i < resultadoTXTRetencionesARCIBA.length && procesoEncolado == false; i++) {
				retencionARCIBA.retencion = new Object();
				retencionARCIBA.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesARCIBA[i].getValue('internalid');
				var refComprobante = resultadoTXTRetencionesARCIBA[i].getValue('internalid');

				if (!isEmpty(refComprobante)) {
					var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'arc', subsidiaria);

					if (!isEmpty(codigoComprobante)) {
						retencionARCIBA.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
						// Obtengo el tipo de Comprobante netsuite
						var filtroComprobanteNS = new Array();
						filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

						var columnaComprobanteNS = new Array();
						columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

						var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

						if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

							tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

							if (!isEmpty(tipoComprobanteNS)) {
								// Obtengo Informacion Adicional del Pago a Proveedor
								var filtroPagoProveedor = new Array();
								filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

								var columnaPagoProveedor = new Array();
								columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
								columnaPagoProveedor[1] = new nlobjSearchColumn('total');

								var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null);

								if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
									// Obtengo la Fecha de Emision del Comprobante
									var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
									if (!isEmpty(fecha)) {
										// Formateo la Fecha
										var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
										if (!isEmpty(fechaDate)) {
											// Obtengo las Componentes de la Fecha
											var dia = fechaDate.getDate();
											var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
											var anio = fechaDate.getFullYear();
											var fechaComprobante = padding_left(dia, '0', 2) + "/" + padding_left(mes, '0', 2) + "/" + anio;
											retencionARCIBA.retencion.fechaComprobante = fechaComprobante;
											// Obtengo el Numero del Comprobante
											var numerador = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_numero_localizado');
											if (!isEmpty(numerador)) {
												// Tomo el Numero, Punto de Venta y Letra
												//var arrayNumerador = numerador.split("-");
												//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
												//var numeroComprobante = arrayNumerador[2];
												var numeroComprobante = numerador.toString().substr(-8);
												// Tomo el Punto de Venta
												//var puntoVenta = arrayNumerador[1];
												var puntoVenta = resultadoTXTRetencionesARCIBA[i].getText('custbody_l54_boca');
												// Tomo la Latra del Comprobante
												//var letra = arrayNumerador[0];
												var letra = resultadoTXTRetencionesARCIBA[i].getText('custbody_l54_letra');
												//if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
												if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
													//var numeroAux = puntoVenta.toString() + numeroComprobante.toString();
													var numeroAux = padding_left(puntoVenta.toString(), "0", 4) + padding_left(numeroComprobante.toString(), "0", 12);
													retencionARCIBA.retencion.letra = " ";
													retencionARCIBA.retencion.numeroComprobante = padding_left(numeroAux, "0", 16); // En vez de 15 , pongo 16 porque como
													// Es Orden de Pago no va la Letra
													//retencionARCIBA.retencion.letraComprobante = padding_right(letra, " ", 1);
													// Obtengo Tipo de Cambio de la Retencion
													var tipoCambio = resultadoTXTRetencionesARCIBA[i].getValue('exchangerate');
													if (!isEmpty(tipoCambio)) {
														// Obtengo el Importe del Comprobante
														//var importeComprobante = resultadoPagoProveedor[0].getValue('total');
														// Como el Importe del Comprobante que voy a Cargar es Sin el IVA ya que en IVA ingreso 0.00, lo tomo de la Base de Calculo de impresion
														// Ya que para IIBB la base de calculo de impresion es el importe del Pago sin iva ni percepciones.
														//Posible Mejora : Cargar el importe del Comprobante aca "total" y en el campo IVA de ARCIBA calcular el iva del pago
														// y en otros conceptos de ARCIBA cargar percepciones + minimo no imponible
														var importeComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_base_calculo_ret_iibb');

														if (!isEmpty(importeComprobante)) {
															//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10) * parseFloat(-1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
															retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

															// Obtengo el Codigo de Operacion
															if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {

																var filtroTipoOperacion = new Array();
																filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);

																var columnaTipoOperacion = new Array();
																columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');

																var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);

																if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {

																	var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
																	if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																		retencionARCIBA.retencion.codigoOperacion = codigoOperacion;

																		// Obtengo el Codigo de Norma
																		//var codigoNorma = '016'; // RIESGO FISCAL
																		var codigoRetencion = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_new_cod_ret_iibb');
																		if (!isEmpty(codigoRetencion)) {
																			// Busco la Retencion y el Codigo De Norma
																			var filtroNorma = new Array();
																			filtroNorma[0] = new nlobjSearchFilter('custrecord_l54_param_ret_cod_ret', null, 'is', codigoRetencion);
																			filtroNorma[1] = new nlobjSearchFilter('custrecord_l54_param_ret_tipo_ret', null, 'is', 3); // 3 - IIBB

																			var columnaNorma = new Array();
																			columnaNorma[0] = new nlobjSearchColumn('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_param_ret_cod_norma');
																			columnaNorma[1] = new nlobjSearchColumn('internalid');

																			var resultadoNorma = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroNorma, columnaNorma);

																			if (!isEmpty(resultadoNorma) && resultadoNorma.length > 0) {

																				var idInternoParametrizacionRetencion = resultadoNorma[0].getValue('internalid');
																				var codigoNorma = '';
																				codigoNorma = resultadoNorma[0].getValue('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_param_ret_cod_norma');
																				if (!isEmpty(codigoNorma)) {
																					retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, '0', 3);

																					// Obtengo la Base de Calculo
																					var baseCalculo = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_base_calculo_ret_iibb');
																					if (!isEmpty(baseCalculo)) {

																						retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
																						// Obtengo Fecha de Retencion
																						var fechaRetencion = resultadoTXTRetencionesARCIBA[i].getValue('trandate');

																						if (!isEmpty(fechaRetencion)) {
																							// Formateo la Fecha
																							var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																							if (!isEmpty(fechaRetencionDate)) {

																								// Obtengo las Componentes de la Fecha
																								var diaRetencion = fechaRetencionDate.getDate();
																								var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																								var anioRetencion = fechaRetencionDate.getFullYear();
																								var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
																								retencionARCIBA.retencion.fechaRetencion = fechaRetencionFinal;

																								// Obtengo el Numero de Certificado
																								var numeroCertificado = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_ret_iibb_numerador');
																								if (!isEmpty(numeroCertificado)) {
																									retencionARCIBA.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 16);
																									// Obtengo la Alicuota
																									// Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
																									//var idInternoParametrizacionRetencion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_cod_retencion');
																									if (!isEmpty(idInternoParametrizacionRetencion)) {

																										var filtroAlicuota = new Array();
																										filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);

																										var columnaAlicuota = new Array();
																										columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');

																										var resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);

																										if (!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) {

																											var alicuota = "";
																											alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');

																											if (!isEmpty(alicuota)) {

																												retencionARCIBA.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);

																												// Cargo el Proveedor
																												var proveedor = resultadoTXTRetencionesARCIBA[i].getValue('entity');

																												// Obtengo el Numero de Documento
																												if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {

																													retencionARCIBA.sujeto.idSujetoNetSuite = proveedor;

																													var filtroProveedor = new Array();
																													filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

																													var columnaProveedor = new Array();
																													columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																													columnaProveedor[1] = new nlobjSearchColumn('companyname');
																													columnaProveedor[2] = new nlobjSearchColumn('lastname');
																													columnaProveedor[3] = new nlobjSearchColumn('firstname');
																													columnaProveedor[4] = new nlobjSearchColumn('address1');
																													columnaProveedor[5] = new nlobjSearchColumn('city');
																													columnaProveedor[6] = new nlobjSearchColumn('zipcode');
																													columnaProveedor[7] = new nlobjSearchColumn('state');
																													columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																													columnaProveedor[9] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_iibb');
																													columnaProveedor[10] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																													columnaProveedor[11] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
																													columnaProveedor[12] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
																													columnaProveedor[13] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																													columnaProveedor[14] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																													columnaProveedor[15] = new nlobjSearchColumn('custentity_l54_cod_iibb');

																													var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);

																													if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {

																														// Obtengo Codigo Tipo Condicion IIBB
																														var tipoContribuyenteIIBB = "";
																														var desc = "IIBB";
																														tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');

																														if (!isEmpty(tipoContribuyenteIIBB)) {

																															var filtroTipoContribuyente = new Array();
																															filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);

																															var columnaTipoContribuyente = new Array();
																															columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_arc');

																															var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);

																															if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																																var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_arc');

																																if (!isEmpty(situacionIIBB)) {

																																	retencionARCIBA.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																																	var numeroIIBB = "0";

																																	if (situacionIIBB == 1 || situacionIIBB == 2 || situacionIIBB == 5) {
																																		// Busco el Numero de IIBB
																																		numeroIIBB = resultadoProveedor[0].getValue('custentity_l54_cod_iibb');
																																	}

																																	if (!isEmpty(numeroIIBB)) {
																																		// Formateo el Documento
																																		numeroIIBB = numeroIIBB.replace(/-/g, '');
																																		numeroIIBB = numeroIIBB.replace(/\./g, '');
																																		// Elimino Blancos
																																		numeroIIBB = numeroIIBB.replace(/ /g, '&nbsp');
																																		retencionARCIBA.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 11);
																																		// Busco la Situacion Frente al IVA

																																		var tipoContribuyenteIVA = "";
																																		var desc = "IVA";
																																		tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');

																																		if (!isEmpty(tipoContribuyenteIVA)) {

																																			var filtroTipoContribuyente = new Array();
																																			filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);

																																			var columnaTipoContribuyente = new Array();
																																			columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_arc');

																																			var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);

																																			if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																																				var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_arc');

																																				if (!isEmpty(situacionIVA)) {

																																					retencionARCIBA.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																																					// Obtengo el Importe de la Retencion
																																					var importeRetencion = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_iibb_imp_a_retener');
																																					if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																																						retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																						retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																						// Obtengo el Tipo de Documento del Sujeto Retenido
																																						var tipoDocumento = resultadoProveedor[0].getValue('custentity_l54_tipo_documento');
																																						if (!isEmpty(tipoDocumento)) {

																																							// Obtengo el Codigo de Tipo de Documento
																																							var filtroTipoDocumento = new Array();
																																							filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																							var columnaTipoDocumento = new Array();
																																							columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_arc');

																																							var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);

																																							if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																								var tipoDocumento = resultadoTipoDocumento[0].getValue('custrecord_l54_tipo_doc_arc');
																																								if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																									retencionARCIBA.sujeto.tipoDocSujeto = padding_left(tipoDocumento, '0', 1);
																																									// Informacion de Beneficiarios del Exterior
																																									// Verifico si el Proveedor tiene
																																									//var otrosConceptos = 0;
																																									//retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptos, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);

																																									var otrosConceptos = "";
																																									// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																																									var filtroMinimoNoImp = new Array();
																																									filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);

																																									var columnaMinimoNoImp = new Array();
																																									columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');

																																									var resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);

																																									if (!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) {

																																										otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');

																																										if (!isEmpty(otrosConceptos)) {

																																											retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptos, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																											// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos

																																											retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10) - parseFloat(otrosConceptos, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																											var iva = 0;
																																											retencionARCIBA.sujeto.iva = padding_left(parseFloat(iva, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																											// Cargo informacion del Sujeto Retenido
																																											var proveedor = resultadoTXTRetencionesARCIBA[i].getValue('entity');

																																											// Obtengo el Numero de Documento
																																											var nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');
																																											if (!isEmpty(nroDocumento)) {

																																												// Formateo el Documento
																																												nroDocumento = nroDocumento.replace(/-/g, '');
																																												nroDocumento = nroDocumento.replace(/\./g, '');
																																												// Elimino Blancos
																																												var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');

																																												retencionARCIBA.sujeto.numeroDocSujeto = padding_left(numeroDocumentoFinal, "0", 11);

																																												// Obtengo la Razon Social
																																												var razonSocial = resultadoProveedor[0].getValue('companyname');
																																												if (isEmpty(razonSocial)) {
																																													// Busco Nombre y Apellido
																																													var apellido = resultadoProveedor[0].getValue('lastname');
																																													var nombre = resultadoProveedor[0].getValue('firstname');
																																													razonSocial = apellido + " " + nombre;
																																												}

																																												if (!isEmpty(razonSocial)) {
																																													retencionARCIBA.sujeto.razonSocial = padding_right(razonSocial.substring(0, 29), " ", 30);
																																												} else {
																																													errorGlobal = true;
																																													descripcionError = "Error Obteniendo Razon Social del Proveedor";
																																												}
																																											} else {
																																												errorGlobal = true;
																																												descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																																											}
																																										} else {
																																											errorGlobal = true;
																																											descripcionError = "Minimo No Imponible No Configurado";
																																										}
																																									} else {
																																										errorGlobal = true;
																																										descripcionError = "Error Obteniendo el Minimo No Imponible";
																																									}
																																								} else {
																																									errorGlobal = true;
																																									descripcionError = "Error Tipo de Documento ARCIBA No Configurado Correctamente";
																																								}
																																							} else {
																																								errorGlobal = true;
																																								descripcionError = "Error Obteniendo Tipo de Documento";
																																							}

																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																																						}

																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																																					}

																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "Error Obteniendo Situacion de " + desc;
																																				}
																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																																			}
																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																																		}
																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido";
																																	}
																																} else {
																																	errorGlobal = true;
																																	descripcionError = "Error Obteniendo Situacion de " + desc;
																																}
																															} else {
																																errorGlobal = true;
																																descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																															}
																														} else {
																															errorGlobal = true;
																															descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																														}
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Obteniendo Informacion del Proveedor";
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo Proveedor";
																												}
																											} else {
																												errorGlobal = true;
																												descripcionError = "Alicuota Invalida";
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo Alicuota de Retencion";
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo Alicuota de Retencion";
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo Numero de Certificado";
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Formateando la Fecha de Retencion";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo Fecha De Retencion";
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo Base De Calculo";
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Codigo De Norma";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Codigo De Norma";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo Codigo de Retencion del Pago";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Codigo de Operacion Invalido";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Codigo de Operacion";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo el Codigo de Operacion";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Importe del Comprobante";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
												}
												/*} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
												}*/
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha del Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionARCIBA.sujeto != null) {

						if (retencionARCIBA.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Retenciones Generado Correctamente";
							contenidoTXT += retencionARCIBA.retencion.codigoOperacion + retencionARCIBA.retencion.codigoNorma + retencionARCIBA.retencion.fechaRetencion + retencionARCIBA.retencion.codigoComprobante +
								retencionARCIBA.retencion.letra + retencionARCIBA.retencion.numeroComprobante + retencionARCIBA.retencion.fechaComprobante + retencionARCIBA.retencion.importeComprobante +
								retencionARCIBA.retencion.numeroCertificado + retencionARCIBA.sujeto.tipoDocSujeto + retencionARCIBA.sujeto.numeroDocSujeto + retencionARCIBA.sujeto.situacionIIBB +
								retencionARCIBA.sujeto.numeroIIBB + retencionARCIBA.sujeto.situacionIVA + retencionARCIBA.sujeto.razonSocial + retencionARCIBA.sujeto.otrosConceptos +
								retencionARCIBA.sujeto.iva + retencionARCIBA.retencion.baseCalculo + retencionARCIBA.retencion.alicuota + retencionARCIBA.retencion.retencionPracticada +
								retencionARCIBA.retencion.importeRetencion;

							// Grabo Registro de TXT
							/*var estadoGeneracionTXTSujetos = null;
							var estadoGeneracionTXT = null;

							estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);

							if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
							// Error Generando TXT
							error = true;
							descripcionMensaje = "Error Generando TXT Retenciones";
							if (isEmpty(estadoGeneracionTXT))
							descripcionMensaje = estadoGeneracionTXT.descripcionError;
							errorGeneral = true;
							descripcionError = descripcionMensaje;
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
							}*/

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones ARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesARCIBA) && resultadoTXTRetencionesARCIBA.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones ARCIBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', null, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARCIBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT ARCIBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionARCIBA = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionARCIBA = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARCIBA');

	retencionARCIBA.contenidoTXT = contenidoTXT;
	return retencionARCIBA;
}

function generarTXTArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTArciba', 'Inicio - Generacion TXT ARCIBA');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones/Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionARCIBA = new Object();
		retencionARCIBA.retencion = new Object();
		retencionARCIBA.sujeto = new Object();
		retencionARCIBA.existenRetenciones = false;
		retencionARCIBA.error = false;
		retencionARCIBA.descripcionError = "";
		retencionARCIBA.procesoEncolado = false;
		retencionARCIBA.idLog = idRegistroLOG;
		retencionARCIBA.contenidoTXT = "";

		// INICIO Obtener la Informacion de RETENCIONES usando un SavedSearch
		var iCont = 0;
		var filtroTXTRetencionesARCIBA = new Array();
		//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arciba');
		search.addFilters(filtroTXTRetencionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesARCIBA = resultadoTXTRetencionesARCIBA.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de RETENCIONES usando un SavedSearch

		// INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		var iCont = 0;
		var filtroTXTPercepcionesARCIBA = new Array();
		//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba');
		search.addFilters(filtroTXTPercepcionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTPercepcionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);

				//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_Perc', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch

		// INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Recorrer Retenciones');

		for (var i = 0; resultadoTXTRetencionesARCIBA != null && i < resultadoTXTRetencionesARCIBA.length; i++) {
			var result = resultadoTXTRetencionesARCIBA[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].tipoOperacion = 1;
			informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesARCIBA[i].getValue('internalid');
			informacionResultado[indiceArray].refComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_ref_pago_prov');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_cod_pago_prov');
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_pv_pago_prov');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_let_pago_prov');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_tipo_cambio');
			informacionResultado[indiceArray].refNorma = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_ret_ref_norma');
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_tipo_contr_iibb_cod_arc', 'custrecord_l54_ret_tipo_contrib_iibb');
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_tipo_cont_cod_arc', 'custrecord_l54_ret_tipo_contrib_iva');

			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_base_calculo_imp')); //custrecord_l54_ret_base_calculo_imp
			informacionResultado[indiceArray].baseCalculo = result.getValue(columns[30]);
			var fechaOperacionAux = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_fecha');
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaComprobante = '';
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_numerador');
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_cod_retencion');
			informacionResultado[indiceArray].refEntidad = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_ref_proveedor');
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_jurisdiccion');
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_importe'));
			informacionResultado[indiceArray].importeComprobante = '';
			informacionResultado[indiceArray].alicuota = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_alicuota');
			informacionResultado[indiceArray].minimoImp = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_param_ret_min_no_imp', 'custrecord_l54_ret_cod_retencion');

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			informacionResultado[indiceArray] = new Object();
			var result = resultadoTXTPercepcionesARCIBA[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray].tipoOperacion = 2;
			informacionResultado[indiceArray].idInterno = '';
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('internalid', null, 'group');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_numero_localizado', null, 'max');
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_boca', null, 'max');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_letra', null, 'max');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcionesARCIBA[i].getValue('exchangerate', null, 'group');
			informacionResultado[indiceArray].refNorma = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custcol_l54_norma_iibb_perc', 'max');
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_contr_iibb_cod_arc', 'custcol_l54_tipo_contribuyente', 'max');
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_cont_cod_arc', 'custbody_l54_tipo_contribuyente', 'max');

			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = result.getValue(columns[21]);

			var fechaOperacionAux = resultadoTXTPercepcionesARCIBA[i].getValue('trandate', null, 'group');
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = '';
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('taxcode', null, 'group');
			informacionResultado[indiceArray].refEntidad = resultadoTXTPercepcionesARCIBA[i].getValue('internalid', 'customer', 'group');
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('taxamount', null, 'sum'));
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('total', null, 'sum'));
			informacionResultado[indiceArray].alicuota = resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_alicuota', null, 'sum');
			informacionResultado[indiceArray].minimoImp = 0;

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTArciba', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}
		// FIN UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO

		if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Cantidad Retenciones:' + informacionResultado.length);

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
				var tipoOperacionStr = "Percepcion";
				var entidadStr = "Cliente";
				retencionARCIBA.retencion = new Object();
				retencionARCIBA.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var tipoOperacion = informacionResultado[i].tipoOperacion;
				var idRetencionNetSuite = '';
				if (tipoOperacion == 1) {
					idRetencionNetSuite = informacionResultado[i].idInterno;
					tipoOperacionStr = "Retencion";
					entidadStr = "Proveedor";
				}
				var refComprobante = informacionResultado[i].refComprobante;

				if (!isEmpty(refComprobante)) {
					var codigoComprobante = null;
					if (tipoOperacion == 1)
						codigoComprobante = obtenerCodigoComprobante(refComprobante, 'arc', subsidiaria);
					else
						codigoComprobante = obtenerCodigoComprobante(refComprobante, 'arc_perc', subsidiaria);

					if (!isEmpty(codigoComprobante)) {
						retencionARCIBA.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
						// Obtengo el tipo de Comprobante netsuite
						var filtroComprobanteNS = new Array();
						filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

						var columnaComprobanteNS = new Array();
						columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

						var resultadoComprobanteNS = null;

						if (tipoOperacion == 1)
							resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

						if ((!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) || (tipoOperacion == 2)) {

							var tipoComprobanteNS = null;
							if (tipoOperacion == 1)
								tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

							if (!isEmpty(tipoComprobanteNS) || (tipoOperacion == 2)) {
								var resultadoPagoProveedor = null;
								if (tipoOperacion == 1) {
									// Obtengo Informacion Adicional del Pago a Proveedor
									var filtroPagoProveedor = new Array();
									filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

									var columnaPagoProveedor = new Array();
									columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
									columnaPagoProveedor[1] = new nlobjSearchColumn('total');
									columnaPagoProveedor[2] = new nlobjSearchColumn('custbody_l54_importe_iva');
									columnaPagoProveedor[3] = new nlobjSearchColumn('custbody_l54_importe_percepciones');

									resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null);

								}

								if ((!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) || (tipoOperacion == 2)) {
									// Obtengo la Fecha de Emision del Comprobante
									var fecha = '';
									if (tipoOperacion == 1)
										fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
									else
										fecha = informacionResultado[i].fechaComprobante
									//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha : ' + fecha);
									if (!isEmpty(fecha)) {
										var fechaDate = '';
										// Formateo la Fecha
										if (tipoOperacion == 1)
											fechaDate = nlapiStringToDate(fecha, 'datetimetz');
										else
											fechaDate = fecha;
										//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha Date : ' + fechaDate);
										if (!isEmpty(fechaDate)) {
											// Obtengo las Componentes de la Fecha
											var dia = fechaDate.getDate();

											var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
											var anio = fechaDate.getFullYear();
											var fechaComprobante = padding_left(dia, '0', 2) + "/" + padding_left(mes, '0', 2) + "/" + anio;
											retencionARCIBA.retencion.fechaComprobante = fechaComprobante;
											// Obtengo el Numero del Comprobante
											var numerador = informacionResultado[i].codigoComprobante;

											if (!isEmpty(numerador)) {
												// Tomo el Numero, Punto de Venta y Letra
												//var arrayNumerador = numerador.split("-");
												//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
												//var numeroComprobante = arrayNumerador[2];
												var numeroComprobante = numerador.toString().substr(-8);
												// Tomo el Punto de Venta
												//var puntoVenta = arrayNumerador[1];
												var puntoVenta = informacionResultado[i].puntoVentaComprobante;
												// Tomo la Latra del Comprobante
												//var letra = arrayNumerador[0];
												var letra = informacionResultado[i].letraComprobante;

												//if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
												if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
													var numeroAux = padding_left(puntoVenta.toString(), "0", 4) + padding_left(numeroComprobante.toString(), "0", 12);
													var faltaLetra = false;
													if (tipoOperacion == 1) {
														retencionARCIBA.retencion.letra = " ";
													} else {
														if (retencionARCIBA.retencion.codigoComprobante == '01' || retencionARCIBA.retencion.codigoComprobante == '06' || retencionARCIBA.retencion.codigoComprobante == '07') {
															if (isEmpty(letra)) {
																faltaLetra = true;
															} else {
																retencionARCIBA.retencion.letra = letra;
															}
														} else {
															retencionARCIBA.retencion.letra = " ";
														}
													}
													if (faltaLetra == false) {
														retencionARCIBA.retencion.numeroComprobante = padding_left(numeroAux, "0", 16); // En vez de 15 , pongo 16 porque como
														// Es Orden de Pago no va la Letra
														//retencionARCIBA.retencion.letraComprobante = padding_right(letra, " ", 1);
														// Obtengo Tipo de Cambio de la Retencion

														var tipoCambio = informacionResultado[i].tipoCambio;

														if (!isEmpty(tipoCambio)) {
															// Obtengo el Importe del Comprobante
															var importeComprobante = '';
															if (tipoOperacion == 1)
																importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
															else
																importeComprobante = informacionResultado[i].importeComprobante;

															if (!isEmpty(importeComprobante)) {

																/*------------- Inicio - JSalazar 27/03/2019: Al campo "tipo de cambio" lo sustituí por el "1" porque ya el "total" de las percepciones y retenciones tiene en su valor la transformación de moneda
																	extranjera a pesos argentinos desde la SS y no es necesario volver a tomar en cuenta el valor del tipo de cambio para hacer de nuevo dicha transformación */

																//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																//*-------------- Fin - JSalazar 27/03/2019. ----------------------------------******///////////////////////////

																//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);

																// Obtengo el Codigo de Operacion
																if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {

																	var filtroTipoOperacion = new Array();
																	filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);

																	var columnaTipoOperacion = new Array();
																	columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');

																	var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);

																	if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {

																		var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
																		if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																			retencionARCIBA.retencion.codigoOperacion = codigoOperacion;
																			var infoImpuesto = null;
																			// Obtengo el Codigo de Norma
																			//var codigoNorma = '016'; // RIESGO FISCAL
																			var codigoNorma = '';
																			if (tipoOperacion == 1)
																				codigoNorma = informacionResultado[i].refNorma;
																			else {
																				/*infoImpuesto = obtenerInfoImpuesto(informacionResultado[i].codigoOperacion);
																				if (!isEmpty(infoImpuesto))
																				codigoNorma = infoImpuesto.codigoNorma;*/
																				codigoNorma = informacionResultado[i].refNorma;
																			}
																			if (!isEmpty(codigoNorma)) {
																				retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, '0', 3);

																				// Obtengo la Base de Calculo
																				var baseCalculo = informacionResultado[i].baseCalculo;
																				if (!isEmpty(baseCalculo)) {

																					retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
																					// Obtengo Fecha de Retencion
																					var fechaRetencion = '';
																					fechaRetencion = informacionResultado[i].fechaOperacion;

																					if (!isEmpty(fechaRetencion)) {
																						// Formateo la Fecha
																						//var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																						var fechaRetencionDate = fechaRetencion;
																						if (!isEmpty(fechaRetencionDate)) {

																							// Obtengo las Componentes de la Fecha
																							var diaRetencion = fechaRetencionDate.getDate();
																							var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																							var anioRetencion = fechaRetencionDate.getFullYear();
																							var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
																							retencionARCIBA.retencion.fechaRetencion = fechaRetencionFinal;

																							// Obtengo el Numero de Certificado

																							var numeroCertificado = ' ';
																							if (tipoOperacion == 1)
																								numeroCertificado = informacionResultado[i].numeroOperacion;
																							if (!isEmpty(numeroCertificado) || (tipoOperacion == 2)) {
																								retencionARCIBA.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 16);
																								// Obtengo la Alicuota
																								// Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion

																								//var idInternoParametrizacionRetencion = '';
																								//if (tipoOperacion == 1)
																								//idInternoParametrizacionRetencion = informacionResultado[i].codigoOperacion;
																								//if (!isEmpty(idInternoParametrizacionRetencion) || (tipoOperacion == 2)) {
																								/*var resultadoAlicuota = '';
																								if (tipoOperacion == 1) {
																								var filtroAlicuota = new Array();
																								filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);

																								var columnaAlicuota = new Array();
																								columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');

																								resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);
																								}*/
																								//if ((!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) || (tipoOperacion == 2)) {

																								var alicuota = "";
																								/*if (tipoOperacion == 1)
																								alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
																								else {
																								if (!isEmpty(infoImpuesto))
																								alicuota = infoImpuesto.porcentaje;
																								}*/

																								alicuota = informacionResultado[i].alicuota;

																								if (!isEmpty(alicuota)) {

																									retencionARCIBA.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);

																									// Cargo el Proveedor

																									var proveedor = '';

																									proveedor = informacionResultado[i].refEntidad;

																									// Obtengo el Numero de Documento
																									if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {

																										retencionARCIBA.sujeto.idSujetoNetSuite = proveedor;

																										var filtroProveedor = new Array();
																										filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

																										var columnaProveedor = new Array();
																										columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																										columnaProveedor[1] = new nlobjSearchColumn('companyname');
																										columnaProveedor[2] = new nlobjSearchColumn('lastname');
																										columnaProveedor[3] = new nlobjSearchColumn('firstname');
																										columnaProveedor[4] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																										columnaProveedor[5] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																										columnaProveedor[6] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																										columnaProveedor[7] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_iibb');

																										var tipoRecordType = 'customer';
																										if (tipoOperacion == 1)
																											tipoRecordType = 'vendor';

																										var resultadoProveedor = new nlapiSearchRecord(tipoRecordType, null, filtroProveedor, columnaProveedor);

																										if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {

																											var jurisdiccion = informacionResultado[i].jurisdiccionOperacion;
																											if (!isEmpty(jurisdiccion)) {
																												// Obtengo el Tipo de Contribuyente segun la Jurisdiccion
																												//
																												var resultadoJurisdiccion = "";
																												if (tipoOperacion == 1) {
																													var filtroJurisdiccion = new Array();
																													filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																													filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);

																													var columnaJurisdiccion = new Array();
																													columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');

																													resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);
																												}

																												var desc = "IIBB";

																												//if ((!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) || (tipoOperacion == 2)) {
																												//
																												// Obtengo Codigo Tipo Condicion IIBB
																												/*var tipoContribuyenteIIBB = "";

																												//tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																												if (tipoOperacion == 1) {
																												tipoContribuyenteIIBB = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_tipo');
																												} else {
																												// Solo por Ahora tomar la General del Cliente, Luego Tomar de la Tabla Jurisdicciones IIBB
																												tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																												}*/

																												//if (!isEmpty(tipoContribuyenteIIBB)) {

																												/*var filtroTipoContribuyente = new Array();
																												filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);

																												var columnaTipoContribuyente = new Array();
																												columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_arc');

																												var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);*/

																												//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																												//var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_arc');

																												var situacionIIBB = informacionResultado[i].situacionIIBB;

																												if (!isEmpty(situacionIIBB)) {

																													retencionARCIBA.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																													var numeroIIBB = "0";

																													if (situacionIIBB == 1 || situacionIIBB == 2 || situacionIIBB == 5) {
																														// Busco el Numero de IIBB
																														numeroIIBB = resultadoProveedor[0].getValue('custentity_l54_cod_iibb');
																													}

																													if (!isEmpty(numeroIIBB)) {
																														// Formateo el Documento
																														numeroIIBB = numeroIIBB.replace(/-/g, '');
																														numeroIIBB = numeroIIBB.replace(/\./g, '');
																														// Elimino Blancos
																														numeroIIBB = numeroIIBB.replace(/ /g, '&nbsp');
																														retencionARCIBA.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 11);
																														// Busco la Situacion Frente al IVA

																														//var tipoContribuyenteIVA = "";
																														var desc = "IVA";
																														//tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');

																														//tipoContribuyenteIVA = informacionResultado[i].tipoContrIVA;

																														//if (!isEmpty(tipoContribuyenteIVA)) {

																														/*var filtroTipoContribuyente = new Array();
																														filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);

																														var columnaTipoContribuyente = new Array();
																														columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_arc');

																														var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);*/

																														//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																														//var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_arc');

																														var situacionIVA = informacionResultado[i].situiacionIVA;

																														if (!isEmpty(situacionIVA)) {

																															retencionARCIBA.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																															// Obtengo el Importe de la Retencion
																															var importeRetencion = informacionResultado[i].importeOperacion;
																															if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {

																																/*------------INICIO. JSalazar: 28/03/2019. Se comentan estas líneas y se agregan las condiciones siguiente dependiendo del tipo de operación, porque con las retenciones es necesario tomar en cuenta el tipo de cambio
																																	y en las percepciones no es no es necesario porque ya vienen transformadas a pesos

																																retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16); */

																																if (tipoOperacion == 1) {
																																	retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																} else {
																																	retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																}

																																////////-------FIN. JSalazar: 28/03/2019.----------------------------------------/////////////

																																// Obtengo el Tipo de Documento del Sujeto Retenido
																																var tipoDocumento = resultadoProveedor[0].getValue('custentity_l54_tipo_documento');
																																if (!isEmpty(tipoDocumento)) {

																																	// Obtengo el Codigo de Tipo de Documento
																																	var filtroTipoDocumento = new Array();
																																	filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																	var columnaTipoDocumento = new Array();
																																	columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_arc');

																																	var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);

																																	if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																		var tipoDocumento = resultadoTipoDocumento[0].getValue('custrecord_l54_tipo_doc_arc');
																																		if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																			retencionARCIBA.sujeto.tipoDocSujeto = padding_left(tipoDocumento, '0', 1);
																																			// Informacion de Beneficiarios del Exterior
																																			// Verifico si el Proveedor tiene
																																			var otrosConceptos = "";
																																			/*var resultadoMinimoNoImp = null;
																																			if (tipoOperacion == 1) {
																																			// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																																			var filtroMinimoNoImp = new Array();
																																			filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);

																																			var columnaMinimoNoImp = new Array();
																																			columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');

																																			resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);
																																			}*/

																																			//if ((!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) || (tipoOperacion == 2)) {

																																			if (tipoOperacion == 1) {
																																				//otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																																				otrosConceptos = informacionResultado[i].minimoImp;
																																			} else {
																																				otrosConceptos = 0;
																																			}

																																			if (!isEmpty(otrosConceptos)) {

																																				// Obtengo el Importe de Percepcion del Pago
																																				var importePercepcionPago = "";
																																				if (tipoOperacion == 1) {
																																					importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'max');
																																				} else {
																																					importePercepcionPago = 0;
																																				}

																																				if (!isEmpty(importePercepcionPago)) {

																																					var otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);

																																					retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptosFinal, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																					// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos
																																					//Comento esta línea porque en eARCIBA el proceso no hace esto.
																																					//retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10) - parseFloat(otrosConceptos, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																					// Obtengo el Importe del IVA
																																					//var importeIVAPago = "";
																																					//importeIVAPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_iva', null, 'group');
																																					// Al Ser Orden de Pago el Importe IVA debe ir en 0
																																					var importeIVAPago = 0;
																																					if (tipoOperacion == 2 && (retencionARCIBA.retencion.letra == 'A' || retencionARCIBA.retencion.letra == 'M')) {
																																						importeIVAPago = '';
																																						//FALTA Consultar el Importe de IVA del Comprobante
																																						//importeIVAPago=informacionResultado[i].importeIVA;
																																						var filtroIVA = new Array();
																																						filtroIVA[0] = new nlobjSearchFilter('internalid', null, 'is', informacionResultado[i].refComprobante);

																																						var resultadoIVA = new nlapiSearchRecord('transaction', 'customsearch_l54_imp_iva_transaccion', filtroIVA, null);
																																					}

																																					if ((!isEmpty(resultadoIVA) && resultadoIVA.length > 0)) {

																																						importeIVAPago = resultadoIVA[0].getValue('taxamount', null, 'sum');

																																					}

																																					if (!isEmpty(importeIVAPago)) {

																																						//retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																						retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																						// Cargo informacion del Sujeto Retenido
																																						var proveedor = informacionResultado[i].refEntidad;

																																						// Obtengo el Numero de Documento
																																						var nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');
																																						if (!isEmpty(nroDocumento)) {

																																							// Formateo el Documento
																																							nroDocumento = nroDocumento.replace(/-/g, '');
																																							nroDocumento = nroDocumento.replace(/\./g, '');
																																							// Elimino Blancos
																																							var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');

																																							retencionARCIBA.sujeto.numeroDocSujeto = padding_left(numeroDocumentoFinal, "0", 11);

																																							// Obtengo la Razon Social
																																							var razonSocial = resultadoProveedor[0].getValue('companyname');
																																							if (isEmpty(razonSocial)) {
																																								// Busco Nombre y Apellido
																																								var apellido = resultadoProveedor[0].getValue('lastname');
																																								var nombre = resultadoProveedor[0].getValue('firstname');
																																								razonSocial = apellido + " " + nombre;
																																							}

																																							if (!isEmpty(razonSocial)) {
																																								retencionARCIBA.sujeto.razonSocial = padding_right(razonSocial.substring(0, 29), " ", 30);
																																							} else {
																																								errorGlobal = true;
																																								descripcionError = "Error Obteniendo Razon Social del " + entidadStr;
																																							}
																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Obteniendo Numero de Documento del " + entidadStr;
																																						}
																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "Error Obteniendo Importe IVA de la Transaccion";
																																					}
																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "Error Obteniendo Importe Percepciones";
																																				}
																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "Minimo No Imponible No Configurado";
																																			}
																																			/*} else {
																																			errorGlobal = true;
																																			descripcionError = "Error Obteniendo el Minimo No Imponible";
																																			}*/
																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "Error Tipo de Documento ARCIBA No Configurado Correctamente";
																																		}
																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "Error Obteniendo Tipo de Documento";
																																	}

																																} else {
																																	errorGlobal = true;
																																	descripcionError = "El Sujeto Retenido/Percibido no Posee Tipo de Documento";
																																}

																															} else {
																																errorGlobal = true;
																																descripcionError = "El Importe de Retencion/Percepcion debe ser mayor a 0.00";
																															}

																														} else {
																															errorGlobal = true;
																															descripcionError = "Error Obteniendo Situacion de " + desc;
																														}
																														/*} else {
																														errorGlobal = true;
																														descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																														}*/
																														/*} else {
																														errorGlobal = true;
																														descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																														}*/
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido/Percibido";
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo Situacion de " + desc;
																												}
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																												}*/
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																												}*/
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del " + entidadStr;
																												}*/
																											} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion/Percepcion";
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo Informacion del " + entidadStr;
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo " + entidadStr;
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Alicuota Invalida";
																								}
																								/*} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
																								}*/
																								/*} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
																								}*/
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Numero de Certificado";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Formateando la Fecha de " + tipoOperacionStr;
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo Fecha De " + tipoOperacionStr;
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Base De Calculo";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Codigo De Norma";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Codigo de Operacion Invalido";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Codigo de Operacion";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Codigo de Operacion";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Importe del Comprobante";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Tipo de Cambio de la " + tipoOperacionStr;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Letra del Comprobante";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
												}
												/*} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
												}*/
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha del Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la " + tipoOperacionStr;
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionARCIBA.sujeto != null) {

						if (retencionARCIBA.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Retenciones/Percepciones Generado Correctamente";
							contenidoTXT += retencionARCIBA.retencion.codigoOperacion + retencionARCIBA.retencion.codigoNorma + retencionARCIBA.retencion.fechaRetencion + retencionARCIBA.retencion.codigoComprobante +
								retencionARCIBA.retencion.letra + retencionARCIBA.retencion.numeroComprobante + retencionARCIBA.retencion.fechaComprobante + retencionARCIBA.retencion.importeComprobante +
								retencionARCIBA.retencion.numeroCertificado + retencionARCIBA.sujeto.tipoDocSujeto + retencionARCIBA.sujeto.numeroDocSujeto + retencionARCIBA.sujeto.situacionIIBB +
								retencionARCIBA.sujeto.numeroIIBB + retencionARCIBA.sujeto.situacionIVA + retencionARCIBA.sujeto.razonSocial + retencionARCIBA.sujeto.otrosConceptos +
								retencionARCIBA.sujeto.iva + retencionARCIBA.retencion.baseCalculo + retencionARCIBA.retencion.alicuota + retencionARCIBA.retencion.retencionPracticada +
								retencionARCIBA.retencion.importeRetencion;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion/Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido/Percibido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Descripción error', descripcionError);
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones/Percepciones ARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones/Percepciones Correcta - No se Encontraron Retenciones/Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones/Percepciones ARCIBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : Error Obteniendo Retenciones/Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARCIBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT ARCIBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionARCIBA = grabarError(true, 'Error Generando TXT de Retenciones/Percepciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionARCIBA = grabarError(false, 'Generacion de TXT de Retenciones/Percepciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones/Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT ARCIBA');
	retencionARCIBA.contenidoTXT = contenidoTXT;
	return retencionARCIBA;
}

function generarTXTeArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Inicio - Generacion TXT eARCIBA');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones/Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionARCIBA = new Object();
		retencionARCIBA.retencion = new Object();
		retencionARCIBA.sujeto = new Object();
		retencionARCIBA.existenRetenciones = false;
		retencionARCIBA.error = false;
		retencionARCIBA.descripcionError = "";
		retencionARCIBA.procesoEncolado = false;
		retencionARCIBA.idLog = idRegistroLOG;
		retencionARCIBA.contenidoTXT = "";

		// INICIO Obtener la Informacion de RETENCIONES usando un SavedSearch
		var iCont = 0;
		var filtroTXTRetencionesARCIBA = new Array();
		//filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesARCIBA[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arciba');
		search.addFilters(filtroTXTRetencionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesARCIBA = resultadoTXTRetencionesARCIBA.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_eARCIBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de RETENCIONES usando un SavedSearch

		// INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		var iCont = 0;
		var filtroTXTPercepcionesARCIBA = new Array();
		//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba');
		search.addFilters(filtroTXTPercepcionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTPercepcionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);

				//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA_Perc', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch

		// INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Recorrer Retenciones');
		var objList = getTipoTransIdNew();
        var idRetenciones = new Array();
        var idPercepciones = new Array();

		for (var i = 0; resultadoTXTRetencionesARCIBA != null && i < resultadoTXTRetencionesARCIBA.length; i++) {
			var result = resultadoTXTRetencionesARCIBA[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].tipoOperacion = 1;
			informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesARCIBA[i].getValue('internalid');
			informacionResultado[indiceArray].refComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_ref_pago_prov');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_cod_pago_prov');
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_pv_pago_prov');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_let_pago_prov');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_tipo_cambio');
			informacionResultado[indiceArray].refNorma = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_ret_ref_norma');
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_tipo_contr_iibb_cod_arc', 'custrecord_l54_ret_tipo_contrib_iibb');
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_tipo_cont_cod_arc', 'custrecord_l54_ret_tipo_contrib_iva');

			informacionResultado[indiceArray].tipoDocSujeto = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_tipo_doc_cliente', 'custrecord_l54_ret_ref_pago_prov');
			informacionResultado[indiceArray].numeroDocSujeto = resultadoTXTRetencionesARCIBA[i].getValue('custbody_54_cuit_entity', 'custrecord_l54_ret_ref_pago_prov');
			informacionResultado[indiceArray].razonSocial = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_razon_social_prov', 'custrecord_l54_ret_ref_pago_prov');
			informacionResultado[indiceArray].numeroIIBB = resultadoTXTRetencionesARCIBA[i].getValue('custbody_l54_num_iibb', 'custrecord_l54_ret_ref_pago_prov');

			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_base_calculo_imp')); //custrecord_l54_ret_base_calculo_imp
			informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue(columns[33]), 10);
			var fechaOperacionAux = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_fecha');
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaComprobante = '';
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_numerador');
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_cod_retencion');
			informacionResultado[indiceArray].refEntidad = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_ref_proveedor');
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_jurisdiccion');
			informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_importe'));
			informacionResultado[indiceArray].importeComprobante = '';
			informacionResultado[indiceArray].alicuota = Math.abs(resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_ret_alicuota'));
			informacionResultado[indiceArray].minimoImp = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_param_ret_min_no_imp', 'custrecord_l54_ret_cod_retencion');
			informacionResultado[indiceArray].aceptacion = result.getValue(columns[31]);
			informacionResultado[indiceArray].fechaAceptacionExpresa = result.getValue(columns[32]);

			informacionResultado[indiceArray].recordtype = "vendorpayment";
			informacionResultado[indiceArray].esND = "F";
			informacionResultado[indiceArray].esCE = "F";
			informacionResultado[indiceArray].recordList = objList.filter(function (obj) {
				return (obj.name == informacionResultado[indiceArray].recordtype)
			});
			
			informacionResultado[indiceArray].tipoContribuyenteIIBB = resultadoTXTRetencionesARCIBA[i].getValue('custentity_l54_tipo_contribuyente_iibb','custrecord_l54_ret_ref_proveedor');

			idRetenciones.push(informacionResultado[indiceArray].refComprobante);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			var result = resultadoTXTPercepcionesARCIBA[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].tipoOperacion = 2;
			informacionResultado[indiceArray].idInterno = '';
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('internalid', null, 'group');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_numero_localizado', null, 'max');
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_boca', null, 'max');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_letra', null, 'max');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcionesARCIBA[i].getValue('exchangerate', null, 'group');
			informacionResultado[indiceArray].refNorma = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custcol_l54_norma_iibb_perc', 'max');
			informacionResultado[indiceArray].situacionIIBB = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_contr_iibb_cod_arc', 'custcol_l54_tipo_contribuyente', 'max');
			informacionResultado[indiceArray].situiacionIVA = resultadoTXTPercepcionesARCIBA[i].getValue('custrecord_l54_tipo_cont_cod_arc', 'custbody_l54_tipo_contribuyente', 'max');

			informacionResultado[indiceArray].tipoDocSujeto = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_tipo_doc_cliente', null, 'group');
			informacionResultado[indiceArray].numeroDocSujeto = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_54_cuit_entity', null, 'group');
			informacionResultado[indiceArray].razonSocial = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_razon_social_cliente', null, 'group');
			informacionResultado[indiceArray].numeroIIBB = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_num_iibb', null, 'group');

			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue(columns[25]), 10);
			var fechaOperacionAux = resultadoTXTPercepcionesARCIBA[i].getValue('trandate', null, 'group');
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = '';
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('taxcode', null, 'group');
			informacionResultado[indiceArray].refEntidad = resultadoTXTPercepcionesARCIBA[i].getValue('internalid', 'customer', 'group');
			informacionResultado[indiceArray].jurisdiccionOperacion = resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
			//informacionResultado[indiceArray].importeOperacion = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('taxamount', null, 'sum'));
			informacionResultado[indiceArray].importeOperacion = parseFloat(numberTruncTwoDec(Math.abs(result.getValue(columns[24]))), 10);
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('total', null, 'sum'));
			informacionResultado[indiceArray].alicuota = Math.abs(resultadoTXTPercepcionesARCIBA[i].getValue('custcol_l54_alicuota', null, 'sum'));
			informacionResultado[indiceArray].minimoImp = 0;
			informacionResultado[indiceArray].aceptacion = result.getValue(columns[22]);
			informacionResultado[indiceArray].fechaAceptacionExpresa = result.getValue(columns[23]);

			informacionResultado[indiceArray].recordtype = resultadoTXTPercepcionesARCIBA[i].getValue('recordtype', null, 'group');
			informacionResultado[indiceArray].esND = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_nd', null, 'group');
			informacionResultado[indiceArray].esCE = resultadoTXTPercepcionesARCIBA[i].getValue('custbody_l54_es_credito_electronico', null, 'group');
			informacionResultado[indiceArray].recordList = objList.filter(function (obj) {
				return (obj.name == informacionResultado[indiceArray].recordtype)
			});
			informacionResultado[indiceArray].tipoContribuyenteIIBB = resultadoTXTPercepcionesARCIBA[i].getValue('custentity_l54_tipo_contribuyente_iibb','customer', 'group');

			idPercepciones.push(informacionResultado[indiceArray].refComprobante);

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}
		// FIN UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO

		if (!isEmpty(informacionResultado)) {
			//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Cantidad Retenciones:' + informacionResultado.length);
			if(idRetenciones.length != 0 || idPercepciones.length != 0){
				var objPagos = new Array(), objPercepciones = new Array();
				if(idRetenciones.length != 0) objPagos = getPagos(idRetenciones);
				if(idPercepciones.length != 0) objPercepciones = getPercepciones(idPercepciones);
				var objOperaciones = getTipoOperaciones();
				var objTipoDocumento = getTipoDocumento();
				var objNumerador =  getNumeradores(subsidiaria);
				var objComprobantes = getComprobantes();
				var objTipoContriIIBB = getTipoContribuyenteIIBB();
			  }

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
				var tipoOperacionStr = "Percepcion";
				var entidadStr = "Cliente";
				retencionARCIBA.retencion = new Object();
				retencionARCIBA.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var tipoOperacion = informacionResultado[i].tipoOperacion;
				var idRetencionNetSuite = '';
				if (tipoOperacion == 1) {
					idRetencionNetSuite = informacionResultado[i].idInterno;
					tipoOperacionStr = "Retencion";
					entidadStr = "Proveedor";
				}
				var refComprobante = informacionResultado[i].refComprobante;

				if (!isEmpty(refComprobante)) {
					var codigoComprobante = null;
					var idRecord = informacionResultado[i].recordList;
					if (tipoOperacion == 1){
						
						var objNumeradorResult = objNumerador.filter(function (obj) {
						return (obj.col2 == idRecord[0].id && obj.col3 == informacionResultado[i].esND && obj.col4 == informacionResultado[i].esCE)
						})

						nlapiLogExecution('DEBUG', 'objNumeradorResult', JSON.stringify(objNumeradorResult));
						if(objNumeradorResult.length > 0){
							var objComprobantesResult = objComprobantes.filter(function (obj) {
								return (obj.col0 == objNumeradorResult[0].col1)
							})
							if(objComprobantesResult.length > 0){
								codigoComprobante = objComprobantesResult[0].col1;
							}
						}
					
					}else{
						var objNumeradorResult = objNumerador.filter(function (obj) {
						return (obj.col2 == idRecord[0].id && obj.col3 == informacionResultado[i].esND && obj.col4 == informacionResultado[i].esCE)
						})

						if(objNumeradorResult.length > 0){
							var objComprobantesResult = objComprobantes.filter(function (obj) {
								return (obj.col0 == objNumeradorResult[0].col1)
							})
							if(objComprobantesResult.length > 0){
								codigoComprobante = objComprobantesResult[0].col2
							}
						}
					}

					nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Ref Comprobante: ' + refComprobante);

					if (!isEmpty(codigoComprobante)) {
						retencionARCIBA.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
						// Obtengo el tipo de Comprobante netsuite
						
						var resultadoComprobanteNS = null;

						if ((tipoOperacion == 1) || (tipoOperacion == 2)) {

							var tipoComprobanteNS = null;
							if (tipoOperacion == 1)
								tipoComprobanteNS = informacionResultado[i].recordtype;

							if (!isEmpty(tipoComprobanteNS) || (tipoOperacion == 2)) {
								var resultadoPagoProveedor = null;
								if (tipoOperacion == 1) {
									var objPagosResult = objPagos.filter(function (obj) {
										return (obj.col0 == refComprobante)
									});
								}

								if ((!isEmpty(objPagosResult) && objPagosResult.length > 0) || (tipoOperacion == 2)) {
									

									// Obtengo la Fecha de Emision del Comprobante
									var fecha = '';
									if (tipoOperacion == 1) {
										//fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
										fecha = objPagosResult[0].col1;
									} else {
										fecha = informacionResultado[i].fechaComprobante;
									}
									//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha : ' + fecha);
									if (!isEmpty(fecha)) {
										var fechaDate = '';
										// Formateo la Fecha
										if (tipoOperacion == 1)
											fechaDate = nlapiStringToDate(fecha, 'datetimetz');
										else
											fechaDate = fecha;
										//nlapiLogExecution('DEBUG', 'generarTXT_ARCIBA - Retenciones', 'Fecha Date : ' + fechaDate);
										if (!isEmpty(fechaDate)) {
											// Obtengo las Componentes de la Fecha
											var dia = fechaDate.getDate();

											var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
											var anio = fechaDate.getFullYear();
											var fechaComprobante = padding_left(dia, '0', 2) + "/" + padding_left(mes, '0', 2) + "/" + anio;
											retencionARCIBA.retencion.fechaComprobante = fechaComprobante;
											// Obtengo el Numero del Comprobante
											var numerador = informacionResultado[i].codigoComprobante;

											if (!isEmpty(numerador)) {
												// Tomo el Numero, Punto de Venta y Letra
												//var arrayNumerador = numerador.split("-");
												//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
												//var numeroComprobante = arrayNumerador[2];
												var numeroComprobante_aux = numerador.toString().split('-');
												var numeroComprobante = (numeroComprobante_aux.length == 3) ? numeroComprobante_aux[2] : null;
												// Tomo el Punto de Venta
												//var puntoVenta = arrayNumerador[1];
												var puntoVenta = informacionResultado[i].puntoVentaComprobante;
												// Tomo la Latra del Comprobante
												//var letra = arrayNumerador[0];
												var letra = informacionResultado[i].letraComprobante;

												//if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
												if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
													var numeroAux = padding_left(puntoVenta.toString(), "0", 8) + padding_left(numeroComprobante.toString(), "0", 8);
													var faltaLetra = false;
													if (tipoOperacion == 1) {
														retencionARCIBA.retencion.letra = " ";
													} else {
														if (retencionARCIBA.retencion.codigoComprobante == '01' || retencionARCIBA.retencion.codigoComprobante == '02' || retencionARCIBA.retencion.codigoComprobante == '06' || retencionARCIBA.retencion.codigoComprobante == '07') {
															if (isEmpty(letra)) {
																faltaLetra = true;
															} else {
																retencionARCIBA.retencion.letra = letra;
															}
														} else {
															retencionARCIBA.retencion.letra = " ";
														}
													}
													if (faltaLetra == false) {
														retencionARCIBA.retencion.numeroComprobante = padding_left(numeroAux, "0", 16); // En vez de 15 , pongo 16 porque como
														// Es Orden de Pago no va la Letra
														//retencionARCIBA.retencion.letraComprobante = padding_right(letra, " ", 1);
														// Obtengo Tipo de Cambio de la Retencion
														var tipoCambio = informacionResultado[i].tipoCambio;
														if (!isEmpty(tipoCambio)) {
															// Obtengo el Importe del Comprobante
															var importeComprobante = '';

															if (tipoOperacion == 1) {
																//importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
																importeComprobante = objPagosResult[0].col7;
															} else {
																importeComprobante = informacionResultado[i].importeComprobante;
															}

															if (!isEmpty(importeComprobante)) {
																//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);

																// Obtengo el Codigo de Operacion
																if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {
																	var resultadoTipoOperacion = objOperaciones.filter(function (obj) {
																		return (obj.id == tipoOperacion)
																	  })
								
																	if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {

																		var codigoOperacion = resultadoTipoOperacion[0].codigoOp;
																		if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																			retencionARCIBA.retencion.codigoOperacion = codigoOperacion;
																			var infoImpuesto = null;
																			// Obtengo el Codigo de Norma
																			//var codigoNorma = '016'; // RIESGO FISCAL
																			var codigoNorma = '';
																			//if (tipoOperacion == 1)
																			//codigoNorma = informacionResultado[i].refNorma;
																			//else {
																			/*infoImpuesto = obtenerInfoImpuesto(informacionResultado[i].codigoOperacion);
																			if (!isEmpty(infoImpuesto))
																			codigoNorma = infoImpuesto.codigoNorma;*/
																			codigoNorma = informacionResultado[i].refNorma;
																			//}
																			if (!isEmpty(codigoNorma)) {
																				retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, '0', 3);

																				// Obtengo la Base de Calculo
																				var baseCalculo = informacionResultado[i].baseCalculo;
																				if (!isEmpty(baseCalculo)) {
																					//retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																					// Obtengo Fecha de Retencion
																					var fechaRetencion = '';
																					fechaRetencion = informacionResultado[i].fechaOperacion;

																					if (!isEmpty(fechaRetencion)) {
																						// Formateo la Fecha
																						//var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																						var fechaRetencionDate = fechaRetencion;
																						if (!isEmpty(fechaRetencionDate)) {

																							// Obtengo las Componentes de la Fecha
																							var diaRetencion = fechaRetencionDate.getDate();
																							var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																							var anioRetencion = fechaRetencionDate.getFullYear();
																							var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
																							retencionARCIBA.retencion.fechaRetencion = fechaRetencionFinal;

																							// Obtengo el Numero de Certificado

																							var numeroCertificado = ' ';
																							if (tipoOperacion == 1)
																								numeroCertificado = informacionResultado[i].numeroOperacion;

																							if (!isEmpty(numeroCertificado) || (tipoOperacion == 2)) {
																								retencionARCIBA.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 16);
																								// Obtengo la Alicuota
																								// Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
																								//var idInternoParametrizacionRetencion = '';
																								//if (tipoOperacion == 1)
																								//idInternoParametrizacionRetencion = informacionResultado[i].codigoOperacion;
																								//if (!isEmpty(idInternoParametrizacionRetencion) || (tipoOperacion == 2)) {
																								/*var resultadoAlicuota = '';
																								if (tipoOperacion == 1) {
																								var filtroAlicuota = new Array();
																								filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);
																								var columnaAlicuota = new Array();
																								columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');
																								resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);
																								}*/
																								//if ((!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) || (tipoOperacion == 2)) {
																								var alicuota = "";
																								/*if (tipoOperacion == 1)
																								alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
																								else {
																								if (!isEmpty(infoImpuesto))
																								alicuota = infoImpuesto.porcentaje;
																								}*/
																								//if ((codigoNorma == 28) || (codigoNorma == 29)) {
																								//	alicuota = 0;
																								//} else {
																								alicuota = parseFloat(informacionResultado[i].alicuota, 10);
																								//}

																								if (!isEmpty(alicuota) && (alicuota > 0)) {

																									//retencionARCIBA.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);
																									retencionARCIBA.retencion.alicuota = padding_left(parseFloat(numberTruncTwoDec(alicuota), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);

																									// Cargo el Proveedor

																									var proveedor = '';

																									proveedor = informacionResultado[i].refEntidad;

																									// Obtengo el Numero de Documento
																									if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {

																										retencionARCIBA.sujeto.idSujetoNetSuite = proveedor;

																										var filtroProveedor = new Array();
																										filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

																										var columnaProveedor = new Array();
																										columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																										columnaProveedor[1] = new nlobjSearchColumn('companyname');
																										columnaProveedor[2] = new nlobjSearchColumn('lastname');
																										columnaProveedor[3] = new nlobjSearchColumn('firstname');
																										columnaProveedor[4] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																										columnaProveedor[5] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																										columnaProveedor[6] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																										columnaProveedor[7] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente_iibb');
																										columnaProveedor[8] = new nlobjSearchColumn('custentity_3k_nom_pais_origen');
																										columnaProveedor[9] = new nlobjSearchColumn('custentity_3k_cuit_pais_origen');

																										var tipoRecordType = 'customer';
																										if (tipoOperacion == 1)
																											tipoRecordType = 'vendor';

																										if (tipoRecordType == 'customer')
																											columnaProveedor[10] = new nlobjSearchColumn('custentity_l54_nombre_legal');
																										else
																											columnaProveedor[10] = new nlobjSearchColumn('legalname');

																										var resultadoProveedor = new nlapiSearchRecord(tipoRecordType, null, filtroProveedor, columnaProveedor);

																										if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {

																											var jurisdiccion = informacionResultado[i].jurisdiccionOperacion;
																											if (!isEmpty(jurisdiccion)) {
																												// Obtengo el Tipo de Contribuyente segun la Jurisdiccion
																												//
																												var resultadoJurisdiccion = "";
																												if (tipoOperacion == 1) {
																													var filtroJurisdiccion = new Array();
																													filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																													filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);

																													var columnaJurisdiccion = new Array();
																													columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');

																													resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);
																												}

																												var desc = "IIBB";
																												var auxiliar = objTipoContriIIBB.filter(function (obj) {
																													return (obj.col0 == informacionResultado[i].tipoContribuyenteIIBB)
																												  })
																												  var situacionIIBB = "";
																												  if(auxiliar.length != 0){
																													situacionIIBB = auxiliar[0].col1;
																												  }
																												//if ((!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) || (tipoOperacion == 2)) {
																												//
																												// Obtengo Codigo Tipo Condicion IIBB
																												/*var tipoContribuyenteIIBB = "";
																												//tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																												if (tipoOperacion == 1) {
																												tipoContribuyenteIIBB = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_tipo');
																												} else {
																												// Solo por Ahora tomar la General del Cliente, Luego Tomar de la Tabla Jurisdicciones IIBB
																												tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																												}*/
																												//if (!isEmpty(tipoContribuyenteIIBB)) {
																												/*var filtroTipoContribuyente = new Array();
																												filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);
																												var columnaTipoContribuyente = new Array();
																												columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_arc');
																												var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);*/
																												//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {
																												//var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_arc');

															
																												if ((!isEmpty(situacionIIBB) && (situacionIIBB == 1)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 2)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 4)) || (!isEmpty(situacionIIBB) && (situacionIIBB == 5))) {

																													retencionARCIBA.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																													var numeroIIBB = "0";

																													/* if (situacionIIBB == 1 || situacionIIBB == 2 || situacionIIBB == 5) {
																														// Busco el Numero de IIBB
																														numeroIIBB = resultadoProveedor[0].getValue('custentity_l54_cod_iibb');
																														if (!isEmpty(numeroIIBB)){
																															var expRegNumeros = /[^0-9]/gi;
																															numeroIIBB = numeroIIBB.replace(expRegNumeros, '');
																														}
																													} */

																													var name_pais_origen = resultadoProveedor[0].getValue('custentity_3k_nom_pais_origen');
																													var nroDocumento = '';
																													var expRegNumeros = /[^0-9]/gi;

																													// si es cliente o proveedor del exterior
																													if (!isEmpty(name_pais_origen)) {
																														nroDocumento = resultadoProveedor[0].getValue('custentity_3k_cuit_pais_origen');
																														numeroIIBB = nroDocumento.replace(expRegNumeros, '');
																													} else {
																														nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');
																														if (situacionIIBB == 1) {
																															// Busco el Numero de IIBB
																															numeroIIBB = resultadoProveedor[0].getValue('custentity_l54_cod_iibb');
																															if (!isEmpty(numeroIIBB)) {
																																numeroIIBB = numeroIIBB.replace(expRegNumeros, '');
																															}
																														} else {
																															if (((situacionIIBB == 2) && !isEmpty(nroDocumento)) || ((situacionIIBB == 5) && !isEmpty(nroDocumento))) {
																																numeroIIBB = nroDocumento.replace(expRegNumeros, '');
																															}
																														}

																													}

																													/// AQUI PUEDE IR EL CAMBO DE IIBB CODE PARA QUE SE HEREDE DEL CAMPO DE CUIT O CUIT PAIS ORIGEN.
																													if (!isEmpty(numeroIIBB)) {
																														// Formateo el Documento
																														//var expRegNumeros = /[^0-9]/gi;
																														//numeroIIBB = numeroIIBB.replace(expRegNumeros, '');
																														//numeroIIBB = numeroIIBB.replace(/-/g, '');
																														//numeroIIBB = numeroIIBB.replace(/\./g, '');
																														// Elimino Blancos
																														//numeroIIBB = numeroIIBB.replace(/ /g, '&nbsp');
																														retencionARCIBA.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 11);
																														// Busco la Situacion Frente al IVA

																														//var tipoContribuyenteIVA = "";
																														var desc = "IVA";
																														//tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');

																														//tipoContribuyenteIVA = informacionResultado[i].tipoContrIVA;

																														//if (!isEmpty(tipoContribuyenteIVA)) {

																														/*var filtroTipoContribuyente = new Array();
																														filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);

																														var columnaTipoContribuyente = new Array();
																														columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_arc');

																														var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);*/

																														//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																														//var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_arc');

																														var situacionIVA = informacionResultado[i].situiacionIVA;

																														if (!isEmpty(situacionIVA)) {

																															retencionARCIBA.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																															// Obtengo el Importe de la Retencion
																															var importeRetencion = informacionResultado[i].importeOperacion;
																															/* if (tipoOperacion == 1) {
																																importeTotalRetenciones = resultadoPagoProveedor[0].getValue('custbody_l54_importe_total_retencion', null, 'max');
																															} */
																															if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
                                                                                                                                /** Modificación Moneda Local 30/04 *
																																var cantDecImporteNeto = countDecimales(importeRetencion);
																																var cantDecTipoCambio = countDecimales(tipoCambio);
																																var cantidadDecimalesFinal = cantDecImporteNeto + cantDecTipoCambio;
																																var importeRetencionFinal = Math.abs(parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10));*/
																																
                                                                                                                                nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'importeRetencion sin redondeo: ' + importeRetencion + '---- baseCalculo sin redondeo: ' + baseCalculo);

																																if (tipoOperacion == 1) {
																																	 /** Modificación Moneda Local 30/04 **/
																																	var cantDecImporteNeto = countDecimales(importeRetencion);
																																	var cantDecTipoCambio = countDecimales(tipoCambio);
																																	var cantidadDecimalesFinal = cantDecImporteNeto + cantDecTipoCambio;
																																	var importeRetencionFinal = Math.abs(parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10));
																																
																																	//retencionARCIBA.retencion.importeRetencion = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	//retencionARCIBA.retencion.retencionPracticada = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(importeRetencionFinal), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(numberTruncTwoDec(importeRetencionFinal), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																} else {
																																	//retencionARCIBA.retencion.importeRetencion = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	//retencionARCIBA.retencion.retencionPracticada = padding_left(Math.abs(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(importeRetencion), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.retencionPracticada = padding_left(parseFloat(numberTruncTwoDec(importeRetencion), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																}

																																if (tipoOperacion == 1) {
																																	//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat((parseFloat(importeComprobante, 10) - parseFloat(importeTotalRetenciones, 10)), 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	//retencionARCIBA.retencion.importeComprobante = padding_left(Math.abs(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																}
																																else {
																																	////----*** JSalazar: 05-03-2019. Tipo de cambio se cambia por el valor de 1 porque ya viene siempre transformado el importe a pesos
																																	//retencionARCIBA.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	retencionARCIBA.retencion.importeComprobante = padding_left(Math.abs(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																	////-----*** Fin JSalazar.
																																}

																																// Obtengo el Tipo de Documento del Sujeto Retenido
																																var tipoDocumento = informacionResultado[i].tipoDocSujeto;
																																if (!isEmpty(tipoDocumento)) {
																																	var resultadoTipoDocumento = objTipoDocumento.filter(function (obj) {
																																		return (obj.id == tipoDocumento)
																																	  })

																																	  nlapiLogExecution('DEBUG', 'resultadoTipoDocumento', JSON.stringify(resultadoTipoDocumento));
																																	if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																		tipoDocumento = resultadoTipoDocumento[0].codigo;
																																		if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																			if (((tipoDocumento == 1) && (situacionIIBB == 4)) || ((tipoDocumento == 2) && (situacionIIBB == 4)) || ((tipoDocumento == 3) && (situacionIIBB == 1)) || ((tipoDocumento == 3) && (situacionIIBB == 2)) || ((tipoDocumento == 3) && (situacionIIBB == 4)) || ((tipoDocumento == 3) && (situacionIIBB == 5))) {
																																				retencionARCIBA.sujeto.tipoDocSujeto = padding_left(tipoDocumento, '0', 1);
																																				// Informacion de Beneficiarios del Exterior
																																				// Verifico si el Proveedor tiene
																																				var otrosConceptos = "";
																																				/*var resultadoMinimoNoImp = null;
																																				if (tipoOperacion == 1) {
																																				// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																																				var filtroMinimoNoImp = new Array();
																																				filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);

																																				var columnaMinimoNoImp = new Array();
																																				columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');

																																				resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);
																																				}*/

																																				//if ((!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) || (tipoOperacion == 2)) {

																																				/*if (tipoOperacion == 1) {
																																				//otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																																				// Imp Comprobante Sin Ret IIBB CABA - Imp IVA - Base de Calculo
																																				otrosConceptos = informacionResultado[i].minimoImp;
																																				} else {
																																				// Imp Comprobante Sin Perc IIBB CABA - Imp IVA - Base de Calculo
																																				otrosConceptos = 0;
																																				}*/

																																				/*if (!isEmpty(otrosConceptos)) {

																																				// Obtengo el Importe de Percepcion del Pago
																																				var importePercepcionPago = "";
																																				if (tipoOperacion == 1) {
																																				importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'group');
																																				} else {
																																					importePercepcionPago = 0;
																																				}

																																				if (!isEmpty(importePercepcionPago)) {*/

																																				// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos

																																				//retencionARCIBA.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10) - parseFloat(otrosConceptos, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

																																				// Obtengo el Importe del IVA
																																				//var importeIVAPago = "";
																																				//importeIVAPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_iva', null, 'group');
																																				// Al Ser Orden de Pago el Importe IVA debe ir en 0
																																				var importeIVAPago = 0;
																																				//if (tipoOperacion == 2 && (retencionARCIBA.retencion.letra == 'A' || retencionARCIBA.retencion.letra == 'M')) {
																																				if (tipoOperacion == 2 && (letra == 'A' || letra == 'M')) {

																																					importeIVAPago = '';
																																					var resultadoIVA = objPercepciones.filter(function (obj) {
																																						return (obj.col0 == informacionResultado[i].refComprobante)
																																					})

																																					if ((!isEmpty(resultadoIVA) && resultadoIVA.length > 0)) {

																																						importeIVAPago = Math.abs(resultadoIVA[0].col1);
																																					}
																																				}

																																				if (!isEmpty(importeIVAPago)) {

																																					//retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																					////-----** JSalazar: 05-04-2019. El importe IVA ya viene transformado a pesos por lo tanto no se toma en cuenta el tipo de cambio
																																					//retencionARCIBA.sujeto.iva = padding_left(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																					retencionARCIBA.sujeto.iva = padding_left(Math.abs(parseFloat(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(1, 10), 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																					////////--** Fin. JSalazar.

																																					// Obtengo el Importe de Otros Conceptos
																																					var otrosConceptos = 0;
																																					var otrosConceptos_aux = 0;
																																					if (tipoOperacion == 1) {
																																						//otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');
																																						// Imp Comprobante Sin Ret IIBB CABA - Imp IVA - Base de Calculo
																																						//otrosConceptos = parseFloat(((parseFloat(importeComprobante, 10) - parseFloat(importeTotalRetenciones, 10)) - parseFloat(importeIVAPago, 10) - parseFloat(baseCalculo, 10)), 10);
																																						//otrosConceptos = informacionResultado[i].minimoImp;
																																						otrosConceptos_aux = parseFloat((parseFloat(importeComprobante, 10) - parseFloat(baseCalculo, 10)), 10);
																																						otrosConceptos = padding_left(Math.abs(parseFloat(parseFloat(otrosConceptos_aux, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																					} else {
																																						// Imp Comprobante Sin Perc IIBB CABA - Imp IVA - Base de Calculo
																																						////----** JSalazar:: 05-04-2019. Se cambia la manera de cálcular el valor de otros conceptos porque los valores se pasaban mal.
																																						otrosConceptos_aux = parseFloat((parseFloat(importeComprobante, 10) - parseFloat(importeIVAPago, 10) - parseFloat(baseCalculo, 10)), 10);
																																						nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Otros conceptos: ' + otrosConceptos_aux);
																																						otrosConceptos = padding_left(Math.abs(parseFloat(parseFloat(otrosConceptos_aux, 10) * parseFloat(1, 10), 10)).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
																																						/////---** Fin. JSalazar.
																																					}

																																					if (parseFloat(otrosConceptos, 10) < 0.00) {
																																						otrosConceptos = parseFloat(0, 10);
																																					}

																																					//var otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);

																																					retencionARCIBA.sujeto.otrosConceptos = otrosConceptos;

																																					// Cargo informacion del Sujeto Retenido
																																					var proveedor = informacionResultado[i].refEntidad;
																																					// Genero el Importe de Otros Conceptos
																																					// Obtengo el Numero de Documento
																																					//var nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');

																																					if (!isEmpty(nroDocumento)) {

																																						// Formateo el Documento
																																						var expRegNumeros = /[^0-9]/gi;
																																						var numeroDocumentoFinal = nroDocumento.replace(expRegNumeros, '');
																																						//nroDocumento = nroDocumento.replace(/-/g, '');
																																						//nroDocumento = nroDocumento.replace(/\./g, '');
																																						// Elimino Blancos
																																						//var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');
																																						/* if (parseFloat(numeroDocumentoFinal) >= 30000000000)
																																							retencionARCIBA.sujeto.tipoDocSujeto = '3'; */

																																						retencionARCIBA.sujeto.numeroDocSujeto = padding_left(numeroDocumentoFinal, "0", 11);

																																						// Obtengo la Razon Social
																																						var razonSocial = "";
																																						if (tipoRecordType == 'customer')
																																							razonSocial = resultadoProveedor[0].getValue('custentity_l54_nombre_legal');
																																						else
																																							razonSocial = resultadoProveedor[0].getValue('legalname');
																																						if (isEmpty(razonSocial)) {
																																							// Busco Nombre y Apellido
																																							var apellido = resultadoProveedor[0].getValue('lastname');
																																							var nombre = resultadoProveedor[0].getValue('firstname');
																																							razonSocial = apellido + " " + nombre;
																																						}

																																						if (!isEmpty(razonSocial)) {
																																							retencionARCIBA.sujeto.razonSocial = padding_right(razonSocial.substring(0, 29), " ", 30);

																																							retencionARCIBA.retencion.aceptacion = informacionResultado[i].aceptacion;
																																							retencionARCIBA.retencion.fechaAceptacionExpresa = informacionResultado[i].fechaAceptacionExpresa;
																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Obteniendo Razon Social del " + entidadStr;
																																						}
																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "Error Obteniendo Numero de Documento del " + entidadStr;
																																					}
																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "Error Obteniendo Importe IVA de la Transaccion";
																																				}
																																				/*} else {
																																				errorGlobal = true;
																																				descripcionError = "Error Obteniendo Importe Percepciones";
																																				}*/
																																				/*} else {
																																				errorGlobal = true;
																																				descripcionError = "Minimo No Imponible No Configurado";
																																				}*/
																																				/*} else {
																																				errorGlobal = true;
																																				descripcionError = "Error Obteniendo el Minimo No Imponible";
																																				}*/
																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "Error Tipo de Documento ARCIBA y Situación IIBB No Configurado Correctamente";
																																			}
																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "Error Tipo de Documento ARCIBA No Configurado Correctamente";
																																		}
																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "Error Obteniendo Tipo de Documento";
																																	}
																																} else {
																																	errorGlobal = true;
																																	descripcionError = "El Sujeto Retenido/Percibido no Posee Tipo de Documento";
																																}
																															} else {
																																errorGlobal = true;
																																descripcionError = "El Importe de Retencion/Percepcion debe ser mayor a 0.00";
																															}
																														} else {
																															errorGlobal = true;
																															descripcionError = "Error Obteniendo Situacion de " + desc;
																														}
																														/*} else {
																														errorGlobal = true;
																														descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																														}*/
																														/*} else {
																														errorGlobal = true;
																														descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																														}*/
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido/Percibido";
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo Situacion de " + desc;
																												}
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																												}*/
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del " + entidadStr;
																												}*/
																												/*} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del " + entidadStr;
																												}*/
																											} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion/Percepcion";
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo Informacion del " + entidadStr;
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo " + entidadStr;
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Alicuota Invalida";
																								}
																								/*} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
																								}*/
																								/*} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Alicuota de " + tipoOperacionStr;
																								}*/
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Numero de Certificado";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Formateando la Fecha de " + tipoOperacionStr;
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo Fecha De " + tipoOperacionStr;
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Base De Calculo";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Codigo De Norma";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Codigo de Operacion Invalido";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Codigo de Operacion";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Codigo de Operacion";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Importe del Comprobante";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Tipo de Cambio de la " + tipoOperacionStr;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Letra del Comprobante";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
												}
												/*} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
												}*/
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha del Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la " + tipoOperacionStr;
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionARCIBA.sujeto != null) {

						if (retencionARCIBA.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Retenciones/Percepciones Generado Correctamente";
							contenidoTXT += retencionARCIBA.retencion.codigoOperacion + retencionARCIBA.retencion.codigoNorma + retencionARCIBA.retencion.fechaRetencion + retencionARCIBA.retencion.codigoComprobante +
								retencionARCIBA.retencion.letra + retencionARCIBA.retencion.numeroComprobante + retencionARCIBA.retencion.fechaComprobante + retencionARCIBA.retencion.importeComprobante +
								retencionARCIBA.retencion.numeroCertificado + retencionARCIBA.sujeto.tipoDocSujeto + retencionARCIBA.sujeto.numeroDocSujeto + retencionARCIBA.sujeto.situacionIIBB +
								retencionARCIBA.sujeto.numeroIIBB + retencionARCIBA.sujeto.situacionIVA + retencionARCIBA.sujeto.razonSocial + retencionARCIBA.sujeto.otrosConceptos +
								retencionARCIBA.sujeto.iva + retencionARCIBA.retencion.baseCalculo + retencionARCIBA.retencion.alicuota + retencionARCIBA.retencion.retencionPracticada +
								retencionARCIBA.retencion.importeRetencion + retencionARCIBA.retencion.aceptacion + retencionARCIBA.retencion.fechaAceptacionExpresa;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion/Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido/Percibido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones/Percepciones eARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones/Percepciones Correcta - No se Encontraron Retenciones/Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones/Percepciones eARCIBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones/Percepciones - Error : Error Obteniendo Retenciones/Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'No se encontraron Percepciones');
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTeArciba', 'Error Generando TXT eARCIBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT eARCIBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionARCIBA = grabarError(true, 'Error Generando TXT de Retenciones/Percepciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionARCIBA = grabarError(false, 'Generacion de TXT de Retenciones/Percepciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones/Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTeArciba', 'Finalizacion - Generacion TXT eARCIBA');
	retencionARCIBA.contenidoTXT = contenidoTXT;
	return retencionARCIBA;
}

function generarTXTeArcibaNC(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'Inicio - Generacion TXT eARCIBA Notas de Credito');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var percepcionARCIBANC = new Object();
		percepcionARCIBANC.percepcion = new Object();
		percepcionARCIBANC.sujeto = new Object();
		percepcionARCIBANC.existenPercepciones = false;
		percepcionARCIBANC.error = false;
		percepcionARCIBANC.descripcionError = "";
		percepcionARCIBANC.procesoEncolado = false;
		percepcionARCIBANC.idLog = idRegistroLOG;
		percepcionARCIBANC.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var filtroTXTPercepcionesARCIBA = new Array();
		//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arciba_nc');
		search.addFilters(filtroTXTPercepcionesARCIBA);
		var searchResults = search.runSearch();

		var resultadoTXTPercepcionesARCIBA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcionesARCIBA = resultado; //Primera ve inicializa
				else
					resultadoTXTPercepcionesARCIBA = resultadoTXTPercepcionesARCIBA.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcionesARCIBA != null && i < resultadoTXTPercepcionesARCIBA.length; i++) {
			var result = resultadoTXTPercepcionesARCIBA[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].tipoOperacion = result.getValue(columns[1]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[2]);
			var fechaOperacionAux = result.getValue(columns[3]);
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionAux;
			informacionResultado[indiceArray].montoComprobante = result.getValue(columns[4]);
			informacionResultado[indiceArray].numeroCertificado = result.getValue(columns[5]);
			informacionResultado[indiceArray].tipoComprobanteRef = result.getValue(columns[6]);
			informacionResultado[indiceArray].letraComprobanteRef = result.getValue(columns[7]);
			informacionResultado[indiceArray].numeroComprobanteRef = result.getValue(columns[8]);
			informacionResultado[indiceArray].numeroDocCliente = result.getValue(columns[9]);
			informacionResultado[indiceArray].codigoNormaIIBB = result.getValue(columns[10]);
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[11]);
			informacionResultado[indiceArray].importePercepcion = result.getValue(columns[12]);
			informacionResultado[indiceArray].alicuotaPercepcion = result.getValue(columns[13]);
			informacionResultado[indiceArray].tipoTransOrigen = result.getValue(columns[14]);
			//informacionResultado[indiceArray].montoImpManual = result.getValue(columns[15]);

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				percepcionARCIBANC.percepcion = new Object();
				percepcionARCIBANC.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";

				if (!isEmpty(informacionResultado[i].idInterno)) {
					refComprobante = informacionResultado[i].idInterno;
					percepcionARCIBANC.percepcion.idInterno = informacionResultado[i].idInterno;
					if (!isEmpty(informacionResultado[i].tipoOperacion)) {
						percepcionARCIBANC.percepcion.tipoOperacion = informacionResultado[i].tipoOperacion;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							percepcionARCIBANC.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].fechaComprobante)) {
								percepcionARCIBANC.percepcion.fechaComprobante = informacionResultado[i].fechaComprobante;
								if (!isEmpty(informacionResultado[i].montoComprobante)) {
									percepcionARCIBANC.percepcion.montoComprobante = informacionResultado[i].montoComprobante;
									if (!isEmpty(informacionResultado[i].numeroCertificado)) {
										percepcionARCIBANC.percepcion.numeroCertificado = informacionResultado[i].numeroCertificado;
										if (!isEmpty(informacionResultado[i].tipoComprobanteRef)) {
											percepcionARCIBANC.percepcion.tipoComprobanteRef = informacionResultado[i].tipoComprobanteRef;
											if ((!isEmpty(informacionResultado[i].letraComprobanteRef) && (informacionResultado[i].tipoTransOrigen = 'invoice')) || (isEmpty(informacionResultado[i].letraComprobanteRef) && (informacionResultado[i].tipoTransOrigen != 'invoice'))) {
												percepcionARCIBANC.percepcion.letraComprobanteRef = informacionResultado[i].letraComprobanteRef;
												if (!isEmpty(informacionResultado[i].numeroComprobanteRef)) {
													percepcionARCIBANC.percepcion.numeroComprobanteRef = informacionResultado[i].numeroComprobanteRef;
													if (!isEmpty(informacionResultado[i].numeroDocCliente)) {
														percepcionARCIBANC.sujeto.numeroDocCliente = informacionResultado[i].numeroDocCliente;
														if (!isEmpty(informacionResultado[i].codigoNormaIIBB)) {
															percepcionARCIBANC.percepcion.codigoNormaIIBB = informacionResultado[i].codigoNormaIIBB;
															if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
																percepcionARCIBANC.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
																if (!isEmpty(informacionResultado[i].importePercepcion)) {
																	percepcionARCIBANC.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
																	if (!isEmpty(informacionResultado[i].alicuotaPercepcion)) {
																		percepcionARCIBANC.percepcion.alicuotaPercepcion = informacionResultado[i].alicuotaPercepcion;
																	}
																	else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo la Alicuota de la Percepcion";
																	}
																}
																else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Monto de la Percepcion";
																}
															}
															else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo la Fecha del Comprobante Origen de la Nota de Credito";
															}
														}
														else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Codigo de Norma de IIBB";
														}
													}
													else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Numero de Documento del Sujeto Percibido";
													}
												}
												else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Numero del Comprobante Origen de la Nota de Credito";
												}
											}
											else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Letra del Comprobante Origen de la Nota de Credito";
											}
										}
										else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Tipo de Comprobante Origen de la Nota de Credito";
										}
									}
									else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Numero del Comprobante";
									}
								}
								else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Monto del Comprobante";
								}
							}
							else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha del Comprobante";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de la Nota de Credito";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Operacion";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionARCIBANC.sujeto != null) {

						if (percepcionARCIBANC.percepcion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Percepciones Generado Correctamente";
							contenidoTXT += percepcionARCIBANC.percepcion.tipoOperacion + percepcionARCIBANC.percepcion.numeroComprobante + percepcionARCIBANC.percepcion.fechaComprobante + percepcionARCIBANC.percepcion.montoComprobante + percepcionARCIBANC.percepcion.numeroCertificado +
								percepcionARCIBANC.percepcion.tipoComprobanteRef + percepcionARCIBANC.percepcion.letraComprobanteRef + percepcionARCIBANC.percepcion.numeroComprobanteRef +
								percepcionARCIBANC.sujeto.numeroDocCliente + percepcionARCIBANC.percepcion.codigoNormaIIBB + percepcionARCIBANC.percepcion.fechaPercepcion + percepcionARCIBANC.percepcion.importePercepcion +
								percepcionARCIBANC.percepcion.alicuotaPercepcion;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones eARCIBA Notas de Credito');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT /Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepcion
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
					}*/
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'No se encontraron Percepciones');
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTeArcibaNC', 'Error Generando TXT eARCIBA  Notas de Credito - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT eARCIBA  Notas de Credito - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionARCIBANC = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionARCIBANC = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTeArcibaNC', 'Finalizacion - Generacion TXT eARCIBA Notas de Credito');
	percepcionARCIBANC.contenidoTXT = contenidoTXT;
	return percepcionARCIBANC;
}

function generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'Inicio - Generacion TXT eSICOL Percepciones Compras');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var percepcioneSICOLcompras = new Object();
		percepcioneSICOLcompras.percepcion = new Object();
		percepcioneSICOLcompras.sujeto = new Object();
		percepcioneSICOLcompras.existenPercepciones = false;
		percepcioneSICOLcompras.error = false;
		percepcioneSICOLcompras.descripcionError = "";
		percepcioneSICOLcompras.procesoEncolado = false;
		percepcioneSICOLcompras.idLog = idRegistroLOG;
		percepcioneSICOLcompras.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var filtroTXTPercepcioneseSICOL = new Array();

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTPercepcioneseSICOL[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria)) {
			// nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'Ingreso en condición isEmpty(subsidiaria): ' + isEmpty(subsidiaria));
			filtroTXTPercepcioneseSICOL[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		}

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_esicol_bill');
		search.addFilters(filtroTXTPercepcioneseSICOL);
		var searchResults = search.runSearch();
		var resultadoTXTPercepcioneseSICOL = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcioneseSICOL = resultado; //Primera ve inicializa
				else
					resultadoTXTPercepcioneseSICOL = resultadoTXTPercepcioneseSICOL.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcioneseSICOL != null && i < resultadoTXTPercepcioneseSICOL.length; i++) {
			var result = resultadoTXTPercepcioneseSICOL[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue(columns[1]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[2]);
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[3]);
			informacionResultado[indiceArray].nroSucursal = result.getValue(columns[4]);
			informacionResultado[indiceArray].montoImpManual = result.getValue(columns[5]);
			informacionResultado[indiceArray].importePercepcion = result.getValue(columns[6]);
			informacionResultado[indiceArray].tipoComprobante = result.getValue(columns[7]);
			informacionResultado[indiceArray].letraComprobante = result.getValue(columns[8]);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXT_eSICOL Percepciones Compras', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				percepcioneSICOLcompras.percepcion = new Object();
				percepcioneSICOLcompras.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";

				if (!isEmpty(informacionResultado[i].idInterno)) {
					refComprobante = informacionResultado[i].idInterno;
					percepcioneSICOLcompras.percepcion.idInterno = informacionResultado[i].idInterno;
					if (!isEmpty(informacionResultado[i].cuit)) {
						percepcioneSICOLcompras.percepcion.cuit = informacionResultado[i].cuit;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							percepcioneSICOLcompras.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
								percepcioneSICOLcompras.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
								if (informacionResultado[i].nroSucursal) {
									percepcioneSICOLcompras.percepcion.nroSucursal = informacionResultado[i].nroSucursal;
									if (!isEmpty(informacionResultado[i].montoImpManual)) {
										percepcioneSICOLcompras.percepcion.montoImpManual = informacionResultado[i].montoImpManual;
										if (!isEmpty(informacionResultado[i].importePercepcion)) {
											percepcioneSICOLcompras.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
											if (!isEmpty(informacionResultado[i].tipoComprobante)) {
												percepcioneSICOLcompras.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
												if (!isEmpty(informacionResultado[i].letraComprobante)) {
													percepcioneSICOLcompras.percepcion.letraComprobante = informacionResultado[i].letraComprobante;
												}
												else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo la Letra del Comprobante de la Percepción";
												}
											}
											else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Tipo de Comprobante del Comprobante";
											}
										}
										else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Importe de la Percepción";
										}
									}
									else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto Base de la Percepción";
									}
								}
								else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Número de Sucursal de la transacción";
								}
							}
							else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Percepción";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de la transacción";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la transacción";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepción";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcioneSICOLcompras.percepcion != null) {
						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";
						contenidoTXT += percepcioneSICOLcompras.percepcion.cuit + percepcioneSICOLcompras.percepcion.numeroComprobante +
							percepcioneSICOLcompras.percepcion.fechaPercepcion + percepcioneSICOLcompras.percepcion.nroSucursal +
							percepcioneSICOLcompras.percepcion.montoImpManual + percepcioneSICOLcompras.percepcion.importePercepcion +
							percepcioneSICOLcompras.percepcion.tipoComprobante + percepcioneSICOLcompras.percepcion.letraComprobante;
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones Compras eSICOL - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras eSICOL');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT /Percepciones Compras eSICOL - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Compras eSICOL Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepcion
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
					}*/
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras eSICOL - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Percepciones Compras eSICOL - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcioneSICOLcompras = grabarError(true, 'Error Generando TXT de Percepciones Percepciones Compras eSICOL', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcioneSICOLcompras = grabarError(false, 'Generacion de TXT de Percepciones Compras eSICOL Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT Percepciones Compras eSICOL');
	percepcioneSICOLcompras.contenidoTXT = contenidoTXT;
	return percepcioneSICOLcompras;
}

function generarTXTCatamarcaPercSufridas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTcatamARCAPercSufridas', 'Inicio - Generacion TXT Catamarca Percepciones Sufridas');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var percepcioneARCAcompras = new Object();
		var catamARCAPercSufridas = new Object();
		catamARCAPercSufridas.percepcion = new Object();
		catamARCAPercSufridas.sujeto = new Object();
		catamARCAPercSufridas.existenPercepciones = false;
		catamARCAPercSufridas.error = false;
		catamARCAPercSufridas.descripcionError = "";
		catamARCAPercSufridas.procesoEncolado = false;
		catamARCAPercSufridas.idLog = idRegistroLOG;
		catamARCAPercSufridas.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var filtroTXTPercepcioneseARCA = new Array();

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			//Almacenar las fechas de facturas/notas de crédito que estén dentro del rango (fDesd - fHasta)
			filtroTXTPercepcioneseARCA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria)) {
			// nlapiLogExecution('DEBUG', 'generarTXTeSICOLPercCompras', 'Ingreso en condición isEmpty(subsidiaria): ' + isEmpty(subsidiaria));
			filtroTXTPercepcioneseARCA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		}

		//Cargar la búsqueda guardada en NetSuite
		//Type: The record internal ID of the record type you are searching
		//id: The internal ID or script ID of the saved search
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_compr_catamarca');
		search.addFilters(filtroTXTPercepcioneseARCA); //add new filters (date + subsidiary)
		var searchResults = search.runSearch(); //ejecutar SS y almacenar resultados (en seachResults)
		var resultadoTXTPercepcioneseARCA = []; //concatenado de todos los resultados devueltos

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);
			//recupera resultados con índice desde resultIndex (incluido) hasta el resultIndex + resultStep (excluido)

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcioneseARCA = resultado; //Primera vez inicializa
				else
					//concatena los resultados que se van obteniendo como nuevos elementos del arreglo
					resultadoTXTPercepcioneseARCA = resultadoTXTPercepcioneseARCA.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array(); //establecer un objeto por cada resultado
		//var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTcatamARCAPercSufridas', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcioneseARCA != null && i < resultadoTXTPercepcioneseARCA.length; i++) {
			var result = resultadoTXTPercepcioneseARCA[i];
			var columns = result.getAllColumns();
			informacionResultado[i] = new Object();
			informacionResultado[i].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[i].idInterno;
			//cuit agente de percepción (1)
			informacionResultado[i].cuit = result.getValue(columns[1]);
			//(2) Número de IIBB
			informacionResultado[i].ingresosBrutos = result.getValue(columns[2]);
			//(3) Tipo de comprobante
			informacionResultado[i].tipoComprobante = result.getValue(columns[3]);
			//(4) letra Comprobante
			informacionResultado[i].letraComprobante = result.getValue(columns[4]);
			//(5)Fecha Percepción
			informacionResultado[i].fechaPercepcion = result.getValue(columns[5]);
			//(6) Sucursal
			informacionResultado[i].nroSucursal = result.getValue(columns[6]);
			//(7) Número Emisión / Número Comprobante
			informacionResultado[i].numeroComprobante = result.getValue(columns[7]);
			//(8) importe Percibido - Anulado
			informacionResultado[i].importePercepcion = result.getValue(columns[8]);
			//indiceArray = parseInt(i, 10) + parseInt(1, 10);

			//informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[3]);
			//informacionResultado[indiceArray].nroSucursal = result.getValue(columns[4]);
			//[Pendiente]
			//informacionResultado[indiceArray].montoImpManual = result.getValue(columns[5]);
			//informacionResultado[indiceArray].importePercepcion = result.getValue(columns[6]);
			//informacionResultado[indiceArray].tipoComprobante = result.getValue(columns[7]);
			//informacionResultado[indiceArray].letraComprobante = result.getValue(columns[8]);

		}

		nlapiLogExecution('DEBUG', 'generarTXTcatamARCAPercSufridas', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				percepcioneARCAcompras.percepcion = new Object();
				percepcioneARCAcompras.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";

				if (!isEmpty(informacionResultado[i].idInterno)) {
					refComprobante = informacionResultado[i].idInterno;
					percepcioneARCAcompras.percepcion.idInterno = informacionResultado[i].idInterno;
					if (!isEmpty(informacionResultado[i].cuit)) {
						percepcioneARCAcompras.percepcion.cuit = informacionResultado[i].cuit;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							percepcioneARCAcompras.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
								percepcioneARCAcompras.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
								if (informacionResultado[i].nroSucursal) {
									percepcioneARCAcompras.percepcion.nroSucursal = informacionResultado[i].nroSucursal;
									if (!isEmpty(informacionResultado[i].ingresosBrutos)) {
										percepcioneARCAcompras.percepcion.ingresosBrutos = informacionResultado[i].ingresosBrutos;
										if (!isEmpty(informacionResultado[i].importePercepcion)) {
											percepcioneARCAcompras.percepcion.importePercepcion = informacionResultado[i].importePercepcion;
											if (!isEmpty(informacionResultado[i].tipoComprobante)) {
												percepcioneARCAcompras.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
												if (!isEmpty(informacionResultado[i].letraComprobante)) {
													percepcioneARCAcompras.percepcion.letraComprobante = informacionResultado[i].letraComprobante;
												}
												else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo la Letra del Comprobante de la Percepción";
												}
											}
											else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Tipo de Comprobante del Comprobante";
											}
										}
										else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Importe de la Percepción";
										}
									}
									else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Número Ingresos Brutos de la Percepción";
									}
								}
								else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Número de Sucursal de la transacción";
								}
							}
							else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Percepción";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de la transacción";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la transacción";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepción";
				}

				// Si no devuelve ni null nio vacío en ninún campo Genero el Contenido
				if (errorGlobal == false) {

					if (percepcioneARCAcompras.percepcion != null) {
						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";
						contenidoTXT += percepcioneARCAcompras.percepcion.cuit + percepcioneARCAcompras.percepcion.ingresosBrutos + percepcioneARCAcompras.percepcion.tipoComprobante +
							percepcioneARCAcompras.percepcion.letraComprobante + percepcioneARCAcompras.percepcion.fechaPercepcion +
							percepcioneARCAcompras.percepcion.nroSucursal + percepcioneARCAcompras.percepcion.numeroComprobante +
							//percepcioneARCAcompras.percepcion.montoImpManual 
							percepcioneARCAcompras.percepcion.importePercepcion;
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones Compras ARCA - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras ARCA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT /Percepciones Compras ARCA - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Compras ARCA Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepcion
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
					}*/
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Compras ARCA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Percepciones Compras ARCA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcioneARCAcompras = grabarError(true, 'Error Generando TXT de Percepciones Percepciones Compras ARCA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcioneARCAcompras = grabarError(false, 'Generacion de TXT de Percepciones Compras ARCA Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT Percepciones Compras ARCA');
	percepcioneARCAcompras.contenidoTXT = contenidoTXT;
	return percepcioneARCAcompras;
}

function generarTXTeSICOLRetCobranzas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT eSICOL Retenciones Cobranzas');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Retenciones Cobranzas eSICOL ";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var retencioneseSICOLcobranzas = new Object();
		retencioneseSICOLcobranzas.retencion = new Object();
		retencioneseSICOLcobranzas.sujeto = new Object();
		retencioneseSICOLcobranzas.existenRetenciones = false;
		retencioneseSICOLcobranzas.error = false;
		retencioneseSICOLcobranzas.descripcionError = "";
		retencioneseSICOLcobranzas.procesoEncolado = false;
		retencioneseSICOLcobranzas.idLog = idRegistroLOG;
		retencioneseSICOLcobranzas.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var filtroTXTRetencioneseSICOL = new Array();
		//filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_esicol_cobranzas');
		search.addFilters(filtroTXTRetencioneseSICOL);
		var searchResults = search.runSearch();

		var resultadoTXTRetencioneseSICOL = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencioneseSICOL = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencioneseSICOL = resultadoTXTRetencioneseSICOL.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzas', 'INICIO Recorrer Retenciones Cobranzas');

		for (var i = 0; resultadoTXTRetencioneseSICOL != null && i < resultadoTXTRetencioneseSICOL.length; i++) {
			var result = resultadoTXTRetencioneseSICOL[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue(columns[1]);
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[2]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[3]);
			informacionResultado[indiceArray].montoImpManual = result.getValue(columns[4]);
			informacionResultado[indiceArray].importePercepcion = result.getValue(columns[5])
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzas', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				retencioneseSICOLcobranzas.retencion = new Object();
				retencioneseSICOLcobranzas.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";

				if (!isEmpty(informacionResultado[i].idInterno)) {
					refComprobante = informacionResultado[i].idInterno;
					retencioneseSICOLcobranzas.retencion.idInterno = informacionResultado[i].idInterno;
					if (!isEmpty(informacionResultado[i].cuit)) {
						retencioneseSICOLcobranzas.retencion.cuit = informacionResultado[i].cuit;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							retencioneseSICOLcobranzas.retencion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
								retencioneseSICOLcobranzas.retencion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
								if (!isEmpty(informacionResultado[i].montoImpManual)) {
									retencioneseSICOLcobranzas.retencion.montoImpManual = informacionResultado[i].montoImpManual;
									if (!isEmpty(informacionResultado[i].importePercepcion)) {
										retencioneseSICOLcobranzas.retencion.importePercepcion = informacionResultado[i].importePercepcion;
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Importe de la Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Monto Base de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Retención";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de la transacción";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la transacción";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retención";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencioneseSICOLcobranzas.retencion != null) {
						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
						contenidoTXT += retencioneseSICOLcobranzas.retencion.cuit + retencioneseSICOLcobranzas.retencion.fechaPercepcion +
							retencioneseSICOLcobranzas.retencion.numeroComprobante + retencioneseSICOLcobranzas.retencion.montoImpManual +
							retencioneseSICOLcobranzas.retencion.importePercepcion;
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones Cobranzas eSICOL - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones Cobranzas eSICOL');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT /Retenciones Cobranzas eSICOL - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Cobranzas eSICOL Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepcion
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
					}*/
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones Cobranzas eSICOL - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Retenciones Cobranzas eSICOL - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencioneseSICOLcobranzas = grabarError(true, 'Error Generando TXT de Retenciones Cobranzas eSICOL', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		retencioneseSICOLcobranzas = grabarError(false, 'Generacion de TXT de Retenciones Cobranzas eSICOL Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Cobranzas Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT Retenciones Cobranzas eSICOL');
	retencioneseSICOLcobranzas.contenidoTXT = contenidoTXT;
	return retencioneseSICOLcobranzas;
}

function generarTXTSiprib(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIPRIB');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionSIPRIB = new Object();
		retencionSIPRIB.retencion = new Object();
		retencionSIPRIB.sujeto = new Object();
		retencionSIPRIB.existenRetenciones = false;
		retencionSIPRIB.error = false;
		retencionSIPRIB.descripcionError = "";
		retencionSIPRIB.procesoEncolado = false;
		retencionSIPRIB.idLog = idRegistroLOG;
		retencionSIPRIB.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		//if (!isEmpty(periodo))
		//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_siprib');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);

			var errorSubsidiaria = false;
			var arraySubsidiaria = new Array();

			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
				var numeroSubsidiaria = -1;
				retencionSIPRIB.retencion = new Object();
				retencionSIPRIB.sujeto = new Object();
				var resultadoTXTRetencionesSIPRIB = completeResultSet[i];
				var columnasSavedSearchRetSIPRIB = resultadoTXTRetencionesSIPRIB.getAllColumns();

				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesSIPRIB.getValue('internalid');
				var refComprobante = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_ref_pago_prov');
				//var subsidiaria = null;
				var subsidiariaStr = "";
				var empresaOneWorld = false;
				var jurisdiccion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_jurisdiccion');

				/*empresaOneWorld = esOneworld();
				if (empresaOneWorld) {
				subsidiaria = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_subsidiaria');
				numeroSubsidiaria = subsidiaria;
				subsidiariaStr = resultadoTXTRetencionesSIPRIB.getText('custrecord_l54_ret_subsidiaria')
				if (isEmpty(subsidiaria))
				subsidiaria = null;
				}*/

				if (empresaOneWorld == false || (empresaOneWorld == true && !isEmpty(subsidiaria))) {

					// Si la configuracion de la Subsidiaria no se verifico
					if (arraySubsidiaria.indexOf(numeroSubsidiaria) == -1) {

						if (!isEmpty(jurisdiccion)) {

							// Obtengo el Art/Inc de Retencion de la Conf de la Empresa
							var filtroEmpresa = new Array();
							filtroEmpresa[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
							if (empresaOneWorld == true && !isEmpty(subsidiaria))
								filtroEmpresa[1] = new nlobjSearchFilter('custrecord_l54_subsidiaria', null, 'is', subsidiaria);

							var columnaEmpresa = new Array();
							columnaEmpresa[0] = new nlobjSearchColumn('custrecord_l54_art_ret_siprib');

							var resultadoEmpresa = new nlapiSearchRecord('customrecord_l54_datos_impositivos_emp', null, filtroEmpresa, columnaEmpresa);

							if (!isEmpty(resultadoEmpresa) && resultadoEmpresa.length > 0) {

								var artRetencion = resultadoEmpresa[0].getValue('custrecord_l54_art_ret_siprib');

								if (!isEmpty(artRetencion)) {

									// Obtengo el Codigo del Articulo de Retencion
									var filtroArtRet = new Array();
									filtroArtRet[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
									filtroArtRet[1] = new nlobjSearchFilter('internalid', null, 'is', artRetencion);
									filtroArtRet[2] = new nlobjSearchFilter('custrecord_l54_codigos_art_siprib_tipo', null, 'is', tipoOperacion);
									filtroArtRet[3] = new nlobjSearchFilter('custrecord_l54_codigos_art_siprib_jur', null, 'is', jurisdiccion);

									var columnaArtRet = new Array();
									columnaArtRet[0] = new nlobjSearchColumn('custrecord_l54_codigos_art_siprib_codigo');

									var resultadoArtRet = new nlapiSearchRecord('customrecord_l54_codigos_art_siprib', null, filtroArtRet, columnaArtRet);

									if (!isEmpty(resultadoArtRet) && resultadoArtRet.length > 0) {

										var codigoArtRet = resultadoArtRet[0].getValue('custrecord_l54_codigos_art_siprib_codigo');

										if (!isEmpty(codigoArtRet)) {

											retencionSIPRIB.retencion.artRetencion = codigoArtRet;
											//

											if (!isEmpty(refComprobante)) {
												var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'siprib', subsidiaria);

												if (!isEmpty(codigoComprobante)) {
													retencionSIPRIB.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 2);
													// Obtengo el tipo de Comprobante netsuite
													var filtroComprobanteNS = new Array();
													filtroComprobanteNS[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

													var columnaComprobanteNS = new Array();
													columnaComprobanteNS[0] = new nlobjSearchColumn('recordtype');

													var resultadoComprobanteNS = new nlapiSearchRecord('transaction', null, filtroComprobanteNS, columnaComprobanteNS);

													if (!isEmpty(resultadoComprobanteNS) && resultadoComprobanteNS.length > 0) {

														tipoComprobanteNS = resultadoComprobanteNS[0].getValue('recordtype');

														if (!isEmpty(tipoComprobanteNS)) {
															// Obtengo Informacion Adicional del Pago a Proveedor
															var filtroPagoProveedor = new Array();
															filtroPagoProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

															/* var columnaPagoProveedor = new Array();
															columnaPagoProveedor[0] = new nlobjSearchColumn('trandate');
															columnaPagoProveedor[1] = new nlobjSearchColumn('total');
															columnaPagoProveedor[2] = new nlobjSearchColumn('custbody_l54_importe_iva');
															columnaPagoProveedor[3] = new nlobjSearchColumn('custbody_l54_importe_percepciones');
															columnaPagoProveedor[4] = new nlobjSearchColumn('subsidiary');

															var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_proveedores', filtroPagoProveedor, null); */

															var resultadoPagoProveedor = new nlapiSearchRecord(tipoComprobanteNS, 'customsearch_l54_imp_pagos_prov_gen_txt', filtroPagoProveedor, null);

															if (!isEmpty(resultadoPagoProveedor) && resultadoPagoProveedor.length > 0) {
																var columnasResultadoPagoProveedor = resultadoPagoProveedor[0].getAllColumns();
																// Obtengo la Fecha de Emision del Comprobante
																// var fecha = resultadoPagoProveedor[0].getValue('trandate', null, 'group');
																var fecha = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[1]);
																if (!isEmpty(fecha)) {
																	// Formateo la Fecha
																	var fechaDate = nlapiStringToDate(fecha, 'datetimetz');
																	if (!isEmpty(fechaDate)) {
																		// Obtengo las Componentes de la Fecha
																		var dia = fechaDate.getDate();
																		var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
																		var anio = fechaDate.getFullYear();
																		var fechaComprobante = padding_left(dia, '0', 2) + "/" + padding_left(mes, '0', 2) + "/" + anio;
																		retencionSIPRIB.retencion.fechaComprobante = fechaComprobante;

																		// Obtengo el Numero del Comprobante
																		var numerador = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_cod_pago_prov');

																		if (!isEmpty(numerador)) {
																			// Tomo el Numero, Punto de Venta y Letra
																			var numeroComprobante = numerador.toString().substr(-8);
																			// Tomo el Punto de Venta
																			var puntoVenta = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_pv_pago_prov');
																			// Tomo la Latra del Comprobante
																			var letra = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_let_pago_prov');

																			if (!isEmpty(puntoVenta)) {
																				if (!isEmpty(numeroComprobante)) {
																					var numCompFinal = puntoVenta + numeroComprobante;
																					retencionSIPRIB.retencion.numeroComprobante = padding_right(numCompFinal, " ", 16);

																					if (!isEmpty(letra) || (isEmpty(letra) && retencionSIPRIB.retencion.codigoComprobante != "01" && retencionSIPRIB.retencion.codigoComprobante != "06")) {
																						retencionSIPRIB.retencion.letraComprobante = padding_right(letra, " ", 1);
																						// Obtengo Tipo de Cambio de la Retencion
																						var tipoCambio = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_tipo_cambio');
																						if (!isEmpty(tipoCambio)) {
																							// Obtengo el Importe del Comprobante
																							// var importeComprobante = resultadoPagoProveedor[0].getValue('paidamount', null, 'sum');
																							var importeComprobante = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[7]);

																							if (!isEmpty(importeComprobante) && !isNaN(importeComprobante) && parseFloat(importeComprobante, 10) > 0.00) {
																								// retencionSIPRIB.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																								retencionSIPRIB.retencion.importeComprobante = padding_left(parseFloat(importeComprobante, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);

																								// Obtengo el Codigo de Operacion
																								if (!isEmpty(tipoOperacion) && parseInt(tipoOperacion, 10) > 0) {

																									var filtroTipoOperacion = new Array();
																									filtroTipoOperacion[0] = new nlobjSearchFilter('internalid', null, 'is', tipoOperacion);

																									var columnaTipoOperacion = new Array();
																									columnaTipoOperacion[0] = new nlobjSearchColumn('custrecord_l54_tipo_op_codigo');

																									var resultadoTipoOperacion = new nlapiSearchRecord('customrecord_l54_tipo_operacion', null, filtroTipoOperacion, columnaTipoOperacion);

																									if (!isEmpty(resultadoTipoOperacion) && resultadoTipoOperacion.length > 0) {

																										var codigoOperacion = resultadoTipoOperacion[0].getValue('custrecord_l54_tipo_op_codigo');
																										if (!isEmpty(codigoOperacion) && parseInt(codigoOperacion, 10) > 0) {
																											retencionSIPRIB.retencion.codigoOperacion = codigoOperacion;

																											/*
																											// Obtengo el Codigo de Norma
																											//var codigoNorma = '016'; // RIESGO FISCAL
																											var codigoNorma = '';
																											codigoNorma = resultadoTXTRetencionesARCIBA[i].getValue('custrecord_l54_arc_cod_norma_codigo', 'custrecord_l54_ret_ref_norma');
																											if (!isEmpty(codigoNorma)) {
																											retencionARCIBA.retencion.codigoNorma = padding_left(codigoNorma, '0', 3);*/

																											// Obtengo la Base de Calculo
																											//var baseCalculo = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_base_calculo_imp'); //custrecord_l54_ret_base_calculo_imp
																											var baseCalculo = resultadoTXTRetencionesSIPRIB.getValue(columnasSavedSearchRetSIPRIB[36]); //le asignó Monto Imp Ret Manual
																											if (!isEmpty(baseCalculo)) {

																												// retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																												retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(baseCalculo, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																												// Obtengo Fecha de Retencion
																												var fechaRetencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_fecha');

																												if (!isEmpty(fechaRetencion)) {
																													// Formateo la Fecha
																													var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
																													if (!isEmpty(fechaRetencionDate)) {

																														// Obtengo las Componentes de la Fecha
																														var diaRetencion = fechaRetencionDate.getDate();
																														var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
																														var anioRetencion = fechaRetencionDate.getFullYear();
																														var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
																														retencionSIPRIB.retencion.fechaRetencion = fechaRetencionFinal;

																														// Obtengo el Numero de Certificado
																														var numeroCertificado = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_numerador');
																														var numeroCertificado = numeroCertificado.toString().substr(-8);
																														var numeroCertificado = puntoVenta + numeroCertificado;
																														if (!isEmpty(numeroCertificado)) {
																															if (numeroCertificado.length <= 12) {
																																retencionSIPRIB.retencion.numeroCertificado = padding_right(numeroCertificado, " ", 12);

																																// Obtengo la Alicuota
																																// Como para Cada Retencion de IIBB hay una Alicuota, busco la Alicuota de la Retencion
																																var idInternoParametrizacionRetencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_cod_retencion');
																																if (!isEmpty(idInternoParametrizacionRetencion)) {

																																	/*var filtroAlicuota = new Array();
																																	filtroAlicuota[0] = new nlobjSearchFilter('custrecord_l54_param_ret_det_padre', null, 'is', idInternoParametrizacionRetencion);

																																	var columnaAlicuota = new Array();
																																	columnaAlicuota[0] = new nlobjSearchColumn('custrecord_l54_param_ret_det_porc_adic');
																																	//columnaAlicuota[1] = new nlobjSearchColumn('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');

																																	var resultadoAlicuota = new nlapiSearchRecord('customrecord_l54_param_ret_det', null, filtroAlicuota, columnaAlicuota);*/

																																	//if (!isEmpty(resultadoAlicuota) && resultadoAlicuota.length > 0) {

																																	var alicuota = "";
																																	var artIncCalculo = "";
																																	//alicuota = resultadoAlicuota[0].getValue('custrecord_l54_param_ret_det_porc_adic');
																																	alicuota = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_alicuota');
																																	//artIncCalculo = resultadoAlicuota[0].getValue('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');

																																	if (!isEmpty(alicuota)) {

																																		retencionSIPRIB.retencion.alicuota = padding_left(parseFloat(alicuota, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 5);

																																		// Obtengo el Articulo/Inciso del Calculo de la Retencion
																																		var filtroParamRet = new Array();
																																		filtroParamRet[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);

																																		var columnaParamRet = new Array();

																																		columnaParamRet[0] = new nlobjSearchColumn('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');

																																		var resultadoParamRet = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroParamRet, columnaParamRet);

																																		if (!isEmpty(resultadoParamRet) && resultadoParamRet.length > 0) {
																																			artIncCalculo = resultadoParamRet[0].getValue('custrecord_l54_art_calculo_siprib_codigo', 'custrecord_l54_param_ret_art_siprib');
																																			if (!isEmpty(artIncCalculo)) {
																																				retencionSIPRIB.retencion.artIncCalculo = padding_left(artIncCalculo, '0', 3);
																																				// Cargo el Proveedor
																																				var proveedor = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_ref_proveedor');

																																				// Obtengo el Numero de Documento
																																				if (!isEmpty(proveedor) && !isNaN(parseInt(proveedor, 10))) {

																																					retencionSIPRIB.sujeto.idSujetoNetSuite = proveedor;

																																					var filtroProveedor = new Array();
																																					filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

																																					var columnaProveedor = new Array();
																																					columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_cuit_entity');
																																					columnaProveedor[1] = new nlobjSearchColumn('custentity_l54_ins_drei');
																																					columnaProveedor[2] = new nlobjSearchColumn('custentity_l54_ins_grav_siprib');
																																					columnaProveedor[3] = new nlobjSearchColumn('custentity_l54_tipo_contribuyente');
																																					columnaProveedor[4] = new nlobjSearchColumn('custentity_l54_porcentaje_excl');
																																					columnaProveedor[5] = new nlobjSearchColumn('custentity_l54_fecha_boletin');
																																					columnaProveedor[6] = new nlobjSearchColumn('custentity_l54_tipo_documento');
																																					columnaProveedor[7] = new nlobjSearchColumn('custentity_l54_cod_iibb');
																																					columnaProveedor[8] = new nlobjSearchColumn('custentity_l54_cod_iibb');

																																					var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);

																																					if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {

																																						// Obtengo la Marca de Inscripcion en Otros Gravamenes
																																						var inscriptoOtrosGravamanes = resultadoProveedor[0].getValue('custentity_l54_ins_grav_siprib');

																																						// Obtengo la Marca de Inscripcion DReI
																																						var inscriptoDReI = resultadoProveedor[0].getValue('custentity_l54_ins_drei');

																																						var insOtrosGrav = 0;
																																						if (!isEmpty(inscriptoOtrosGravamanes) && inscriptoOtrosGravamanes == 'T') {
																																							insOtrosGrav = 1;
																																						}

																																						retencionSIPRIB.sujeto.insOtrosGrav = padding_left(insOtrosGrav, "0", 1);

																																						var insDRei = 0;
																																						if (!isEmpty(insDRei) && insDRei == 'T') {
																																							insDRei = 1;
																																						}

																																						retencionSIPRIB.sujeto.insDRei = padding_left(insDRei, "0", 1);

																																						// Por Ahora el importe de Otros Gravamenes siempre sera 0
																																						var importeOtrosGrav = 0;

																																						retencionSIPRIB.retencion.importeOtrosGrav = padding_left(parseFloat(importeOtrosGrav, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);

																																						// Por Ahora el importe de Otros Gravamenes siempre sera 0
																																						var importeDReI = 0;
																																						retencionSIPRIB.retencion.importeDReI = padding_left(parseFloat(importeDReI, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);

																																						var jurisdiccion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_jurisdiccion');
																																						if (!isEmpty(jurisdiccion)) {
																																							// Obtengo el Tipo de Contribuyente segun la Jurisdiccion
																																							//
																																							/*var filtroJurisdiccion = new Array();
																																							filtroJurisdiccion[0] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_prov', null, 'is', proveedor);
																																							filtroJurisdiccion[1] = new nlobjSearchFilter('custrecord_l54_jurisdicciones_iibb_jur', null, 'is', jurisdiccion);

																																							var columnaJurisdiccion = new Array();
																																							columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_tipo');
																																							//columnaJurisdiccion[1] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_f_exe');
																																							columnaJurisdiccion[1] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_caduc');
																																							columnaJurisdiccion[2] = new nlobjSearchColumn('custrecord_l54_jurisdicciones_iibb_num_c');
																																							columnaJurisdiccion[3] = new nlobjSearchColumn('custrecord_l54_tipos_exencion_cod_sip', 'custrecord_l54_jurisdicciones_iibb_tip_e');

																																							var resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_jurisdicciones_iibb', null, filtroJurisdiccion, columnaJurisdiccion);*/

																																							var desc = "IIBB";

																																							//if (!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) {
																																							//
																																							// Obtengo Codigo Tipo Condicion IIBB
																																							var tipoContribuyenteIIBB = "";
																																							var tipoExencion = "";
																																							var fechaExencion = "";
																																							var numCertExencion = "";

																																							//tipoContribuyenteIIBB = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente_iibb');
																																							//tipoContribuyenteIIBB = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_tipo');
																																							tipoContribuyenteIIBB = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_tipo_contrib_iibb');

																																							//tipoExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_tipos_exencion_cod_sip', 'custrecord_l54_jurisdicciones_iibb_tip_e');

																																							tipoExencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_tipos_exencion_cod_sip', 'custrecord_l54_ret_tipo_exencion');

																																							// Si el Proveedor no tiene Tipo de Exencion, se envia codigo 0 - No Exento
																																							if (isEmpty(tipoExencion)) {
																																								tipoExencion = 0;
																																							}

																																							//fechaExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_f_exe');

																																							//fechaExencionAux = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_caduc');
																																							fechaExencionAux = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_fecha_exencion');
																																							if (!isEmpty(fechaExencionAux)) {
																																								var fechaExencionDate = nlapiStringToDate(fechaExencionAux, 'datetime');
																																								if (!isEmpty(fechaExencionDate)) {
																																									var anioExencion = fechaExencionDate.getFullYear();
																																									if (!isEmpty(anioExencion)) {
																																										fechaExencion = anioExencion.toString();
																																									}
																																								}
																																							}
																																							//numCertExencion = resultadoJurisdiccion[0].getValue('custrecord_l54_jurisdicciones_iibb_num_c');
																																							numCertExencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_cert_exencion');
																																							// Verifico Informacion de Exencion
																																							if (!isEmpty(tipoExencion)) {

																																								retencionSIPRIB.retencion.tipoExencion = padding_left(tipoExencion, "0", 1);

																																								if (!isEmpty(fechaExencion) || (isEmpty(fechaExencion) && (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3))) {

																																									if (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3) {
																																										fechaExencion = "0";
																																									}

																																									retencionSIPRIB.retencion.fechaExencion = padding_left(fechaExencion, "0", 4);

																																									if (!isEmpty(numCertExencion) || (isEmpty(numCertExencion) && (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3))) {

																																										if (tipoExencion != 1 && tipoExencion != 2 && tipoExencion != 3) {
																																											numCertExencion = " ";
																																										}

																																										retencionSIPRIB.retencion.numCertExencion = padding_right(numCertExencion, " ", 6);

																																										if (!isEmpty(tipoContribuyenteIIBB)) {

																																											/*var filtroTipoContribuyente = new Array();
																																											filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIIBB);

																																											var columnaTipoContribuyente = new Array();
																																											columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_contr_iibb_cod_sip');

																																											var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, filtroTipoContribuyente, columnaTipoContribuyente);*/

																																											//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																																											//var situacionIIBB = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_contr_iibb_cod_sip');

																																											var situacionIIBB = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_tipo_contr_iibb_cod_sip', 'custrecord_l54_ret_tipo_contrib_iibb');

																																											if (!isEmpty(situacionIIBB)) {

																																												retencionSIPRIB.sujeto.situacionIIBB = padding_left(situacionIIBB, "0", 1);
																																												var numeroIIBB = "0";

																																												if (situacionIIBB == 1) {
																																													// Busco el Numero de IIBB
																																													numeroIIBB = resultadoProveedor[0].getValue('custentity_l54_cod_iibb');
																																												}

																																												if (!isEmpty(numeroIIBB)) {
																																													// Formateo el Documento
																																													numeroIIBB = numeroIIBB.replace(/-/g, '');
																																													numeroIIBB = numeroIIBB.replace(/\./g, '');
																																													// Elimino Blancos
																																													numeroIIBB = numeroIIBB.replace(/ /g, '&nbsp');
																																													retencionSIPRIB.sujeto.numeroIIBB = padding_left(numeroIIBB, "0", 10);
																																													// Busco la Situacion Frente al IVA

																																													var tipoContribuyenteIVA = "";
																																													var desc = "IVA";
																																													//tipoContribuyenteIVA = resultadoProveedor[0].getValue('custentity_l54_tipo_contribuyente');
																																													tipoContribuyenteIVA = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_tipo_contrib_iva');

																																													if (!isEmpty(tipoContribuyenteIVA)) {

																																														/*var filtroTipoContribuyente = new Array();
																																														filtroTipoContribuyente[0] = new nlobjSearchFilter('internalid', null, 'is', tipoContribuyenteIVA);

																																														var columnaTipoContribuyente = new Array();
																																														columnaTipoContribuyente[0] = new nlobjSearchColumn('custrecord_l54_tipo_cont_cod_sip');

																																														var resultadoTipoContribuyente = new nlapiSearchRecord('customrecord_l54_tipo_contribuyente', null, filtroTipoContribuyente, columnaTipoContribuyente);*/

																																														//if (!isEmpty(resultadoTipoContribuyente) && resultadoTipoContribuyente.length > 0) {

																																														//var situacionIVA = resultadoTipoContribuyente[0].getValue('custrecord_l54_tipo_cont_cod_sip');

																																														var situacionIVA = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_tipo_cont_cod_sip', 'custrecord_l54_ret_tipo_contrib_iva');

																																														if (!isEmpty(situacionIVA)) {

																																															retencionSIPRIB.sujeto.situacionIVA = padding_left(situacionIVA, "0", 1);
																																															// Obtengo el Importe de la Retencion
																																															// var importeRetencion = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_importe');
																																															var importeRetencion = resultadoTXTRetencionesSIPRIB.getValue(columnasSavedSearchRetSIPRIB[37]);

																																															if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																																																// El Impuesto Determinado es la Base de Calculo x la Alicuota -> Importe de Retencion
																																																retencionSIPRIB.retencion.impDeterminado = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																																// El Monto Retenido es el Imp Determinado - Importe DRei
																																																// retencionSIPRIB.retencion.montoRet = padding_left(parseFloat((parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)) - (parseFloat(parseFloat(retencionSIPRIB.retencion.importeDReI, 10) * parseFloat(tipoCambio, 10), 10)), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																																retencionSIPRIB.retencion.montoRet = padding_left(parseFloat(parseFloat(importeRetencion, 10) - parseFloat(importeDReI, 10), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																																//retencionSIPRIB.retencion.retencionPracticada = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																																																// Obtengo el Tipo de Documento del Sujeto Retenido
																																																var tipoDocumento = resultadoProveedor[0].getValue('custentity_l54_tipo_documento');
																																																if (!isEmpty(tipoDocumento)) {

																																																	// Obtengo el Codigo de Tipo de Documento
																																																	var filtroTipoDocumento = new Array();
																																																	filtroTipoDocumento[0] = new nlobjSearchFilter('internalid', null, 'is', tipoDocumento);

																																																	var columnaTipoDocumento = new Array();
																																																	columnaTipoDocumento[0] = new nlobjSearchColumn('custrecord_l54_tipo_doc_sip');

																																																	var resultadoTipoDocumento = new nlapiSearchRecord('customrecord_l54_tipo_documento', null, filtroTipoDocumento, columnaTipoDocumento);

																																																	if (!isEmpty(resultadoTipoDocumento) && resultadoTipoDocumento.length > 0) {
																																																		var tipoDocumento = resultadoTipoDocumento[0].getValue('custrecord_l54_tipo_doc_sip');
																																																		if (!isEmpty(tipoDocumento) && parseInt(tipoDocumento, 10) > 0) {
																																																			retencionSIPRIB.sujeto.tipoDocSujeto = padding_left(tipoDocumento, '0', 1);
																																																			// Informacion de Beneficiarios del Exterior
																																																			// Verifico si el Proveedor tiene
																																																			/*var otrosConceptos = "";
																																																			// En Otros Conceptos Ingreso el Minimo No Imponible, el cual lo obtengo de la Retencion
																																																			var filtroMinimoNoImp = new Array();
																																																			filtroMinimoNoImp[0] = new nlobjSearchFilter('internalid', null, 'is', idInternoParametrizacionRetencion);

																																																			var columnaMinimoNoImp = new Array();
																																																			columnaMinimoNoImp[0] = new nlobjSearchColumn('custrecord_l54_param_ret_min_no_imp');

																																																			var resultadoMinimoNoImp = new nlapiSearchRecord('customrecord_l54_param_ret', null, filtroMinimoNoImp, columnaMinimoNoImp);

																																																			if (!isEmpty(resultadoMinimoNoImp) && resultadoMinimoNoImp.length > 0) {

																																																			otrosConceptos = resultadoMinimoNoImp[0].getValue('custrecord_l54_param_ret_min_no_imp');

																																																			if (!isEmpty(otrosConceptos)) {

																																																			// Obtengo el Importe de Percepcion del Pago
																																																			var importePercepcionPago = "";
																																																			importePercepcionPago = resultadoPagoProveedor[0].getValue('custbody_l54_importe_percepciones', null, 'group');

																																																			if (!isEmpty(importePercepcionPago)) {

																																																			var otrosConceptosFinal = parseFloat(otrosConceptos, 10) + parseFloat(parseFloat(importePercepcionPago, 10) * parseFloat(tipoCambio, 10), 10);

																																																			retencionARCIBA.sujeto.otrosConceptos = padding_left(parseFloat(otrosConceptosFinal, 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);*/

																																																			// Ajusto la Base de Calculo para que no Contenga el Minimo No Imponible, ya que lo ingreso en Otros Conceptos

																																																			/* Comentado por JSalazar: 08/05/2019.
																																																			Esto lo comenté porque en Arciba no es así y la base cálculo debe ser coincidir con la alicuota y el imp. de Ret.
																																																			//retencionSIPRIB.retencion.baseCalculo = padding_left(parseFloat(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 14);
																																																			*/
																																																			// Obtengo el Importe del IVA
																																																			var importeIVAPago = "";
																																																			importeIVAPago = resultadoPagoProveedor[0].getValue(columnasResultadoPagoProveedor[8]);

																																																			if (!isEmpty(importeIVAPago)) {

																																																				if (retencionSIPRIB.sujeto.situacionIVA != "1") {
																																																					importeIVAPago = 0;
																																																				}

																																																				// retencionSIPRIB.sujeto.iva = padding_left(parseFloat(parseFloat(importeIVAPago, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);
																																																				retencionSIPRIB.sujeto.iva = padding_left(parseFloat(importeIVAPago, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 12);

																																																				// Cargo informacion del Sujeto Retenido
																																																				var proveedor = resultadoTXTRetencionesSIPRIB.getValue('custrecord_l54_ret_ref_proveedor');

																																																				// Obtengo el Numero de Documento
																																																				var nroDocumento = resultadoProveedor[0].getValue('custentity_l54_cuit_entity');
																																																				if (!isEmpty(nroDocumento)) {

																																																					// Formateo el Documento
																																																					nroDocumento = nroDocumento.replace(/-/g, '');
																																																					nroDocumento = nroDocumento.replace(/\./g, '');
																																																					// Elimino Blancos
																																																					var numeroDocumentoFinal = nroDocumento.replace(/ /g, '&nbsp');

																																																					retencionSIPRIB.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);

																																																					//

																																																				} else {
																																																					errorGlobal = true;
																																																					descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
																																																				}
																																																			} else {
																																																				errorGlobal = true;
																																																				descripcionError = "Error Obteniendo Importe IVA del Pago";
																																																			}
																																																			/*} else {
																																																			errorGlobal = true;
																																																			descripcionError = "Error Obteniendo Percepciones";
																																																			}
																																																			} else {
																																																			errorGlobal = true;
																																																			descripcionError = "Minimo No Imponible No Configurado";
																																																			}
																																																			} else {
																																																			errorGlobal = true;
																																																			descripcionError = "Error Obteniendo el Minimo No Imponible";
																																																			}*/
																																																		} else {
																																																			errorGlobal = true;
																																																			descripcionError = "Error Tipo de Documento SIPRIB No Configurado Correctamente";
																																																		}
																																																	} else {
																																																		errorGlobal = true;
																																																		descripcionError = "Error Obteniendo Tipo de Documento";
																																																	}

																																																} else {
																																																	errorGlobal = true;
																																																	descripcionError = "El Sujeto Retenido no Posee Tipo de Documento";
																																																}

																																															} else {
																																																errorGlobal = true;
																																																descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																																															}

																																														} else {
																																															errorGlobal = true;
																																															descripcionError = "Error Obteniendo Situacion de " + desc;
																																														}
																																														/*} else {
																																														errorGlobal = true;
																																														descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																																														}*/
																																													} else {
																																														errorGlobal = true;
																																														descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																																													}
																																												} else {
																																													errorGlobal = true;
																																													descripcionError = "Error Obteniendo el Numero de IIBB del Sujeto Retenido";
																																												}
																																											} else {
																																												errorGlobal = true;
																																												descripcionError = "Error Obteniendo Situacion de " + desc;
																																											}
																																											/*} else {
																																											errorGlobal = true;
																																											descripcionError = "Error No se Encontro el Tipo de Contribuyente de " + desc;
																																											}*/
																																										} else {
																																											errorGlobal = true;
																																											descripcionError = "Error No se Encuentra Configurado el Tipo de Contribuyente de " + desc + " del Proveedor";
																																										}
																																									} else {
																																										errorGlobal = true;
																																										descripcionError = "Error No se Encuentra Configurado el certificado de Exencion del Proveedor";
																																									}
																																								} else {
																																									errorGlobal = true;
																																									descripcionError = "Error No se Encuentra Configurado el A" + "\u00F1" + "o de Exencion del Proveedor";
																																								}
																																							} else {
																																								errorGlobal = true;
																																								descripcionError = "Error No se Encuentra Configurado el Tipo de Exencion del Proveedor";
																																							}
																																							/*} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Obteniendo Información de Tipo Contribuyente " + desc + " del Proveedor";
																																							}*/
																																						} else {
																																							errorGlobal = true;
																																							descripcionError = "Error Obteniendo Informacion de la Jurisdiccion de la Retencion";
																																						}
																																					} else {
																																						errorGlobal = true;
																																						descripcionError = "Error Obteniendo Informacion del Proveedor";
																																					}
																																				} else {
																																					errorGlobal = true;
																																					descripcionError = "Error Obteniendo Proveedor";
																																				}
																																			} else {
																																				errorGlobal = true;
																																				descripcionError = "No se encuentra Configurado el Articulo/Inciso del Calculo de la Retencion en la Parametrizacion de Retenciones";
																																			}
																																		} else {
																																			errorGlobal = true;
																																			descripcionError = "Error Obteniendo Informacion de la Parametrizacion de Retenciones";
																																		}
																																	} else {
																																		errorGlobal = true;
																																		descripcionError = "Alicuota Invalida";
																																	}
																																	/*} else {
																																	errorGlobal = true;
																																	descripcionError = "Error Obteniendo Alicuota de Retencion";
																																	}*/
																																} else {
																																	errorGlobal = true;
																																	descripcionError = "Error Obteniendo Alicuota de Retencion";
																																}
																															} else {
																																errorGlobal = true;
																																descripcionError = "Error La Longitud del Numero de Certificado de Retencion no debe ser mayor a 12";
																															}
																														} else {
																															errorGlobal = true;
																															descripcionError = "Error Obteniendo Numero de Certificado";
																														}
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Formateando la Fecha de Retencion";
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo Fecha De Retencion";
																												}
																											} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo Base De Calculo";
																											}
																											/*} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo Codigo De Norma";
																											}*/
																										} else {
																											errorGlobal = true;
																											descripcionError = "Codigo de Operacion Invalido";
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo el Codigo de Operacion";
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo el Codigo de Operacion";
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo Importe del Comprobante";
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "La Letra del Comprobante es Obligatoria en Facturas o Certificados de Obras";
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Numero de Comprobante";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo el Punto de Venta";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo Numero de Comprobante";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Formateando la Fecha del Comprobante";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo la Fecha del Comprobante";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo Informacion Adicional del Comprobante";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Tipo de Comprobante NetSuite";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Codigo de Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
											}
										} else {
											arraySubsidiaria.push(numeroSubsidiaria);
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Codigo del Articulo/Inciso de Retencion";
											if (!isEmpty(subsidiaria))
												descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
										}
									} else {
										arraySubsidiaria.push(numeroSubsidiaria);
										errorGlobal = true;
										descripcionError = "No se encuentra configurado el Articulo/Inciso de Retencion";
										if (!isEmpty(subsidiaria))
											descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
									}
								} else {
									arraySubsidiaria.push(numeroSubsidiaria);
									errorGlobal = true;
									descripcionError = "No se encuentra configurado el Articulo/Inciso de Retencion de Santa Fe";
									if (!isEmpty(subsidiaria))
										descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
								}
							} else {
								arraySubsidiaria.push(numeroSubsidiaria);
								errorGlobal = true;
								descripcionError = "Error Obteniendo Información de la Empresa";
								if (!isEmpty(subsidiaria))
									descripcionError = descripcionError + " para la Subsidiaria con ID : " + subsidiaria;
							}
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo la Jurisdiccion de la Retencion";
					}
				} else {
					errorSubsidiaria = true;
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Subsidiaria de la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIPRIB.sujeto != null) {

						if (retencionSIPRIB.retencion != null) {

							// Genero Contenido
							//var contenidoTXT = "";
							var error = false;
							var descripcionMensaje = "TXT Retenciones Generado Correctamente";
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							contenidoTXT += retencionSIPRIB.retencion.codigoOperacion + retencionSIPRIB.retencion.fechaRetencion + retencionSIPRIB.retencion.artRetencion + retencionSIPRIB.retencion.codigoComprobante +
								retencionSIPRIB.retencion.letraComprobante + retencionSIPRIB.retencion.numeroComprobante + retencionSIPRIB.retencion.fechaComprobante + retencionSIPRIB.retencion.importeComprobante +
								retencionSIPRIB.sujeto.tipoDocSujeto + retencionSIPRIB.sujeto.numeroDocSujeto + retencionSIPRIB.sujeto.situacionIIBB +
								retencionSIPRIB.sujeto.numeroIIBB + retencionSIPRIB.sujeto.situacionIVA + retencionSIPRIB.sujeto.insOtrosGrav + retencionSIPRIB.sujeto.insDRei + retencionSIPRIB.retencion.importeOtrosGrav +
								retencionSIPRIB.sujeto.iva + retencionSIPRIB.retencion.baseCalculo + retencionSIPRIB.retencion.alicuota + retencionSIPRIB.retencion.impDeterminado +
								retencionSIPRIB.retencion.importeDReI + retencionSIPRIB.retencion.montoRet + retencionSIPRIB.retencion.artIncCalculo +
								retencionSIPRIB.retencion.tipoExencion + retencionSIPRIB.retencion.fechaExencion + retencionSIPRIB.retencion.numCertExencion + retencionSIPRIB.retencion.numeroCertificado;

							// Grabo Registro de TXT
							/*var estadoGeneracionTXTSujetos = null;
							var estadoGeneracionTXT = null;

							estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);

							if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
							// Error Generando TXT
							error = true;
							descripcionMensaje = "Error Generando TXT Retenciones";
							if (isEmpty(estadoGeneracionTXT))
							descripcionMensaje = estadoGeneracionTXT.descripcionError;
							errorGeneral = true;
							descripcionError = descripcionMensaje;
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
							}*/

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIPRIB');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRIB');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIPRIB - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIPRIB - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIPRIB = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIPRIB = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIPRIB');

	retencionSIPRIB.contenidoTXT = contenidoTXT;
	return retencionSIPRIB;
}

function generarTXTSipribPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIPRIB Percepciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var percepcionSIPRIB = new Object();
		percepcionSIPRIB.percepcion = new Object();
		percepcionSIPRIB.sujeto = new Object();
		percepcionSIPRIB.existenPercepciones = false;
		percepcionSIPRIB.error = false;
		percepcionSIPRIB.descripcionError = "";
		percepcionSIPRIB.procesoEncolado = false;
		percepcionSIPRIB.idLog = idRegistroLOG;
		percepcionSIPRIB.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_siprib');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB Percepciones', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIPRIB - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);

			var errorSubsidiaria = false;
			var arraySubsidiaria = new Array();

			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
				percepcionSIPRIB.percepcion = new Object();
				percepcionSIPRIB.sujeto = new Object();

				var result = completeResultSet[i];
				var columns = result.getAllColumns();

				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				refComprobante = result.getValue(columns[0]);

				percepcionSIPRIB.percepcion.codigoOperacion = result.getValue(columns[1]);
				percepcionSIPRIB.percepcion.fechaPercepcion = result.getValue(columns[2]);
				percepcionSIPRIB.percepcion.artPercepcion = result.getValue(columns[3]);
				percepcionSIPRIB.percepcion.codigoComprobante = result.getValue(columns[4]);
				percepcionSIPRIB.percepcion.letraComprobante = result.getValue(columns[5]);
				percepcionSIPRIB.percepcion.numeroComprobante = result.getValue(columns[6]);
				percepcionSIPRIB.percepcion.fechaComprobante = result.getValue(columns[7]);
				percepcionSIPRIB.percepcion.importeComprobante = result.getValue(columns[8]);
				percepcionSIPRIB.sujeto.tipoDocSujeto = result.getValue(columns[9]);
				percepcionSIPRIB.sujeto.numeroDocSujeto = result.getValue(columns[10]);
				percepcionSIPRIB.sujeto.situacionIIBB = result.getValue(columns[11]);
				percepcionSIPRIB.sujeto.numeroIIBB = result.getValue(columns[12]);
				percepcionSIPRIB.sujeto.situacionIVA = result.getValue(columns[13]);
				percepcionSIPRIB.sujeto.insOtrosGrav = result.getValue(columns[14]);
				percepcionSIPRIB.sujeto.insDRei = result.getValue(columns[15]);
				percepcionSIPRIB.percepcion.importeOtrosGrav = result.getValue(columns[16]);
				percepcionSIPRIB.percepcion.iva = result.getValue(columns[17]);
				// percepcionSIPRIB.percepcion.baseCalculo=result.getValue(columns[18]);
				percepcionSIPRIB.percepcion.baseCalculo = result.getValue(columns[29]);
				percepcionSIPRIB.percepcion.alicuota = result.getValue(columns[19]);
				percepcionSIPRIB.percepcion.impDeterminado = result.getValue(columns[20]);
				percepcionSIPRIB.percepcion.importeDReI = result.getValue(columns[21]);
				// percepcionSIPRIB.percepcion.montoPer = result.getValue(columns[22]);
				percepcionSIPRIB.percepcion.montoPer = result.getValue(columns[31]);
				percepcionSIPRIB.percepcion.artIncCalculo = result.getValue(columns[23]);
				percepcionSIPRIB.percepcion.tipoExencion = result.getValue(columns[24]);
				/* percepcionSIPRIB.percepcion.anioExencion=result.getValue(columns[25]);
				percepcionSIPRIB.percepcion.numCertExencion=result.getValue(columns[26]);
				percepcionSIPRIB.percepcion.numeroCertificado=result.getValue(columns[27]); */
				percepcionSIPRIB.percepcion.anioExencion = result.getValue(columns[32]);
				percepcionSIPRIB.percepcion.numCertExencion = result.getValue(columns[25]);
				percepcionSIPRIB.percepcion.numeroCertificado = result.getValue(columns[26]);

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionSIPRIB.sujeto != null) {

						if (percepcionSIPRIB.percepcion != null) {

							// Genero Contenido
							//var contenidoTXT = "";
							var error = false;
							var descripcionMensaje = "TXT Percepciones Generado Correctamente";
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							/*
							
							contenidoTXT += percepcionSIPRIB.percepcion.codigoOperacion + percepcionSIPRIB.percepcion.fechaPercepcion + percepcionSIPRIB.percepcion.artPercepcion + percepcionSIPRIB.percepcion.codigoComprobante +
							percepcionSIPRIB.percepcion.letraComprobante + percepcionSIPRIB.percepcion.numeroComprobante + percepcionSIPRIB.percepcion.fechaComprobante + percepcionSIPRIB.percepcion.importeComprobante +
							percepcionSIPRIB.sujeto.tipoDocSujeto + percepcionSIPRIB.sujeto.numeroDocSujeto + percepcionSIPRIB.sujeto.situacionIIBB +
							percepcionSIPRIB.sujeto.numeroIIBB + percepcionSIPRIB.sujeto.situacionIVA + percepcionSIPRIB.sujeto.insOtrosGrav + percepcionSIPRIB.sujeto.insDRei + percepcionSIPRIB.percepcion.importeOtrosGrav +
							percepcionSIPRIB.percepcion.iva + percepcionSIPRIB.percepcion.baseCalculo + percepcionSIPRIB.percepcion.alicuota + percepcionSIPRIB.percepcion.impDeterminado +
							percepcionSIPRIB.percepcion.importeDReI + percepcionSIPRIB.percepcion.montoPer + percepcionSIPRIB.percepcion.artIncCalculo +
							percepcionSIPRIB.percepcion.tipoExencion + percepcionSIPRIB.percepcion.anioExencion + percepcionSIPRIB.percepcion.numCertExencion + percepcionSIPRIB.percepcion.numeroCertificado; */
							contenidoTXT += percepcionSIPRIB.percepcion.codigoOperacion + percepcionSIPRIB.percepcion.fechaPercepcion + percepcionSIPRIB.percepcion.artPercepcion + percepcionSIPRIB.percepcion.codigoComprobante +
								percepcionSIPRIB.percepcion.letraComprobante + percepcionSIPRIB.percepcion.numeroComprobante + percepcionSIPRIB.percepcion.fechaComprobante + percepcionSIPRIB.percepcion.importeComprobante +
								percepcionSIPRIB.sujeto.tipoDocSujeto + percepcionSIPRIB.sujeto.numeroDocSujeto + percepcionSIPRIB.sujeto.situacionIIBB +
								percepcionSIPRIB.sujeto.numeroIIBB + percepcionSIPRIB.sujeto.situacionIVA + percepcionSIPRIB.sujeto.insOtrosGrav + percepcionSIPRIB.sujeto.insDRei + percepcionSIPRIB.percepcion.importeOtrosGrav +
								percepcionSIPRIB.percepcion.iva + percepcionSIPRIB.percepcion.baseCalculo + percepcionSIPRIB.percepcion.alicuota + percepcionSIPRIB.percepcion.impDeterminado +
								percepcionSIPRIB.percepcion.importeDReI + percepcionSIPRIB.percepcion.montoPer + percepcionSIPRIB.percepcion.artIncCalculo +
								percepcionSIPRIB.percepcion.tipoExencion + percepcionSIPRIB.percepcion.anioExencion + percepcionSIPRIB.percepcion.numCertExencion + percepcionSIPRIB.percepcion.numeroCertificado;


						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIPRIB');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRIB');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}*/
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIPRIB Percepciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIPRIB Percepciones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionSIPRIB = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSIPRIB = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIPRIB Percepciones');

	percepcionSIPRIB.contenidoTXT = contenidoTXT;
	return percepcionSIPRIB;
}

function generarTXTSifereAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Anterior');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionSIFERE = new Object();
		retencionSIFERE.retencion = new Object();
		retencionSIFERE.sujeto = new Object();
		retencionSIFERE.existenRetenciones = false;
		retencionSIFERE.error = false;
		retencionSIFERE.descripcionError = "";
		retencionSIFERE.procesoEncolado = false;
		retencionSIFERE.idLog = idRegistroLOG;
		retencionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var columnaTXTRetencionesSIFERE = new Array();
		columnaTXTRetencionesSIFERE[0] = new nlobjSearchColumn('entity');
		var filtroTXTRetencionesSIFERE = new Array();
		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		//if (!isEmpty(ultimaRetencionProcesada))
		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_sifere_ant');
		search.addFilters(filtroTXTRetencionesSIFERE);
		search.addColumns(columnaTXTRetencionesSIFERE);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSIFERE = resultadoTXTRetencionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTRetencionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Retenciones', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTRetencionesSIFERE != null && i < resultadoTXTRetencionesSIFERE.length && procesoEncolado == false; i++) {
				retencionSIFERE.retencion = new Object();
				retencionSIFERE.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				//retencionSICORE.existenRetenciones = true;
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesSIFERE[i].getValue('internalid');
				var refComprobante = resultadoTXTRetencionesSIFERE[i].getValue('internalid');

				if (!isEmpty(refComprobante)) {
					//var codigoComprobante = obtenerCodigoComprobante(refComprobante,'sic' , subsidiaria);
					var codigoComprobante = 'O';
					//var codigoComprobante = 'R';
					if (!isEmpty(codigoComprobante)) {
						retencionSIFERE.retencion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
						// Obtengo el Numero del Comprobante
						var numerador = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_numero_localizado');
						if (!isEmpty(numerador)) {
							// Tomo el Numero, Punto de Venta y Letra
							//var arrayNumerador = numerador.split("-");
							//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
							//var numeroComprobante = arrayNumerador[2];
							var numeroComprobante = numerador.toString().substr(-8);
							// Tomo el Punto de Venta
							//var puntoVenta = arrayNumerador[1];
							var puntoVenta = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_boca');
							// Tomo la Latra del Comprobante
							//var letra = arrayNumerador[0];
							var letra = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_letra');
							if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
								retencionSIFERE.retencion.numeroComprobante = padding_right(numeroComprobante, " ", 20);
								retencionSIFERE.retencion.puntoVenta = padding_left(puntoVenta, "0", 4);
								retencionSIFERE.retencion.letraDocumento = padding_right(" ", " ", 1);
								//retencionSIFERE.retencion.letraDocumento = padding_right("C", " ", 1);
								// Obtengo Tipo de Cambio de la Retencion
								var tipoCambio = resultadoTXTRetencionesSIFERE[i].getValue('exchangerate');
								if (!isEmpty(tipoCambio)) {
									// Obtengo Fecha de Retencion
									var fechaRetencion = resultadoTXTRetencionesSIFERE[i].getValue('trandate');
									if (!isEmpty(fechaRetencion)) {
										// Formateo la Fecha
										var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
										if (!isEmpty(fechaRetencionDate)) {
											// Obtengo las Componentes de la Fecha
											var diaRetencion = fechaRetencionDate.getDate();
											var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
											var anioRetencion = fechaRetencionDate.getFullYear();
											var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
											retencionSIFERE.retencion.fechaRetencion = fechaRetencionFinal;

											// Cargo el Proveedor
											var proveedor = resultadoTXTRetencionesSIFERE[i].getValue('entity');

											// Obtengo el Numero de Documento
											if (!isEmpty(proveedor) && parseInt(proveedor, 10)) {

												retencionSIFERE.sujeto.idSujetoNetSuite = proveedor;

												var filtroProveedor = new Array();
												filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

												var columnaProveedor = new Array();

												columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_zona_impuestos');

												var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);

												if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {

													// Obtengo Codigo De Jurisdiccion del Proveedor
													var jurisdiccion = resultadoProveedor[0].getValue('custentity_l54_zona_impuestos');
													if (!isEmpty(jurisdiccion)) {
														// Obtengo el Codigo de Jurisdiccion
														var filtroJurisdiccion = new Array();
														filtroJurisdiccion[0] = new nlobjSearchFilter('internalid', null, 'is', jurisdiccion);

														var columnaJurisdiccion = new Array();
														columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_zona_impuestos_codigo');

														var resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_zona_impuestos', null, filtroJurisdiccion, columnaJurisdiccion);

														if (!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) {

															var codigoJurisdiccion = resultadoJurisdiccion[0].getValue('custrecord_l54_zona_impuestos_codigo');

															if (!isEmpty(codigoJurisdiccion)) {

																retencionSIFERE.sujeto.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

																// Obtengo el CUIT del Proveedor
																var cuitEmpresa = resultadoTXTRetencionesSIFERE[i].getValue('custentity_l54_cuit_entity', 'vendor');

																if (!isEmpty(cuitEmpresa)) {

																	// Obtengo el Tamaño del CUIT
																	var cuitEmpresaString = cuitEmpresa.toString();
																	cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
																	cuitEmpresaString = cuitEmpresaString.replace(/\./g, '');
																	cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
																	cuitEmpresaString = cuitEmpresaString.toString();

																	var tam = cuitEmpresaString.length;
																	if (tam == 11) {

																		// Agrego los -
																		var primerosDigitos = cuitEmpresaString.substr(0, 2);
																		var segundosDigitos = cuitEmpresaString.substr(2, 8);
																		var tercerosDigitos = cuitEmpresaString.substr(10, 1);

																		if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

																			cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

																			retencionSIFERE.retencion.cuitEmpresa = cuitEmpresa;

																			// Obtengo El Numero de Constancia

																			var numeroConstancia = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_ret_iibb_numerador');
																			if (!isEmpty(numeroConstancia)) {

																				var posicionSeparador = numeroConstancia.toString().lastIndexOf("-");
																				var numeroConstanciaFinal = "";
																				numeroConstanciaFinal = numeroConstancia;
																				if (posicionSeparador >= 0)
																					numeroConstanciaFinal = numeroConstancia.toString().substr(posicionSeparador + 1, 255);

																				if (!isEmpty(numeroConstanciaFinal)) {

																					retencionSIFERE.retencion.numeroConstancia = padding_left(numeroConstanciaFinal, "0", 16);

																					// Obtengo el Importe de la Retencion
																					var importeRetencion = resultadoTXTRetencionesSIFERE[i].getValue('custbody_l54_iibb_imp_a_retener');
																					if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																						retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																					} else {
																						errorGlobal = true;
																						descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo Numerador de Retencion";
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo Numero de Constancia de la Retencion";
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Aplicando Formato a CUIT del Proveedor";
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "CUIT del Proveedor Invalido";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error No se Encuentra Configurado el CUIT del Proveedor";
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Codigo de Jurisdiccion No Configurado";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Informacion de Jurisdiccion";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Jurisdiccion del Proveedor";
													}

												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Informacion del Proveedor";
												}

											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Proveedor";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha de Retencion";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Fecha De Retencion";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Numero de Comprobante";
							}
							/*} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
							}*/
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIFERE.sujeto != null) {

						if (retencionSIFERE.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Retenciones Generado Correctamente";

							contenidoTXT += retencionSIFERE.sujeto.codigoJurisdiccion + retencionSIFERE.retencion.cuitEmpresa + retencionSIFERE.retencion.fechaRetencion +
								retencionSIFERE.retencion.puntoVenta + retencionSIFERE.retencion.numeroConstancia + retencionSIFERE.retencion.codigoComprobante + retencionSIFERE.retencion.letraDocumento +
								retencionSIFERE.retencion.numeroComprobante + retencionSIFERE.retencion.importeRetencion;

							// Grabo Registro de TXT
							/*var estadoGeneracionTXT = null;

							estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);

							if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
							// Error Generando TXT
							error = true;
							descripcionMensaje = "Error Generando TXT Retenciones";
							if (isEmpty(estadoGeneracionTXT))
							descripcionMensaje = estadoGeneracionTXT.descripcionError;
							errorGeneral = true;
							descripcionError = descripcionMensaje;
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
							}*/
						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
						}
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}
				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIFERE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIFERE) && resultadoTXTRetencionesSIFERE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIFERE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', null, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIFERE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIFERE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE Anterior');
	retencionSIFERE.contenidoTXT = contenidoTXT;
	return retencionSIFERE;
}

function generarTXTArbaPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Percepciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones ARBA";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";

	try {
		var percepcionARBA = new Object();
		percepcionARBA.retencion = new Object();
		percepcionARBA.sujeto = new Object();
		percepcionARBA.existenRetenciones = false;
		percepcionARBA.error = false;
		percepcionARBA.descripcionError = "";
		percepcionARBA.procesoEncolado = false;
		percepcionARBA.idLog = idRegistroLOG;
		percepcionARBA.retencion.importeRetencion = 0;
		percepcionARBA.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arba');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_ARBA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);
			
			var objList = getTipoTransIdNew();
			var objNumerador =  getNumeradores(subsidiaria);
			var objComprobantes = getComprobantes();
			for (i = 0; i < completeResultSet.length; i++) {
				percepcionARBA.percepcion = new Object();
				percepcionARBA.sujeto = new Object();
				var resultadoTXTPercepcionesARBA = completeResultSet[i];
				var columns = resultadoTXTPercepcionesARBA.getAllColumns();
				///////////////////////////////////////////////////////////////////////////////////////////////

				//Armo TXT

				/*
				Cuit contribuyente Percibido
				Fecha Percepcion
				Tipo Comprobante
				Letra Comprobante
				Numero Sucursal
				Numero Emisión
				Monto Imponible
				Importe de Percepcion
				Tipo Operación
				 */

				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
				var refComprobante = resultadoTXTPercepcionesARBA.getValue('internalid', null, 'group');
				if (!isEmpty(refComprobante)) {
					var nroDocumento = resultadoTXTPercepcionesARBA.getValue('custbody_54_cuit_entity', null, 'max');
					if (!isEmpty(nroDocumento)) {
						// Formateo el Documento
						nroDocumento = nroDocumento.replace(/-/g, '');
						nroDocumento = nroDocumento.replace(/\./g, '');
						// Elimino Blancos
						nroDocumento = nroDocumento.replace(/ /g, '&nbsp');
						if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
							// Formateo el Documento con el Formato Solicitado por ARBA
							var numeroDocumentoFinal = nroDocumento.substring(0, 2) + '-' + nroDocumento.substring(2, 10) + '-' + nroDocumento.substring(10, 11);
							percepcionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
							// Obtengo la Fecha de Retencion
							var fechaPercepcion = resultadoTXTPercepcionesARBA.getValue('trandate', null, 'group');
							if (!isEmpty(fechaPercepcion)) {
								// Formateo la Fecha
								var fechaPercepcionDate = nlapiStringToDate(fechaPercepcion, 'datetimetz');
								if (!isEmpty(fechaPercepcionDate)) {
									// Obtengo las Componentes de la Fecha
									var diaPercepcion = fechaPercepcionDate.getDate();
									var mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
									var anioPercepcion = fechaPercepcionDate.getFullYear();
									var fechaPercepcionFinal = padding_left(diaPercepcion, '0', 2) + "/" + padding_left(mesPercepcion, '0', 2) + "/" + anioPercepcion;
									percepcionARBA.percepcion.fechaPercepcion = fechaPercepcionFinal;
									// Obtengo el Tipo de Comprobante
									var recordtype = resultadoTXTPercepcionesARBA.getValue('recordtype', null, 'group');
									var esND = resultadoTXTPercepcionesARBA.getValue('custbody_l54_nd', null, 'group');
									var esCE = resultadoTXTPercepcionesARBA.getValue('custbody_l54_es_credito_electronico', null, 'max');
									var recordList = objList.filter(function (obj) {
										return (obj.name == recordtype)
									});
									var codigoComprobante = null;
									var idRecord = recordList;

									var objNumeradorResult = objNumerador.filter(function (obj) {
										return (obj.col2 == idRecord[0].id && obj.col3 == esND && obj.col4 == esCE)
									})
									if(objNumeradorResult.length > 0){
										var objComprobantesResult = objComprobantes.filter(function (obj) {
										return (obj.col0 == objNumeradorResult[0].col1)
										})
										if(objComprobantesResult.length > 0){
										codigoComprobante = objComprobantesResult[0].col3
										}
									}
									if (!isEmpty(codigoComprobante)) {
										percepcionARBA.percepcion.codigoComprobante = codigoComprobante;
										// Obtengo el Numero de Emision (Numerador)
										var numerador = resultadoTXTPercepcionesARBA.getValue('custbody_l54_numero_localizado', null, 'max');
										if (!isEmpty(numerador)) {
											var numeroComprobante = numerador.toString().substr(-8);
											if (!isEmpty(numeroComprobante)) {
												percepcionARBA.percepcion.numeroComprobante = padding_left(numeroComprobante, '0', 8);
												// Obtengo el Numero de Sucursal (Punto de Venta)
												var puntoVenta = resultadoTXTPercepcionesARBA.getValue(columns[20]);

												if (!isEmpty(puntoVenta)) {
													// percepcionARBA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);

													percepcionARBA.percepcion.puntoVenta = puntoVenta;

													// Obtengo la Letra del Comprobante
													var letra = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
													var letraStr = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
													if (!isEmpty(letraStr) && !isEmpty(letra)) {
														if (letraStr != 'A' && letraStr != 'B' && letraStr != 'C') {
															letraStr = ' ';
														}
														percepcionARBA.percepcion.letra = letraStr;
														// Obtengo el Tipo de Cambio
														var tipoCambio = resultadoTXTPercepcionesARBA.getValue('exchangerate', null, 'group');
														if (!isEmpty(tipoCambio)) {

															// Obtengo el Importe de la Percepcion
															// var importePercepcion = resultadoTXTPercepcionesARBA.getValue('taxamount', null, 'sum');
															var importePercepcion = resultadoTXTPercepcionesARBA.getValue(columns[19]);
															/* var cantDecImportePercepcion = countDecimales(importePercepcion);
															var cantDecTipoCambio = countDecimales(tipoCambio);
															var cantidadDecimalesFinal = cantDecImportePercepcion + cantDecTipoCambio;
															var importePercepcionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importePercepcion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */

															if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != 'C' && (parseFloat(importePercepcion, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(importePercepcion, 10)) >= 0.00)))) {
																// Genero el Absoluto
																importePercepcionFinal = Math.abs(importePercepcion);
																// Si es Nota de Credito, Va en Negativo
																var longitudImporte = 11;
																var caracterRelleno = '';
																if (codigoComprobante == 'C' || codigoComprobante == 'H') {
																	longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
																	caracterRelleno = '-';
																}
																// percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
																// percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(numberTruncTwoDec(parseFloat(importePercepcionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
																percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(importePercepcion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);

																// Obtengo el Monto Imponible de Percepcion
																//var montoImponible = resultadoTXTPercepcionesARBA.getValue('custcol_l54_monto_imp_perc', null, 'sum');
																var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[17]);
																/* if (isEmpty(montoImponible) || montoImponible <= 0) {
																	var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[16]);
																} */

																if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != 'C' && (parseFloat(montoImponible, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(montoImponible, 10)) >= 0.00)))) {
																	// Genero el Absoluto
																	montoImponible = Math.abs(montoImponible);
																	// Si es Nota de Credito, Va en Negativo
																	var longitudMontoImponible = 12;
																	var caracterRellenoMontoImp = '';
																	if (codigoComprobante == 'C' || codigoComprobante == 'H') {
																		longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
																		caracterRellenoMontoImp = '-';
																	}
																	percepcionARBA.percepcion.montoImponible = caracterRellenoMontoImp + padding_left(parseFloat(montoImponible, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudMontoImponible);
																	// Obtengo el Tipo de Operacion
																	var tipoOperacionPer = resultadoTXTPercepcionesARBA.getValue('formulatext', null, 'group');
																	if (!isEmpty(tipoOperacionPer) && tipoOperacionPer.length == 1) {
																		percepcionARBA.percepcion.tipoOperacionPer = tipoOperacionPer;
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Tipo de Operacion";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "El Monto Imponible es Invalido";
																}
															} else {
																errorGlobal = true;
																descripcionError = "El Importe de Percepcion es Invalido";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo La Letra del Comprobante";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}

										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Numero de Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Codigo de Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Formateando la Fecha de Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De Percepcion";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Numero de Documento del Cliente Invalido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Documento del Cliente";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionARBA.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";
						contenidoTXT += percepcionARBA.sujeto.numeroDocSujeto + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.codigoComprobante +
							percepcionARBA.percepcion.letra + percepcionARBA.percepcion.puntoVenta + percepcionARBA.percepcion.numeroComprobante +
							percepcionARBA.percepcion.montoImponible + percepcionARBA.percepcion.importePercepcion + percepcionARBA.percepcion.tipoOperacionPer;

						// Grabo Registro de TXT
						/*var estadoGeneracionTXT = null;

						estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);

						if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
						// Error Generando TXT
						error = true;
						descripcionMensaje = "Error Generando TXT Percepciones";
						if (isEmpty(estadoGeneracionTXT))
						descripcionMensaje = estadoGeneracionTXT.descripcionError;
						errorGeneral = true;
						descripcionError = descripcionMensaje;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
						}*/

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones ARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones ARBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT ARBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionARBA = grabarError(true, 'Error Generando TXT de Percepciones - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionARBA = grabarError(false, 'Generacion de TXT de Percepciones Correcta - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente - ARBA', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Percepciones');

	percepcionARBA.contenidoTXT = contenidoTXT;
	return percepcionARBA;
}

function generarTXTArbaPercAct7(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Percepciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones ARBA";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";

	try {
		var percepcionARBA = new Object();
		percepcionARBA.retencion = new Object();
		percepcionARBA.sujeto = new Object();
		percepcionARBA.existenRetenciones = false;
		percepcionARBA.error = false;
		percepcionARBA.descripcionError = "";
		percepcionARBA.procesoEncolado = false;
		percepcionARBA.idLog = idRegistroLOG;
		percepcionARBA.retencion.importeRetencion = 0;
		percepcionARBA.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_arba_act_7');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_ARBA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Percepciones', 'Cantidad Percepciones:' + completeResultSet.length);
			var objList = getTipoTransIdNew();
			var objNumerador =  getNumeradores(subsidiaria);
			var objComprobantes = getComprobantes();
			for (i = 0; i < completeResultSet.length; i++) {
				percepcionARBA.percepcion = new Object();
				percepcionARBA.sujeto = new Object();
				var resultadoTXTPercepcionesARBA = completeResultSet[i];
				var columns = resultadoTXTPercepcionesARBA.getAllColumns();
				///////////////////////////////////////////////////////////////////////////////////////////////

				//Armo TXT

				/*
				Cuit contribuyente Percibido
				Fecha Percepcion
				Tipo Comprobante
				Letra Comprobante
				Numero Sucursal
				Numero Emisión
				Monto Imponible
				Importe de Percepcion
				Tipo Operación
				 */

				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idPercepcionNetSuite = null; // En Percepciones No Hay Referencia a la Tabla Retenciones
				var refComprobante = resultadoTXTPercepcionesARBA.getValue('internalid', null, 'group');
				if (!isEmpty(refComprobante)) {
					var nroDocumento = resultadoTXTPercepcionesARBA.getValue('custbody_54_cuit_entity', null, 'max');
					if (!isEmpty(nroDocumento)) {
						// Formateo el Documento
						nroDocumento = nroDocumento.replace(/-/g, '');
						nroDocumento = nroDocumento.replace(/\./g, '');
						// Elimino Blancos
						nroDocumento = nroDocumento.replace(/ /g, '&nbsp');
						if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
							// Formateo el Documento con el Formato Solicitado por ARBA
							var numeroDocumentoFinal = nroDocumento.substring(0, 2) + '-' + nroDocumento.substring(2, 10) + '-' + nroDocumento.substring(10, 11);
							percepcionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
							// Obtengo la Fecha de Retencion
							var fechaPercepcion = resultadoTXTPercepcionesARBA.getValue('trandate', null, 'group');
							if (!isEmpty(fechaPercepcion)) {
								// Formateo la Fecha
								var fechaPercepcionDate = nlapiStringToDate(fechaPercepcion, 'datetimetz');
								if (!isEmpty(fechaPercepcionDate)) {
									// Obtengo las Componentes de la Fecha
									var diaPercepcion = fechaPercepcionDate.getDate();
									var mesPercepcion = parseInt(fechaPercepcionDate.getMonth(), 10) + parseInt(1, 10);
									var anioPercepcion = fechaPercepcionDate.getFullYear();
									var fechaPercepcionFinal = padding_left(diaPercepcion, '0', 2) + "/" + padding_left(mesPercepcion, '0', 2) + "/" + anioPercepcion;
									percepcionARBA.percepcion.fechaPercepcion = fechaPercepcionFinal;
									// Obtengo el Tipo de Comprobante
									var recordtype = resultadoTXTPercepcionesARBA.getValue('recordtype', null, 'group');
									var esND = resultadoTXTPercepcionesARBA.getValue('custbody_l54_nd', null, 'group');
									var esCE = resultadoTXTPercepcionesARBA.getValue('custbody_l54_es_credito_electronico', null, 'max');
									var recordList = objList.filter(function (obj) {
										return (obj.name == recordtype)
									});

									var codigoComprobante = null;
									var idRecord = recordList;

									var objNumeradorResult = objNumerador.filter(function (obj) {
										return (obj.col2 == idRecord[0].id && obj.col3 == esND && obj.col4 == esCE)
									})
									if(objNumeradorResult.length > 0){
										var objComprobantesResult = objComprobantes.filter(function (obj) {
										return (obj.col0 == objNumeradorResult[0].col1)
										})
										if(objComprobantesResult.length > 0){
										codigoComprobante = objComprobantesResult[0].col3
										}
									}
									if (!isEmpty(codigoComprobante)) {
										percepcionARBA.percepcion.codigoComprobante = codigoComprobante;
										// Obtengo el Numero de Emision (Numerador)
										var numerador = resultadoTXTPercepcionesARBA.getValue('custbody_l54_numero_localizado', null, 'max');
										if (!isEmpty(numerador)) {
											var numeroComprobante = numerador.toString().substr(-8);
											if (!isEmpty(numeroComprobante)) {
												percepcionARBA.percepcion.numeroComprobante = padding_left(numeroComprobante, '0', 8);
												// Obtengo el Numero de Sucursal (Punto de Venta)
												var puntoVenta = resultadoTXTPercepcionesARBA.getValue(columns[20]);

												if (!isEmpty(puntoVenta)) {
													// percepcionARBA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);

													percepcionARBA.percepcion.puntoVenta = puntoVenta;

													// Obtengo la Letra del Comprobante
													var letra = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
													var letraStr = resultadoTXTPercepcionesARBA.getValue('custbody_l54_letra', null, 'max');
													if (!isEmpty(letraStr) && !isEmpty(letra)) {
														if (letraStr != 'A' && letraStr != 'B' && letraStr != 'C') {
															letraStr = ' ';
														}
														percepcionARBA.percepcion.letra = letraStr;
														// Obtengo el Tipo de Cambio
														var tipoCambio = resultadoTXTPercepcionesARBA.getValue('exchangerate', null, 'group');
														if (!isEmpty(tipoCambio)) {

															// Obtengo el Importe de la Percepcion
															// var importePercepcion = resultadoTXTPercepcionesARBA.getValue('taxamount', null, 'sum');
															var importePercepcion = resultadoTXTPercepcionesARBA.getValue(columns[19]);
															/* var cantDecImportePercepcion = countDecimales(importePercepcion);
															var cantDecTipoCambio = countDecimales(tipoCambio);
															var cantidadDecimalesFinal = cantDecImportePercepcion + cantDecTipoCambio;
															var importePercepcionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importePercepcion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */

															if (!isEmpty(importePercepcion) && !isNaN(importePercepcion) && ((codigoComprobante != 'C' && (parseFloat(importePercepcion, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(importePercepcion, 10)) >= 0.00)))) {
																// Genero el Absoluto
																importePercepcionFinal = Math.abs(importePercepcion);
																// Si es Nota de Credito, Va en Negativo
																var longitudImporte = 11;
																var caracterRelleno = '';
																if (codigoComprobante == 'C' || codigoComprobante == 'H') {
																	longitudImporte = parseInt(longitudImporte, 10) - parseInt(1, 10);
																	caracterRelleno = '-';
																}
																// percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
																// percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(numberTruncTwoDec(parseFloat(importePercepcionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);
																percepcionARBA.percepcion.importePercepcion = caracterRelleno + padding_left(parseFloat(importePercepcion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudImporte);

																// Obtengo el Monto Imponible de Percepcion
																//var montoImponible = resultadoTXTPercepcionesARBA.getValue('custcol_l54_monto_imp_perc', null, 'sum');
																var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[17]);
																/* if (isEmpty(montoImponible) || montoImponible <= 0) {
																	var montoImponible = resultadoTXTPercepcionesARBA.getValue(columns[16]);
																} */

																if (!isEmpty(montoImponible) && !isNaN(montoImponible) && ((codigoComprobante != 'C' && (parseFloat(montoImponible, 10) > 0.00)) || ((codigoComprobante == 'C' || codigoComprobante == 'H') && (Math.abs(parseFloat(montoImponible, 10)) >= 0.00)))) {
																	// Genero el Absoluto
																	montoImponible = Math.abs(montoImponible);
																	// Si es Nota de Credito, Va en Negativo
																	var longitudMontoImponible = 12;
																	var caracterRellenoMontoImp = '';
																	if (codigoComprobante == 'C' || codigoComprobante == 'H') {
																		longitudMontoImponible = parseInt(longitudMontoImponible, 10) - parseInt(1, 10);
																		caracterRellenoMontoImp = '-';
																	}
																	percepcionARBA.percepcion.montoImponible = caracterRellenoMontoImp + padding_left(parseFloat(montoImponible, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', longitudMontoImponible);
																	// Obtengo el Tipo de Operacion
																	var tipoOperacionPer = resultadoTXTPercepcionesARBA.getValue('formulatext', null, 'group');
																	if (!isEmpty(tipoOperacionPer) && tipoOperacionPer.length == 1) {
																		percepcionARBA.percepcion.tipoOperacionPer = tipoOperacionPer;
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Tipo de Operacion";
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "El Monto Imponible es Invalido";
																}
															} else {
																errorGlobal = true;
																descripcionError = "El Importe de Percepcion es Invalido";
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo La Letra del Comprobante";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Numero de Comprobante";
											}

										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Numero de Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Codigo de Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Formateando la Fecha de Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De Percepcion";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Numero de Documento del Cliente Invalido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Documento del Cliente";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionARBA.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";
						contenidoTXT += percepcionARBA.sujeto.numeroDocSujeto + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.codigoComprobante +
							percepcionARBA.percepcion.letra + percepcionARBA.percepcion.puntoVenta + percepcionARBA.percepcion.numeroComprobante +
							percepcionARBA.percepcion.montoImponible + percepcionARBA.percepcion.importePercepcion + percepcionARBA.percepcion.fechaPercepcion + percepcionARBA.percepcion.tipoOperacionPer;

						// Grabo Registro de TXT
						/*var estadoGeneracionTXT = null;

						estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);

						if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
						// Error Generando TXT
						error = true;
						descripcionMensaje = "Error Generando TXT Percepciones";
						if (isEmpty(estadoGeneracionTXT))
						descripcionMensaje = estadoGeneracionTXT.descripcionError;
						errorGeneral = true;
						descripcionError = descripcionMensaje;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
						}*/

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones ARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones ARBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idPercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT ARBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionARBA = grabarError(true, 'Error Generando TXT de Percepciones - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionARBA = grabarError(false, 'Generacion de TXT de Percepciones Correcta - ARBA', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente - ARBA', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Percepciones');

	percepcionARBA.contenidoTXT = contenidoTXT;
	return percepcionARBA;
}

function generarTxtPercepMisiones(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTxtMisionesPerc', 'Inicio - Generación TXT Percepciones Misiones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones Misiones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var arrayPercepMisiones = new Object();
		arrayPercepMisiones.percepcion = new Object();
		arrayPercepMisiones.sujeto = new Object();
		arrayPercepMisiones.existenPercepciones = false;
		arrayPercepMisiones.error = false;
		arrayPercepMisiones.descripcionError = "";
		arrayPercepMisiones.procesoEncolado = false;
		arrayPercepMisiones.idLog = idRegistroLOG;
		arrayPercepMisiones.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var arrayFilters = new Array();
		//arrayFilters[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			arrayFilters[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			arrayFilters[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_misiones');
		search.addFilters(arrayFilters);
		var searchResults = search.runSearch();

		var resultPercepcionesMisiones = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultPercepcionesMisiones = resultado; //Primera ve inicializa
				else
					resultPercepcionesMisiones = resultPercepcionesMisiones.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTxtPercepMisiones', 'INICIO Recorrer Percepciones');

		for (var i = 0; resultPercepcionesMisiones != null && i < resultPercepcionesMisiones.length; i++) {
			var result = resultPercepcionesMisiones[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[0]);
			informacionResultado[indiceArray].tipoTransaccion = result.getValue(columns[1]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[2]);
			informacionResultado[indiceArray].nombre = result.getValue(columns[3]);
			informacionResultado[indiceArray].cuit = result.getValue(columns[4]);
			informacionResultado[indiceArray].montoTotal = Number(result.getValue(columns[5])).toFixed(2);
			informacionResultado[indiceArray].alicuota = Number(result.getValue(columns[6])).toFixed(2);
			informacionResultado[indiceArray].tipoComprobante = result.getValue(columns[7]);
			informacionResultado[indiceArray].numeroComprobanteOriginal = result.getValue(columns[8]);
			informacionResultado[indiceArray].fechaComprobante = result.getValue(columns[9]);
			informacionResultado[indiceArray].cuitComprobante = result.getValue(columns[10]);
			informacionResultado[indiceArray].idInterno = result.getValue(columns[12]);

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTxtPercepMisiones', 'INICIO Ordenar' + JSON.stringify(informacionResultado));

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				arrayPercepMisiones.percepcion = new Object();
				arrayPercepMisiones.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				refComprobante = informacionResultado[i].idInterno;

				if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
					arrayPercepMisiones.percepcion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
					if (!isEmpty(informacionResultado[i].tipoTransaccion)) {
						arrayPercepMisiones.percepcion.tipoTransaccion = informacionResultado[i].tipoTransaccion;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							arrayPercepMisiones.percepcion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].nombre)) {
								arrayPercepMisiones.percepcion.nombre = informacionResultado[i].nombre;
								if (!isEmpty(informacionResultado[i].cuit)) {
									arrayPercepMisiones.percepcion.cuit = informacionResultado[i].cuit;
									if (!isEmpty(informacionResultado[i].montoTotal) && parseFloat(informacionResultado[i].montoTotal) > 0) {
										arrayPercepMisiones.percepcion.montoTotal = informacionResultado[i].montoTotal;
										if (!isEmpty(informacionResultado[i].alicuota)) {
											arrayPercepMisiones.percepcion.alicuota = informacionResultado[i].alicuota;

											if ((informacionResultado[i].tipoTransaccion).split('_').indexOf('NC') > -1 || (informacionResultado[i].tipoTransaccion).split('_').indexOf('NCE') > -1) {
												if (!isEmpty(informacionResultado[i].tipoComprobante) ) {
													arrayPercepMisiones.percepcion.tipoComprobante = informacionResultado[i].tipoComprobante;
													if (!isEmpty(informacionResultado[i].numeroComprobanteOriginal)) {
														arrayPercepMisiones.percepcion.numeroComprobanteOriginal = informacionResultado[i].numeroComprobanteOriginal;
														if (!isEmpty(informacionResultado[i].fechaComprobante)) {
															arrayPercepMisiones.percepcion.fechaComprobante = informacionResultado[i].fechaComprobante;
															if (!isEmpty(informacionResultado[i].cuitComprobante)) {
																arrayPercepMisiones.percepcion.cuitComprobante = informacionResultado[i].cuitComprobante;
															}
															else {
																errorGlobal = true;
																descripcionError = 'El campo CUIT de Comprobante de la Transaccion Relacionada es obligatorio.' ;
															}
														}
														else {
															errorGlobal = true;
															descripcionError = 'El campo Fecha de Comprobante de la Transaccion Relacionada es obligatorio. ' ;
														}
													}
													else {
														errorGlobal = true;
														descripcionError = 'El campo Numero de Comprobante de la Transaccion Relacionada es obligatorio.' ;
												}
												}
												else {
													errorGlobal = true;
													descripcionError = 'El campo Tipo de Comprobante de la Transaccion Relacionada es obligatorio.' ;
												}	
											}else{
												arrayPercepMisiones.percepcion.tipoComprobante = '';
												arrayPercepMisiones.percepcion.numeroComprobanteOriginal = '';
												arrayPercepMisiones.percepcion.fechaComprobante = '';
												arrayPercepMisiones.percepcion.cuitComprobante = '';
											}

										}
										else {
											errorGlobal = true;
											descripcionError = 'El campo Alicuota es obligatorio.' ;
										}
									}
									else {
										errorGlobal = true;
										descripcionError = 'El campo Monto Operación es obligatorio.' ;
									}
								}
								else {
									errorGlobal = true;
									descripcionError = 'El campo CUIT es obligatorio.' ;
								}
							}
							else {
								errorGlobal = true;
								descripcionError = 'El campo Razon Social es obligatorio.' ;
					}
						} else {
							errorGlobal = true;
							descripcionError = 'El campo Punto de Venta + Nro de Comprobante es obligatorio.' ;
						}
					} else {
						errorGlobal = true;
						descripcionError = 'El campo Tipo de Comprobante es obligatorio.' ;
					}
				} else {
					errorGlobal = true;
					descripcionError = 'El campo Fecha es obligatorio.' ;
				}

				if(!errorGlobal){
					// Genero el Contenido
					if (arrayPercepMisiones.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";
						contenidoTXT += arrayPercepMisiones.percepcion.fechaPercepcion + ',' + arrayPercepMisiones.percepcion.tipoTransaccion + ',' + arrayPercepMisiones.percepcion.numeroComprobante + ',' + arrayPercepMisiones.percepcion.nombre + ',' + arrayPercepMisiones.percepcion.cuit +
							',' + arrayPercepMisiones.percepcion.montoTotal + ',' + arrayPercepMisiones.percepcion.alicuota + ',' + arrayPercepMisiones.percepcion.tipoComprobante +
							',' + arrayPercepMisiones.percepcion.numeroComprobanteOriginal + ',' + arrayPercepMisiones.percepcion.fechaComprobante + ',' + arrayPercepMisiones.percepcion.cuitComprobante;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				}else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}
				
				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Misiones Correcta - No se Encontraron Percepciones', null, refComprobante, subsidiaria);

					}
					/*else {
						// Error Obteniendo Percepcion
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
					}*/
				}
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTxtPercepMisiones', 'No se encontraron Percepciones');
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTxtPercepMisiones', 'Error Generando TXT Percepciones Misiones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Percepciones Misiones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		arrayPercepMisiones = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		arrayPercepMisiones = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTxtPercepMisiones', 'Finalizacion - Generacion TXT Percepciones Misiones');
	arrayPercepMisiones.contenidoTXT = contenidoTXT;
	return arrayPercepMisiones;
}

function generarTXTArbaRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT ARBA Retenciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones ARBA";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";

	try {
		var retencionARBA = new Object();
		retencionARBA.retencion = new Object();
		retencionARBA.sujeto = new Object();
		retencionARBA.existenRetenciones = false;
		retencionARBA.error = false;
		retencionARBA.descripcionError = "";
		retencionARBA.procesoEncolado = false;
		retencionARBA.idLog = idRegistroLOG;
		retencionARBA.retencion.importeRetencion = 0;
		retencionARBA.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		//if (!isEmpty(periodo))
		//filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_arba');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_ARBA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_ARBA - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);

			for (i = 0; i < completeResultSet.length; i++) {
				var columnasSSRetencionesARBA = completeResultSet[i].getAllColumns();
				retencionARBA.retencion = new Object();
				retencionARBA.sujeto = new Object();
				var resultadoTXTRetencionesARBA = completeResultSet[i];
				var columns = resultadoTXTRetencionesARBA.getAllColumns();
				///////////////////////////////////////////////////////////////////////////////////////////////

				//Armo TXT

				/*
				Cuit contribuyente Percibido
				Fecha Retencion
				Numero Sucursal
				Numero Emisión
				Importe de Retencion
				Tipo Operación
				 */

				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesARBA.getValue('internalid');
				var refComprobante = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_ref_pago_prov');

				if (!isEmpty(refComprobante)) {
					var nroDocumento = resultadoTXTRetencionesARBA.getValue('custentity_l54_cuit_entity', 'custrecord_l54_ret_ref_proveedor');
					if (!isEmpty(nroDocumento)) {
						// Formateo el Documento
						nroDocumento = nroDocumento.replace(/-/g, '');
						nroDocumento = nroDocumento.replace(/\./g, '');
						// Elimino Blancos
						nroDocumento = nroDocumento.replace(/ /g, '&nbsp');
						if (!isEmpty(nroDocumento) && nroDocumento.length == 11) {
							// Formateo el Documento con el Formato Solicitado por ARBA
							var numeroDocumentoFinal = nroDocumento.substring(0, 2) + '-' + nroDocumento.substring(2, 10) + '-' + nroDocumento.substring(10, 11);
							retencionARBA.sujeto.numeroDocSujeto = padding_right(numeroDocumentoFinal, " ", 11);
							// Obtengo la Fecha de Retencion
							var fechaRetencion = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_fecha');
							if (!isEmpty(fechaRetencion)) {
								// Formateo la Fecha
								var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
								if (!isEmpty(fechaRetencionDate)) {

									// Obtengo las Componentes de la Fecha
									var diaRetencion = fechaRetencionDate.getDate();
									var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
									var anioRetencion = fechaRetencionDate.getFullYear();
									var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
									retencionARBA.retencion.fechaRetencion = fechaRetencionFinal;
									// Obtengo el Numero de Emision (Numerador)
									var numerador = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_cod_pago_prov');
									if (!isEmpty(numerador)) {
										var numeroComprobante = numerador.toString().substr(-8);
										if (!isEmpty(numeroComprobante)) {
											retencionARBA.retencion.numeroComprobante = padding_left(numeroComprobante, '0', 8);
											// Obtengo el Numero de Sucursal (Punto de Venta)
											// var puntoVenta = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_pv_pago_prov');

											var puntoVenta = resultadoTXTRetencionesARBA.getValue(columns[11]);

											if (!isEmpty(puntoVenta)) {
												// retencionARBA.retencion.puntoVenta = padding_left(puntoVenta, "0", 4);

												retencionARBA.retencion.puntoVenta = puntoVenta;

												// Obtengo el Tipo de Cambio
												var tipoCambio = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_tipo_cambio');
												if (!isEmpty(tipoCambio)) {
													// Obtengo el Importe de la Retencion
													// var importeRetencion = resultadoTXTRetencionesARBA.getValue('custrecord_l54_ret_importe');
													var importeRetencion = resultadoTXTRetencionesARBA.getValue(columnasSSRetencionesARBA[9]);
													/* var cantDecImporteRetencion = countDecimales(importeRetencion);
													var cantDecTipoCambio = countDecimales(tipoCambio);
													var cantidadDecimalesFinal = cantDecImporteRetencion + cantDecTipoCambio;
													var importeRetencionFinal = parseFloat((parseFloat(parseFloat(convertToInteger(importeRetencion), 10) * parseFloat(convertToInteger(tipoCambio), 10), 10) / Math.pow(10, cantidadDecimalesFinal)), 10); */

													if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
														// retencionARBA.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
														/* retencionARBA.retencion.importeRetencion = padding_left(parseFloat(numberTruncTwoDec(parseFloat(importeRetencionFinal, 10)), 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 11); */
														retencionARBA.retencion.importeRetencion = padding_left(parseFloat(importeRetencion, 10).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);

														// Obtengo el Tipo de Operacion
														var tipoOperacionRet = resultadoTXTRetencionesARBA.getValue(columns[8]);
														if (!isEmpty(tipoOperacionRet) && tipoOperacionRet.length == 1) {
															retencionARBA.retencion.tipoOperacionRet = tipoOperacionRet;
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Tipo de Operacion";
														}
													} else {
														errorGlobal = true;
														descripcionError = "El Importe de Retención debe ser mayor a 0.00";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo El Punto De Venta del Comprobante";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Numero de Comprobante";
										}

									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Numero de Comprobante";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Formateando la Fecha de Retencion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De Retencion";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Numero de Documento del Proveedor Invalido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Documento del Proveedor";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionARBA.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Retenciones Generado Correctamente";
						contenidoTXT += retencionARBA.sujeto.numeroDocSujeto + retencionARBA.retencion.fechaRetencion + retencionARBA.retencion.puntoVenta +
							retencionARBA.retencion.numeroComprobante + retencionARBA.retencion.importeRetencion + retencionARBA.retencion.tipoOperacionRet;

						// Grabo Registro de TXT
						/*var estadoGeneracionTXT = null;

						estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);

						if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
						// Error Generando TXT
						error = true;
						descripcionMensaje = "Error Generando TXT Retenciones";
						if (isEmpty(estadoGeneracionTXT))
						descripcionMensaje = estadoGeneracionTXT.descripcionError;
						errorGeneral = true;
						descripcionError = descripcionMensaje;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}*/

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Retencion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones ARCIBA');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones ARBA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT ARBA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT ARBA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionARBA = grabarError(true, 'Error Generando TXT de Retenciones - ARBA', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionARBA = grabarError(false, 'Generacion de TXT de Retenciones Correcta - ARBA', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente - ARBA', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - ARBA', 'Finalizacion - Generacion TXT ARBA Retenciones');

	retencionARBA.contenidoTXT = contenidoTXT;
	return retencionARBA;
}

function generarTXTSifere(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Retenciones');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";

	try {
		var retencionSIFERE = new Object();
		retencionSIFERE.retencion = new Object();
		retencionSIFERE.sujeto = new Object();
		retencionSIFERE.existenRetenciones = false;
		retencionSIFERE.error = false;
		retencionSIFERE.descripcionError = "";
		retencionSIFERE.procesoEncolado = false;
		retencionSIFERE.idLog = idRegistroLOG;
		retencionSIFERE.retencion.importeRetencion = 0;
		retencionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTRetencionesSIFERE = new Array();
		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_periodo', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		//if (!isEmpty(ultimaRetencionProcesada))
		//filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('internalidnumber', null, 'greaterthan', parseInt(ultimaRetencionProcesada, 10));
		if (!isEmpty(subsidiaria))
			filtroTXTRetencionesSIFERE[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_sifere');
		search.addFilters(filtroTXTRetencionesSIFERE);

		var searchResults = search.runSearch();

		var resultadoTXTRetencionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencionesSIFERE = resultadoTXTRetencionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTRetencionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Retenciones', 'Cantidad Retenciones:' + resultadoTXTRetencionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTRetencionesSIFERE != null && i < resultadoTXTRetencionesSIFERE.length && procesoEncolado == false; i++) {
				//retencionSIFERE.retencion = new Object();
				//retencionSIFERE.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				//retencionSICORE.existenRetenciones = true;
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesSIFERE[i].getValue('internalid');
				var refComprobante = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_ref_pago_prov');

				if (!isEmpty(refComprobante)) {
					var generar = false;
					if (resultadoTXTRetencionesSIFERE.length > 1) {
						if (i + 1 < resultadoTXTRetencionesSIFERE.length) {
							if (!isEmpty(resultadoTXTRetencionesSIFERE[i + 1].getValue('custrecord_l54_ret_ref_pago_prov')) && refComprobante == resultadoTXTRetencionesSIFERE[i + 1].getValue('custrecord_l54_ret_ref_pago_prov')) {
								generar = false;
								marcaGenerarTXT = false;
							} else {
								generar = true;
							}
						} else {
							generar = true;
						}
					} else {
						generar = true;
					}
					if (generar == true) {
						marcaGenerarTXT = true;
						/*if (i + 1 != resultadoTXTRetencionesSIFERE.length) {
						retencionSIFERE.retencion = new Object();
						retencionSIFERE.sujeto = new Object();
						retencionSIFERE.retencion.importeRetencion = 0;
						//errorParcial = false;
						} else {
						if (resultadoTXTRetencionesSIFERE.length > 1) {
						if (resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_ref_pago_prov') != resultadoTXTRetencionesSIFERE[i - 1].getValue('custrecord_l54_ret_ref_pago_prov')) {
						retencionSIFERE.retencion = new Object();
						retencionSIFERE.sujeto = new Object();
						retencionSIFERE.retencion.importeRetencion = 0;
						//errorParcial = false;
						}
						}
						}*/
					}
					//var codigoComprobante = obtenerCodigoComprobante(refComprobante,'sic' , subsidiaria);
					var codigoComprobante = 'O';
					//var codigoComprobante = 'R';
					if (!isEmpty(codigoComprobante)) {
						retencionSIFERE.retencion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
						// Obtengo el Numero del Comprobante
						var numerador = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_cod_pago_prov');
						if (!isEmpty(numerador)) {
							// Tomo el Numero, Punto de Venta y Letra
							//var arrayNumerador = numerador.split("-");
							//if (!isEmpty(arrayNumerador) && arrayNumerador.length == 3) {
							//var numeroComprobante = arrayNumerador[2];
							var numeroComprobante = numerador.toString().substr(-8);
							// Tomo el Punto de Venta
							//var puntoVenta = arrayNumerador[1];
							var puntoVenta = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_pv_pago_prov');
							// Tomo la Latra del Comprobante
							//var letra = arrayNumerador[0];
							var letra = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_let_pago_prov');
							if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
								retencionSIFERE.retencion.numeroComprobante = padding_right(numeroComprobante, " ", 20);
								retencionSIFERE.retencion.puntoVenta = padding_left(puntoVenta, "0", 4);
								retencionSIFERE.retencion.letraDocumento = padding_right(" ", " ", 1);
								//retencionSIFERE.retencion.letraDocumento = padding_right("C", " ", 1);
								// Obtengo Tipo de Cambio de la Retencion
								var tipoCambio = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_tipo_cambio');
								if (!isEmpty(tipoCambio)) {
									// Obtengo Fecha de Retencion
									var fechaRetencion = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_fecha');
									if (!isEmpty(fechaRetencion)) {
										// Formateo la Fecha
										var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');
										if (!isEmpty(fechaRetencionDate)) {
											// Obtengo las Componentes de la Fecha
											var diaRetencion = fechaRetencionDate.getDate();
											var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
											var anioRetencion = fechaRetencionDate.getFullYear();
											var fechaRetencionFinal = padding_left(diaRetencion, '0', 2) + "/" + padding_left(mesRetencion, '0', 2) + "/" + anioRetencion;
											retencionSIFERE.retencion.fechaRetencion = fechaRetencionFinal;

											// Cargo el Proveedor
											var proveedor = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_ref_proveedor');

											// Obtengo el Numero de Documento
											if (!isEmpty(proveedor) && parseInt(proveedor, 10)) {

												retencionSIFERE.sujeto.idSujetoNetSuite = proveedor;

												/*var filtroProveedor = new Array();
												filtroProveedor[0] = new nlobjSearchFilter('internalid', null, 'is', proveedor);

												var columnaProveedor = new Array();

												columnaProveedor[0] = new nlobjSearchColumn('custentity_l54_zona_impuestos');

												var resultadoProveedor = new nlapiSearchRecord('vendor', null, filtroProveedor, columnaProveedor);

												if (!isEmpty(resultadoProveedor) && resultadoProveedor.length > 0) {*/

												// Obtengo Codigo De Jurisdiccion del Proveedor
												//var jurisdiccion = resultadoProveedor[0].getValue('custentity_l54_zona_impuestos');
												var jurisdiccion = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_jurisdiccion');
												if (!isEmpty(jurisdiccion)) {
													// Obtengo el Codigo de Jurisdiccion
													var filtroJurisdiccion = new Array();
													filtroJurisdiccion[0] = new nlobjSearchFilter('internalid', null, 'is', jurisdiccion);

													var columnaJurisdiccion = new Array();
													columnaJurisdiccion[0] = new nlobjSearchColumn('custrecord_l54_zona_impuestos_codigo');

													var resultadoJurisdiccion = new nlapiSearchRecord('customrecord_l54_zona_impuestos', null, filtroJurisdiccion, columnaJurisdiccion);

													if (!isEmpty(resultadoJurisdiccion) && resultadoJurisdiccion.length > 0) {

														var codigoJurisdiccion = resultadoJurisdiccion[0].getValue('custrecord_l54_zona_impuestos_codigo');

														if (!isEmpty(codigoJurisdiccion)) {

															retencionSIFERE.sujeto.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

															// Obtengo el CUIT del Agente de Retencion

															var cuitEmpresa = resultadoTXTRetencionesSIFERE[i].getValue('custentity_l54_cuit_entity', 'custrecord_l54_ret_ref_proveedor');

															if (!isEmpty(cuitEmpresa)) {

																// Obtengo el Tamaño del CUIT
																var cuitEmpresaString = cuitEmpresa.toString();
																cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
																cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
																cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
																cuitEmpresaString = cuitEmpresaString.toString();

																var tam = cuitEmpresaString.length;
																if (tam == 11) {

																	// Agrego los -
																	var primerosDigitos = cuitEmpresaString.substr(0, 2);
																	var segundosDigitos = cuitEmpresaString.substr(2, 8);
																	var tercerosDigitos = cuitEmpresaString.substr(10, 1);

																	if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

																		cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

																		retencionSIFERE.retencion.cuitEmpresa = cuitEmpresa;

																		// Obtengo El Numero de Constancia

																		var numeroConstancia = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_numerador');
																		if (!isEmpty(numeroConstancia)) {

																			var posicionSeparador = numeroConstancia.toString().lastIndexOf("-");
																			var numeroConstanciaFinal = "";
																			numeroConstanciaFinal = numeroConstancia;
																			if (posicionSeparador >= 0)
																				numeroConstanciaFinal = numeroConstancia.toString().substr(posicionSeparador + 1, 255);

																			if (!isEmpty(numeroConstanciaFinal)) {
																				retencionSIFERE.retencion.numeroConstancia = padding_left(numeroConstanciaFinal, "0", 16);

																				// Obtengo el Importe de la Retencion
																				var importeRetencion = resultadoTXTRetencionesSIFERE[i].getValue('custrecord_l54_ret_importe');
																				if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) > 0.00) {
																					if (marcaGenerarTXT == false) {
																						retencionSIFERE.retencion.importeRetencion = parseFloat(parseFloat(retencionSIFERE.retencion.importeRetencion, 10) + parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10), 10);
																					} else {
																						retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(retencionSIFERE.retencion.importeRetencion, 10) + parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																					}
																					//retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																				} else {
																					errorGlobal = true;
																					errorParcial = true;
																					descripcionError = "El Importe de Retención debe ser mayor a 0.00";
																				}
																			} else {
																				errorGlobal = true;
																				errorParcial = true;
																				descripcionError = "Error Obteniendo Numerador de Retencion";
																			}
																		} else {
																			errorGlobal = true;
																			errorParcial = true;
																			descripcionError = "Error Obteniendo Numero de Constancia de la Retencion";
																		}
																	} else {
																		errorGlobal = true;
																		errorParcial = true;
																		descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
																	}
																} else {
																	errorGlobal = true;
																	errorParcial = true;
																	descripcionError = "CUIT de la Empresa Invalido";
																}
															} else {
																errorGlobal = true;
																errorParcial = true;
																descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
															}
														} else {
															errorGlobal = true;
															errorParcial = true;
															descripcionError = "Error Codigo de Jurisdiccion No Configurado";
														}
													} else {
														errorGlobal = true;
														errorParcial = true;
														descripcionError = "Error Obteniendo Informacion de Jurisdiccion";
													}
												} else {
													errorGlobal = true;
													errorParcial = true;
													descripcionError = "Error Obteniendo Jurisdiccion del Proveedor";
												}
												/*} else {
												errorGlobal = true;
												errorParcial = true;
												descripcionError = "Error Obteniendo Informacion del Proveedor";
												}*/
											} else {
												errorGlobal = true;
												errorParcial = true;
												descripcionError = "Error Obteniendo Proveedor";
											}
										} else {
											errorGlobal = true;
											errorParcial = true;
											descripcionError = "Error Formateando la Fecha de Retencion";
										}
									} else {
										errorGlobal = true;
										errorParcial = true;
										descripcionError = "Error Obteniendo Fecha De Retencion";
									}
								} else {
									errorGlobal = true;
									errorParcial = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
								}
							} else {
								errorGlobal = true;
								errorParcial = true;
								descripcionError = "Error Obteniendo Numero de Comprobante";
							}
							/*} else {
							errorGlobal = true;
							errorParcial = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
							}*/
						} else {
							errorGlobal = true;
							errorParcial = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						}
					} else {
						errorGlobal = true;
						errorParcial = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					errorParcial = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIFERE.sujeto != null) {

						if (retencionSIFERE.retencion != null) {

							if (marcaGenerarTXT == true && errorParcial == false) {

								// Genero Contenido
								if (!isEmpty(contenidoTXT)) {
									contenidoTXT += "\r\n";
								}
								var error = false;
								var descripcionMensaje = "TXT Retenciones Generado Correctamente";

								contenidoTXT += retencionSIFERE.sujeto.codigoJurisdiccion + retencionSIFERE.retencion.cuitEmpresa + retencionSIFERE.retencion.fechaRetencion +
									retencionSIFERE.retencion.puntoVenta + retencionSIFERE.retencion.numeroConstancia + retencionSIFERE.retencion.codigoComprobante + retencionSIFERE.retencion.letraDocumento +
									retencionSIFERE.retencion.numeroComprobante + retencionSIFERE.retencion.importeRetencion;

								// Grabo Registro de TXT
								/*var estadoGeneracionTXT = null;

								estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idRetencionNetSuite);

								if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
								// Error Generando TXT
								error = true;
								descripcionMensaje = "Error Generando TXT Retenciones";
								if (isEmpty(estadoGeneracionTXT))
								descripcionMensaje = estadoGeneracionTXT.descripcionError;
								errorGeneral = true;
								descripcionError = descripcionMensaje;
								//retencionSICORE = grabarError(true, descripcionMensaje, true);
								idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
								}*/

							}
							/*else {
							if (marcaGenerarTXT == true)
							errorParcial == false;
							}*/

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Retencion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Retenido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT REtenciones SIFERE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				if (marcaGenerarTXT == true) {

					// Blanqueo la Informacion
					retencionSIFERE.retencion = new Object();
					retencionSIFERE.sujeto = new Object();
					retencionSIFERE.retencion.importeRetencion = 0;
					errorParcial == false;

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTRetencionesSIFERE) && resultadoTXTRetencionesSIFERE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIFERE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
		//retencionSICORE.error = true;
	}

	if (errorGeneral == true) {
		retencionSIFERE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIFERE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE Retenciones');

	retencionSIFERE.contenidoTXT = contenidoTXT;
	return retencionSIFERE;
}

function generarTXTSifereRet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Retenciones');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionSIFERE = new Object();
		retencionSIFERE.retencion = new Object();
		retencionSIFERE.sujeto = new Object();
		retencionSIFERE.existenRetenciones = false;
		retencionSIFERE.error = false;
		retencionSIFERE.descripcionError = "";
		retencionSIFERE.procesoEncolado = false;
		retencionSIFERE.idLog = idRegistroLOG;
		retencionSIFERE.retencion.importeRetencion = 0;
		retencionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTretencionSIFERE = new Array();
		//filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('custbody_l54_fecha_emision_pago', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTretencionSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_sifere');
		search.addFilters(filtroTXTretencionSIFERE);

		var searchResults = search.runSearch();

		var resultadoTXTretencionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTretencionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTretencionesSIFERE = resultadoTXTretencionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTretencionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Retenciones', 'Cantidad retenciones:' + resultadoTXTretencionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTretencionesSIFERE != null && i < resultadoTXTretencionesSIFERE.length; i++) {
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idretencionNetSuite = '';
				var refComprobante = resultadoTXTretencionesSIFERE[i].getValue('internalid', null, 'group');

				if (!isEmpty(refComprobante)) {
					//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
					var codigoComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custrecord_l54_tipos_comp_orig_ret_cod', 'custbody_l54_tipo_comp_orig_ret', 'max');
					if (!isEmpty(codigoComprobanteOrigen)) {
						retencionSIFERE.retencion.codigoComprobanteOrigen = padding_right(codigoComprobanteOrigen, " ", 1);
						// Obtener la Letra del Comprobante que Origino la Retencion
						var letraComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_letra_comp_orig_ret', null, 'max');
						//var letraComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getText('custbody_l54_letra_comp_orig_ret', null, 'max');
						if (isEmpty(letraComprobanteOrigen)) {
							letraComprobanteOrigen = ' ';
						}
						retencionSIFERE.retencion.letraComprobanteOrigen = padding_right(letraComprobanteOrigen, " ", 1);
						// Obtener el Numero del Comprobante que Origino la Retencion
						var numeroComprobanteOrigen = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_comp_orig_ret', null, 'max');
						if (!isEmpty(numeroComprobanteOrigen)) {
							retencionSIFERE.retencion.numeroComprobanteOrigen = padding_left(numeroComprobanteOrigen, "0", 20);
							// Obtengo el Numero de Sucursal de la Retencion
							var nroSucursalRetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_sucursal_retencion', null, 'max');
							if (!isEmpty(nroSucursalRetencion)) {
								retencionSIFERE.retencion.nroSucursalRetencion = padding_left(nroSucursalRetencion, "0", 4);
								// Obtener el Numero de Comprobante de Retencion
								var nroComprobanteRetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_nro_comp_retencion', null, 'max');
								if (!isEmpty(nroComprobanteRetencion)) {
									retencionSIFERE.retencion.nroComprobanteRetencion = padding_left(nroComprobanteRetencion, "0", 16);
									// Obtengo Tipo de Cambio de la Retencion
									var tipoCambio = Math.abs(resultadoTXTretencionesSIFERE[i].getValue('exchangerate', null, 'max'));
									if (!isEmpty(tipoCambio)) {
										// Obtengo Fecha de Retencion
										var fecharetencion = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_fecha_emision_pago', null, 'max');
										if (!isEmpty(fecharetencion)) {
											// Formateo la Fecha
											var fecharetencionDate = nlapiStringToDate(fecharetencion, 'datetimetz');
											if (!isEmpty(fecharetencionDate)) {
												// Obtengo las Componentes de la Fecha
												var diaretencion = fecharetencionDate.getDate();
												var mesretencion = parseInt(fecharetencionDate.getMonth(), 10) + parseInt(1, 10);
												var anioretencion = fecharetencionDate.getFullYear();
												var fecharetencionFinal = padding_left(diaretencion, '0', 2) + "/" + padding_left(mesretencion, '0', 2) + "/" + anioretencion;
												retencionSIFERE.retencion.fecharetencion = fecharetencionFinal;

												var jurisdiccionStr = '';
												var jurisdiccionID = resultadoTXTretencionesSIFERE[i].getValue('custbody_l54_prov_origen_retencion', null, 'group');
												/*if(!isEmpty(jurisdiccionID)){
												jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
												}*/
												var codigoJurisdiccion = resultadoTXTretencionesSIFERE[i].getValue('custrecord_l54_zona_impuestos_codigo', 'custbody_l54_prov_origen_retencion', 'group');

												if (!isEmpty(codigoJurisdiccion)) {

													retencionSIFERE.retencion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

													// Obtengo el CUIT del Agente de retencion

													var cuitEmpresa = resultadoTXTretencionesSIFERE[i].getValue('custbody_54_cuit_entity', null, 'MAX');

													if (!isEmpty(cuitEmpresa)) {

														// Obtengo el Tamaño del CUIT
														var cuitEmpresaString = cuitEmpresa.toString();
														cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
														cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
														cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
														cuitEmpresaString = cuitEmpresaString.toString();

														var tam = cuitEmpresaString.length;
														if (tam == 11) {

															// Agrego los -
															var primerosDigitos = cuitEmpresaString.substr(0, 2);
															var segundosDigitos = cuitEmpresaString.substr(2, 8);
															var tercerosDigitos = cuitEmpresaString.substr(10, 1);

															if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

																cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

																retencionSIFERE.retencion.cuitEmpresa = cuitEmpresa;

																// Obtengo el Importe de la Retencion
																var importeRetencion = resultadoTXTretencionesSIFERE[i].getValue('formulacurrency', null, 'sum');
																if (!isEmpty(importeRetencion) && parseFloat(importeRetencion, 10) != 0.00) {
																	if (parseFloat(importeRetencion, 10) < 0.00) {
																		retencionSIFERE.retencion.importeRetencion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importeRetencion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);
																	} else {
																		retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																	}
																	// Esta retención no se multiplica por tipo de cambio porque en este caso netsuite las devuelve en moneda local
																	//retencionSIFERE.retencion.importeRetencion = padding_left(parseFloat(parseFloat(importeRetencion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);

																} else {
																	errorGlobal = true;
																	descripcionError = "El Importe de Retencion no debe ser 0.00";
																}

															} else {
																errorGlobal = true;
																descripcionError = "Error Aplicando Formato a CUIT del Cliente";
															}
														} else {
															errorGlobal = true;
															descripcionError = "CUIT de la Empresa Invalido";
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error No se Encuentra Configurado el CUIT del Cliente";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Formateando la Fecha de la Retencion";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Fecha De la Retencion";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Numero del Comprobante de Retencion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Numero de Sucursal del Comprobante de Retencion";
							}
						}
						else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de Comprobante que Origino la Retencion";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante que Origino la Retencion";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante de Pago del Cliente";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIFERE.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Retenciones Generado Correctamente";

						contenidoTXT += retencionSIFERE.retencion.codigoJurisdiccion + retencionSIFERE.retencion.cuitEmpresa + retencionSIFERE.retencion.fecharetencion +
							retencionSIFERE.retencion.nroSucursalRetencion + retencionSIFERE.retencion.nroComprobanteRetencion + retencionSIFERE.retencion.codigoComprobanteOrigen +
							retencionSIFERE.retencion.letraComprobanteOrigen + retencionSIFERE.retencion.numeroComprobanteOrigen + retencionSIFERE.retencion.importeRetencion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Retencion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIFERE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTretencionesSIFERE) && resultadoTXTretencionesSIFERE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idretencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIFERE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idretencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Retenciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
		//retencionSICORE.error = true;
	}

	if (errorGeneral == true) {
		retencionSIFERE = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIFERE = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Retenciones');

	retencionSIFERE.contenidoTXT = contenidoTXT;
	return retencionSIFERE;
}

function generarTXTSiferePer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Percepciones');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionSIFERE = new Object();
		percepcionSIFERE.percepcion = new Object();
		percepcionSIFERE.sujeto = new Object();
		percepcionSIFERE.existenPercepciones = false;
		percepcionSIFERE.error = false;
		percepcionSIFERE.descripcionError = "";
		percepcionSIFERE.procesoEncolado = false;
		percepcionSIFERE.idLog = idRegistroLOG;
		percepcionSIFERE.percepcion.importePercepcion = 0;
		percepcionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesSIFERE = new Array();
		//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_sifere');
		search.addFilters(filtroTXTpercepcionesSIFERE);

		var searchResults = search.runSearch();

		var resultadoTXTpercepcionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesSIFERE = resultadoTXTpercepcionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTpercepcionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Percepciones', 'Cantidad percepciones:' + resultadoTXTpercepcionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTpercepcionesSIFERE != null && i < resultadoTXTpercepcionesSIFERE.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idpercepcionNetSuite = '';
				var refComprobante = resultadoTXTpercepcionesSIFERE[i].getValue('internalid', null, 'group');

				if (!isEmpty(refComprobante)) {
					//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
					var codigoComprobante = resultadoTXTpercepcionesSIFERE[i].getValue('formulatext', null, 'max');
					if (!isEmpty(codigoComprobante)) {
						percepcionSIFERE.percepcion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
						// Obtengo el Numero del Comprobante
						var numerador = resultadoTXTpercepcionesSIFERE[i].getValue('custbody_l54_numero_entero_prov', null, 'max');
						if (!isEmpty(numerador)) {
							var numeroComprobante = numerador.toString().substr(-8);
							// Tomo el Punto de Venta
							//var puntoVenta = arrayNumerador[1];
							var puntoVenta = resultadoTXTpercepcionesSIFERE[i].getValue('custbody_l54_punto_venta_prov', null, 'max');
							// Tomo la Latra del Comprobante
							//var letra = arrayNumerador[0];
							var letra = resultadoTXTpercepcionesSIFERE[i].getValue('custbody_l54_letra', null, 'max');

							if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
								percepcionSIFERE.percepcion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
								percepcionSIFERE.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
								percepcionSIFERE.percepcion.letraDocumento = padding_right(letra, " ", 1);
								// Obtengo Tipo de Cambio de la Percepcion
								var tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE[i].getValue('exchangerate', null, 'max'));
								if (!isEmpty(tipoCambio)) {
									// Obtengo Fecha de Percepcion
									var fechapercepcion = resultadoTXTpercepcionesSIFERE[i].getValue('trandate', null, 'max');
									if (!isEmpty(fechapercepcion)) {
										// Formateo la Fecha
										var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
										if (!isEmpty(fechapercepcionDate)) {
											// Obtengo las Componentes de la Fecha
											var diapercepcion = fechapercepcionDate.getDate();
											var mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
											var aniopercepcion = fechapercepcionDate.getFullYear();
											var fechapercepcionFinal = padding_left(diapercepcion, '0', 2) + "/" + padding_left(mespercepcion, '0', 2) + "/" + aniopercepcion;
											percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;

											var jurisdiccionStr = '';
											var jurisdiccionID = resultadoTXTpercepcionesSIFERE[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
											/*if(!isEmpty(jurisdiccionID)){
											jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
											}*/
											var codigoJurisdiccion = resultadoTXTpercepcionesSIFERE[i].getValue('custrecord_l54_zona_impuestos_codigo', 'custcol_l54_jurisd_iibb_lineas', 'group');

											if (!isEmpty(codigoJurisdiccion)) {

												percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

												// Obtengo el CUIT del Agente de percepcion

												var cuitEmpresa = resultadoTXTpercepcionesSIFERE[i].getValue('custbody_54_cuit_entity', null, 'MAX');

												if (!isEmpty(cuitEmpresa)) {

													// Obtengo el Tamaño del CUIT
													var cuitEmpresaString = cuitEmpresa.toString();
													cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
													cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
													cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
													cuitEmpresaString = cuitEmpresaString.toString();

													var tam = cuitEmpresaString.length;
													if (tam == 11) {

														// Agrego los -
														var primerosDigitos = cuitEmpresaString.substr(0, 2);
														var segundosDigitos = cuitEmpresaString.substr(2, 8);
														var tercerosDigitos = cuitEmpresaString.substr(10, 1);

														if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

															cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

															percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;

															// Obtengo el Importe de la Percepcion
															var importePercepcion = resultadoTXTpercepcionesSIFERE[i].getValue('formulacurrency', null, 'sum');
															if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
																if (parseFloat(importePercepcion, 10) < 0.00) {
																	percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);
																} else {
																	percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																}

															} else {
																errorGlobal = true;
																descripcionError = "El Importe de Percepcion no debe ser 0.00";
															}

														} else {
															errorGlobal = true;
															descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
														}
													} else {
														errorGlobal = true;
														descripcionError = "CUIT de la Empresa Invalido";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha de la Percepcion";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Fecha De la Percepcion";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionSIFERE.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";

						contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
							percepcionSIFERE.percepcion.puntoVenta + percepcionSIFERE.percepcion.numeroComprobante + percepcionSIFERE.percepcion.codigoComprobante + percepcionSIFERE.percepcion.letraDocumento +
							percepcionSIFERE.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones SIFERE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesSIFERE) && resultadoTXTpercepcionesSIFERE.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones SIFERE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Percepciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		//percepcionSICORE.error = true;
	}

	if (errorGeneral == true) {
		percepcionSIFERE = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSIFERE = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Percepciones');

	percepcionSIFERE.contenidoTXT = contenidoTXT;
	return percepcionSIFERE;
}

function generarTXTSiferePerAduaneras(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Percepciones Aduaneras');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones Aduaneras";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionSIFERE = new Object();
		percepcionSIFERE.percepcion = new Object();
		percepcionSIFERE.sujeto = new Object();
		percepcionSIFERE.existenPercepciones = false;
		percepcionSIFERE.error = false;
		percepcionSIFERE.descripcionError = "";
		percepcionSIFERE.procesoEncolado = false;
		percepcionSIFERE.idLog = idRegistroLOG;
		percepcionSIFERE.percepcion.importePercepcion = 0;
		percepcionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesSIFERE = new Array();
		//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_aduaneras_sifere');
		search.addFilters(filtroTXTpercepcionesSIFERE);

		var searchResults = search.runSearch();

		var resultadoTXTpercepcionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesSIFERE = resultadoTXTpercepcionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIFERE_per_aduaneras', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTpercepcionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIFERE - Percepciones Aduaneras', 'Cantidad percepciones:' + resultadoTXTpercepcionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTpercepcionesSIFERE != null && i < resultadoTXTpercepcionesSIFERE.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idpercepcionNetSuite = '';
				var refComprobante = resultadoTXTpercepcionesSIFERE[i].getValue('internalid', null, 'group');

				if (!isEmpty(refComprobante)) {
					// Obtengo el Numero del Despacho
					var numeroDespacho = resultadoTXTpercepcionesSIFERE[i].getValue('custrecord_l54_despacho_importacion_cod', 'custbody_l54_despacho_importacion', 'max');
					if (!isEmpty(numeroDespacho)) {
						percepcionSIFERE.percepcion.numeroDespacho = padding_right(numeroDespacho, " ", 20);
						// Obtengo Tipo de Cambio de la Percepcion
						var tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE[i].getValue('exchangerate', null, 'max'));
						if (!isEmpty(tipoCambio)) {
							// Obtengo Fecha de Percepcion
							var fechapercepcion = resultadoTXTpercepcionesSIFERE[i].getValue('trandate', null, 'max');
							if (!isEmpty(fechapercepcion)) {
								// Formateo la Fecha
								var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
								if (!isEmpty(fechapercepcionDate)) {
									// Obtengo las Componentes de la Fecha
									var diapercepcion = fechapercepcionDate.getDate();
									var mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
									var aniopercepcion = fechapercepcionDate.getFullYear();
									var fechapercepcionFinal = padding_left(diapercepcion, '0', 2) + "/" + padding_left(mespercepcion, '0', 2) + "/" + aniopercepcion;
									percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;

									var jurisdiccionStr = '';
									var jurisdiccionID = resultadoTXTpercepcionesSIFERE[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
									/*if(!isEmpty(jurisdiccionID)){
									jurisdiccionStr = nlapiLookupField('name', jurisdiccionID, 'customrecord_l54_zona_impuestos');
									}*/
									var codigoJurisdiccion = resultadoTXTpercepcionesSIFERE[i].getValue('custrecord_l54_zona_impuestos_codigo', 'custcol_l54_jurisd_iibb_lineas', 'group');

									if (!isEmpty(codigoJurisdiccion)) {

										percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

										// Obtengo el CUIT del Agente de percepcion

										var cuitEmpresa = resultadoTXTpercepcionesSIFERE[i].getValue('custbody_54_cuit_entity', null, 'MAX');

										if (!isEmpty(cuitEmpresa)) {

											// Obtengo el Tamaño del CUIT
											var cuitEmpresaString = cuitEmpresa.toString();
											cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
											cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
											cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
											cuitEmpresaString = cuitEmpresaString.toString();

											var tam = cuitEmpresaString.length;
											if (tam == 11) {

												// Agrego los -
												var primerosDigitos = cuitEmpresaString.substr(0, 2);
												var segundosDigitos = cuitEmpresaString.substr(2, 8);
												var tercerosDigitos = cuitEmpresaString.substr(10, 1);

												if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

													cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

													percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;

													// Obtengo el Importe de la Percepcion
													var importePercepcion = resultadoTXTpercepcionesSIFERE[i].getValue('formulacurrency', null, 'sum');
													if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
														if (parseFloat(importePercepcion, 10) < 0.00) {
															percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);
														} else {
															percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
														}

													} else {
														errorGlobal = true;
														descripcionError = "El Importe de Percepcion no debe ser 0.00";
													}

												} else {
													errorGlobal = true;
													descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
												}
											} else {
												errorGlobal = true;
												descripcionError = "CUIT del Proveedor Invalido";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error No se Encuentra Configurado el CUIT del Proveedor";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Formateando la Fecha de la Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De la Percepcion";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Tipo de Cambio del Comprobante de la Percepcion";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Numero de Despacho del Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionSIFERE.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Aduaneras Generado Correctamente";

						contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
							percepcionSIFERE.percepcion.numeroDespacho + percepcionSIFERE.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Aduaneras SIFERE ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones Aduaneras - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesSIFERE) && resultadoTXTpercepcionesSIFERE.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Aduaneras Correcta - No se Encontraron Percepciones Aduaneras', idpercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones Aduaneras SIFERE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones Aduaneras - Error : Error Obteniendo Percepciones Aduaneras', idpercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIFERE - Percepciones Aduaneras - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		//percepcionSICORE.error = true;
	}

	if (errorGeneral == true) {
		percepcionSIFERE = grabarError(true, 'Error Generando TXT de Percepciones Aduaneras', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSIFERE = grabarError(false, 'Generacion de TXT de Percepciones Aduaneras Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Aduaneras Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Percepciones Aduaneras');

	percepcionSIFERE.contenidoTXT = contenidoTXT;
	return percepcionSIFERE;
}

function generarTXTIVAPer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT IVA Percepciones Sufridas');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionIVA = new Object();
		percepcionIVA.percepcion = new Object();
		percepcionIVA.sujeto = new Object();
		percepcionIVA.existenPercepciones = false;
		percepcionIVA.error = false;
		percepcionIVA.descripcionError = "";
		percepcionIVA.procesoEncolado = false;
		percepcionIVA.idLog = idRegistroLOG;
		percepcionIVA.percepcion.importePercepcion = 0;
		percepcionIVA.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesIVA = new Array();
		//filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTpercepcionesIVA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesIVA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_iva');
		search.addFilters(filtroTXTpercepcionesIVA);

		var searchResults = search.runSearch();

		var resultadoTXTpercepcionesIVA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesIVA = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesIVA = resultadoTXTpercepcionesIVA.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_IVA_per', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)
		if (!isEmpty(resultadoTXTpercepcionesIVA)) {
			nlapiLogExecution('DEBUG', 'generarTXT_IVA - Percepciones', 'Cantidad percepciones:' + resultadoTXTpercepcionesIVA.length);
			//

			for (var i = 0; resultadoTXTpercepcionesIVA != null && i < resultadoTXTpercepcionesIVA.length; i++) {
				var columns = resultadoTXTpercepcionesIVA[i].getAllColumns();
				var numeroComprobante = '';
				var errorReferenciaN = false;
				var puntoVenta = '';
				var letra = '';
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idpercepcionNetSuite = '';
				percepcionIVA.percepcion.numeroComprobanteFinal = '';

				var refComprobante = resultadoTXTpercepcionesIVA[i].getValue('internalid', null, 'group');

				if (!isEmpty(refComprobante)) {

					var codigoRegimen = resultadoTXTpercepcionesIVA[i].getValue('custrecord_l54_percepcion_cod_regimen', 'custcol_l54_percepciones', 'group');

					if (!isEmpty(codigoRegimen)) {
						//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
						//var codigoComprobante = resultadoTXTpercepcionesIVA[i].getValue('formulatext', null, 'max');
						//if (!isEmpty(codigoComprobante)) {
						percepcionIVA.percepcion.codigoRegimen = padding_left(codigoRegimen, "0", 3);
						// Obtengo el Numero del Comprobante
						var numerador = resultadoTXTpercepcionesIVA[i].getValue('custbody_l54_numero_entero_prov', null, 'max');
						var esDespachoImportacion = resultadoTXTpercepcionesIVA[i].getValue(columns[11]);
						var referenciaNumerador = resultadoTXTpercepcionesIVA[i].getValue(columns[12]);
						// if ((!isEmpty(numerador)) || (!isEmpty(esDespachoImportacion) && esDespachoImportacion == 'T' && !isEmpty(referenciaNumerador))) {

						if (!isEmpty(esDespachoImportacion) && esDespachoImportacion == 'T') {
							if (!isEmpty(referenciaNumerador)) {
								//percepcionIVA.percepcion.numeroComprobanteFinal = padding_left(referenciaNumerador, " ", 16);
								percepcionIVA.percepcion.numeroComprobanteFinal = referenciaNumerador;
								percepcionIVA.percepcion.numeroComprobanteInicial = '';
							} else {
								errorReferenciaN = true;
							}
						} else {
							numeroComprobante = numerador.toString().substr(-8);
							// Tomo el Punto de Venta
							//var puntoVenta = arrayNumerador[1];
							puntoVenta = resultadoTXTpercepcionesIVA[i].getValue('custbody_l54_punto_venta_prov', null, 'max');
							// Tomo la Latra del Comprobante
							//var letra = arrayNumerador[0];
							letra = resultadoTXTpercepcionesIVA[i].getValue('custbody_l54_letra', null, 'max');
						}

						if (!isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal) || (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra) && !errorReferenciaN)) {
							if (isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal)) {
								percepcionIVA.percepcion.numeroComprobanteFinal = padding_left(numeroComprobante, "0", 8);
								percepcionIVA.percepcion.puntoVenta = padding_left(puntoVenta, "0", 5);
								percepcionIVA.percepcion.letraDocumento = padding_right(letra, " ", 1);
								//percepcionIVA.percepcion.numeroComprobanteInicial = padding_right(percepcionIVA.percepcion.letraDocumento + "-" + percepcionIVA.percepcion.puntoVenta, " ", 8);
								percepcionIVA.percepcion.numeroComprobanteInicial = padding_left(percepcionIVA.percepcion.letraDocumento + percepcionIVA.percepcion.puntoVenta, " ", 8);
							}
							// Obtengo Tipo de Cambio de la Percepcion
							var tipoCambio = Math.abs(resultadoTXTpercepcionesIVA[i].getValue('exchangerate', null, 'max'));
							if (!isEmpty(tipoCambio)) {
								// Obtengo Fecha de Percepcion
								var fechapercepcion = resultadoTXTpercepcionesIVA[i].getValue('trandate', null, 'max');
								if (!isEmpty(fechapercepcion)) {
									// Formateo la Fecha
									var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
									if (!isEmpty(fechapercepcionDate)) {
										// Obtengo las Componentes de la Fecha
										var diapercepcion = fechapercepcionDate.getDate();
										var mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
										var aniopercepcion = fechapercepcionDate.getFullYear();
										var fechapercepcionFinal = padding_left(diapercepcion, '0', 2) + "/" + padding_left(mespercepcion, '0', 2) + "/" + aniopercepcion;
										percepcionIVA.percepcion.fechapercepcion = fechapercepcionFinal;

										// Obtengo el CUIT del Agente de percepcion

										var cuitEmpresa = resultadoTXTpercepcionesIVA[i].getValue('custbody_54_cuit_entity', null, 'MAX');

										if (!isEmpty(cuitEmpresa)) {

											// Obtengo el Tamaño del CUIT
											var cuitEmpresaString = cuitEmpresa.toString();
											cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
											cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
											cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
											cuitEmpresaString = cuitEmpresaString.toString();

											var tam = cuitEmpresaString.length;
											if (tam == 11) {

												// Agrego los -													
												var primerosDigitos = cuitEmpresaString.substr(0, 2);
												var segundosDigitos = cuitEmpresaString.substr(2, 8);
												var tercerosDigitos = cuitEmpresaString.substr(10, 1);

												if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

													cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

													percepcionIVA.percepcion.cuitEmpresa = cuitEmpresa;

													// Obtengo el Importe de la Percepcion
													var importePercepcion = resultadoTXTpercepcionesIVA[i].getValue('formulacurrency', null, 'sum');
													if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
														if (parseFloat(importePercepcion, 10) < 0.00) {
															percepcionIVA.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 15);
														}
														else {
															percepcionIVA.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
														}
														//percepcionIVA.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(tipoCambio, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

													} else {
														errorGlobal = true;
														descripcionError = "El Importe de Percepcion no debe ser 0.00";
													}

												} else {
													errorGlobal = true;
													descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
												}
											} else {
												errorGlobal = true;
												descripcionError = "CUIT de la Empresa Invalido";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
										}

									} else {
										errorGlobal = true;
										descripcionError = "Error Formateando la Fecha de la Percepcion";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Fecha De la Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
							}
						} else {
							errorGlobal = true;
							if (isEmpty(percepcionIVA.percepcion.numeroComprobanteFinal) && errorReferenciaN) {
								descripcionError = "Error Obteniendo el valor Referencia Nº del Comprobante de Despacho de Importación";
							} else {
								descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
							}
						}
						/* } else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						} */
						/*} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
						}*/
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Regimen de la Percepcion";
					}

				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionIVA.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";

						contenidoTXT += percepcionIVA.percepcion.codigoRegimen + percepcionIVA.percepcion.cuitEmpresa + percepcionIVA.percepcion.fechapercepcion +
							percepcionIVA.percepcion.numeroComprobanteInicial + percepcionIVA.percepcion.numeroComprobanteFinal + percepcionIVA.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones IVA ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesIVA) && resultadoTXTpercepcionesIVA.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones IVA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT IVA - Percepciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT IVA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		//percepcionSICORE.error = true;
	}

	if (errorGeneral == true) {
		percepcionIVA = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionIVA = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT IVA - Percepciones Sufridas');

	percepcionIVA.contenidoTXT = contenidoTXT;
	return percepcionIVA;
}

function generarTXTIVARet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Inicio - Generacion TXT IVA Retenciones Sufridas');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionIVA = new Object();
		retencionIVA.retencion = new Object();
		retencionIVA.sujeto = new Object();
		retencionIVA.existenRetenciones = false;
		retencionIVA.error = false;
		retencionIVA.descripcionError = "";
		retencionIVA.procesoEncolado = false;
		retencionIVA.idLog = idRegistroLOG;
		retencionIVA.retencion.importeRetencion = 0;
		retencionIVA.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTretencionesIVA = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_iva_sufridas');
		search.addFilters(filtroTXTretencionesIVA);

		var searchResults = search.runSearch();
		var resultadoTXTretencionesIVA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTretencionesIVA = resultado; //Primera ve inicializa
				else
					resultadoTXTretencionesIVA = resultadoTXTretencionesIVA.concat(resultado);

				//nlapiLogExecution('DEBUG', 'generarTXT_IVA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTretencionesIVA)) {
			nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Cantidad retenciones: ' + resultadoTXTretencionesIVA.length);

			for (var i = 0; resultadoTXTretencionesIVA != null && i < resultadoTXTretencionesIVA.length; i++) {
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionIVA.retencion = new Object();
				retencionIVA.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTretencionesIVA[i];
				var columns = result.getAllColumns();
				// Obtengo el Codigo de Comprobante
				idRetencionNetSuite = '';
				//refComprobante = result.getValue(columns[6]);
				refComprobante = result.getValue(columns[0]);
				nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'refComprobante o transaction ID: ' + refComprobante);

				if (!isEmpty(result.getValue(columns[1]))) {
					retencionIVA.retencion.codigoRegimen = result.getValue(columns[1]); // Obtengo el Código de Régimen
					if (!isEmpty(result.getValue(columns[2]))) {
						retencionIVA.retencion.cuitProveedor = result.getValue(columns[2]); // Obtengo el CUIT del Proveedor
						if (!isEmpty(result.getValue(columns[3]))) {
							retencionIVA.retencion.fechaRetencion = result.getValue(columns[3]); // Obtengo la fecha de retención
							if (!isEmpty(result.getValue(columns[4]))) {
								retencionIVA.retencion.nroCertificado = result.getValue(columns[4]); // Obtengo el nro del certificado
								if (!isEmpty(result.getValue(columns[5]))) {
									retencionIVA.retencion.montoRetencion = result.getValue(columns[5]); // Obtengo el monto de la retención
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Monto de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Nro del Certificado";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Fecha de la Retención";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT del Proveedor";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Código de Régimen";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionIVA.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var error = false;
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";

						contenidoTXT += retencionIVA.retencion.codigoRegimen + retencionIVA.retencion.cuitProveedor + retencionIVA.retencion.fechaRetencion +
							retencionIVA.retencion.nroCertificado + retencionIVA.retencion.montoRetencion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Generando TXT Retenciones IVA ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTretencionesIVA) && resultadoTXTretencionesIVA.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Obteniendo Retenciones IVA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTIVARet', 'Error Generando TXT IVA - Retenciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT IVA Retenciones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionIVA = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionIVA = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones IVA Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTIVARet', 'Finalización - Generación TXT IVA - Retenciones Sufridas');

	retencionIVA.contenidoTXT = contenidoTXT;
	return retencionIVA;
}

function generarTXTSaltaPer(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Inicio - Generación TXT Percepciones Salta');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionSALTA = new Object();
		percepcionSALTA.percepcion = new Object();
		percepcionSALTA.sujeto = new Object();
		percepcionSALTA.existenPercepciones = false;
		percepcionSALTA.error = false;
		percepcionSALTA.descripcionError = "";
		percepcionSALTA.procesoEncolado = false;
		percepcionSALTA.idLog = idRegistroLOG;
		//percepcionSALTA.percepcion.importeRetencion = 0;
		percepcionSALTA.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesSalta = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTpercepcionesSalta[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesSalta[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_salta');
		search.addFilters(filtroTXTpercepcionesSalta);

		var searchResults = search.runSearch();
		var resultadoTXTpercepcionesSalta = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesSalta = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesSalta = resultadoTXTpercepcionesSalta.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTpercepcionesSalta)) {
			nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Cantidad percepciones: ' + resultadoTXTpercepcionesSalta.length);

			for (var i = 0; resultadoTXTpercepcionesSalta != null && i < resultadoTXTpercepcionesSalta.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				percepcionSALTA.percepcion = new Object();
				percepcionSALTA.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTpercepcionesSalta[i];
				var columns = result.getAllColumns();
				// Obtengo el Codigo de Comprobante
				idRetencionNetSuite = '';
				//refComprobante = result.getValue(columns[6]);
				refComprobante = result.getValue(columns[0]);
				var recordType = result.getValue(columns[9]);
				nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'refComprobante o transaction ID: ' + refComprobante);

				if (!isEmpty(result.getValue(columns[1]))) {
					percepcionSALTA.percepcion.fecha = result.getValue(columns[1]); // Fecha de la percepción
					if (!isEmpty(result.getValue(columns[2]))) {
						percepcionSALTA.percepcion.tipoComprobante = result.getValue(columns[2]); // Tipo de Comprobante
						if (!isEmpty(result.getValue(columns[3]))) {
							percepcionSALTA.percepcion.nroComprobante = result.getValue(columns[3]); // Número de Comprobante
							if (!isEmpty(result.getValue(columns[4]))) {
								percepcionSALTA.percepcion.name = result.getValue(columns[4]); // Nombre
								if (!isEmpty(result.getValue(columns[5]))) {
									percepcionSALTA.percepcion.cuit = result.getValue(columns[5]); // CUIT
									if (!isEmpty(result.getValue(columns[6])) && parseFloat((result.getValue(columns[6]))) > 0) {
										percepcionSALTA.percepcion.monto = (recordType == 'creditmemo') ? '-' + result.getValue(columns[6]) : result.getValue(columns[6]); // Monto total
										if (!isEmpty(result.getValue(columns[7])) && parseFloat((result.getValue(columns[6]))) > 0) {
											percepcionSALTA.percepcion.alicuota = result.getValue(columns[7]); // Alicuota
											if (!isEmpty(result.getValue(columns[8])) && parseFloat((result.getValue(columns[6]))) > 0) {
												percepcionSALTA.percepcion.importePercepcion = (recordType == 'creditmemo') ? '-' + result.getValue(columns[8]) : result.getValue(columns[8]); // Importe Percepción
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Importe de Percepción";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Alícuota";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto de la Transacción";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el CUIT del Cliente";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Nombre del Cliente";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número de Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha de la Percepción";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionSALTA.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var error = false;
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";

						contenidoTXT += percepcionSALTA.percepcion.fecha + percepcionSALTA.percepcion.tipoComprobante + percepcionSALTA.percepcion.nroComprobante + percepcionSALTA.percepcion.name +
							percepcionSALTA.percepcion.cuit + percepcionSALTA.percepcion.monto + percepcionSALTA.percepcion.alicuota + percepcionSALTA.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Percepción";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Generando TXT SIPOT IIBB SALTA: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesSalta) && resultadoTXTpercepcionesSalta.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT SIPOT IIBB SALTA Correcta - No se Encontraron Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Obteniendo Percepciones SIPOT IIBB SALTA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Percepciones SIPOT IIBB SALTA - Error : Error Obteniendo Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSaltaPer', 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIPOT IIBB SALTA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionSALTA = grabarError(true, 'Error Generando TXT SIPOT IIBB SALTA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSALTA = grabarError(false, 'Generación de TXT SIPOT IIBB SALTA Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT SIPOT IIBB SALTA Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Finalización - Generación TXT SIPOT IIBB SALTA');

	percepcionSALTA.contenidoTXT = contenidoTXT;
	return percepcionSALTA;
}

function generarTXTIvaPerVentas(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'Inicio - Generación TXT IVA Percepciones Venta');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionIVAVta = new Object();
		percepcionIVAVta.percepcion = new Object();
		percepcionIVAVta.sujeto = new Object();
		percepcionIVAVta.existenPercepciones = false;
		percepcionIVAVta.error = false;
		percepcionIVAVta.descripcionError = "";
		percepcionIVAVta.procesoEncolado = false;
		percepcionIVAVta.idLog = idRegistroLOG;
		//percepcionIVAVta.percepcion.importeRetencion = 0;
		percepcionIVAVta.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesIVAVenta = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTpercepcionesIVAVenta[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesIVAVenta[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_iva_vent');
		search.addFilters(filtroTXTpercepcionesIVAVenta);

		var searchResults = search.runSearch();
		var resultadoTXTpercepcionesIVAVta = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesIVAVta = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesIVAVta = resultadoTXTpercepcionesIVAVta.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTpercepcionesIVAVta)) {
			nlapiLogExecution('DEBUG', 'generarTXTIVAPerVent', 'Cantidad percepciones: ' + resultadoTXTpercepcionesIVAVta.length);

			for (var i = 0; resultadoTXTpercepcionesIVAVta != null && i < resultadoTXTpercepcionesIVAVta.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				percepcionIVAVta.percepcion = new Object();
				percepcionIVAVta.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTpercepcionesIVAVta[i];
				var columns = result.getAllColumns();
				// Obtengo el Codigo de Comprobante
				idRetencionNetSuite = '';
				//refComprobante = result.getValue(columns[6]);
				refComprobante = result.getValue(columns[0]);
				var recordType = result.getValue(columns[9]);
				nlapiLogExecution('DEBUG', 'generarTXTSaltaPer', 'refComprobante o transaction ID: ' + refComprobante);
				if (recordType == 'creditmemo') {
					percepcionIVAVta.percepcion.codigoComprobante = '03';
				} else {
					percepcionIVAVta.percepcion.codigoComprobante = '01';
				}
				if (!isEmpty(result.getValue(columns[1]))) {
					percepcionIVAVta.percepcion.fecha = result.getValue(columns[1]); // Fecha de la percepción
					if (!isEmpty(result.getValue(columns[2]))) {
						percepcionIVAVta.percepcion.tipoComprobante = result.getValue(columns[2]); // Tipo de Comprobante
						if (!isEmpty(result.getValue(columns[3]))) {
							percepcionIVAVta.percepcion.nroComprobante = result.getValue(columns[3]); // Número de Comprobante
							if (!isEmpty(result.getValue(columns[4]))) {
								percepcionIVAVta.percepcion.name = result.getValue(columns[4]); // Nombre
								if (!isEmpty(result.getValue(columns[5]))) {
									percepcionIVAVta.percepcion.cuit = result.getValue(columns[5]); // CUIT
									if (!isEmpty(result.getValue(columns[6])) && parseFloat((result.getValue(columns[6]))) > 0) {
										percepcionIVAVta.percepcion.monto = (recordType == 'creditmemo') ? '-' + result.getValue(columns[6]) : result.getValue(columns[6]); // Monto total
										if (!isEmpty(result.getValue(columns[7])) && parseFloat((result.getValue(columns[6]))) > 0) {
											percepcionIVAVta.percepcion.alicuota = result.getValue(columns[7]); // Alicuota
											if (!isEmpty(result.getValue(columns[8])) && parseFloat((result.getValue(columns[6]))) > 0) {
												percepcionIVAVta.percepcion.importePercepcion = (recordType == 'creditmemo') ? '-' + result.getValue(columns[8]) : result.getValue(columns[8]); // Importe Percepción
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el Importe de Percepción";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Alícuota";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Monto de la Transacción";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el CUIT del Cliente";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Nombre del Cliente";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número de Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha de la Percepción";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionIVAVta.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var error = false;
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";

						contenidoTXT += percepcionIVAVta.percepcion.fecha + percepcionIVAVta.percepcion.tipoComprobante + percepcionIVAVta.percepcion.nroComprobante + percepcionIVAVta.percepcion.name +
							percepcionIVAVta.percepcion.cuit + percepcionIVAVta.percepcion.monto + percepcionIVAVta.percepcion.alicuota + percepcionIVAVta.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Percepción";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTIVAPerVent', 'Error Generando TXT SIPOT IIBB SALTA: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesIVAVta) && resultadoTXTpercepcionesIVAVta.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT SIPOT IIBB SALTA Correcta - No se Encontraron Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTIVAPerVent', 'Error Obteniendo Percepciones SIPOT IIBB SALTA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Percepciones SIPOT IIBB SALTA - Error : Error Obteniendo Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTIVAPerVent', 'Error Generando TXT SIPOT IIBB SALTA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIPOT IIBB SALTA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcionIVAVta = grabarError(true, 'Error Generando TXT SIPOT IIBB SALTA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionIVAVta = grabarError(false, 'Generación de TXT SIPOT IIBB SALTA Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT SIPOT IIBB SALTA Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTIVAPerVent', 'Finalización - Generación TXT SIPOT IIBB SALTA');

	percepcionIVAVta.contenidoTXT = contenidoTXT;
	return percepcionIVAVta;
}

function generarTXT_IVATUR(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Inicio - Generación TXT IVATUR');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de IVATUR";
	//var descripcionError = "";
	var descripcionError = [];
	var contenidoTXT = "";
	var contenidoTXT_cabecera = '';
	var contenidoTXT_datos_comprobante = '';
	var contenidoTXT_datos_reintegro = '';
	var contenidoTXT_datos_comp_asociado = '';
	var contenidoTXT_subtotales_iva = '';
	var contenidoTXT_datosItem = '';
	var contenidoTXT_formasPago = '';
	var contenidoTXT_datos_turista = '';
	var procesoEncolado = false;
	var errorDatosTransaccion = false;
	var errorDatosItems = false;
	var errorDatosIVA = false;
	var errorDatosFormasPago = false;
	var errorDatosTurista = false;

	try {
		var objInfoIVATUR = new Object();
		objInfoIVATUR.info = new Object();
		objInfoIVATUR.sujeto = new Object();
		objInfoIVATUR.existenPercepciones = false;
		objInfoIVATUR.error = false;
		objInfoIVATUR.descripcionError = "";
		objInfoIVATUR.procesoEncolado = false;
		objInfoIVATUR.idLog = idRegistroLOG;
		objInfoIVATUR.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';
		var arrayComprobantes = [];

		// INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE CABECERA, COMPROBANTE Y COMPROBANTE ASOCIADO.
		var iCont = 0;
		var filtroTXTIVATUR = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTIVATUR[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTIVATUR[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_dat_cab_comp');
		search.addFilters(filtroTXTIVATUR);

		var searchResults = search.runSearch();
		var resultadoTXT_IVATUR = [];
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXT_IVATUR = resultado; //Primera ve inicializa
				else
					resultadoTXT_IVATUR = resultadoTXT_IVATUR.concat(resultado);
			}

			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

		} while (!isEmpty(resultado) && resultado.length > 0)
		// FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE CABECERA, COMPROBANTE Y COMPROBANTE ASOCIADO.

		// INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE ITEMS.
		var iCont_items = 0;
		var filtroTXTIVATUR_items = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTIVATUR_items[iCont_items++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTIVATUR_items[iCont_items++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_datos_items');
		search.addFilters(filtroTXTIVATUR_items);
		var searchResults = search.runSearch();
		var resultadoTXT_IVATUR_items = [];
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXT_IVATUR_items = resultado; //Primera ve inicializa
				else
					resultadoTXT_IVATUR_items = resultadoTXT_IVATUR_items.concat(resultado);
			}

			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

		} while (!isEmpty(resultado) && resultado.length > 0)
		// FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE ITEMS.

		// INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE SUBTOTALES.
		var iCont_subtotales = 0;
		var filtroTXTIVATUR_subtotales = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTIVATUR_subtotales[iCont_subtotales++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTIVATUR_subtotales[iCont_subtotales++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_ivatur_subtot_iva');
		search.addFilters(filtroTXTIVATUR_subtotales);
		var searchResults = search.runSearch();
		var resultadoTXT_IVATUR_transaccion_subtotales = [];
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXT_IVATUR_transaccion_subtotales = resultado; //Primera ve inicializa
				else
					resultadoTXT_IVATUR_transaccion_subtotales = resultadoTXT_IVATUR_transaccion_subtotales.concat(resultado);
			}

			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

		} while (!isEmpty(resultado) && resultado.length > 0)
		// FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE SUBTOTALES.

		if (!isEmpty(resultadoTXT_IVATUR)) {

			nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros SS: ' + resultadoTXT_IVATUR.length);
			nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR: ' + JSON.stringify(resultadoTXT_IVATUR));
			var cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
			var periodoConsulta = '';
			var mesConsulta = '';
			var mesConsultaAux = '';
			objInfoIVATUR.info = {};
			objInfoIVATUR.datosTurista = {}; // Obj para guardar datos del cliente
			objInfoIVATUR.datosIVA = {}; // Obj para guardar datos de subtotales IVA
			objInfoIVATUR.datosReintegro = {}; // Obj para guardar datos de Reintegro del comprobante
			objInfoIVATUR.datosItem = {} // Obj para guardar datos de items
			objInfoIVATUR.formasPago = {} // Obj para guardar datos de formas de pago

			// Inicio - Extraigo los datos de Cabecera del TXT (Sección 1 del TXT).
			objInfoIVATUR.cabecera = {}; // Obj para guardar datos de cabecera
			objInfoIVATUR.cabecera.tipoRegistro = '01';
			objInfoIVATUR.cabecera.cuitInformante = cuitEmpresa.replace(/[^0-9]+/g, "");
			periodoConsulta = nlapiStringToDate(periodo.fDesde);
			mesConsultaAux = periodoConsulta.getMonth() + 1;
			mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : '0' + mesConsultaAux.toString();
			objInfoIVATUR.cabecera.periodo = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
			objInfoIVATUR.cabecera.secuencia = '00';
			objInfoIVATUR.cabecera.codigoImpuesto = '0103';
			objInfoIVATUR.cabecera.codigoConcepto = '858';
			objInfoIVATUR.cabecera.nroFormulario = '8089';
			objInfoIVATUR.cabecera.versionSistema = '00100';
			objInfoIVATUR.cabecera.presentacionSinMov = '0';
			// Fin - Extraigo los datos de Cabecera del TXT (Sección 1 del TXT).

			// Inicio - Ingreso los datos de cabecera (sección 01)
			contenidoTXT_cabecera += objInfoIVATUR.cabecera.tipoRegistro + objInfoIVATUR.cabecera.cuitInformante + objInfoIVATUR.cabecera.periodo + objInfoIVATUR.cabecera.secuencia + objInfoIVATUR.cabecera.codigoImpuesto +
				objInfoIVATUR.cabecera.codigoConcepto + objInfoIVATUR.cabecera.nroFormulario + objInfoIVATUR.cabecera.versionSistema + objInfoIVATUR.cabecera.presentacionSinMov + "\r\n";
			// Fin - Ingreso los datos de cabecera (sección 01)

			for (var i = 0; resultadoTXT_IVATUR != null && i < resultadoTXT_IVATUR.length; i++) {
				var descripcionError = [];
				objInfoIVATUR.datosComp = {}; // Obj para guardar datos del comprobante
				objInfoIVATUR.datosCompAsociado = {} // Obj para guardar datos del Comprobante Asociado
				objInfoIVATUR.datosReintegro = {}; // Obj para guardar datos del comprobante
				existenPercepciones = true;
				errorGlobal = false;
				//descripcionError = "";
				var result = resultadoTXT_IVATUR[i];
				var columns = result.getAllColumns();
				var refComprobante = result.getValue(columns[0]);
				arrayComprobantes.push(refComprobante);

				nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'refComprobante o transaction ID: ' + refComprobante);

				// Inicio ------ Extraigo los datos del comprobante del TXT (Sección 2 del TXT).
				if (!isEmpty(result.getValue(columns[1]))) {
					objInfoIVATUR.datosComp.tipoRegistro = result.getValue(columns[1]);
					if (!isEmpty(result.getValue(columns[2]))) {
						objInfoIVATUR.datosComp.tipoComprobante = result.getValue(columns[2]);
						if (!isEmpty(result.getValue(columns[3]))) {
							objInfoIVATUR.datosComp.puntoVenta = result.getValue(columns[3]);
							if (!isEmpty(result.getValue(columns[4]))) {
								objInfoIVATUR.datosComp.numero = result.getValue(columns[4]);
								if (!isEmpty(result.getValue(columns[5]))) {
									objInfoIVATUR.datosComp.fechaEmision = result.getValue(columns[5]);
									if (!isEmpty(result.getValue(columns[6]))) {
										objInfoIVATUR.datosComp.codDocReceptor = result.getValue(columns[6]);
										if (!isEmpty(result.getValue(columns[7]))) {
											objInfoIVATUR.datosComp.nroDocReceptor = result.getValue(columns[7]);
											if (!isEmpty(result.getValue(columns[8]))) {
												objInfoIVATUR.datosComp.paisReceptor = result.getValue(columns[8]);
												if (!isEmpty(result.getValue(columns[9]))) {
													objInfoIVATUR.datosComp.idImpositivo = result.getValue(columns[9]);
													if (!isEmpty(result.getValue(columns[10]))) {
														objInfoIVATUR.datosComp.relacionER = result.getValue(columns[10]);
														if (!isEmpty(result.getValue(columns[11])) && (result.getValue(columns[11]) >= 0)) {
															objInfoIVATUR.datosComp.impGravado = padding_left(result.getValue(columns[11]).replace(/[^0-9]+/g, ""), '0', 15);
															if (!isEmpty(result.getValue(columns[12])) && (result.getValue(columns[12]) >= 0)) {
																objInfoIVATUR.datosComp.impNoGravado = padding_left(result.getValue(columns[12]).replace(/[^0-9]+/g, ""), '0', 15);
																if (!isEmpty(result.getValue(columns[13])) && (result.getValue(columns[13]) >= 0)) {
																	objInfoIVATUR.datosComp.impExento = padding_left(result.getValue(columns[13]).replace(/[^0-9]+/g, ""), '0', 15);
																	if (!isEmpty(result.getValue(columns[14])) && (result.getValue(columns[14]) >= 0)) {
																		objInfoIVATUR.datosComp.impReintegro = padding_left(result.getValue(columns[14]).replace(/[^0-9]+/g, ""), '0', 15);
																		if (!isEmpty(result.getValue(columns[15]))) {
																			objInfoIVATUR.datosComp.codigoMoneda = result.getValue(columns[15]);
																			if (!isEmpty(result.getValue(columns[16]))) {
																				objInfoIVATUR.datosComp.cotizacionMoneda = result.getValue(columns[16]);
																				if (!isEmpty(result.getValue(columns[17]))) {
																					objInfoIVATUR.datosComp.tipoCodAutotizacion = result.getValue(columns[17]);
																					if (!isEmpty(result.getValue(columns[18]))) {
																						objInfoIVATUR.datosComp.codAutorizacion = result.getValue(columns[18]);
																						if (!isEmpty(result.getValue(columns[19]))) {
																							objInfoIVATUR.datosComp.controladorFiscalCodigo = result.getValue(columns[19]);
																							if (!isEmpty(result.getValue(columns[20]))) {
																								objInfoIVATUR.datosComp.controladorFiscalSerie = result.getValue(columns[20]);
																								if (!isEmpty(result.getValue(columns[21]))) {
																									objInfoIVATUR.datosComp.total = result.getValue(columns[21]);
																								} else {
																									errorGlobal = true;
																									descripcionError.push("Error obteniendo el Total de la Transacción");
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError.push("Error obteniendo el Controlador Fiscal Serie de la Transacción");
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError.push("Error obteniendo el Controlador Fiscal Código de la Transacción");
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError.push("Error obteniendo el Código de Autorización (CAE) de la Transacción");
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError.push("Error obteniendo el Tipo Código de Autorización de la Transacción");
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError.push("Error obteniendo la Cótización de Moneda de la Transacción");
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError.push("Error obteniendo la Moneda de la Transacción");
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError.push("Error obteniendo el Importe de Reintegro de la Transacción");
																	}
																} else {
																	errorGlobal = true;
																	descripcionError.push("Error obteniendo el Importe Exento de la Transacción");
																}
															} else {
																errorGlobal = true;
																descripcionError.push("Error obteniendo el Importe No Gravado de la Transacción");
															}
														} else {
															errorGlobal = true;
															descripcionError.push("Error obteniendo el Importe Gravado de la Transacción");
														}
													} else {
														errorGlobal = true;
														descripcionError.push("Error obteniendo la Relación ER de la Transacción");
													}
												} else {
													errorGlobal = true;
													descripcionError.push("Error obteniendo el ID Impositivo del Receptor de la Transacción");
												}
											} else {
												errorGlobal = true;
												descripcionError.push("Error obteniendo el País del Receptor de la Transacción");
											}
										} else {
											errorGlobal = true;
											descripcionError.push("Error obteniendo el Número Documento del Receptor de la Transacción");
										}
									} else {
										errorGlobal = true;
										descripcionError.push("Error obteniendo el Código Documento del Receptor de la Transacción");
									}
								} else {
									errorGlobal = true;
									descripcionError.push("Error obteniendo la Fecha de Emisión de la Transacción");
								}
							} else {
								errorGlobal = true;
								descripcionError.push("Error obteniendo el Número de Comprobante de la Transacción");
							}
						} else {
							errorGlobal = true;
							descripcionError.push("Error obteniendo el Punto de Venta de la Transacción");
						}
					} else {
						errorGlobal = true;
						descripcionError.push("Error obteniendo el Tipo de Comprobante de la Transacción");
					}
				} else {
					errorGlobal = true;
					descripcionError.push("Error obteniendo el Tipo de Registro de la Sección de Datos de Comprobante");
				}
				// Fin ------ Extraigo los datos del comprobante del TXT (Sección 2 del TXT).

				// Inicio --- Extraigo los datos del Reintegro (Sección 5 del TXT)
				objInfoIVATUR.datosReintegro.tipoRegistro = '';
				if (!isEmpty(result.getValue(columns[22]))) {
					objInfoIVATUR.datosReintegro.tipoRegistro = result.getValue(columns[22]);
					if (!isEmpty(result.getValue(columns[23]))) {
						objInfoIVATUR.datosReintegro.cuitEmisoraReintegro = cuitEmpresa;
						if (!isEmpty(result.getValue(columns[24]))) {
							objInfoIVATUR.datosReintegro.tipoComprobante = result.getValue(columns[24]);
							if (!isEmpty(result.getValue(columns[25]))) {
								objInfoIVATUR.datosReintegro.puntoVenta = result.getValue(columns[25]);
								if (!isEmpty(result.getValue(columns[26]))) {
									objInfoIVATUR.datosReintegro.numeroComprobante = result.getValue(columns[26]);
									if (!isEmpty(result.getValue(columns[27]))) {
										objInfoIVATUR.datosReintegro.tipoCodigoAutorizacion = result.getValue(columns[27]);
										if (!isEmpty(result.getValue(columns[28]))) {
											objInfoIVATUR.datosReintegro.codigoAutorizacion = result.getValue(columns[28]);
											if (!isEmpty(result.getValue(columns[29]))) {
												objInfoIVATUR.datosReintegro.fechaComprobante = result.getValue(columns[29]);
												if (!isEmpty(result.getValue(columns[30]))) {
													objInfoIVATUR.datosReintegro.controladorFiscalCodigo = result.getValue(columns[30]);
													if (!isEmpty(result.getValue(columns[31]))) {
														objInfoIVATUR.datosReintegro.controladorFiscalSerie = result.getValue(columns[31]);
														if (!isEmpty(result.getValue(columns[32])) && (result.getValue(columns[32]) >= 0)) {
															objInfoIVATUR.datosReintegro.importeReintegro = padding_left(result.getValue(columns[32]).replace(/[^0-9]+/g, ""), '0', 15);
														} else {
															errorGlobal = true;
															descripcionError.push("Error obteniendo el Importe de Reintegro del Comprobante que genera el Reintegro");
														}
													} else {
														errorGlobal = true;
														descripcionError.push("Error obteniendo la Serie de Controlador Fiscal del Comprobante que genera el Reintegro");
													}
												} else {
													errorGlobal = true;
													descripcionError.push("Error obteniendo el Código de Controlador Fiscal del Comprobante que genera el Reintegro");
												}
											} else {
												errorGlobal = true;
												descripcionError.push("Error obteniendo la Fecha del Comprobante que genera el Reintegro");
											}
										} else {
											errorGlobal = true;
											descripcionError.push("Error obteniendo el Código de Autorización del Comprobante que genera el Reintegro");
										}
									} else {
										errorGlobal = true;
										descripcionError.push("Error obteniendo el Tipo de Código de Autorización del Comprobante que genera el Reintegro");
									}
								} else {
									errorGlobal = true;
									descripcionError.push("Error obteniendo el Número del Comprobante que genera el Reintegro");
								}
							} else {
								errorGlobal = true;
								descripcionError.push("Error obteniendo el Punto de Venta del Comprobante que genera el Reintegro");
							}
						} else {
							errorGlobal = true;
							descripcionError.push("Error obteniendo el Tipo de Comprobante que genera el Reintegro");
						}
					} else {
						errorGlobal = true;
						descripcionError.push("Error obteniendo el CUIT de la empresa que genera el Reintegro");
					}
				}
				// Fin --- Extraigo los datos del Reintegro (Sección 5 del TXT)	

				// Inicio --- Extraigo los datos del Comprobante Asociado (Sección 6 del TXT)
				objInfoIVATUR.datosCompAsociado.tipoRegistro = '';
				if (!isEmpty(result.getValue(columns[33]))) {
					objInfoIVATUR.datosCompAsociado.tipoRegistro = result.getValue(columns[33]);
					if (!isEmpty(result.getValue(columns[34]))) {
						objInfoIVATUR.datosCompAsociado.codigoCompAsociado = result.getValue(columns[34]);
						if (!isEmpty(result.getValue(columns[35]))) {
							objInfoIVATUR.datosCompAsociado.puntoVentaCompAsociado = result.getValue(columns[35]);
							if (!isEmpty(result.getValue(columns[36]))) {
								objInfoIVATUR.datosCompAsociado.nroCompAsociado = result.getValue(columns[36]);
							} else {
								errorGlobal = true;
								descripcionError.push("Error obteniendo el Número del Comprobante Asociado");
							}
						} else {
							errorGlobal = true;
							descripcionError.push("Error obteniendo el Punto de Venta del Comprobante Asociado");
						}
					} else {
						errorGlobal = true;
						descripcionError.push("Error obteniendo el Código AFIP Tipo de Comprobante Asociado");
					}
				}
				// Fin --- Extraigo los datos del Reintegro (Sección 6 del TXT)				

				// Genero el Contenido
				if (errorGlobal == false) {
					if (!isEmpty(objInfoIVATUR.cabecera) && !isEmpty(objInfoIVATUR.datosComp) && !isEmpty(objInfoIVATUR.datosCompAsociado) && !isEmpty(objInfoIVATUR.datosReintegro)) {

						// Inicio - Ingreso los datos del comprobante (sección 02)
						contenidoTXT_datos_comprobante += objInfoIVATUR.datosComp.tipoRegistro + objInfoIVATUR.datosComp.tipoComprobante + objInfoIVATUR.datosComp.puntoVenta + objInfoIVATUR.datosComp.numero + objInfoIVATUR.datosComp.fechaEmision +
							objInfoIVATUR.datosComp.codDocReceptor + objInfoIVATUR.datosComp.nroDocReceptor + objInfoIVATUR.datosComp.paisReceptor + objInfoIVATUR.datosComp.idImpositivo + objInfoIVATUR.datosComp.relacionER +
							objInfoIVATUR.datosComp.impGravado + objInfoIVATUR.datosComp.impNoGravado + objInfoIVATUR.datosComp.impExento + objInfoIVATUR.datosComp.impReintegro + objInfoIVATUR.datosComp.codigoMoneda +
							objInfoIVATUR.datosComp.cotizacionMoneda + objInfoIVATUR.datosComp.tipoCodAutotizacion + objInfoIVATUR.datosComp.codAutorizacion + objInfoIVATUR.datosComp.controladorFiscalCodigo +
							objInfoIVATUR.datosComp.controladorFiscalSerie + objInfoIVATUR.datosComp.total + "\r\n";
						// Fin - Ingreso los datos del comprobante (sección 02)

						// Inicio - Ingreso los datos del Reintegro (sección 05)
						if (!isEmpty(objInfoIVATUR.datosReintegro.tipoRegistro)) {
							contenidoTXT_datos_reintegro += objInfoIVATUR.datosReintegro.tipoRegistro + objInfoIVATUR.datosReintegro.cuitEmisoraReintegro + objInfoIVATUR.datosReintegro.tipoComprobante + objInfoIVATUR.datosReintegro.puntoVenta +
								objInfoIVATUR.datosReintegro.numeroComprobante + objInfoIVATUR.datosReintegro.tipoCodigoAutorizacion + objInfoIVATUR.datosReintegro.codigoAutorizacion + objInfoIVATUR.datosReintegro.fechaComprobante +
								objInfoIVATUR.datosReintegro.controladorFiscalCodigo + objInfoIVATUR.datosReintegro.controladorFiscalSerie + objInfoIVATUR.datosReintegro.importeReintegro + "\r\n";
						}
						// Fin - Ingreso los datos del Turista (sección 05)

						// Inicio - Ingreso los datos del Comprobante Asociado (sección 06)
						if (!isEmpty(objInfoIVATUR.datosCompAsociado.tipoRegistro)) {
							contenidoTXT_datos_comp_asociado += objInfoIVATUR.datosCompAsociado.tipoRegistro + objInfoIVATUR.datosCompAsociado.codigoCompAsociado + objInfoIVATUR.datosCompAsociado.puntoVentaCompAsociado + objInfoIVATUR.datosCompAsociado.nroCompAsociado + "\r\n";
						}
						// Fin - Ingreso los datos del Comprobante Asociado (sección 06)

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Transacción";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
				} else {
					// Error Obteniendo Informacion de Transacción
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + JSON.stringify(descripcionError) + ' -- Ref Comprobante: ' + refComprobante);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
				errorDatosTransaccion = true;

			// INICIO - VERIFICO DATOS DE SUBTOTALES
			if (!isEmpty(resultadoTXT_IVATUR_transaccion_subtotales)) {

				nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: ' + resultadoTXT_IVATUR_transaccion_subtotales.length);
				nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: ' + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales));

				for (var i = 0; resultadoTXT_IVATUR_transaccion_subtotales != null && i < resultadoTXT_IVATUR_transaccion_subtotales.length; i++) {
					existenPercepciones = true;
					objInfoIVATUR.datosIVA = {}; // Obj para guardar datos de subtotales IVA
					errorGlobal = false;
					var descripcionError = "";
					var result = resultadoTXT_IVATUR_transaccion_subtotales[i];
					var columns = result.getAllColumns();
					var refComprobante = result.getValue(columns[0]);
					var aplicaReintegro = result.getValue(columns[1]);;

					// Inicio ---- Extraigo los datos de subtotales IVA (Sección 3 del TXT).
					if (!isEmpty(result.getValue(columns[2]))) {
						objInfoIVATUR.datosIVA.tipoRegistro = result.getValue(columns[2]);
						if (!isEmpty(result.getValue(columns[3]))) {
							objInfoIVATUR.datosIVA.porcentajeIVA = result.getValue(columns[3]);
							if (!isEmpty(result.getValue(columns[4])) && (result.getValue(columns[4]) > 0)) {
								objInfoIVATUR.datosIVA.baseImponible = padding_left(result.getValue(columns[4]).replace(/[^0-9]+/g, ""), '0', 15);
								if (!isEmpty(result.getValue(columns[5])) && (result.getValue(columns[5]) > 0)) {
									objInfoIVATUR.datosIVA.importe = padding_left(result.getValue(columns[5]).replace(/[^0-9]+/g, ""), '0', 15);
								} else {
									errorGlobal = true;
									descripcionError = "Error obteniendo el Importe IVA de la Transacción";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error obteniendo la Base Imponible de la Transacción";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Porcentaje IVA de la Transacción";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Subtotales IVA";
					}
					// Fin ---- Extraigo los datos de subtotales IVA (Sección 3 del TXT).

					// Genero el Contenido
					if (errorGlobal == false) {
						if (!isEmpty(objInfoIVATUR.datosIVA)) {

							// Inicio - Ingreso los datos de subtotales IVA (sección 03)
							contenidoTXT_subtotales_iva += objInfoIVATUR.datosIVA.tipoRegistro + objInfoIVATUR.datosIVA.porcentajeIVA + objInfoIVATUR.datosIVA.baseImponible + objInfoIVATUR.datosIVA.importe + "\r\n";
							// Fin - Ingreso los datos de subtotales IVA (sección 03)

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información de los subtotales IVA de la Transacción";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}
					} else {
						// Error Obteniendo Informacion de Transacción
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError + ' -- aplicaReintegro: ' + aplicaReintegro);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}
			// FIN - VERIFICO DATOS DE SUBTOTALES

			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
				errorDatosIVA = true;

			// Verifico si existen transacciones encontradas para determinar los datos del turista de cada transacción
			if (existenPercepciones) {
				// INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE TURISTAS.
				var iCont_filter = 0;
				var filtroTXTIVATUR_datosTuristas = new Array();
				if (!isEmpty(arrayComprobantes) && arrayComprobantes.length > 0)
					filtroTXTIVATUR_datosTuristas[iCont_filter++] = new nlobjSearchFilter('custrecord_l54_datos_turista_transac_ref', null, 'ANYOF', arrayComprobantes);

				var search = new nlapiLoadSearch('customrecord_l54_datos_turista_transac', 'customsearch_l54_txt_ivatur_datos_turist');
				search.addFilters(filtroTXTIVATUR_datosTuristas);
				var searchResults = search.runSearch();
				var resultadoTXT_IVATUR_datos_turista = [];
				var resultIndex = 0;
				var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
				var resultado; // temporary variable used to store the result set
				do {
					resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

					if (!isEmpty(resultado) && resultado.length > 0) {
						if (resultIndex == 0)
							resultadoTXT_IVATUR_datos_turista = resultado; //Primera ve inicializa
						else
							resultadoTXT_IVATUR_datos_turista = resultadoTXT_IVATUR_datos_turista.concat(resultado);
					}

					resultIndex = resultIndex + resultStep;
					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);

				} while (!isEmpty(resultado) && resultado.length > 0)
				// FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE TURISTAS.

				if (!isEmpty(resultadoTXT_IVATUR_datos_turista)) {

					nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_datos_turista: ' + resultadoTXT_IVATUR_datos_turista.length);
					nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_datos_turista: ' + JSON.stringify(resultadoTXT_IVATUR_datos_turista));

					for (var i = 0; i < resultadoTXT_IVATUR_datos_turista.length; i++) {
						errorGlobal = false;
						var descripcionError = "";
						var result = resultadoTXT_IVATUR_datos_turista[i];
						var columns = result.getAllColumns();
						objInfoIVATUR.datosTurista = {} // Obj para guardar datos de items
						var refComprobante = result.getValue(columns[1]);
						var refDatosTurista = result.getValue(columns[0]);

						// Inicio ---- Extraigo los datos del turista (Sección 4 del TXT).
						if (!isEmpty(result.getValue(columns[2]))) {
							objInfoIVATUR.datosTurista.tipoRegistro = result.getValue(columns[2]);
							if (!isEmpty(result.getValue(columns[3]))) {
								objInfoIVATUR.datosTurista.tipoDocumento = result.getValue(columns[3]);
								if (!isEmpty(result.getValue(columns[4]))) {
									objInfoIVATUR.datosTurista.nroDocumento = result.getValue(columns[4]);
									if (!isEmpty(result.getValue(columns[5]))) {
										objInfoIVATUR.datosTurista.paisEmisorDoc = result.getValue(columns[5]);
										if (!isEmpty(result.getValue(columns[6]))) {
											objInfoIVATUR.datosTurista.nameTurista = result.getValue(columns[6]);
											if (!isEmpty(result.getValue(columns[7]))) {
												objInfoIVATUR.datosTurista.paisNacionalidad = result.getValue(columns[7]);
												if (!isEmpty(result.getValue(columns[8]))) {
													objInfoIVATUR.datosTurista.paisResidencia = result.getValue(columns[8]);
												} else {
													errorGlobal = true;
													descripcionError = "Error obteniendo el País de Residencia del Turista, ID registro datos Turista: " + refDatosTurista;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error obteniendo el País de Nacionalidad del Turista, ID registro datos Turista: " + refDatosTurista;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error obteniendo el Apellido y Nombre del Turista, ID registro datos Turista: " + refDatosTurista;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error obteniendo el País Emisor del Documento del Turista, ID registro datos Turista: " + refDatosTurista;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error obteniendo el Número Documento del Turista, ID registro datos Turista: " + refDatosTurista;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error obteniendo el Tipo Documento del Turista, ID registro datos Turista: " + refDatosTurista;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Datos del Turista, ID registro datos Turista: " + refDatosTurista;
						}
						// Fin ---- Extraigo los datos del turista (Sección 4 del TXT).


						// Verifico si ocurrieron errores con la extracción de items
						if (errorGlobal == false) {
							if (objInfoIVATUR.datosTurista != null) {

								// Inicio - Ingreso los datos del Turista (sección 04)
								contenidoTXT_datos_turista += objInfoIVATUR.datosTurista.tipoRegistro + objInfoIVATUR.datosTurista.tipoDocumento + objInfoIVATUR.datosTurista.nroDocumento + objInfoIVATUR.datosTurista.paisEmisorDoc +
									objInfoIVATUR.datosTurista.nameTurista + objInfoIVATUR.datosTurista.paisNacionalidad + objInfoIVATUR.datosTurista.paisResidencia + "\r\n";
								// Fin - Ingreso los datos del Turista (sección 04)

							} else {
								errorGeneral = true;
								descripcionError = "Error Obteniendo Información de los Turistas asociados a la transacción";
								idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
							}

						} else {
							// Error Obteniendo Informacion de Transacción
							// Grabo el Error en NetSuite
							errorGeneral = true;
							nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

						// Verifico si debo Encolar el Proceso
						checkGovernance(1000);
					}
				}
			}

			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
				errorDatosTurista = true;

			if (!isEmpty(resultadoTXT_IVATUR_items)) {

				nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Cantidad registros resultadoTXT_IVATUR_transaccion_subtotales: ' + resultadoTXT_IVATUR_transaccion_subtotales.length);
				nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'LINE-11369 - resultadoTXT_IVATUR_transaccion_subtotales: ' + JSON.stringify(resultadoTXT_IVATUR_transaccion_subtotales));

				for (var i = 0; resultadoTXT_IVATUR_items != null && i < resultadoTXT_IVATUR_items.length; i++) {
					existenPercepciones = true;
					objInfoIVATUR.datosItem = {};
					errorGlobal = false;
					var descripcionError = "";
					var result = resultadoTXT_IVATUR_items[i];
					var columns = result.getAllColumns();
					var refComprobante = result.getValue(columns[0]);
					var refArticulo = result.getValue(columns[1]);

					// Inicio --- Extraigo los datos del Ítem (Sección 7 del TXT)
					if (!isEmpty(result.getValue(columns[2]))) {
						objInfoIVATUR.datosItem.tipoRegistro = result.getValue(columns[2]);
						if (!isEmpty(result.getValue(columns[3]))) {
							objInfoIVATUR.datosItem.tipoItem = result.getValue(columns[3]);
							if (!isEmpty(result.getValue(columns[4]))) {
								objInfoIVATUR.datosItem.codigoItemTurismo = result.getValue(columns[4]);
								if (!isEmpty(result.getValue(columns[5]))) {
									objInfoIVATUR.datosItem.codigoInternoProdServ = result.getValue(columns[5]);
									if (!isEmpty(result.getValue(columns[6]))) {
										objInfoIVATUR.datosItem.cuitAlojamiento = result.getValue(columns[6]);
										if (!isEmpty(result.getValue(columns[7]))) {
											objInfoIVATUR.datosItem.fechaIngreso = result.getValue(columns[7]);
											if (!isEmpty(result.getValue(columns[8]))) {
												objInfoIVATUR.datosItem.unidad = result.getValue(columns[8]);
												if (!isEmpty(result.getValue(columns[9]))) {
													objInfoIVATUR.datosItem.tipoUnidad = result.getValue(columns[9]);
													if (!isEmpty(result.getValue(columns[10]))) {
														objInfoIVATUR.datosItem.cantidadPersonas = result.getValue(columns[10]);
														if (!isEmpty(result.getValue(columns[11]))) {
															objInfoIVATUR.datosItem.descripcionProdServ = result.getValue(columns[11]);
															if (!isEmpty(result.getValue(columns[12]))) {
																objInfoIVATUR.datosItem.cantidadNoches = result.getValue(columns[12]);
																if (!isEmpty(result.getValue(columns[13]))) {
																	objInfoIVATUR.datosItem.precioUnitario = result.getValue(columns[13]);
																	if (!isEmpty(result.getValue(columns[14]))) {
																		objInfoIVATUR.datosItem.codigoCondicionIVA = result.getValue(columns[14]);
																		if (!isEmpty(result.getValue(columns[15]))) {
																			objInfoIVATUR.datosItem.importeIVA = result.getValue(columns[15]);
																			if (!isEmpty(result.getValue(columns[16]))) {
																				objInfoIVATUR.datosItem.importeTotalItem = result.getValue(columns[16]);
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error obteniendo el Importe Total del Ítem, ID referencia Ítem: " + refArticulo;
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error obteniendo el Importe IVA del Ítem, ID referencia Ítem: " + refArticulo;
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error obteniendo el Código Condición IVA del Ítem, ID referencia Ítem: " + refArticulo;
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error obteniendo el Precio Unitario del Ítem facturado, ID referencia Ítem: " + refArticulo;
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error obteniendo la Cantidad de Noches que se están facturando, ID referencia Ítem: " + refArticulo;
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error obteniendo la Descripción del Producto/Servicio que se está facturando, ID referencia Ítem: " + refArticulo;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error obteniendo la Cantidad de Personas que están incluidas en la facturación, ID referencia Ítem: " + refArticulo;
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error obteniendo el Tipo de Unidad que se está facturando, ID referencia Ítem: " + refArticulo;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error obteniendo la Unidad (cantidad de unidades funcionales incluidas en la factura), ID referencia Ítem: " + refArticulo;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error obteniendo la Fecha de Ingreso del Turista en el servicio que se está facturando, ID referencia Ítem: " + refArticulo;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error obteniendo el CUIT Alojamiento del Servicio que se está facturando, ID referencia Ítem: " + refArticulo;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error obteniendo el Código Interno Producto/Servicio del Ítem, ID referencia Ítem: " + refArticulo;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error obteniendo el Código Ítem Turismo del Ítem, ID referencia Ítem: " + refArticulo;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Tipo de Ítem, ID referencia Ítem: " + refArticulo;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error obteniendo el Tipo de Registro de la Sección de Datos del Ítem, ID referencia Ítem: " + refArticulo;
					}
					// Fin --- Extraigo los datos del Ítem (Sección 7 del TXT)

					// Verifico si ocurrieron errores con la extracción de items
					if (errorGlobal == false) {
						if (objInfoIVATUR.datosItem != null) {

							// Inicio - Ingreso los datos del Comprobante Asociado (sección 07)
							contenidoTXT_datosItem += objInfoIVATUR.datosItem.tipoRegistro + objInfoIVATUR.datosItem.tipoItem + objInfoIVATUR.datosItem.codigoItemTurismo + objInfoIVATUR.datosItem.codigoInternoProdServ +
								objInfoIVATUR.datosItem.cuitAlojamiento + objInfoIVATUR.datosItem.fechaIngreso + objInfoIVATUR.datosItem.unidad + objInfoIVATUR.datosItem.tipoUnidad + objInfoIVATUR.datosItem.cantidadPersonas +
								objInfoIVATUR.datosItem.descripcionProdServ + objInfoIVATUR.datosItem.cantidadNoches + objInfoIVATUR.datosItem.precioUnitario + objInfoIVATUR.datosItem.codigoCondicionIVA +
								objInfoIVATUR.datosItem.importeIVA + objInfoIVATUR.datosItem.importeTotalItem + "\r\n";
							// Fin - Ingreso los datos del Comprobante Asociado (sección 07)

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información de los Items de la transacción";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}
					} else {
						// Error Obteniendo Informacion de Transacción
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}

			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
				errorDatosItems = true;

			// Verifico si existen transaccions encontradas para determinar sus formas de pago
			if (existenPercepciones) {
				// INICIO - OBTENGO LA INFORMACIÓN DE LOS DATOS DE FORMAS DE PAGO.
				var iCont_filter = 0;
				var filtroTXTIVATUR_formasPago = new Array();
				if (!isEmpty(arrayComprobantes) && arrayComprobantes.length > 0)
					filtroTXTIVATUR_formasPago[iCont_filter++] = new nlobjSearchFilter('custrecord_l54_form_pago_tran_id_trasacc', null, 'ANYOF', arrayComprobantes);

				var search = new nlapiLoadSearch('customrecord_l54_form_pago_tran', 'customsearch_l54_txt_ivatur_for_pag_tran');
				search.addFilters(filtroTXTIVATUR_formasPago);
				var searchResults = search.runSearch();
				var resultadoTXT_IVATUR_formas_pago = [];
				var resultIndex = 0;
				var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
				var resultado; // temporary variable used to store the result set
				do {
					resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

					if (!isEmpty(resultado) && resultado.length > 0) {
						if (resultIndex == 0)
							resultadoTXT_IVATUR_formas_pago = resultado; //Primera ve inicializa
						else
							resultadoTXT_IVATUR_formas_pago = resultadoTXT_IVATUR_formas_pago.concat(resultado);
					}

					resultIndex = resultIndex + resultStep;
					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);

				} while (!isEmpty(resultado) && resultado.length > 0)
				// FIN - OBTENGO LA INFORMACIÓN DE LOS DATOS DE FORMA DE PAGO.

				for (var i = 0; i < resultadoTXT_IVATUR_formas_pago.length; i++) {
					errorGlobal = false;
					var descripcionError = "";
					var result = resultadoTXT_IVATUR_formas_pago[i];
					var columns = result.getAllColumns();
					objInfoIVATUR.formasPago = {} // Obj para guardar datos de items
					var refComprobante = result.getValue(columns[1]);
					var refFormaPago = result.getValue(columns[0]);

					objInfoIVATUR.formasPago.tipoRegistro = '';
					if (!isEmpty(result.getValue(columns[2]))) {
						objInfoIVATUR.formasPago.tipoRegistro = result.getValue(columns[2]);
						if (!isEmpty(result.getValue(columns[3]))) {
							objInfoIVATUR.formasPago.tipoPago = result.getValue(columns[3]);
							if (!isEmpty(result.getValue(columns[4]))) {
								objInfoIVATUR.formasPago.swift = result.getValue(columns[4]);
								if (!isEmpty(result.getValue(columns[5]))) {
									objInfoIVATUR.formasPago.tipoCuenta = result.getValue(columns[5]);
									if (!isEmpty(result.getValue(columns[6]))) {
										objInfoIVATUR.formasPago.nroTarjeta = result.getValue(columns[6]);
										if (!isEmpty(result.getValue(columns[7]))) {
											objInfoIVATUR.formasPago.nroCuenta = result.getValue(columns[7]);
											if (!isEmpty(result.getValue(columns[8]))) {
												objInfoIVATUR.formasPago.importe = result.getValue(columns[8]);
											} else {
												errorGlobal = true;
												descripcionError = "Error obteniendo el Importe de la forma de pago, ID registro forma pago: " + refFormaPago;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error obteniendo el Número de Cuenta de la forma de pago, ID registro forma pago: " + refFormaPago;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error obteniendo el Número de Tarjeta de la forma de pago, ID registro forma pago: " + refFormaPago;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error obteniendo el Tipo de Cuenta de la forma de pago, ID registro forma pago: " + refFormaPago;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error obteniendo el valor de Swift de la forma de pago, ID registro forma pago: " + refFormaPago;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error obteniendo el Tipo de Forma de pago con que se paga la transacción, ID registro forma pago: " + refFormaPago;
						}
					}

					// Verifico si ocurrieron errores con la extracción de items
					if (errorGlobal == false) {
						if (objInfoIVATUR.formasPago != null) {

							// Inicio - Ingreso los datos del Comprobante Asociado (sección 07)
							if (!isEmpty(objInfoIVATUR.formasPago.tipoRegistro)) {
								contenidoTXT_formasPago += objInfoIVATUR.formasPago.tipoRegistro + objInfoIVATUR.formasPago.tipoPago + objInfoIVATUR.formasPago.swift +
									objInfoIVATUR.formasPago.tipoCuenta + objInfoIVATUR.formasPago.nroTarjeta + objInfoIVATUR.formasPago.nroCuenta +
									objInfoIVATUR.formasPago.importe + "\r\n";
							}
							// Fin - Ingreso los datos del Comprobante Asociado (sección 07)

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información de las formas de pago de la transacción";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						// Error Obteniendo Informacion de Transacción
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT IVATUR - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}

			// Verifico si hubo errores en la sección anterior
			if (errorGeneral || errorGlobal)
				errorDatosFormasPago = true;

			// INICIO - Escribo en el contenido del TXT las diferentes secciones formateadas anteriormente.
			if (!errorDatosTransaccion && !errorDatosIVA && !errorDatosItems && !errorDatosFormasPago && !errorDatosTurista && existenPercepciones) {
				contenidoTXT += contenidoTXT_cabecera + contenidoTXT_datos_comprobante + contenidoTXT_subtotales_iva + contenidoTXT_datos_turista + contenidoTXT_datos_reintegro + contenidoTXT_datos_comp_asociado + contenidoTXT_datosItem + contenidoTXT_formasPago;
			}
			// FIN - Escribo en el contenido del TXT las diferentes secciones formateadas anteriormente.

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXT_IVATUR) && resultadoTXT_IVATUR.length == 0) {
						// No se Encontraron Transacciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT IVATUR Correcta - No se Encontraron Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Transacciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Obteniendo Transacciones IVATUR');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Transacciones IVATUR - Error : Error Obteniendo Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXT_IVATUR', 'Error Generando TXT IVATUR - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT IVATUR - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		objInfoIVATUR = grabarError(true, 'Error Generando TXT IVATUR', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		objInfoIVATUR = grabarError(false, 'Generación de TXT IVATUR Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT IVATUR Generado Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXT_IVATUR', 'Finalización - Generación TXT IVATUR');

	objInfoIVATUR.contenidoTXT = contenidoTXT;
	return objInfoIVATUR;
}


function generarTXTSifereRetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIFERE Retenciones - PM');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones SIFERE - PM";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionSIFERE_PM = new Object();
		retencionSIFERE_PM.retencion = new Object();
		retencionSIFERE_PM.sujeto = new Object();
		retencionSIFERE_PM.existenRetenciones = false;
		retencionSIFERE_PM.error = false;
		retencionSIFERE_PM.descripcionError = "";
		retencionSIFERE_PM.procesoEncolado = false;
		retencionSIFERE_PM.idLog = idRegistroLOG;
		retencionSIFERE_PM.retencion.importeRetencion = 0;
		retencionSIFERE_PM.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTretencionSIFERE_PM = new Array();
		//filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('trandate', 'custrecord_3k_cobranza_ret_payment_id', 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTretencionSIFERE_PM[iCont++] = new nlobjSearchFilter('subsidiary', 'custrecord_3k_cobranza_ret_payment_id', 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('customrecord_3k_cobranza_retenciones', 'customsearch_3k_ret_sifere_pago_multiple');
		search.addFilters(filtroTXTretencionSIFERE_PM);

		var searchResults = search.runSearch();

		var resultadoTXTretencionesSIFERE = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTretencionesSIFERE = resultado; //Primera ve inicializa
				else
					resultadoTXTretencionesSIFERE = resultadoTXTretencionesSIFERE.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXTSifereRetPagMult', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTretencionesSIFERE)) {
			nlapiLogExecution('DEBUG', 'generarTXTSifereRetPagMult', 'Cantidad retenciones:' + resultadoTXTretencionesSIFERE.length);
			//

			for (var i = 0; resultadoTXTretencionesSIFERE != null && i < resultadoTXTretencionesSIFERE.length; i++) {
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idretencionNetSuite = '';
				//var refComprobante = resultadoTXTretencionesSIFERE[i].getValue('internalid', null, 'group');
				var result = resultadoTXTretencionesSIFERE[i];
				var columns = result.getAllColumns();
				var refComprobante = result.getValue(columns[0]);

				if (!isEmpty(refComprobante)) {
					if (!isEmpty(result.getValue(columns[1]))) {
						retencionSIFERE_PM.retencion.codigoJurisdiccion = result.getValue(columns[1]);
						if (!isEmpty(result.getValue(columns[2]))) {
							retencionSIFERE_PM.retencion.cuitEmpresa = result.getValue(columns[2]);
							if (!isEmpty(result.getValue(columns[3]))) {
								retencionSIFERE_PM.retencion.fecharetencion = result.getValue(columns[3]);
								if (!isEmpty(result.getValue(columns[4]))) {
									retencionSIFERE_PM.retencion.nroSucursalRetencion = result.getValue(columns[4]);
									if (!isEmpty(result.getValue(columns[5]))) {
										retencionSIFERE_PM.retencion.nroComprobanteRetencion = result.getValue(columns[5]);
										if (!isEmpty(result.getValue(columns[6]))) {
											retencionSIFERE_PM.retencion.codigoComprobanteOrigen = result.getValue(columns[6]);
											if (!isEmpty(result.getValue(columns[7]))) {
												retencionSIFERE_PM.retencion.letraComprobanteOrigen = result.getValue(columns[7]);
												if (!isEmpty(result.getValue(columns[8]))) {
													retencionSIFERE_PM.retencion.numeroComprobanteOrigen = result.getValue(columns[8]);
													if (!isEmpty(result.getValue(columns[9]))) {
														retencionSIFERE_PM.retencion.importeRetencion = result.getValue(columns[9]);
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Importe de la Retención";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Número de Comprobante que Originó la Retención";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Letra del Comprobante que Originó la Retención";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Código de Comprobante que Originó la Retención";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Número del Comprobante de Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Numero de Sucursal del Comprobante de Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De la Retención";
							}
						} else {
							errorGlobal = true;
							descripcionError = "CUIT Invalido";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Jurisdiccion de la Retención";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante de Pago del Cliente";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIFERE_PM.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Retenciones Generado Correctamente";

						contenidoTXT += retencionSIFERE_PM.retencion.codigoJurisdiccion + retencionSIFERE_PM.retencion.cuitEmpresa + retencionSIFERE_PM.retencion.fecharetencion +
							retencionSIFERE_PM.retencion.nroSucursalRetencion + retencionSIFERE_PM.retencion.nroComprobanteRetencion + retencionSIFERE_PM.retencion.codigoComprobanteOrigen + retencionSIFERE_PM.retencion.letraComprobanteOrigen +
							retencionSIFERE_PM.retencion.numeroComprobanteOrigen + retencionSIFERE_PM.retencion.importeRetencion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Retencion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones SIFERE - PM - Error : ' + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Generando TXT Retenciones SIFERE - PM - ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones SIFERE - PM - Error : ' + descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTretencionesSIFERE) && resultadoTXTretencionesSIFERE.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idretencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Obteniendo Retenciones SIFERE - PM');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones SIFERE - PM - Error : Error Obteniendo Retenciones', idretencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSifereRetPagMult', 'Error Generando TXT SIFERE - Retenciones - PM - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idretencionNetSuite, refComprobante, subsidiaria);
		//retencionSICORE.error = true;
	}

	if (errorGeneral == true) {
		retencionSIFERE_PM = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIFERE_PM = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Finalizacion - Generacion TXT SIFERE - Retenciones - PM');

	retencionSIFERE_PM.contenidoTXT = contenidoTXT;
	return retencionSIFERE_PM;
}

function generarTXTIVARetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTIVARetPagMult', 'Inicio - Generacion TXT IVA Retenciones Sufridas - PM');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionIVA_PM = new Object();
		retencionIVA_PM.retencion = new Object();
		retencionIVA_PM.sujeto = new Object();
		retencionIVA_PM.existenRetenciones = false;
		retencionIVA_PM.error = false;
		retencionIVA_PM.descripcionError = "";
		retencionIVA_PM.procesoEncolado = false;
		retencionIVA_PM.idLog = idRegistroLOG;
		retencionIVA_PM.retencion.importeRetencion = 0;
		retencionIVA_PM.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTretencionesIVA = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('custrecord_3k_cobranza_ret_fecha_em_pago', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTretencionesIVA[iCont++] = new nlobjSearchFilter('subsidiary', 'custrecord_3k_cobranza_ret_payment_id', 'is', subsidiaria);

		var search = new nlapiLoadSearch('customrecord_3k_cobranza_retenciones', 'customsearch_3k_ret_iva_sufridas_pag_mul');
		search.addFilters(filtroTXTretencionesIVA);

		var searchResults = search.runSearch();
		var resultadoTXTretencionesIVA = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTretencionesIVA = resultado; //Primera ve inicializa
				else
					resultadoTXTretencionesIVA = resultadoTXTretencionesIVA.concat(resultado);

				//nlapiLogExecution('DEBUG', 'generarTXT_IVA_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;
			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTretencionesIVA)) {
			nlapiLogExecution('DEBUG', 'generarTXTIVARetPagMult', 'Cantidad retenciones: ' + resultadoTXTretencionesIVA.length);

			for (var i = 0; resultadoTXTretencionesIVA != null && i < resultadoTXTretencionesIVA.length; i++) {
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionIVA_PM.retencion = new Object();
				retencionIVA_PM.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTretencionesIVA[i];
				var columns = result.getAllColumns();
				// Obtengo el Codigo de Comprobante
				idRetencionNetSuite = '';
				//refComprobante = result.getValue(columns[6]);
				refComprobante = result.getValue(columns[0]);
				nlapiLogExecution('DEBUG', 'generarTXTIVARetPagMult', 'refComprobante o transaction ID: ' + refComprobante);

				if (!isEmpty(result.getValue(columns[1]))) {
					retencionIVA_PM.retencion.codigoRegimen = result.getValue(columns[1]); // Obtengo el Código de Régimen
					if (!isEmpty(result.getValue(columns[2]))) {
						retencionIVA_PM.retencion.cuitProveedor = result.getValue(columns[2]); // Obtengo el CUIT del Proveedor
						if (!isEmpty(result.getValue(columns[3]))) {
							retencionIVA_PM.retencion.fechaRetencion = result.getValue(columns[3]); // Obtengo la fecha de retención
							if (!isEmpty(result.getValue(columns[4]))) {
								retencionIVA_PM.retencion.nroCertificado = result.getValue(columns[4]); // Obtengo el nro del certificado
								if (!isEmpty(result.getValue(columns[5]))) {
									retencionIVA_PM.retencion.montoRetencion = result.getValue(columns[5]); // Obtengo el monto de la retención
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Monto de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Nro del Certificado";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Fecha de la Retención";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT del Proveedor";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Código de Régimen";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionIVA_PM.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var error = false;
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";

						contenidoTXT += retencionIVA_PM.retencion.codigoRegimen + retencionIVA_PM.retencion.cuitProveedor + retencionIVA_PM.retencion.fechaRetencion +
							retencionIVA_PM.retencion.nroCertificado + retencionIVA_PM.retencion.montoRetencion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención - PM";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - PM - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTIVARetPagMult', 'Error Generando TXT Retenciones IVA - PM - ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - PM - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTretencionesIVA) && resultadoTXTretencionesIVA.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTIVARetPagMult', 'Error Obteniendo Retenciones IVA - PM');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTIVARetPagMult', 'Error Generando TXT IVA - Retenciones - PM - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT IVA Retenciones - PM - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionIVA_PM = grabarError(true, 'Error Generando TXT de Retenciones - PM', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionIVA_PM = grabarError(false, 'Generacion de TXT de Retenciones Correcta - PM', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones IVA - PM - Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTIVARetPagMult', 'Finalización - Generación TXT IVA - Retenciones Sufridas - PM');

	retencionIVA_PM.contenidoTXT = contenidoTXT;
	return retencionIVA_PM;
}

function generarTXTeSICOLRetCobranzasPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT eSICOL Retenciones Cobranzas - PM');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Retenciones Cobranzas eSICOL - PM";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";

	try {
		var retencioneseSICOLcobranzas = new Object();
		retencioneseSICOLcobranzas.retencion = new Object();
		retencioneseSICOLcobranzas.sujeto = new Object();
		retencioneseSICOLcobranzas.existenRetenciones = false;
		retencioneseSICOLcobranzas.error = false;
		retencioneseSICOLcobranzas.descripcionError = "";
		retencioneseSICOLcobranzas.procesoEncolado = false;
		retencioneseSICOLcobranzas.idLog = idRegistroLOG;
		retencioneseSICOLcobranzas.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES
		var iCont = 0;
		var filtroTXTRetencioneseSICOL = new Array();
		//filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('custrecord_3k_cobranza_ret_fecha_em_pago', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTRetencioneseSICOL[iCont++] = new nlobjSearchFilter('subsidiary', 'custrecord_3k_cobranza_ret_payment_id', 'is', subsidiaria);

		var search = new nlapiLoadSearch('customrecord_3k_cobranza_retenciones', 'customsearch_3k_ret_esicol_cobranzas_p_m');
		search.addFilters(filtroTXTRetencioneseSICOL);
		var searchResults = search.runSearch();

		var resultadoTXTRetencioneseSICOL = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTRetencioneseSICOL = resultado; //Primera ve inicializa
				else
					resultadoTXTRetencioneseSICOL = resultadoTXTRetencioneseSICOL.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES

		var informacionResultado = new Array();
		var indiceArray = 0;

		nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzasPagMult', 'INICIO Recorrer Retenciones Cobranzas - PM');

		for (var i = 0; resultadoTXTRetencioneseSICOL != null && i < resultadoTXTRetencioneseSICOL.length; i++) {
			var result = resultadoTXTRetencioneseSICOL[i];
			var columns = result.getAllColumns();
			informacionResultado[indiceArray] = new Object();
			informacionResultado[indiceArray].idInterno = result.getValue(columns[0]);
			refComprobante = informacionResultado[indiceArray].idInterno;
			informacionResultado[indiceArray].cuit = result.getValue(columns[1]);
			informacionResultado[indiceArray].fechaPercepcion = result.getValue(columns[2]);
			informacionResultado[indiceArray].numeroComprobante = result.getValue(columns[3]);
			informacionResultado[indiceArray].montoImpManual = result.getValue(columns[4]);
			informacionResultado[indiceArray].importePercepcion = result.getValue(columns[5])
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzasPagMult', 'INICIO Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {

				retencioneseSICOLcobranzas.retencion = new Object();
				retencioneseSICOLcobranzas.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";

				if (!isEmpty(informacionResultado[i].idInterno)) {
					refComprobante = informacionResultado[i].idInterno;
					retencioneseSICOLcobranzas.retencion.idInterno = informacionResultado[i].idInterno;
					if (!isEmpty(informacionResultado[i].cuit)) {
						retencioneseSICOLcobranzas.retencion.cuit = informacionResultado[i].cuit;
						if (!isEmpty(informacionResultado[i].numeroComprobante)) {
							retencioneseSICOLcobranzas.retencion.numeroComprobante = informacionResultado[i].numeroComprobante;
							if (!isEmpty(informacionResultado[i].fechaPercepcion)) {
								retencioneseSICOLcobranzas.retencion.fechaPercepcion = informacionResultado[i].fechaPercepcion;
								if (!isEmpty(informacionResultado[i].montoImpManual)) {
									retencioneseSICOLcobranzas.retencion.montoImpManual = informacionResultado[i].montoImpManual;
									if (!isEmpty(informacionResultado[i].importePercepcion)) {
										retencioneseSICOLcobranzas.retencion.importePercepcion = informacionResultado[i].importePercepcion;
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Importe de la Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Monto Base de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha de la Retención";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Numero de la transacción";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el CUIT de la transacción";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Originó la Retención";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencioneseSICOLcobranzas.retencion != null) {
						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
						contenidoTXT += retencioneseSICOLcobranzas.retencion.cuit + retencioneseSICOLcobranzas.retencion.fechaPercepcion +
							retencioneseSICOLcobranzas.retencion.numeroComprobante + retencioneseSICOLcobranzas.retencion.montoImpManual +
							retencioneseSICOLcobranzas.retencion.importePercepcion;
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : ' + descripcionError, null, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTeSICOLRetCobranzasPagMult', 'Error Generando TXT Retenciones Cobranzas eSICOL - PM');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT /Retenciones Cobranzas eSICOL - PM - Error : ' + descripcionError, null, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Cobranzas eSICOL - PM - Correcta - No se Encontraron Retenciones', null, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTeSICOLRetCobranzasPagMult', 'Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Retenciones Cobranzas eSICOL - PM - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencioneseSICOLcobranzas = grabarError(true, 'Error Generando TXT de Retenciones Cobranzas eSICOL - PM', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		retencioneseSICOLcobranzas = grabarError(false, 'Generacion de TXT de Retenciones Cobranzas eSICOL - PM - Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Cobranzas - PM - Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTeSICOLRetCobranzasPagMult', 'Finalizacion - Generacion TXT Retenciones Cobranzas eSICOL - PM');
	retencioneseSICOLcobranzas.contenidoTXT = contenidoTXT;
	return retencioneseSICOLcobranzas;
}

function generarTXTSiferePerFechaOriginal(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSiferePerFechaOriginal', 'Inicio - Generacion TXT SIFERE Percepciones Compras - Fecha Creacion');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones Compras Sifere - Fecha creacion";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var percepcionSIFERE = new Object();
		percepcionSIFERE.percepcion = new Object();
		percepcionSIFERE.sujeto = new Object();
		percepcionSIFERE.existenPercepciones = false;
		percepcionSIFERE.error = false;
		percepcionSIFERE.descripcionError = "";
		percepcionSIFERE.procesoEncolado = false;
		percepcionSIFERE.idLog = idRegistroLOG;
		percepcionSIFERE.percepcion.importePercepcion = 0;
		percepcionSIFERE.contenidoTXT = "";

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTpercepcionesSIFERE = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtroTXTpercepcionesSIFERE[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_sifere_fech_creacio');
		search.addFilters(filtroTXTpercepcionesSIFERE);

		var searchResults = search.runSearch();
		var resultadoTXTpercepcionesSIFERE_FechaOrigen = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTpercepcionesSIFERE_FechaOrigen = resultado; //Primera ve inicializa
				else
					resultadoTXTpercepcionesSIFERE_FechaOrigen = resultadoTXTpercepcionesSIFERE_FechaOrigen.concat(resultado);
			}
			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);
			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTpercepcionesSIFERE_FechaOrigen)) {
			nlapiLogExecution('DEBUG', 'generarTXTSiferePerFechaOriginal', 'Cantidad percepciones:' + resultadoTXTpercepcionesSIFERE_FechaOrigen.length);

			for (var i = 0; resultadoTXTpercepcionesSIFERE_FechaOrigen != null && i < resultadoTXTpercepcionesSIFERE_FechaOrigen.length; i++) {
				var columnasSavedSearch = null;
				columnasSavedSearch = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getAllColumns();
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idpercepcionNetSuite = '';
				var refComprobante = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('internalid', null, 'group');

				if (!isEmpty(refComprobante)) {
					//var codigoComprobante = obtenerCodigoComprobante(refComprobante, 'con', subsidiaria);
					var codigoComprobante = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('formulatext', null, 'max');
					if (!isEmpty(codigoComprobante)) {
						percepcionSIFERE.percepcion.codigoComprobante = padding_right(codigoComprobante, " ", 1);
						// Obtengo el Numero del Comprobante
						var numerador = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custbody_l54_numero_entero_prov', null, 'max');
						if (!isEmpty(numerador)) {
							var numeroComprobante = numerador.toString().substr(-8);
							// Tomo el Punto de Venta
							//var puntoVenta = arrayNumerador[1];
							var puntoVenta = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custbody_l54_punto_venta_prov', null, 'max');
							// Tomo la Latra del Comprobante
							//var letra = arrayNumerador[0];
							var letra = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custbody_l54_letra', null, 'max');

							if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta) && !isEmpty(letra)) {
								percepcionSIFERE.percepcion.numeroComprobante = padding_left(numeroComprobante, "0", 8);
								percepcionSIFERE.percepcion.puntoVenta = padding_left(puntoVenta, "0", 4);
								percepcionSIFERE.percepcion.letraDocumento = padding_right(letra, " ", 1);
								// Obtengo Tipo de Cambio de la Percepcion
								var tipoCambio = Math.abs(resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('exchangerate', null, 'max'));
								if (!isEmpty(tipoCambio)) {
									// Obtengo Fecha de Percepcion
									var fechapercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue(columnasSavedSearch[13]);
									nlapiLogExecution('DEBUG', 'generarTXTSiferePerFechaOriginal', 'Fecha de factura: ' + fechapercepcion);
									if (!isEmpty(fechapercepcion)) {
										// Formateo la Fecha
										var fechapercepcionDate = nlapiStringToDate(fechapercepcion, 'datetimetz');
										if (!isEmpty(fechapercepcionDate)) {
											// Obtengo las Componentes de la Fecha
											var diapercepcion = fechapercepcionDate.getDate();
											var mespercepcion = parseInt(fechapercepcionDate.getMonth(), 10) + parseInt(1, 10);
											var aniopercepcion = fechapercepcionDate.getFullYear();
											var fechapercepcionFinal = padding_left(diapercepcion, '0', 2) + "/" + padding_left(mespercepcion, '0', 2) + "/" + aniopercepcion;
											percepcionSIFERE.percepcion.fechapercepcion = fechapercepcionFinal;

											var jurisdiccionStr = '';
											var jurisdiccionID = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custcol_l54_jurisd_iibb_lineas', null, 'group');
											var codigoJurisdiccion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custrecord_l54_zona_impuestos_codigo', 'custcol_l54_jurisd_iibb_lineas', 'group');

											if (!isEmpty(codigoJurisdiccion)) {

												percepcionSIFERE.percepcion.codigoJurisdiccion = padding_left(codigoJurisdiccion, "0", 3);

												// Obtengo el CUIT del Agente de percepcion

												var cuitEmpresa = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('custbody_54_cuit_entity', null, 'MAX');

												if (!isEmpty(cuitEmpresa)) {

													// Obtengo el Tamaño del CUIT
													var cuitEmpresaString = cuitEmpresa.toString();
													cuitEmpresaString = cuitEmpresaString.replace(/-/g, '');
													cuitEmpresaString = cuitEmpresaString.toString().replace(/\./g, '');
													cuitEmpresaString = cuitEmpresaString.replace(/ /g, '&nbsp');
													cuitEmpresaString = cuitEmpresaString.toString();

													var tam = cuitEmpresaString.length;
													if (tam == 11) {

														// Agrego los -
														var primerosDigitos = cuitEmpresaString.substr(0, 2);
														var segundosDigitos = cuitEmpresaString.substr(2, 8);
														var tercerosDigitos = cuitEmpresaString.substr(10, 1);

														if (!isEmpty(primerosDigitos) && !isEmpty(segundosDigitos) && !isEmpty(tercerosDigitos)) {

															cuitEmpresa = primerosDigitos + "-" + segundosDigitos + "-" + tercerosDigitos;

															percepcionSIFERE.percepcion.cuitEmpresa = cuitEmpresa;

															// Obtengo el Importe de la Percepcion
															//var importePercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue('formulacurrency', null, 'sum');
															var importePercepcion = resultadoTXTpercepcionesSIFERE_FechaOrigen[i].getValue(columnasSavedSearch[14]);
															if (!isEmpty(importePercepcion) && parseFloat(importePercepcion, 10) != 0.00) {
																if (parseFloat(importePercepcion, 10) < 0.00) {
																	percepcionSIFERE.percepcion.importePercepcion = "-" + padding_left(parseFloat(Math.abs(parseFloat(importePercepcion, 10)) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 10);
																} else {
																	percepcionSIFERE.percepcion.importePercepcion = padding_left(parseFloat(parseFloat(importePercepcion, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 11);
																}

															} else {
																errorGlobal = true;
																descripcionError = "El Importe de Percepcion no debe ser 0.00";
															}

														} else {
															errorGlobal = true;
															descripcionError = "Error Aplicando Formato a CUIT de la Empresa";
														}
													} else {
														errorGlobal = true;
														descripcionError = "CUIT de la Empresa Invalido";
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error No se Encuentra Configurado el CUIT de la Empresa";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Codigo de Jurisdiccion No Configurado para la Jurisdiccion con ID : " + jurisdiccionID; // + " Nombre Jurisdiccion : " + jurisdiccionStr;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Formateando la Fecha de la Percepcion";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Fecha De la Percepcion";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Tipo de Cambio de la Percepcion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Letra / Punto de Venta / Numero de Comprobante";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Numero de Comprobante";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Percepcion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcionSIFERE.percepcion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Percepciones Generado Correctamente";

						contenidoTXT += percepcionSIFERE.percepcion.codigoJurisdiccion + percepcionSIFERE.percepcion.cuitEmpresa + percepcionSIFERE.percepcion.fechapercepcion +
							percepcionSIFERE.percepcion.puntoVenta + percepcionSIFERE.percepcion.numeroComprobante + percepcionSIFERE.percepcion.codigoComprobante + percepcionSIFERE.percepcion.letraDocumento +
							percepcionSIFERE.percepcion.importePercepcion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSiferePerFechaOriginal', 'Error Generando TXT Percepciones SIFERE - Fecha Creación: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTpercepcionesSIFERE_FechaOrigen) && resultadoTXTpercepcionesSIFERE_FechaOrigen.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones Correcta - No se Encontraron Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSiferePerFechaOriginal', 'Error Obteniendo Percepciones SIFERE - Fecha Creación');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', idpercepcionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSiferePerFechaOriginal', 'Error Generando TXT SIFERE - Fecha Creación - Percepciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIFERE - Fecha Creación - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idpercepcionNetSuite, refComprobante, subsidiaria);
		//percepcionSICORE.error = true;
	}

	if (errorGeneral == true) {
		percepcionSIFERE = grabarError(true, 'Error Generando TXT de Percepciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcionSIFERE = grabarError(false, 'Generacion de TXT de Percepciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSiferePerFechaOriginal', 'Fin - Generacion TXT SIFERE Percepciones Compras - Fecha Creacion');

	percepcionSIFERE.contenidoTXT = contenidoTXT;
	return percepcionSIFERE;
}

function generarTXTARCARet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTARCARet', 'Inicio - Generacion TXT ARCA Retenciones Sufridas');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones ARCA";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionARCA = new Object();
		retencionARCA.retencion = new Object();
		retencionARCA.sujeto = new Object();
		retencionARCA.existenRetenciones = false;
		retencionARCA.error = false;
		retencionARCA.descripcionError = "";
		retencionARCA.procesoEncolado = false;
		retencionARCA.idLog = idRegistroLOG;
		retencionARCA.retencion.importeRetencion = 0;
		retencionARCA.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		// Obtengo la Informacion usando un SavedSearch
		var iCont = 0;
		var filtroTXTretencionesARCA = new Array();
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta))
			filtroTXTretencionesARCA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);

		if (!isEmpty(subsidiaria))
			filtroTXTretencionesARCA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('transaction', 'customsearch_ret_iibb_catamarca');
		search.addFilters(filtroTXTretencionesARCA);

		var searchResults = search.runSearch();
		var resultadoTXTretencionesARCA = [];

		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {

			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTretencionesARCA = resultado; //Primera ve inicializa
				else
					resultadoTXTretencionesARCA = resultadoTXTretencionesARCA.concat(resultado);
			}

			resultIndex = resultIndex + resultStep;

			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(resultadoTXTretencionesARCA)) {
			nlapiLogExecution('DEBUG', 'generarTXTARCARet', 'Cantidad retenciones: ' + resultadoTXTretencionesARCA.length);

			for (var i = 0; resultadoTXTretencionesARCA.length > 0 && i < resultadoTXTretencionesARCA.length; i++) {
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionARCA.retencion = new Object();
				retencionARCA.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTretencionesARCA[i];
				var columns = result.getAllColumns();
				// Obtengo el Codigo de Comprobante
				idRetencionNetSuite = '';
				//refComprobante = result.getValue(columns[6]);
				refComprobante = result.getValue(columns[0]);
				nlapiLogExecution('DEBUG', 'generarTXTARCARet', 'refComprobante o transaction ID: ' + refComprobante);

				if (!isEmpty(result.getValue(columns[1]))) {
					retencionARCA.retencion.cuitProveedor = result.getValue(columns[1]); // Obtengo el CUI DEL CLIENTE
					if (!isEmpty(result.getValue(columns[2]))) {
						retencionARCA.retencion.numeroingresosBrutos = result.getValue(columns[2]); // Obtengo el numero de ingresos brutos
						if (!isEmpty(result.getValue(columns[3]))) {
							retencionARCA.retencion.fechaRetencion = result.getValue(columns[3]); // Obtengo la fecha de retención
							if (!isEmpty(result.getValue(columns[4]))) {
								retencionARCA.retencion.nroConstancia = result.getValue(columns[4]); // Obtengo el nro de constancia
								if (!isEmpty(result.getValue(columns[5]))) {
									retencionARCA.retencion.importeRetenido = result.getValue(columns[5]); // Obtengo el monto de la retención
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el importe Retenido";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Nro de Constancia";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Fecha de la Retención";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el número de ingresos brutos";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el CUIT del Agente de Retención";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionARCA.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var error = false;
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";

						contenidoTXT += retencionARCA.retencion.cuitProveedor + retencionARCA.retencion.numeroingresosBrutos +
							retencionARCA.retencion.fechaRetencion + retencionARCA.retencion.nroConstancia + retencionARCA.retencion.importeRetenido

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTARCARet', 'Error Generando TXT Retenciones ARCA ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(resultadoTXTretencionesARCA) && resultadoTXTretencionesARCA.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTARCARet', 'Error Obteniendo Retenciones ARCA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTARCARet', 'Error Generando TXT ARCA - Retenciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT IVA Retenciones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionARCA = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionARCA = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones IVA Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTARCARet', 'Finalización - Generación TXT IVA - Retenciones Sufridas');

	retencionARCA.contenidoTXT = contenidoTXT;
	return retencionARCA;
}


function scheduledGenerarTXT() {

	try {
		nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'INICIO - script programado')
		var errorGeneral = false;
		var enviarEmail = false;
		var mensajeOK = "La generacion del TXT";
		var mensajeOK1 = "Se realizo de Forma Correcta.";
		var mensajeError = "Error Generando TXT";
		//var mensajeRetNoEncontradas = "No se Encontraron Retenciones para el Periodo";
		//var mensajePerNoEncontradas = "No se Encontraron Percepciones para el Periodo";
		var mensajeRetNoEncontradas = "No se Encontraron Retenciones para las Fechas Indicadas";
		var mensajePerNoEncontradas = "No se Encontraron Percepciones para las Fechas Indicadas";
		var archivoTXT = null;
		var archivoSujetos = null;
		var archivoNotasCredito = null;
		var existenRetenciones = false;
		var archivoTXTRetenciones = null;
		var archivoTXTPercepciones = null;

		var fechaAct = new Date();

		var context = nlapiGetContext();
		//var periodo = context.getSetting('SCRIPT', 'custscript_l54_txt_periodo');
		var periodo = new Object();
		periodo.fDesde = '';
		periodo.fHasta = '';

		var fDesde = context.getSetting('SCRIPT', 'custscript_l54_txt_fdesde');
		var fHasta = context.getSetting('SCRIPT', 'custscript_l54_txt_fhasta');

		if (!isEmpty(fDesde)) {
			var fechaDesdeAux = nlapiStringToDate(fDesde);
			if (!isEmpty(fechaDesdeAux)) {
				periodo.fDesde = nlapiDateToString(fechaDesdeAux);
			}

			var fechaHastaAux = nlapiStringToDate(fHasta);
			if (!isEmpty(fechaHastaAux)) {
				periodo.fHasta = nlapiDateToString(fechaHastaAux);
			}
		}

		var regimen = context.getSetting('SCRIPT', 'custscript_l54_txt_regimen');
		var jurisdiccion = context.getSetting('SCRIPT', 'custscript_l54_txt_jurisdiccion');
		var email = context.getSetting('SCRIPT', 'custscript_l54_txt_userEmail');
		var tipoOperacion = context.getSetting('SCRIPT', 'custscript_l54_txt_operacion');
		var subsidiaria = context.getSetting('SCRIPT', 'custscript_l54_txt_subsidiaria');
		var ultimaRetencionProcesada = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_ret_proc');
		var ultimaRetencionEliminada = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_ret_elim');
		var ultimoSujetoEliminado = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_suj_elim');
		var ultimoEstado = context.getSetting('SCRIPT', 'custscript_l54_txt_ult_estado');
		var idLogErrores = context.getSetting('SCRIPT', 'custscript_l54_txt_log_error');

		var mensajeInfoFaltante = '';
		var oneWorld = false;
		if (esOneworld()) {
			oneWorld = true;
			mensajeInfoFaltante = ',Subsidiaria';
		}

		// Obtengo el Separador de Decimales y la URL de NetSuite
		var errorPanel = false;
		var filtroPanel = new Array();
		filtroPanel[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
		if (!isEmpty(subsidiaria)) {
			filtroPanel[1] = new nlobjSearchFilter('custrecord_l54_panel_conf_txt_ret_sub', null, 'is', subsidiaria);
		}
		var columnaPanel = new Array();
		columnaPanel[0] = new nlobjSearchColumn('internalid');
		columnaPanel[1] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_url');
		columnaPanel[2] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_s_dec');
		columnaPanel[3] = new nlobjSearchColumn('endDate', 'custrecord_l54_panel_conf_txt_ret_period');
		columnaPanel[4] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_autor');
		columnaPanel[5] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_id_log');
		columnaPanel[6] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_fol_tx');
		columnaPanel[7] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_act_ar');
		columnaPanel[8] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_act_ap');

		var resultadoPanel = new nlapiSearchRecord('customrecord_l54_panel_conf_txt_ret', null, filtroPanel, columnaPanel);
		var url = "";
		var urlLog = "";
		var separadorDecimal = "";
		//var fechaPeriodoNuevoProcesoRetencionesAux = "";
		var idAutorEmail = "";
		//var fechaPeriodoNuevoProcesoRetenciones = null;
		var idFolderTXT = "";
		var codigoActividadRetARBA = "";
		var codigoActividadPerARBA = "";

		if (!isEmpty(resultadoPanel) && resultadoPanel.length > 0) {
			url = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_url');
			urlLog = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_id_log');
			separadorDecimal = resultadoPanel[0].getText('custrecord_l54_panel_conf_txt_ret_s_dec');
			//fechaPeriodoNuevoProcesoRetencionesAux = resultadoPanel[0].getValue('endDate', 'custrecord_l54_panel_conf_txt_ret_period');
			idAutorEmail = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_autor');
			idFolderTXT = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_fol_tx');
			codigoActividadRetARBA = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_act_ar');
			codigoActividadPerARBA = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_act_ap');
			//if (!isEmpty(fechaPeriodoNuevoProcesoRetencionesAux))
			//fechaPeriodoNuevoProcesoRetenciones = nlapiStringToDate(fechaPeriodoNuevoProcesoRetencionesAux);
			//if (!isEmpty(url) && !isEmpty(separadorDecimal) && !isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null)
			if (!isEmpty(url) && !isEmpty(separadorDecimal) && !isEmpty(urlLog) && !isEmpty(idFolderTXT))
				errorPanel = false;
			else
				errorPanel = true;
		} else {
			errorPanel = true;
		}

		nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'Valor al leer el panel de configuración - errorPanel: ' + errorPanel);

		if (errorPanel == false) {
			var separadorMiles = '';

			//if (!isEmpty(periodo) && !isEmpty(regimen) && !isEmpty(email) && !isEmpty(tipoOperacion) && ((oneWorld == false) || (oneWorld == true && !isEmpty(subsidiaria)))) {
			if (!isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta) && !isEmpty(regimen) && !isEmpty(email) && !isEmpty(tipoOperacion) && ((oneWorld == false) || (oneWorld == true && !isEmpty(subsidiaria)))) {
				// Obtengo la Fecha de Finalizacion del Periodo y el Nombre del Periodo
				/*var filtroPeriodo = new Array();
				filtroPeriodo[0] = new nlobjSearchFilter('internalid', null, 'is', periodo);
				var columnaPeriodo = new Array();
				columnaPeriodo[0] = new nlobjSearchColumn('startDate');
				columnaPeriodo[1] = new nlobjSearchColumn('periodname');*/

				// Obtengo las Fechas Desde y Fecha Hasta
				/*var fechaDesdeDate = nlapiStringToDate(fDesde, 'datetimetz');
				var fechaHastaDate = nlapiStringToDate(fHasta, 'datetimetz');

				var periodo=new Object();
				periodo.fDesde=fechaDesdeDate;
				periodo.fHasta=fechaHastaDate;*/

				//var resultadoPeriodo = new nlapiSearchRecord('accountingperiod', null, filtroPeriodo, columnaPeriodo);

				//if (!isEmpty(resultadoPeriodo) && resultadoPeriodo.length > 0) {

				//var fechaPeriodoSeleccionadoAux = resultadoPeriodo[0].getValue('startDate');
				//var fechaPeriodoSeleccionado = nlapiStringToDate(fechaPeriodoSeleccionadoAux);
				//var nombrePeriodoSeleccionado = resultadoPeriodo[0].getValue('periodname');

				// Obtener CUIT de la Empresa
				var cuitEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
				if (!isEmpty(cuitEmpresa)) {
					// Formateo el Documento
					cuitEmpresa = cuitEmpresa.replace(/-/g, '');
					cuitEmpresa = cuitEmpresa.replace(/\./g, '');
					// Elimino Blancos
					var cuitEmpresaFinal = cuitEmpresa.replace(/ /g, '&nbsp');

					var fechaDesdeDate = nlapiStringToDate(periodo.fDesde);
					var fechaHastaDate = nlapiStringToDate(periodo.fHasta);

					var anioProceso = fechaDesdeDate.getFullYear();
					var mesProceso = pad(parseInt(fechaDesdeDate.getMonth(), 10) + parseInt(1, 10), 2);

					// Calculo la Quincena

					var diaDesde = fechaDesdeDate.getDate();
					var diaHasta = fechaHastaDate.getDate();

					var quincena = '';
					if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde >= 1 && diaDesde <= 15 && diaHasta >= 1 && diaHasta <= 15) {
						// Primer Quincena
						quincena = '1';
					} else {
						if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde > 15 && diaHasta > 15) {
							// Segunda Quincena
							quincena = '2';
						} else {
							if (!isEmpty(diaDesde) && !isEmpty(diaHasta) && diaDesde >= 1 && diaDesde <= 15 && diaHasta > 15) {
								// Mensual
								quincena = '0';
							}
						}
					}

					// Verifico el Tipo de Regimen
					var tipoRegimen = parseInt(regimen, 10);

					nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'tipoRegimen: ' + tipoRegimen);

					if ((tipoRegimen != 4 && tipoRegimen != 5) || ((tipoRegimen == 4 || tipoRegimen == 5) && (!isEmpty(quincena)))) {

						var fechaPeriodoSeleccionado = fechaDesdeDate;
						var nombrePeriodoSeleccionado = obtenerMesStr(fechaDesdeDate);

						// Verifico el Tipo de Regimen
						//var tipoRegimen = parseInt(regimen, 10);

						if ((tipoRegimen != 4 && tipoRegimen != 5) || ((tipoRegimen == 4 || tipoRegimen == 5) && (!isEmpty(codigoActividadRetARBA) && !isEmpty(codigoActividadPerARBA)))) {

							var descripcionMensaje = "";
							var proceso = "";
							switch (tipoRegimen) {
								case 1:
									// SICORE
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SICORE', 'Comienzo Proceso');
									proceso = "SICORE";
									// Genero TXT SICORE
									var errorGeneracionTXT = "";
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSicore(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSicoreAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										/*descripcionMensaje = "Error Generando TXT de Retenciones";
										if (isEmpty(errorGeneracionTXT))
										descripcionMensaje = errorGeneracionTXT.descripcionError;
										var descripcionMensajeFinal = descripcionMensaje;*/
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_SICORE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "Retenciones_SICORE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 2:
									// ARCIBA
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARCIBA', 'Comienzo Proceso');
									proceso = "ARCIBA";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTArcibaAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										/*descripcionMensaje = "Error Generando TXT de Retenciones";
										if (isEmpty(errorGeneracionTXT))
										descripcionMensaje = errorGeneracionTXT.descripcionError;
										var descripcionMensajeFinal = descripcionMensaje;*/
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_ARCIBA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 3:
									// SIFERE RETENCIONES
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SIFERE', 'Comienzo Proceso');
									proceso = "SIFERE RETENCIONES";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSifereRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSifereAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										/*descripcionMensaje = "Error Generando TXT de Retenciones";
										if (isEmpty(errorGeneracionTXT))
										descripcionMensaje = errorGeneracionTXT.descripcionError;
										var descripcionMensajeFinal = descripcionMensaje;*/
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 4: //ARBA-Percepciones
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones ARBA', 'Comienzo Proceso');
									proceso = "ARBA-Percepciones";
									// Genero TXT ARBA-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTArbaPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									//else
									//errorGeneracionTXT = generarTXTArbaPercAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											// Si es ARBA Percepcion se presenta Mensualemnte entonces la quincena siempre es 0
											//quincena='0';
											var nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadPerARBA + "-" + "Lote1" + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}

										}
									}
									enviarEmail = true;
									break;
								case 5: //ARBA-Retenciones
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARBA', 'Comienzo Proceso');
									proceso = "ARBA-Retenciones";
									// Genero TXT ARBA-Retenciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTArbaRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									//else
									//errorGeneracionTXT = generarTXTArbaRetAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadRetARBA + "-" + "Lote1" + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}

										}
									}
									enviarEmail = true;
									break;
								case 6: //SIPRIB Retenciones IIBB SANTA FE
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones - SIPRIB', 'Comienzo Proceso');
									proceso = "SIPRIB-Retenciones";
									// Genero TXT ARBA-Retenciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSiprib(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									//else
									//errorGeneracionTXT = generarTXTSipribAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_SIPRIB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}

										}
									}
									enviarEmail = true;
									break;
								case 7:
									// SIFERE PERCEPCIONES
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones SIFERE', 'Comienzo Proceso');
									proceso = "SIFERE PERCEPCIONES";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSiferePer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 8:
									// eARCIBA
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones eARCIBA', 'Comienzo Proceso');
									proceso = "eARCIBA";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;

									errorGeneracionTXT = generarTXTeArciba(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);

									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										/*descripcionMensaje = "Error Generando TXT de Retenciones";
										if (isEmpty(errorGeneracionTXT))
										descripcionMensaje = errorGeneracionTXT.descripcionError;
										var descripcionMensajeFinal = descripcionMensaje;*/
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_eARCIBA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 9:
									// IVA PERCEPCIONES SUFRIDAS
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones IVA Sufridas', 'Comienzo Proceso');
									proceso = "IVA PERCEPCIONES";
									// Genero TXT IVA PERCEPCIONES
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTIVAPer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_IVA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 10:
									// SIFERE PERCEPCIONES ADUANERAS
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones Aduaneras SIFERE', 'Comienzo Proceso');
									proceso = "SIFERE PERCEPCIONES ADUANERAS";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSiferePerAduaneras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_Aduaneras_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 11:
									// eARCIBA Notas de Credito
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones eARCIBA Notas de Credito', 'Comienzo Proceso');
									proceso = "eARCIBA Notas de Credito";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;

									errorGeneracionTXT = generarTXTeArcibaNC(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);

									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										/*descripcionMensaje = "Error Generando TXT de Retenciones";
										if (isEmpty(errorGeneracionTXT))
										descripcionMensaje = errorGeneracionTXT.descripcionError;
										var descripcionMensajeFinal = descripcionMensaje;*/
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_eARCIBA_Nota_de_Credito_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 12: //SIPRIB Percepciones IIBB SANTA FE
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones SANTA FE - SIPRIB', 'Comienzo Proceso');
									proceso = "SIPRIB-Percepciones";
									// Genero TXT SIPRIB-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSipribPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									//else
									//errorGeneracionTXT = generarTXTSipribAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Percepciones_SIPRIB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 13: //e-SICOL Retenciones
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones eSICOL', 'Inicio - Generacion TXT eSicol (Retenciones)');
									proceso = "eSICOL-Retenciones";
									// Genero TXT e-SICOL Retenciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTeSicolRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}

										}
									}
									enviarEmail = true;
									break;
								case 14:
									//e-SICOL Percepciones
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones eSICOL', 'Inicio - Generacion TXT eSicol (Percepciones)');
									proceso = "eSICOL-Percepciones";
									// Genero e-SICOL Percepciones
									var errorGeneracionTXT = null;

									errorGeneracionTXT = generarTXTeSicolPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);

									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {

										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 15:
									var jurisdiccionName = nlapiLookupField('customrecord_l54_zona_impuestos', jurisdiccion, 'name');
									// SIRCAR- IIBB
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SIRCAR IIBB', 'Comienzo Proceso');
									proceso = !isEmpty(jurisdiccionName) ? "SIRCAR-Retenciones de la jurisdicción " + jurisdiccionName : "SIRCAR-Retenciones";
									// Genero TXT SIRE GANANCIAS EXTERIOR
									var errorGeneracionTXT = "";
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion);
									/*else
										errorGeneracionTXT = generarTXTSircarRetencion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									// Verifico si Hubo Error en la Eliminacion

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreJurisdiccionArchivo = isEmpty(jurisdiccionName) ? "TODAS_JURISDICCIONES" : jurisdiccionName.replace(" ", "_");
												var nombreArchivo = "Retenciones_SIRCAR_" + nombreJurisdiccionArchivo + "_IIBB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "Retenciones_SIRCAR_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 16:
									var jurisdiccionName = nlapiLookupField('customrecord_l54_zona_impuestos', jurisdiccion, 'name');
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones SIRCAR', 'Comienzo Proceso');
									proceso = !isEmpty(jurisdiccionName) ? "SIRCAR-Percepciones de la jurisdicción " + jurisdiccionName : "SIRCAR-Percepciones";
									// Genero TXT SIRCAR-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, jurisdiccion);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreJurisdiccionArchivo = isEmpty(jurisdiccionName) ? "TODAS_JURISDICCIONES" : jurisdiccionName.replace(" ", "_");
											var nombreArchivo = "Pecepciones_SIRCAR_" + nombreJurisdiccionArchivo + "_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 17:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones Compras eSICOL', 'Comienzo Proceso');
									proceso = "eSICOL-Percepciones Compras";
									// Genero TXT eSICOL-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Pecepciones_compras_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 18:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones Cobranzas eSICOL', 'Comienzo Proceso');
									proceso = "eSICOL-Retenciones Cobranzas";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTeSICOLRetCobranzas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_cobranzas_eSICOL_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 19:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones IVA Sufridas', 'Comienzo Proceso');
									proceso = "IVA - Retenciones Sufridas";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTIVARet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_sufridas_IVA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 20:
									// SIRE - GANANCIAS EXTERIOR
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SIRE - EXTERIOR', 'Comienzo Proceso');
									proceso = "SIRE - Retenciones Ganancias en el Exterior";
									// Genero TXT SIRE GANANCIAS EXTERIOR
									var errorGeneracionTXT = "";
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSireGananciasExt(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									// Verifico si Hubo Error en la Eliminacion

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_SIRE_GANANCIAS_EXTERIOR_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "Retenciones_SIRE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 22:
									// SIRE SUSS
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SIRE - SUSS', 'Comienzo Proceso');
									proceso = "SIRE - Retenciones SUSS";
									// Genero TXT SIRE SUSS
									var errorGeneracionTXT = "";
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSireSUUS(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);*/
									// Verifico si Hubo Error en la Eliminacion

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_SIRE_SUSS_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "Retenciones_SIRE_Sujetos_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 23:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT SIPOT IIBB SALTA', 'Comienzo Proceso');
									proceso = "SIPOT IIBB SALTA";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSaltaPer(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "SIPOT_IIBB_SALTA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 24:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT IVATUR', 'Comienzo Proceso');
									proceso = "IVATUR";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXT_IVATUR(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
									errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
										var cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
										var periodoConsulta = nlapiStringToDate(periodo.fDesde);
										var mesConsultaAux = periodoConsulta.getMonth() + 1;
										var mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : '0' + mesConsultaAux.toString();
										var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											//var nombreArchivo = "F8089." + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											var nombreArchivo = "F8089." + cuitEmp + '.' + periodoName + "00.0000.txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 25:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones SIFERE Pagos Múltiples', 'Comienzo Proceso');
									proceso = "SIFERE - Retenciones - PM";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSifereRetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_SIFERE_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 26:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones IVA Sufridas Pagos Múltiples', 'Comienzo Proceso');
									proceso = "IVA - Retenciones Sufridas - PM";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTIVARetPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_sufridas_IVA_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 27:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones eSICOL - PM', 'Comienzo Proceso');
									proceso = "eSICOL - Retenciones Cobranzas - PM";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTeSICOLRetCobranzasPagMult(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Retenciones_cobranzas_eSICOL_PM_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 28:
									// SIFERE PERCEPCIONES
									nlapiLogExecution('DEBUG', 'generarTXTSiferePerFechaOriginal', 'Comienzo Proceso');
									proceso = "SIFERE PERCEPCIONES - Fecha Original";
									// Genero TXT ARCIBA
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTSiferePerFechaOriginal(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Percepciones_SIFERE_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									break;
								case 29:
									// TXT TUCUMÁN Percepciones
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT TUCUMÁN Percepciones', 'INICIO --- Proceso');
									proceso = "TUCUMÁN - Proceso Generación TXT Percepciones";
									// Genero TXT TUCUMÁN Percepciones
									var errorGeneracionTXT = "";
									var esPercepcion = true;
									var esRetencion = false;
									errorGeneracionTXT = generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
									nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'CASE 29 - generarTXT_TUCUMAN - resultado de proceso de generación de TXT TUCUMÁN Percepciones: ' + JSON.stringify(errorGeneracionTXT));

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "DATOS.TXT";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "RETPER.TXT";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTNotasCredito)) {
												var nombreArchivoNotasCredito = "NCFACT.TXT";
												archivoNotasCredito = nlapiCreateFile(nombreArchivoNotasCredito, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTNotasCredito);
												if (!isEmpty(archivoNotasCredito)) {
													archivoNotasCredito.setFolder(idFolderTXT);
													var idArchivoNotasCredito = nlapiSubmitFile(archivoNotasCredito);
												}
											}
											enviarEmail = true;
										}
									}
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT TUCUMÁN Percepciones', 'FIN --- Proceso');
									enviarEmail = true;
									break;
								case 30:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT SAREPE - Percepciones', 'Comienzo Proceso');
									proceso = "SAREPE - Percepciones";
									var errorGeneracionTXT = null;
									var esPercepcion = true;
									var esRetencion = false;
									errorGeneracionTXT = generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
										var cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
										var periodoConsulta = nlapiStringToDate(periodo.fDesde);
										var mesConsultaAux = periodoConsulta.getMonth() + 1;
										var mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : '0' + mesConsultaAux.toString();
										var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
										// Si no hubo error Genero el TXT de Percepciones SAREPE
										if (!isEmpty(errorGeneracionTXT.contenidoTXTPercepciones)) {
											var nombreArchivo = "pp." + cuitEmp + periodoName + ".txt";
											archivoTXTPercepciones = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTPercepciones);
											if (!isEmpty(archivoTXTPercepciones)) {
												archivoTXTPercepciones.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXTPercepciones);
											}
										}
									}
									enviarEmail = true;
									break;
								case 31:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT SAREPE - Retenciones', 'Comienzo Proceso');
									proceso = "SAREPE - Retenciones";
									var errorGeneracionTXT = null;
									var esPercepcion = false;
									var esRetencion = true;
									errorGeneracionTXT = generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria);
										var cuitEmp = cuitEmpresaAux.replace(/[^0-9]+/g, "");
										var periodoConsulta = nlapiStringToDate(periodo.fDesde);
										var mesConsultaAux = periodoConsulta.getMonth() + 1;
										var mesConsulta = (mesConsultaAux.toString().length > 1) ? mesConsultaAux.toString() : '0' + mesConsultaAux.toString();
										var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
										// Si no hubo error Genero el TXT de Retenciones SAREPE
										if (!isEmpty(errorGeneracionTXT.contenidoTXTRetenciones)) {
											var nombreArchivo = "rr." + cuitEmp + periodoName + ".txt";
											archivoTXTRetenciones = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTRetenciones);
											if (!isEmpty(archivoTXTRetenciones)) {
												archivoTXTRetenciones.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXTRetenciones);
											}
										}
									}
									enviarEmail = true;
									break;
								case 32:
									// TXT TUCUMÁN Retenciones
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT TUCUMÁN Retenciones', 'INICIO --- Proceso');
									proceso = "TUCUMÁN - Proceso Generación TXT Retenciones";
									// Genero TXT TUCUMÁN Retenciones
									var errorGeneracionTXT = "";
									var esPercepcion = false;
									var esRetencion = true;
									errorGeneracionTXT = generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion);
									nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'CASE 32 - generarTXT_TUCUMAN - resultado de proceso de generación de TXT TUCUMÁN Retenciones: ' + JSON.stringify(errorGeneracionTXT));

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "DATOS.TXT";
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}
											}
											if (!isEmpty(errorGeneracionTXT.contenidoTXTSujeto)) {
												var nombreArchivoSujeto = "RETPER.TXT";
												archivoSujetos = nlapiCreateFile(nombreArchivoSujeto, 'PLAINTEXT', errorGeneracionTXT.contenidoTXTSujeto);
												if (!isEmpty(archivoSujetos)) {
													archivoSujetos.setFolder(idFolderTXT);
													var idArchivoSujeto = nlapiSubmitFile(archivoSujetos);
												}
											}
											enviarEmail = true;
										}
									}
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT TUCUMÁN Retenciones', 'FIN --- Proceso');
									enviarEmail = true;
									break;
								case 33:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT SIRE Retenciones IVA F.2005', 'Case 33 - Comienzo Proceso');
									proceso = "SIRE - Retenciones IVA - F2005";
									var errorGeneracionTXT = null;
									errorGeneracionTXT = generarTXTSireRetIVA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "SIRE_RET_IVA_F2500_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT SIRE Retenciones IVA F.2005', 'Case 33 - Fin Proceso');
									break;


								case 34:
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones Sufridas ARCA', 'Comienzo Proceso');
									proceso = "Catamarca-Percepciones Sufridas";
									// Genero TXT Catamarca-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									//errorGeneracionTXT = generarTXTeSICOLPercCompras(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									errorGeneracionTXT = generarTXTCatamarcaPercSufridas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "Percepciones_compras_ARCA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;


								case 35:
									// ARCA RETENCIONES SUFRIDAS
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARCA Sufridas', 'Comienzo Proceso');
									proceso = "Catamarca-Rentenciones Sufridas";
									// Genero TXT ARCA RETENCIONES
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTARCARet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
										enviarEmail = true;
									} else {
										if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
											existenRetenciones = errorGeneracionTXT.existenRetenciones;
											// Si no hubo error Genero el TXT
											if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												var nombreArchivo = "Retenciones_ARCA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARCA Sufridas', 'Crear Archivo TXT');
												archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
												if (!isEmpty(archivoTXT)) {
													archivoTXT.setFolder(idFolderTXT);
													nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARCA Sufridas', 'Enviar Mail Archivo TXT');
													var idArchivo = nlapiSubmitFile(archivoTXT);
												}

											}
											enviarEmail = true;
										}
									}
									enviarEmail = true;
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones ARCA Sufridas', 'errorGeneracionTXT: ' + errorGeneracionTXT);
									break;

								case 36:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT Percepcion IVA ventas', 'Comienzo Proceso');
									proceso = "PERCEPCION IVA VTA";
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTIvaPerVentas(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									/*else
										errorGeneracionTXT = generarTXTSircarPercepcion(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);*/

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "PERCEPCION_IVA_VENTA_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									break;
								case 37:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones', 'Case 37 - Comienzo Proceso');
									proceso = "CATAMARCA - Retenciones";
									var errorGeneracionTXT = null;
									//var tipoFormato = '1';
									errorGeneracionTXT = generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "CATAMARCA_RET_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones', 'Case 37 - Fin Proceso');
									break;
								case 38:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones Web', 'Case 38 - Comienzo Proceso');
									proceso = "CATAMARCA - Retenciones Web";
									var errorGeneracionTXT = null;
									//var tipoFormato = '2';
									errorGeneracionTXT = generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = "CATAMARCA_RET_WEB_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT CATAMARCA Retenciones Web', 'Case 37 - Fin Proceso');
									break;
								case 39:
									//ARBA-Percepciones Actividad 7
									nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones ARBA Actividad 7', 'Comienzo Proceso');
									proceso = "ARBA-Percepciones";
									// Genero TXT ARBA-Percepciones
									var errorGeneracionTXT = null;
									//if (!isEmpty(fechaPeriodoNuevoProcesoRetenciones) && fechaPeriodoNuevoProcesoRetenciones != null && comparacionFechas(fechaPeriodoSeleccionado, fechaPeriodoNuevoProcesoRetenciones) == 1)
									errorGeneracionTXT = generarTXTArbaPercAct7(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
									//else
									//errorGeneracionTXT = generarTXTArbaPercAnterior(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles ,subsidiaria);
									// Verifico si Hubo Error en la Eliminacion
									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											// Si es ARBA Percepcion se presenta Mensualemnte entonces la quincena siempre es 0
											//quincena='0';
											var nombreArchivo = "AR-" + cuitEmpresaFinal + "-" + anioProceso + mesProceso + quincena + "-" + codigoActividadPerARBA + "-" + "Lote1" + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}

										}
									}
									enviarEmail = true;
									break;
								case 40:
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT Misiones Retenciones', 'Case 40 - Comienzo Proceso');
									proceso = "MISIONES - Retenciones";
									var errorGeneracionTXT = null;
									//var tipoFormato = '1';
									errorGeneracionTXT = generarTXTMisionesRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen);

									if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
										if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
											idLogErrores = errorGeneracionTXT.idLog;
										}
										errorGeneral = true;
									} else {
										existenRetenciones = errorGeneracionTXT.existenRetenciones;
										// Si no hubo error Genero el TXT
										if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
											var nombreArchivo = nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
											archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
											if (!isEmpty(archivoTXT)) {
												archivoTXT.setFolder(idFolderTXT);
												var idArchivo = nlapiSubmitFile(archivoTXT);
											}
										}
									}
									enviarEmail = true;
									nlapiLogExecution('DEBUG', 'Proceso Generación TXT Misiones Retenciones', 'Case 40 - Fin Proceso');
									break;
								case 41:
										nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones Misiones', 'Comienzo Proceso');
										proceso = "TXT Percepciones Misiones";
										var errorGeneracionTXT = null;
	
										errorGeneracionTXT = generarTxtPercepMisiones(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
	
										// Verifico si Hubo Error en la Eliminacion
										if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
											/*descripcionMensaje = "Error Generando TXT de Retenciones";
											if (isEmpty(errorGeneracionTXT))
											descripcionMensaje = errorGeneracionTXT.descripcionError;
											var descripcionMensajeFinal = descripcionMensaje;*/
											if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
												idLogErrores = errorGeneracionTXT.idLog;
											}
											errorGeneral = true;
											enviarEmail = true;
										} else {
											if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
												existenRetenciones = errorGeneracionTXT.existenRetenciones;
												// Si no hubo error Genero el TXT
												if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
													var nombreArchivo = "Percepciones_misiones_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
													archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
													if (!isEmpty(archivoTXT)) {
														archivoTXT.setFolder(idFolderTXT);
														var idArchivo = nlapiSubmitFile(archivoTXT);
													}
	
												}
												enviarEmail = true;
											}
										}
										enviarEmail = true;
										break;
									case 42:
											nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones RET. SIRTAC', 'Comienzo Proceso');
											proceso = "TXT RET. SIRTAC";
											var errorGeneracionTXT = null;
						  
											errorGeneracionTXT = generarTxtPercepRetSirtac(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
						  
											// Verifico si Hubo Error en la EliminaciÓn
											if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
											  /*descripcionMensaje = "Error Generando TXT de Retenciones";
											  if (isEmpty(errorGeneracionTXT))
											  descripcionMensaje = errorGeneracionTXT.descripcionError;
											  var descripcionMensajeFinal = descripcionMensaje;*/
											  if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
												idLogErrores = errorGeneracionTXT.idLog;
											  }
											  errorGeneral = true;
											  enviarEmail = true;
											} else {
											  if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
												existenRetenciones = errorGeneracionTXT.existenRetenciones;
												// Si no hubo error Genero el TXT
												if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
												  var nombreArchivo = "Percepciones_sirtac_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
												  archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
													if (!isEmpty(archivoTXT)) {
														archivoTXT.setFolder(idFolderTXT);
														var idArchivo = nlapiSubmitFile(archivoTXT);
													}
						  
												}
												enviarEmail = true;
											  }
											}
											enviarEmail = true;
											break;
									case 43:
											nlapiLogExecution('DEBUG', 'Proceso Generación TXT Percepciones SIRCREB', 'Comienzo Proceso');
											  proceso = "RET. SIRCREB";
											  var errorGeneracionTXT = null;
							
											  errorGeneracionTXT = generarTxtPercepSircreb(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
							
											  // Verifico si Hubo Error en la Eliminacion
											  if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
												/*descripcionMensaje = "Error Generando TXT de Retenciones";
												if (isEmpty(errorGeneracionTXT))
												descripcionMensaje = errorGeneracionTXT.descripcionError;
												var descripcionMensajeFinal = descripcionMensaje;*/
												if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
												  idLogErrores = errorGeneracionTXT.idLog;
												}
												errorGeneral = true;
												enviarEmail = true;
											  } else {
												if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
												  existenRetenciones = errorGeneracionTXT.existenRetenciones;
												  // Si no hubo error Genero el TXT
												  if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
													var nombreArchivo = "Percepciones_sircreb_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
													archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
													if (!isEmpty(archivoTXT)) {
														archivoTXT.setFolder(idFolderTXT);
														var idArchivo = nlapiSubmitFile(archivoTXT);
													}
							
												  }
												  enviarEmail = true;
												}
											  }
											  enviarEmail = true;
										break;
									case 44:
											nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retención Municipal SIPRET', 'Comienzo Proceso');
											proceso = "TXT Retención Municipal SIPRET";
											var errorGeneracionTXT = null;
			
											errorGeneracionTXT = generarTxtSipret(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria);
											nlapiLogExecution('DEBUG', 'errorGeneracionTXT' + JSON.stringify(errorGeneracionTXT));
											// Verifico si Hubo Error en la Eliminacion
											if (((isEmpty(errorGeneracionTXT) || (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == true)))) {
												/*descripcionMensaje = "Error Generando TXT de Retenciones";
												if (isEmpty(errorGeneracionTXT))
												descripcionMensaje = errorGeneracionTXT.descripcionError;
												var descripcionMensajeFinal = descripcionMensaje;*/
												if (!isEmpty(url) && !isEmpty(errorGeneracionTXT) && !isEmpty(errorGeneracionTXT.idLog) && !isEmpty(urlLog)) {
													idLogErrores = errorGeneracionTXT.idLog;
												}
												errorGeneral = true;
												enviarEmail = true;
											} else {
												if (!isEmpty(errorGeneracionTXT) && errorGeneracionTXT.error == false) {
													existenRetenciones = errorGeneracionTXT.existenRetenciones;
													// Si no hubo error Genero el TXT
													if (!isEmpty(errorGeneracionTXT.contenidoTXT)) {
														var nombreArchivo = "txt_ret_sipret_" + nombrePeriodoSeleccionado + "_" + fechaAct.toJSON() + ".txt";
														archivoTXT = nlapiCreateFile(nombreArchivo, 'PLAINTEXT', errorGeneracionTXT.contenidoTXT);
														if (!isEmpty(archivoTXT)) {
															archivoTXT.setFolder(idFolderTXT);
															var idArchivo = nlapiSubmitFile(archivoTXT);
														}
			
													}
													enviarEmail = true;
												}
											}
											enviarEmail = true;
											break;
							
								default:
									nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Tipo TXT a Generar Invalido');
									errorGeneral = true;
									enviarEmail = true;
									idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idLogErrores, 'Tipo TXT a Generar Invalido', null, null, subsidiaria);
							}
						} else {
							nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Falta Ingresar Codigos Actividad de Retencion/Percepcion ARBA en el Panel de Configuracion');
							errorGeneral = true;
							enviarEmail = true;
							idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Falta Ingresar Codigos Actividad de Retencion/Percepcion ARBA en el Panel de Configuracion', null, null, subsidiaria);
						}
					} else {
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Error Obteniendo la Quincena/Periodo de Ejecucion');
						errorGeneral = true;
						enviarEmail = true;
						idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Error Obteniendo la Quincena/Periodo de Ejecucion', null, null, subsidiaria);
					}
				} else {
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Error Obteniendo el CUIT de la Empresa');
					errorGeneral = true;
					enviarEmail = true;
					idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Error Obteniendo el CUIT de la Empresa', null, null, subsidiaria);
				}
				/*} else {
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Error Obteniendo Informacion del Periodo');
				errorGeneral = true;
				enviarEmail = true;
				idLogErrores=grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Error Obteniendo Informacion del Periodo', null, null, subsidiaria);
				}*/
			} else {
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Falta Informacion de Regimen,Perido,Email,Tipo Operacion' + mensajeInfoFaltante);
				errorGeneral = true;
				enviarEmail = true;
				idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Falta Informacion de Regimen,Perido,Email,Tipo Operacion' + mensajeInfoFaltante, null, null, subsidiaria);
			}
		} else {
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT - Falta Configurar Panel de TXT de Retenciones');
			errorGeneral = true;
			enviarEmail = true;
			idLogErrores = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, regimen, idLogErrores, 'Falta Configurar Panel de TXT de Retenciones', null, null, subsidiaria);
		}
		if (enviarEmail == true) {
			if (errorGeneral) {
				if (!isEmpty(proceso))
					mensajeError = mensajeError + ' de ' + proceso + ' ';
				if (!isEmpty(nombrePeriodoSeleccionado))
					mensajeError = mensajeError + ' para el Periodo ' + nombrePeriodoSeleccionado + ' ';
				if (!isEmpty(periodo) && !isEmpty(periodo.fDesde))
					mensajeError = mensajeError + ' Fecha Desde : ' + periodo.fDesde + ' ';
				if (!isEmpty(periodo) && !isEmpty(periodo.fHasta))
					mensajeError = mensajeError + ' Fecha Hasta : ' + periodo.fHasta + ' ';
				var descripcionMensajeFinal = mensajeError;
				if (!isEmpty(url) && !isEmpty(idLogErrores))
					descripcionMensajeFinal = '<html><head></head><body><br>' + mensajeError + '<br> Puede Observar el Detalle de Errores desde el Siguiente link <br> <a href="' + url + '/app/common/custom/custrecordentry.nl?rectype=' + urlLog + '&id=' + idLogErrores + '"> Informacion Proceso </a></body></html>';
				if (!isEmpty(email)) {
					if (!isEmpty(subsidiaria)) {
						var nameSubsidiary = nlapiLookupField('subsidiary', subsidiaria, 'name');
						var asunto = 'Generación TXT para la cuenta con el CUIT: ' + cuitEmpresa + ', y Subsidiaria: ' + nameSubsidiary;
					} else {
						var asunto = 'Generación TXT para la cuenta con el CUIT: ' + cuitEmpresa;
					}
					enviarEmailUsuarioLogueado(email, asunto, descripcionMensajeFinal, email, null, null, null, null, null);
				}
			} else {
				var mensajeAdicional = "";
				if (existenRetenciones == false) {
					if (tipoRegimen == 4 || tipoRegimen == 7 || tipoRegimen == 11 || tipoRegimen == 10 || tipoRegimen == 12 || tipoRegimen == 14 || tipoRegimen == 16 || tipoRegimen == 9 || tipoRegimen == 28 || tipoRegimen == 30 || tipoRegimen == 34) {
						mensajeAdicional = mensajePerNoEncontradas;
					} else {
						if (tipoRegimen == 24 || tipoRegimen == 29) {
							mensajeAdicional = 'No se encontraron transacciones para las fechas indicadas';
						} else {
							mensajeAdicional = mensajeRetNoEncontradas;
						}
					}
				}
				if (!isEmpty(proceso))
					mensajeOK = mensajeOK + ' de ' + proceso + ' ';
				if (!isEmpty(nombrePeriodoSeleccionado))
					mensajeOK = mensajeOK + ' para el Periodo ' + nombrePeriodoSeleccionado + ' ';
				if (!isEmpty(periodo) && !isEmpty(periodo.fDesde))
					mensajeOK = mensajeOK + ' Fecha Desde : ' + periodo.fDesde + ' ';
				if (!isEmpty(periodo) && !isEmpty(periodo.fHasta))
					mensajeOK = mensajeOK + ' Fecha Hasta : ' + periodo.fHasta + ' ';
				mensajeOK = mensajeOK + mensajeOK1 + " <br> " + mensajeAdicional;
				if (!isEmpty(email)) {
					if (!isEmpty(subsidiaria)) {
						var nameSubsidiary = nlapiLookupField('subsidiary', subsidiaria, 'name');
						var asunto = 'Generación TXT para la cuenta con el CUIT: ' + cuitEmpresa + ', y Subsidiaria: ' + nameSubsidiary;
					} else {
						var asunto = 'Generación TXT para la cuenta con el CUIT: ' + cuitEmpresa;
					}

					enviarEmailUsuarioLogueado(email, asunto, mensajeOK, email, archivoTXT, archivoSujetos, archivoNotasCredito, archivoTXTPercepciones, archivoTXTRetenciones);
				}

			}
		}
	} catch (error) {
		nlapiLogExecution('ERROR', 'scheduledGenerarTXT', 'Error NetSuite Excepción: ' + error.message)
	}
	nlapiLogExecution('DEBUG', 'scheduledGenerarTXT', 'FIN - script programado')
}

function checkGovernance(remainingUnitsLimit) {
	var context = nlapiGetContext();
	var remaining = context.getRemainingUsage();
	nlapiLogExecution("DEBUG", 'checkGovernance', "getRemainingUsage:" + remaining);

	if (remaining < remainingUnitsLimit) {
		var state = nlapiYieldScript();
		if (state.status == 'FAILURE') {
			nlapiLogExecution("ERROR", "Failed to yield script, exiting: Reason = " + state.reason + " / Size = " + state.size);
			throw "Failed to yield script";
		} else if (state.status == 'RESUME') {
			nlapiLogExecution("AUDIT", "Resuming script because of " + state.reason + ".  Size = " + state.size); // state.status will never be SUCCESS because a success would imply a yield has occurred.  The equivalent response would be yield
		}
	}
}

/* SUITELET */
function formGeneracionTXT(request, response) {

	if (request.getMethod() == 'GET') {
		var form = nlapiCreateForm("Panel de generación de TXT de Retenciones y Percepciones");

		form.setScript('customscript_l54_generar_txt');

		var selectRegimen = form.addField('custpage_field_tipo', 'select', 'Régimen', 'customrecord_l54_tipos_txt');
		selectRegimen.setMandatory(true);
		//var selectPeriodos = form.addField('custpage_field_periodo', 'select', 'Periodo', 'accountingperiod');
		//selectPeriodos.setMandatory(true);

		//Jurisdiccion
		var jurisdiccion = form.addField('custpage_field_jurisdiccion', 'select', 'Jurisdicción', 'customrecord_l54_zona_impuestos');
		//}


		var fechaDesde = form.addField('custpage_field_fdesde', 'date', 'Fecha Desde', 'Fecha Desde');
		fechaDesde.setMandatory(true);
		var fechaHasta = form.addField('custpage_field_fhasta', 'date', 'Fecha Hasta', 'Fecha Hasta');
		fechaHasta.setMandatory(true);

		//
		var oneWorld = false;
		if (esOneworld()) {
			oneWorld = true;
		}
		var campoSubsidiaria = null;
		if (oneWorld == true) {
			var campoSubsidiaria = form.addField('custpage_subsidiaria', 'select', 'Subsidiaria', 'subsidiary');
		} else {
			var campoSubsidiaria = form.addField('custpage_subsidiaria', 'text', 'Subsidiaria');
			campoSubsidiaria.setDefaultValue('');
			campoSubsidiaria.setDisplayType('hidden');
		}
		if (oneWorld == true) {
			campoSubsidiaria.setMandatory(true);
		}
		//Subsidiaria del Usuario por Defecto
		var context = nlapiGetContext();
		if (oneWorld == true) {
			var subsidiariaUsuario = context.getSubsidiary();
			if (!isEmpty(subsidiariaUsuario)) {
				campoSubsidiaria.setDefaultValue(subsidiariaUsuario);
			}
		}
		//
		var myInlineHtml = form.addField('custpage_field_texto', 'inlinehtml');
		myInlineHtml.setDefaultValue("<html><body><h2><u>Nota:</u> Desde este Panel es posible generar los archivos TXT para la Importacion de Retenciones y Percepciones. Al finalizar la generación del TXT, usted recibira un email informándole.</h2></body></html>");
		myInlineHtml.setBreakType("startcol");

		form.addSubmitButton('Generar TXT');
		response.writePage(form);
	} else {
		var form = nlapiCreateForm("Panel de generación de TXT de Retenciones y Percepciones");
		var subsidiaria = request.getParameter('custpage_subsidiaria');
		var errorPanel = false;
		var errorSubsidiaria = false;
		var url = "";
		var oneWorld = false;
		if (esOneworld()) {
			oneWorld = true;
		}
		var mensaje = "Se envió a procesar exitosamente. Cuando el proceso termine, se le comunicará por email.";
		if (isEmpty(subsidiaria) && oneWorld == true) {
			errorSubsidiaria = true;
			mensaje = "Debe Ingresar una Subsidiaria";
		}
		// Verifico si esta realizada la Configuracion del Panel de Control de TXT

		if (errorSubsidiaria == false) {
			var filtroPanel = new Array();
			filtroPanel[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
			if (!isEmpty(subsidiaria)) {
				filtroPanel[1] = new nlobjSearchFilter('custrecord_l54_panel_conf_txt_ret_sub', null, 'is', subsidiaria);
			}
			var columnaPanel = new Array();
			columnaPanel[0] = new nlobjSearchColumn('internalid');
			columnaPanel[1] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_url');
			columnaPanel[2] = new nlobjSearchColumn('custrecord_l54_panel_conf_txt_ret_id_log');

			var resultadoPanel = new nlapiSearchRecord('customrecord_l54_panel_conf_txt_ret', null, filtroPanel, columnaPanel);

			if (!isEmpty(resultadoPanel) && resultadoPanel.length > 0) {
				url = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_url');
				urlLog = resultadoPanel[0].getValue('custrecord_l54_panel_conf_txt_ret_id_log');
				if (!isEmpty(url) && !isEmpty(urlLog))
					errorPanel = false;
				else
					errorPanel = true;
			} else
				errorPanel = true;

			if (errorPanel == true) {
				mensaje = "No se Encuentra Configurado el Panel de Configuración de TXT. Por Favor Realice la Configuración.";
			}
		}
		//
		if (errorPanel == false) {
			var urlFinal = url;
			if (isEmpty(urlFinal))
				urlFinal = "https://system.na1.netsuite.com";

			//var periodoSeleccionado = request.getParameter('custpage_field_periodo');

			var fechaDesdeSeleccionada = request.getParameter('custpage_field_fdesde');
			var fechaHastaSeleccionada = request.getParameter('custpage_field_fhasta');

			var params = new Array();

			var regimenSeleccionado = request.getParameter('custpage_field_tipo');
			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones y Percepciones', 'Regimen Seleccionado : ' + regimenSeleccionado);

			var jurisdiccionSeleccionado = request.getParameter('custpage_field_jurisdiccion');
			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones y Percepciones', 'Jurisdiccion Seleccionado : ' + jurisdiccionSeleccionado);

			// Obtengo el EMail del Usuario que Ejecuto el Proceso

			var currentContext = nlapiGetContext();
			var email = nlapiGetUser();

			nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Email : ' + email);

			// Obtengo el Tipo de Operacion
			var tipoOperacion = "";
			var codigoRegimen = "";
			var errorProceso = false;
			mensaje = "Se envió a procesar exitosamente. Cuando el proceso termine, se le comunicará por email.";
			/*if (isEmpty(periodoSeleccionado)) {
			errorProceso = true;
			mensaje = "Falta Seleccionar un Periodo";
			}*/

			if (isEmpty(fechaDesdeSeleccionada)) {
				errorProceso = true;
				mensaje = "Falta Ingresar Fecha Desde";
			}

			if (isEmpty(fechaHastaSeleccionada)) {
				errorProceso = true;
				mensaje = "Falta Ingresar Fecha Hasta";
			}
		}
		if (errorProceso == false && errorPanel == false) {
			if (!isEmpty(regimenSeleccionado)) {
				var filtroRegimen = new Array();
				filtroRegimen[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
				filtroRegimen[1] = new nlobjSearchFilter('internalid', null, 'is', regimenSeleccionado);
				var columnaRegimen = new Array();
				columnaRegimen[0] = new nlobjSearchColumn('custrecord_l54_tipos_txt_codigo');
				columnaRegimen[1] = new nlobjSearchColumn('custrecord_l54_tipos_txt_tipo');
				columnaRegimen[2] = new nlobjSearchColumn('name');

				var resultadoRegimen = new nlapiSearchRecord('customrecord_l54_tipos_txt', null, filtroRegimen, columnaRegimen);
				if (!isEmpty(resultadoRegimen) && resultadoRegimen.length > 0) {
					codigoRegimen = resultadoRegimen[0].getValue('custrecord_l54_tipos_txt_codigo');
					tipoOperacion = resultadoRegimen[0].getValue('custrecord_l54_tipos_txt_tipo');
					var nombreRegimen = resultadoRegimen[0].getValue('name');
					if (isEmpty(nombreRegimen)) {
						nombreRegimen = "";
					}
					if (isEmpty(codigoRegimen) || isEmpty(tipoOperacion)) {
						errorProceso = true;
						mensaje = "Falta Configurar Información Adicional para el Regimen " + nombreRegimen;
					}
				}
			} else {
				errorProceso = true;
				mensaje = "Falta Seleccionar un Regimen";
			}
		}

		// Genero Mensaje de Respuesta
		var myInlineHtml = form.addField('custpage_field_texto', 'inlinehtml');
		myInlineHtml.setDefaultValue("<html><body><h2>" + mensaje + "</h2></body></html>");

		if (!isEmpty(urlFinal)) {
			form.addField("enterempslink", "url", "", null, "enteremps").setDisplayType("inline").setLinkText("Volver").setDefaultValue(urlFinal + nlapiResolveURL('SUITELET', 'customscript_l54_interfaz_gen_txt', 'customdeploy_l54_interfaz_gen_txt'));
		}

		if (errorProceso == false) {
			// Llamo a Script Programado para Generar el TXT

			//params['custscript_l54_txt_periodo'] = periodoSeleccionado;
			params['custscript_l54_txt_fdesde'] = fechaDesdeSeleccionada;
			params['custscript_l54_txt_fhasta'] = fechaHastaSeleccionada;

			params['custscript_l54_txt_regimen'] = codigoRegimen;
			params['custscript_l54_txt_userEmail'] = email;
			// Nuevo Configuro el Tipo de Operacion
			params['custscript_l54_txt_operacion'] = tipoOperacion;
			// Nuevo Configuro la Subsidiaria
			params['custscript_l54_txt_subsidiaria'] = subsidiaria;
			// Nuevo Configuro la Jurisdiccion
			params['custscript_l54_txt_jurisdiccion'] = jurisdiccionSeleccionado;
			nlapiScheduleScript('customscript_l54_generador_txt_retencion', null, params);

		}

		response.writePage(form);
	}
}

function getTipoTransId(tipoTransStr) {

	var filters = [new nlobjSearchFilter('name', null, 'is', tipoTransStr, null)];
	var columns = [new nlobjSearchColumn('internalId')];

	var results = new nlapiSearchRecord("customlist_l54_tipo_transaccion", null, filters, columns);

	if (results != null && results.length == 1)
		return results[0].getValue('internalId');
	else
		return null;
}
function getTipoTransIdNew() {
	var resultFinal = [];

	var results = nlapiSearchRecord('customlist_l54_tipo_transaccion', null, [], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("name")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				id: result.getValue('internalid'),
				name: result.getValue('name')
			  })
		});
	}
	
	nlapiLogExecution('DEBUG', 'generar getTipoTransIdNew', JSON.stringify(resultFinal))
	return resultFinal;
  }
  function getTipoOperaciones() {
	var resultFinal = [];

	var results = nlapiSearchRecord('customrecord_l54_tipo_operacion', null, [], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("custrecord_l54_tipo_op_codigo")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				id: result.getValue('internalid'),
				codigoOp: result.getValue('custrecord_l54_tipo_op_codigo')
			  })
		});
	}

	nlapiLogExecution('DEBUG', 'generar getTipoOperaciones', JSON.stringify(resultFinal))
	return resultFinal;
  }
  function getTipoDocumento() {
	var resultFinal = [];

	var results = nlapiSearchRecord('customrecord_l54_tipo_documento', null, [], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("custrecord_l54_tipo_doc_arc")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				id: result.getValue('internalid'),
				codigo: result.getValue('custrecord_l54_tipo_doc_arc')
			  })
		});
	}

	nlapiLogExecution('DEBUG', 'generar getTipoDocumento', JSON.stringify(resultFinal))
	return resultFinal;
  }
  function getNumeradores(subsidiaria) {
	var resultFinal = [];
	var results = nlapiSearchRecord('customrecord_l54_numerador_transaccion', null, [
		["isinactive","is","F"], 
		"AND", 
		["custrecord_l54_num_trans_subsidiaria","anyof",subsidiaria]
	], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("custrecord_l54_num_trans_tipo_comp"),
		new nlobjSearchColumn("custrecord_l54_tipo_trans_netsuite"),
		new nlobjSearchColumn("custrecord_l54_es_nd"),
		new nlobjSearchColumn("custrecord_l54_num_trans_es_cred_elect")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				col0: result.getValue('internalid'),
				col1: result.getValue('custrecord_l54_num_trans_tipo_comp'),
				col2: result.getValue('custrecord_l54_tipo_trans_netsuite'),
				col3: result.getValue('custrecord_l54_es_nd'),
				col4: result.getValue('custrecord_l54_num_trans_es_cred_elect')
			  })
		});
	}
  
	nlapiLogExecution('DEBUG', 'generar getNumeradores', JSON.stringify(resultFinal))
	return resultFinal;
  }
  function getRegimenPercepcion(subsidiaria, jurisdiccion) {
	var resultFinal = [];
	
	var results = nlapiSearchRecord('customrecord_l54_pv_iibb_config_detalle', null, [
		["custrecord_l54_pv_det_jurisdiccion","noneof",,"1","2","26"], 
		"AND", 
		["custrecord_l54_pv_det_jurisdiccion","anyof",jurisdiccion], 
		"AND", 
		["isinactive","is","F"], 
		"AND", 
		["custrecord_l54_pv_det_link_padre.custrecord_l54_pv_gral_subsidiaria","anyof",subsidiaria]
	], [
		new nlobjSearchColumn("custrecord_l54_pv_det_alic_perc"),
		new nlobjSearchColumn("custrecord_l54_pv_det_regimen")
	]);

	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				col0: result.getValue('custrecord_l54_pv_det_alic_perc'),
				col1: result.getValue('custrecord_l54_pv_det_regimen')
			  })
		});
	}

	nlapiLogExecution('DEBUG', 'generar getRegimenPercepcion', JSON.stringify(resultFinal))

	return resultFinal;
  }
  function getComprobantes() {
	var resultFinal = [];
	var results = nlapiSearchRecord('customrecord_l54_tipos_comprobantes', null, [], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("custrecord_l54_arc_tipo_comp_codigo"),
		new nlobjSearchColumn("custrecord_l54_arc_perc_tipo_comp_codigo"),
		new nlobjSearchColumn("custrecord_l54_arba_tipo_comp_codigo")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				col0: result.getValue('internalid'),
				col1: result.getValue('custrecord_l54_arc_tipo_comp_codigo'),
				col2: result.getValue('custrecord_l54_arc_perc_tipo_comp_codigo'),
				col3: result.getValue('custrecord_l54_arba_tipo_comp_codigo')
			  })
		});
	}
		
	nlapiLogExecution('DEBUG', 'generar getComprobantes', JSON.stringify(resultFinal))
	return resultFinal;
  }
  function getTipoContribuyenteIIBB() {
	var resultFinal = [];
	var results = nlapiSearchRecord('customrecord_l54_tipo_contribuyente_iibb', null, [], [
		new nlobjSearchColumn("internalid"),
		new nlobjSearchColumn("custrecord_l54_tipo_contr_iibb_cod_arc"),
		new nlobjSearchColumn("custrecord_l54_tipo_contr_iibb_cod_agip"),
		new nlobjSearchColumn("custrecord_l54_tipo_contr_iibb_cod_arba")
	]);
	
	if (results && results.length != 0){
		results.forEach(function(result){
			resultFinal.push({
				col0: result.getValue('internalid'),
				col1: result.getValue('custrecord_l54_tipo_contr_iibb_cod_arc'),
				col2: result.getValue('custrecord_l54_tipo_contr_iibb_cod_agip'),
				col3: result.getValue('custrecord_l54_tipo_contr_iibb_cod_arba')
			  })
		});
	}

	nlapiLogExecution('DEBUG', 'generar getTipoContribuyenteIIBB', JSON.stringify(resultFinal))
	return resultFinal;
  }
  

function tipoComprobanteRet(tipoTransNetSuite, esND, subsidiaria, tipo, esCreditoElectronico) {
	var columns = [new nlobjSearchColumn("custrecord_l54_num_trans_tipo_comp")];

	var filters = new Array();
	filters[0] = new nlobjSearchFilter('custrecord_l54_tipo_trans_netsuite', null, 'is', tipoTransNetSuite);
	filters[1] = new nlobjSearchFilter('isinactive', null, 'is', 'F');

	if (!isEmpty(esND))
		filters[2] = new nlobjSearchFilter('custrecord_l54_es_nd', null, 'is', esND);
	else
		filters[2] = new nlobjSearchFilter('custrecord_l54_es_nd', null, 'is', 'F');

	if (!isEmpty(esCreditoElectronico))
		filters[3] = new nlobjSearchFilter('custrecord_l54_num_trans_es_cred_elect', null, 'is', esCreditoElectronico);
	else
		filters[3] = new nlobjSearchFilter('custrecord_l54_num_trans_es_cred_elect', null, 'is', 'F');

	if (!isEmpty(subsidiaria))
		filters[4] = new nlobjSearchFilter('custrecord_l54_num_trans_subsidiaria', null, 'anyof', subsidiaria);

	var results = nlapiSearchRecord('customrecord_l54_numerador_transaccion', null, filters, columns);

	if (results != null && results.length > 0) {
		var idComprobante = results[0].getValue('custrecord_l54_num_trans_tipo_comp');
		if (!isEmpty(idComprobante) && !isEmpty(tipo)) {
			var columnaComprobante = [new nlobjSearchColumn('custrecord_l54_' + tipo + '_tipo_comp_codigo')];

			var filtroComprobante = new Array();
			filtroComprobante[0] = new nlobjSearchFilter('internalid', null, 'is', idComprobante);

			var resultadoComprobante = nlapiSearchRecord('customrecord_l54_tipos_comprobantes', null, filtroComprobante, columnaComprobante);

			if (resultadoComprobante != null && resultadoComprobante.length > 0) {
				return resultadoComprobante[0].getValue('custrecord_l54_' + tipo + '_tipo_comp_codigo');
			}
		}
	}

	return null;
}

function obtenerInfoImpuesto(idImpuesto) {
	var respuesta = new Object();
	respuesta.codigoNorma = '';
	respuesta.porcentaje = '';
	if (!isEmpty(idImpuesto)) {
		var filtroImpuesto = new nlobjSearchFilter('internalid', null, 'is', idImpuesto);

		var columnaImpuesto = new Array();
		columnaImpuesto[0] = new nlobjSearchColumn('custrecord_l54_cod_norma');
		columnaImpuesto[1] = new nlobjSearchColumn('rate');

		var resultadoImpuesto = new nlapiSearchRecord('salestaxitem', null, filtroImpuesto, columnaImpuesto);

		if (!isEmpty(resultadoImpuesto) && resultadoImpuesto.length > 0) {

			respuesta.codigoNorma = resultadoImpuesto[0].getValue('custrecord_l54_cod_norma');
			respuesta.porcentaje = resultadoImpuesto[0].getValue('rate');

		}
	}

	return respuesta;
}

function getPagos (arrPagos){
	var arrFilter = [];
	var resultFinal = [];
	if (!isEmpty(arrPagos))
		arrFilter[0] = new nlobjSearchFilter('internalid', null, 'anyof', arrPagos);

	var search = new nlapiLoadSearch('transaction', 'customsearch_l54_imp_pagos_prov_gen_txt');
	search.addFilters(arrFilter);
	var searchResults = search.runSearch();

	var resultadoTXT = [];

	// resultIndex points to record starting current "resultado" in the entire results array
	var resultIndex = 0;
	var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
	var resultado; // temporary variable used to store the result set
	do {
		// fetch one result set
		resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

		if (!isEmpty(resultado) && resultado.length > 0) {
			if (resultIndex == 0)
				resultadoTXT = resultado; //Primera ve inicializa
			else
				resultadoTXT = resultadoTXT.concat(resultado);

		}

		// increase pointer
		resultIndex = resultIndex + resultStep;

		checkGovernance(1000);

	} while (!isEmpty(resultado) && resultado.length > 0)

	if (resultadoTXT && resultadoTXT.length != 0){
		resultadoTXT.forEach(function(result){
			var columns = result.getAllColumns();
			resultFinal.push({
				col0: result.getValue(columns[0]),
				col1: result.getValue(columns[1]),
				col2: result.getValue(columns[2]),
				col3: result.getValue(columns[3]),
				col4: result.getValue(columns[4]),
				col5: result.getValue(columns[5]),
				col6: result.getValue(columns[6]),
				col7: result.getValue(columns[7]),
				col8: result.getValue(columns[8])   
			})
		});
	}

	nlapiLogExecution('DEBUG', 'generar getPagos', JSON.stringify(resultFinal))
	return resultFinal;
  }

  function getPercepciones (arrTransacciones){
	var arrFilter = [];
	var resultFinal = [];
	if (!isEmpty(arrTransacciones))
		arrFilter[0] = new nlobjSearchFilter('internalid', null, 'anyof', arrTransacciones);

	var search = new nlapiLoadSearch('transaction', 'customsearch_l54_imp_iva_transaccion');
	search.addFilters(arrFilter);

	var searchResults = search.runSearch();

	var resultadoTXT = [];

	// resultIndex points to record starting current "resultado" in the entire results array
	var resultIndex = 0;
	var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
	var resultado; // temporary variable used to store the result set
	do {
		// fetch one result set
		resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

		if (!isEmpty(resultado) && resultado.length > 0) {
			if (resultIndex == 0)
				resultadoTXT = resultado; //Primera ve inicializa
			else
				resultadoTXT = resultadoTXT.concat(resultado);

		}

		// increase pointer
		resultIndex = resultIndex + resultStep;

		checkGovernance(1000);

	} while (!isEmpty(resultado) && resultado.length > 0)

	if (resultadoTXT && resultadoTXT.length != 0){
		resultadoTXT.forEach(function(result){
			var columns = result.getAllColumns();
			resultFinal.push({
				col0: result.getValue(columns[0]),
				col1: result.getValue(columns[1])
				})
		});
	}

	nlapiLogExecution('DEBUG', 'generar getPercepciones', JSON.stringify(resultFinal))
	return resultFinal;
  }

function obtenerCodigoComprobante(refComprobante, tipo, subsidiaria) {
	var codigoComprobante = null;
	var filtroComprobante = new Array();
	filtroComprobante[0] = new nlobjSearchFilter('internalid', null, 'is', refComprobante);

	var columnaComprobante = new Array();
	columnaComprobante[0] = new nlobjSearchColumn('recordtype');
	columnaComprobante[1] = new nlobjSearchColumn('custbody_l54_nd');
	columnaComprobante[2] = new nlobjSearchColumn('custbody_l54_es_credito_electronico');
	//columnaComprobante[2] = new nlobjSearchColumn('subsidiary');

	var resultadoComprobante = new nlapiSearchRecord('transaction', null, filtroComprobante, columnaComprobante);

	if (!isEmpty(resultadoComprobante) && resultadoComprobante.length > 0) {

		var tipoComprobante = resultadoComprobante[0].getValue('recordtype');
		//var subsidiaria = null;
		var esND = 'F';
		var esCreditoElectronico = 'F';
		/*if (esOneworld()) {
		subsidiaria = resultadoComprobante[0].getValue('subsidiary');
		if (isEmpty(subsidiaria))
		subsidiaria = null;
		}*/
		var notaDebito = resultadoComprobante[0].getValue('custbody_l54_nd');
		var creditoElectronico = resultadoComprobante[0].getValue('custbody_l54_es_credito_electronico');

		if (!isEmpty(notaDebito))
			esND = notaDebito;

		if (!isEmpty(creditoElectronico))
			esCreditoElectronico = creditoElectronico;

		if (!isEmpty(tipoComprobante)) {
			var idTipoComprobante = getTipoTransId(tipoComprobante);
			if (!isEmpty(idTipoComprobante)) {
				codigoComprobante = tipoComprobanteRet(idTipoComprobante, esND, subsidiaria, tipo, esCreditoElectronico);
			}
		}
	}
	return codigoComprobante;
}

function grabarError(error, descripcionError, existenRetenciones, procesoEncolado, idRegistroLOG) {
	var objetoError = new Object();
	objetoError.error = error;
	objetoError.descripcionError = descripcionError;
	objetoError.existenRetenciones = existenRetenciones;
	objetoError.procesoEncolado = procesoEncolado;
	objetoError.idLog = idRegistroLOG;
	return objetoError;
}

function grabarLogError(estado, periodo, tipoOperacion, tipoRegimen, idLogErrores, detalleError, refRetencion, refPago, subsidiaria) {

	var idInternoLog = idLogErrores;
	var idRL = null;
	var idInternoEstadoLog = null;
	var error = false;
	if (isEmpty(idInternoLog)) {
		// Genero la Cabecera del Log
		// Buscar ID Externo Estado LOG
		var filtroEstadoLog = new nlobjSearchFilter('externalid', null, 'is', estado);
		var columnaEstadoLog = new nlobjSearchColumn('internalid');

		var resultadoEstadoLog = new nlapiSearchRecord('customrecord_l54_estado_proc_txt_ret', null, filtroEstadoLog, columnaEstadoLog);

		if (!isEmpty(resultadoEstadoLog) && resultadoEstadoLog.length > 0)
			idInternoEstadoLog = resultadoEstadoLog[0].getValue('internalid');

		if (!isEmpty(idInternoEstadoLog)) {

			var recordLog = nlapiCreateRecord('customrecord_l54_log_gen_txt_ret');
			recordLog.setFieldValue('custrecord_l54_log_gen_txt_estado', idInternoEstadoLog);
			// Genero la Fecha
			// Grabo la fecha de finalización
			var dt = new Date();
			var dtstring = pad(dt.getDate(), 2)
				+ '/' + pad(dt.getMonth() + 1, 2)
				+ '/' + dt.getFullYear()
				+ ' ' + pad(dt.getHours() + 4, 2)
				+ ':' + pad(dt.getMinutes(), 2)
				+ ':' + pad(dt.getSeconds(), 2);

			recordLog.setFieldValue('custrecord_l54_log_gen_txt_fecha', dtstring);
			//recordLog.setFieldValue('custrecord_l54_log_gen_txt_periodo', periodo);
			recordLog.setFieldValue('custrecord_l54_log_gen_txt_periodo', '');
			if (!isEmpty(periodo)) {
				if (!isEmpty(periodo.fDesde)) {
					recordLog.setFieldValue('custrecord_l54_log_gen_txt_fdesde', periodo.fDesde);
				}

				if (!isEmpty(periodo.fHasta)) {
					recordLog.setFieldValue('custrecord_l54_log_gen_txt_fhasta', periodo.fHasta);
				}
			}
			recordLog.setFieldValue('custrecord_l54_log_gen_txt_operacion', tipoOperacion);

			var idInternoRegimen = "";
			tipoRegimen = tipoRegimen.toString();
			var filtroRegimen = new nlobjSearchFilter('custrecord_l54_tipos_txt_codigo', null, 'is', tipoRegimen);
			var columnaRegimen = new nlobjSearchColumn('internalid');

			var resultadoRegimen = new nlapiSearchRecord('customrecord_l54_tipos_txt', null, filtroRegimen, columnaRegimen);

			if (!isEmpty(resultadoRegimen) && resultadoRegimen.length > 0) {
				idInternoRegimen = resultadoRegimen[0].getValue('internalid');
			}

			if (!isEmpty(idInternoRegimen)) {
				recordLog.setFieldValue('custrecord_l54_log_gen_txt_regimen', idInternoRegimen);
			} else {
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Obteniendo El ID Interno del Codigo de Regimen : ' + tipoRegimen);
			}

			if (!isEmpty(subsidiaria)) {
				recordLog.setFieldValue('custrecord_l54_log_gen_txt_sub', subsidiaria);
			}

			error = false;
			try {
				idInternoLog = nlapiSubmitRecord(recordLog);
			} catch (e) {
				nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Log de TXT Retenciones - NetSuite error: ' + e.message);
				error = true;
			}
		} else {
			error = true;
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Obteniendo Estado de LOG');
		}
	}
	if (!isEmpty(idInternoLog)) {
		// Genero el Detalle de Log
		if (error == false) {
			if (Array.isArray(detalleError)) {
				for (var i = 0; i < detalleError.length; i++) {
					// Grabo el Detalle
					var recordDetalleLog = nlapiCreateRecord('customrecord_l54_det_log_gen_txt_ret');
					recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_log', idInternoLog);
					recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_error', detalleError[i]);
					if (!isEmpty(refRetencion))
						recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_ret', refRetencion);
					if (!isEmpty(refPago))
						recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_pago', refPago);
					try {
						var idRDL = nlapiSubmitRecord(recordDetalleLog);
					} catch (e) {
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: ' + e.message);
					}
				}
			} else {
				// Grabo el Detalle
				var recordDetalleLog = nlapiCreateRecord('customrecord_l54_det_log_gen_txt_ret');
				recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_log', idInternoLog);
				recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_error', detalleError);
				if (!isEmpty(refRetencion))
					recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_ret', refRetencion);
				if (!isEmpty(refPago))
					recordDetalleLog.setFieldValue('custrecord_l54_det_log_gen_txt_pago', refPago);
				try {
					var idRDL = nlapiSubmitRecord(recordDetalleLog);
				} catch (e) {
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT Retenciones', 'Error Grabando Detalle de LOG de TXT Retenciones - NetSuite error: ' + e.message);
				}
			}
		}
	}
	return idInternoLog
}

/*comparacionFechas
// Compare two dates (could be of any type supported by the convert
// function above) and returns:
//  -1 : if a < b
//   0 : if a = b
//   1 : if a > b
// NaN : if a or b is an illegal date
// NOTE: The code inside isFinite does an assignment (=).

 */

/*function comparacionFechas(fechaInicio, fechaFin) {
return ((fechaInicio > fechaFin) - (fechaInicio < fechaFin));
}*/

function comparacionFechas(fechaInicio, fechaFin) {
	var fechaInicioNew = (fechaInicio.getFullYear() + pad(parseInt(fechaInicio.getMonth(), 10) + parseInt(1, 10), 2) + pad(parseInt(fechaInicio.getDate(), 10) + parseInt(1, 10), 2));
	var fechaHastaNew = (fechaFin.getFullYear() + pad(parseInt(fechaFin.getMonth(), 10) + parseInt(1, 10), 2) + pad(parseInt(fechaFin.getDate(), 10) + parseInt(1, 10), 2));
	return ((fechaInicioNew > fechaHastaNew) - (fechaInicioNew < fechaHastaNew));
}

// Método que me devuelve El CUIT de la Empresa
function obtenerInformacionEmpresa(campo, subsidiaria) {
	var infoCampo = '';
	var filtros = new Array();
	filtros[0] = new nlobjSearchFilter('isinactive', null, 'is', 'F');
	if (!isEmpty(subsidiaria)) {
		filtros[1] = new nlobjSearchFilter('custrecord_l54_subsidiaria', null, 'is', subsidiaria);
	}
	var columns = [new nlobjSearchColumn(campo)];

	var searchresults = new nlapiSearchRecord("customrecord_l54_datos_impositivos_emp", null, filtros, columns);

	if (searchresults != null && searchresults.length > 0) {
		infoCampo = searchresults[0].getValue(campo);
	}
	return infoCampo;
}

function obtenerMesStr(fechaDesdeDate) {
	var nombreMes = '';
	if (!isEmpty(fechaDesdeDate)) {
		var mes = parseInt(fechaDesdeDate.getMonth(), 10);
		var anio = fechaDesdeDate.getFullYear();
		var nombresMeses = [
			"Ene", "Feb", "Mar",
			"Abr", "May", "Jun",
			"Jul", "Ago", "Sep",
			"Oct", "Nov", "Dic"
		];
		nombreMes = nombresMeses[mes] + "_" + anio;
	}
	return nombreMes;
}

function generarTXTeSicolRet(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'Inicio Proceso');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var retencionESICOL = new Object();
		retencionESICOL.retencion = new Object();
		retencionESICOL.sujeto = new Object();
		retencionESICOL.existenRetenciones = false;
		retencionESICOL.error = false;
		retencionESICOL.descripcionError = "";
		retencionESICOL.procesoEncolado = false;
		retencionESICOL.idLog = idRegistroLOG;
		retencionESICOL.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_esicol');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10148. resultIndex: ' + resultIndex + '. resultado.length: ' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'Cantidad Retenciones:' + completeResultSet.length);

			var errorSubsidiaria = false;
			var arraySubsidiaria = new Array();

			for (i = 0; i < completeResultSet.length && errorSubsidiaria == false; i++) {
				var numeroSubsidiaria = -1;
				retencionESICOL.retencion = new Object();
				retencionESICOL.sujeto = new Object();
				var resultadoTXTRetencionesESICOL = completeResultSet[i];
				var columns = resultadoTXTRetencionesESICOL.getAllColumns();

				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = resultadoTXTRetencionesESICOL.getValue('internalid');
				var refComprobante = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_ref_pago_prov');
				var subsidiariaStr = "";
				var empresaOneWorld = false;
				var jurisdiccion = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_jurisdiccion');

				if (!isEmpty(refComprobante)) {

					// Obtengo el Numero del Comprobante
					var numerador = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_cod_pago_prov');

					// Tomo el Numero, Punto de Venta y Letra
					var numeroComprobante = numerador.toString().substr(-8);
					// Obtengo Tipo de Cambio de la Retencion
					var tipoCambio = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_tipo_cambio');
					if (!isEmpty(tipoCambio)) {

						// Obtengo la Base de Calculo
						//var baseCalculo = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_base_calculo_imp');
						var baseCalculo = resultadoTXTRetencionesESICOL.getValue(columns[29]);

						if (!isEmpty(baseCalculo)) {

							retencionESICOL.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

							// Obtengo Fecha de Retencion
							var fechaRetencion = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_fecha');
							//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10205. fechaRetencion: ' + fechaRetencion);
							if (!isEmpty(fechaRetencion)) {
								// Formateo la Fecha
								var fechaRetencionDate = nlapiStringToDate(fechaRetencion, 'datetimetz');

								if (!isEmpty(fechaRetencionDate)) {

									// Obtengo las Componentes de la Fecha
									var diaRetencion = fechaRetencionDate.getDate();
									var mesRetencion = parseInt(fechaRetencionDate.getMonth(), 10) + parseInt(1, 10);
									var anoRetencion = fechaRetencionDate.getFullYear();
									var fechaRetencionFinal = anoRetencion.toString() + padding_left(mesRetencion, '0', 2) + padding_left(diaRetencion, '0', 2);

									retencionESICOL.retencion.fechaRetencion = fechaRetencionFinal;
									//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10219. diaRetencion: '+diaRetencion+ '. mesRetencion: '+mesRetencion+'. anoRetencion: '+anoRetencion+' . fechaRetencionFinal: ' + fechaRetencionFinal);
									var proveedor = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_ref_proveedor');
									var importeRetencion = resultadoTXTRetencionesESICOL.getValue('custrecord_l54_ret_importe');
									if (!isEmpty(importeRetencion)) {

										retencionESICOL.retencion.montoRet = padding_left(parseFloat((parseFloat(parseFloat(importeRetencion, 10) * parseFloat(tipoCambio, 10), 10)), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

										if (!isEmpty(proveedor)) {

											cuitProveedorAux = resultadoTXTRetencionesESICOL.getValue('custbody_54_cuit_entity', 'custrecord_l54_ret_ref_pago_prov');

											var cuitProveedor = cuitProveedorAux.toString();
											cuitProveedor = cuitProveedor.replace(/-/g, '');
											cuitProveedor = cuitProveedor.replace(/\./g, '');
											cuitProveedor = cuitProveedor.replace(/ /g, '&nbsp');
											cuitProveedor = cuitProveedor.toString();
											//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10232. cuitProveedor: ' + cuitProveedor);

											if (!isEmpty(cuitProveedor)) {
												retencionESICOL.retencion.cuitProveedor = padding_left(cuitProveedor, '0', 11);
											}
											else {
												errorGlobal = true;
												descripcionError = "No se encontró Cuit del Proveedor";
											}

										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Proveedor";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error obteniendo Importe de la Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Formateando la Fecha de Retencion";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo Fecha De Retencion";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Base De Calculo";
						}

					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo Tipo de Cambio de la Retencion";
					}

				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante que Origino la Retencion";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionESICOL.retencion != null) {

						// Genero Contenido
						var error = false;
						var descripcionMensaje = "TXT Retenciones Generado Correctamente";
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}

						var numeroComprobante = numerador.toString().substr(-8);
						retencionESICOL.retencion.numeroComprobante = numeroComprobante;
						//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Retenciones)', 'LINE 10290. numeroComprobante: ' + numeroComprobante);

						contenidoTXT += retencionESICOL.retencion.cuitProveedor + retencionESICOL.retencion.fechaRetencion + retencionESICOL.retencion.numeroComprobante + retencionESICOL.retencion.baseCalculo + retencionESICOL.retencion.montoRet;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Retencion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Generando TXT eSicol (Retenciones)');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Obteniendo eSicol (Retenciones)');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Retenciones)', 'Error Generando TXT eSicol (Retenciones) - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT e-SICOL - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionESICOL = grabarError(true, 'Error Generando TXT de Retenciones', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionESICOL = grabarError(false, 'Generacion de TXT de Retenciones Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Retenciones eSICOL', 'Finalizacion - Generacion TXT eSicol (Retenciones)');

	retencionESICOL.contenidoTXT = contenidoTXT;
	return retencionESICOL;
}

function generarTXTeSicolPerc(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Proceso');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT de Percepciones";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";

	try {
		var percepcioneSICOL = new Object();
		percepcioneSICOL.retencion = new Object();
		percepcioneSICOL.sujeto = new Object();
		percepcioneSICOL.existenRetenciones = false;
		percepcioneSICOL.error = false;
		percepcioneSICOL.descripcionError = "";
		percepcioneSICOL.procesoEncolado = false;
		percepcioneSICOL.idLog = idRegistroLOG;
		percepcioneSICOL.contenidoTXT = "";

		// INICIO Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		var iCont = 0;
		var filtroTXTPercepcionesARCIBA = new Array();
		//filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('postingperiod', null, 'is', periodo);
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtroTXTPercepcionesARCIBA[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

		//
		var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_esicol');
		search.addFilters(filtroTXTPercepcionesARCIBA);

		var searchResults = search.runSearch();

		var resultadoTXTPercepcioneseSICOL = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					resultadoTXTPercepcioneseSICOL = resultado; //Primera ve inicializa
				else
					resultadoTXTPercepcioneseSICOL = resultadoTXTPercepcioneseSICOL.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		// FIN Obtener la Informacion de PERCEPCIONES usando un SavedSearch

		// INICIO UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		var informacionResultado = new Array();
		var indiceArray = 0;


		nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Recorrer Percepciones');

		for (var i = 0; resultadoTXTPercepcioneseSICOL != null && i < resultadoTXTPercepcioneseSICOL.length; i++) {
			informacionResultado[indiceArray] = new Object();
			var columns = resultadoTXTPercepcioneseSICOL[i].getAllColumns();
			informacionResultado[indiceArray].idInterno = '';
			informacionResultado[indiceArray].refComprobante = resultadoTXTPercepcioneseSICOL[i].getValue('internalid', null, 'group');
			informacionResultado[indiceArray].codigoComprobante = resultadoTXTPercepcioneseSICOL[i].getValue('custbody_l54_numero_localizado', null, 'max');
			informacionResultado[indiceArray].puntoVentaComprobante = resultadoTXTPercepcioneseSICOL[i].getValue('custbody_l54_boca', null, 'max');
			informacionResultado[indiceArray].letraComprobante = resultadoTXTPercepcioneseSICOL[i].getValue('custbody_l54_letra', null, 'max');
			informacionResultado[indiceArray].tipoCambio = resultadoTXTPercepcioneseSICOL[i].getValue('exchangerate', null, 'group');
			informacionResultado[indiceArray].cuitEntity = resultadoTXTPercepcioneseSICOL[i].getValue('custbody_54_cuit_entity', null, 'max');
			//informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue('custcol_l54_monto_imp_perc', null, 'sum'));
			informacionResultado[indiceArray].baseCalculo = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue(columns[13]));
			var fechaOperacionAux = resultadoTXTPercepcioneseSICOL[i].getValue('trandate', null, 'group');
			var fechaOperacionDate = '';
			if (!isEmpty(fechaOperacionAux))
				fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz');
			informacionResultado[indiceArray].fechaOperacion = fechaOperacionDate;
			informacionResultado[indiceArray].fechaComprobante = fechaOperacionDate;
			informacionResultado[indiceArray].numeroOperacion = '';
			informacionResultado[indiceArray].codigoOperacion = resultadoTXTPercepcioneseSICOL[i].getValue('taxcode', null, 'group');
			informacionResultado[indiceArray].importeComprobante = Math.abs(resultadoTXTPercepcioneseSICOL[i].getValue('total', null, 'sum'));

			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}

		nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Inicio Ordenar');

		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}

		if (!isEmpty(informacionResultado)) {
			nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'Cantidad Percepciones:' + informacionResultado.length);

			for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
				var tipoOperacionStr = "Percepcion";
				var entidadStr = "Cliente";
				percepcioneSICOL.retencion = new Object();
				percepcioneSICOL.sujeto = new Object();
				// Obtengo el Codigo de Comprobante
				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idRetencionNetSuite = '';
				var refComprobante = informacionResultado[i].refComprobante;

				if (!isEmpty(refComprobante)) {
					var codigoComprobante = null;
					codigoComprobante = obtenerCodigoComprobante(refComprobante, 'sic_perc', subsidiaria);
					//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10492. refComprobante: '+refComprobante+'. subsidiaria: '+subsidiaria+'. codigoComprobante: '+codigoComprobante+'. cuitEntity: '+cuitEntity);					
					if (!isEmpty(codigoComprobante)) {
						percepcioneSICOL.retencion.codigoComprobante = padding_left(codigoComprobante, '0', 1);
						//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10495. percepcioneSICOL.retencion.codigoComprobante: '+percepcioneSICOL.retencion.codigoComprobante);
						// Obtengo la Fecha de Emision del Comprobante
						var fecha = '';
						fecha = informacionResultado[i].fechaComprobante

						if (!isEmpty(fecha)) {
							var fechaDate = '';
							// Formateo la Fecha
							fechaDate = fecha;

							if (!isEmpty(fechaDate)) {
								// Obtengo las Componentes de la Fecha
								var dia = fechaDate.getDate();
								var mes = parseInt(fechaDate.getMonth(), 10) + parseInt(1, 10);
								var anio = fechaDate.getFullYear();
								var fechaComprobante = anio + padding_left(mes, '0', 2) + padding_left(dia, '0', 2);
								percepcioneSICOL.retencion.fechaComprobante = fechaComprobante;
								// Obtengo el Numero del Comprobante
								var numerador = informacionResultado[i].codigoComprobante;

								if (!isEmpty(numerador)) {
									var numeroComprobante = numerador.toString().substr(-8);
									// Tomo el Punto de Venta
									var puntoVenta = informacionResultado[i].puntoVentaComprobante;
									// Tomo la Latra del Comprobante
									var letra = informacionResultado[i].letraComprobante;
									//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10522. codigoComprobante: '+numerador+'. puntoVentaComprobante: '+puntoVenta+'. letraComprobante: '+letra);
									if (!isEmpty(numeroComprobante) && !isEmpty(puntoVenta)) {
										var numeroAux = padding_left(puntoVenta.toString(), "0", 8) + padding_left(numeroComprobante.toString(), "0", 8);
										var faltaLetra = false;

										percepcioneSICOL.retencion.puntoVenta = puntoVenta;

										if (isEmpty(letra)) {
											faltaLetra = true;
										} else {
											percepcioneSICOL.retencion.letra = letra;
										}
										if (faltaLetra == false) {
											percepcioneSICOL.retencion.numeroComprobante = padding_left(numeroComprobante.toString(), "0", 8);

											// Obtengo Tipo de Cambio de la Retencion
											var tipoCambio = informacionResultado[i].tipoCambio;
											if (!isEmpty(tipoCambio)) {
												// Obtengo el Importe del Comprobante
												var importeComprobante = '';

												importeComprobante = informacionResultado[i].importeComprobante;

												//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10545. importeComprobante: '+importeComprobante);
												percepcioneSICOL.retencion.importeComprobante = padding_left(parseFloat(parseFloat(importeComprobante, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);

												if (!isEmpty(importeComprobante)) {

													var infoImpuesto = null;

													// Obtengo la Base de Calculo
													var baseCalculo = informacionResultado[i].baseCalculo;
													if (!isEmpty(baseCalculo)) {

														percepcioneSICOL.retencion.baseCalculo = padding_left(parseFloat(parseFloat(baseCalculo, 10) * parseFloat(1, 10), 10).toFixed(2).formatMoney(2, separadorMiles, separadorDecimal), '0', 16);
														//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10557. baseCalculo: '+baseCalculo+'. percepcioneSICOL.retencion.baseCalculo: '+percepcioneSICOL.retencion.baseCalculo);
														// Obtengo Fecha de Retencion
														var fechaRetencion = '';
														fechaRetencion = informacionResultado[i].fechaOperacion;

														var cuitEntity = informacionResultado[i].cuitEntity;

														if (!isEmpty(cuitEntity)) {
															percepcioneSICOL.retencion.cuitEntity = cuitEntity;
														}
														else {
															//percepcioneSICOL.retencion.cuitEntity = padding_left(cuitEntity,'0',11);
															errorGlobal = true;
															descripcionError = "Error Obteniendo Cuit del agente de Percepción";
														}

													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo Base De Calculo";
													}

												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo Importe del Comprobante";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo Tipo de Cambio";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo Letra del Comprobante";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo Numero de Comprobante / Punto de Venta";
									}

								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Numero de Comprobante";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Formateando la Fecha del Comprobante";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Fecha del Comprobante";
						}

					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Codigo de Comprobante";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Comprobante";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (percepcioneSICOL.sujeto != null) {

						if (percepcioneSICOL.retencion != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXT)) {
								contenidoTXT += "\r\n";
							}
							var error = false;
							var descripcionMensaje = "TXT Percepciones Generado Correctamente";
							//nlapiLogExecution('DEBUG', 'GenerarTXT eSicol (Percepciones)', 'LINE 10632. CuitAgentPercep:'+percepcioneSICOL.retencion.cuitEntity+'. NumeroComprobante: '+percepcioneSICOL.retencion.numeroComprobante+'. FechaComprobante: '+percepcioneSICOL.retencion.fechaComprobante+'. NumSucursal: '+percepcioneSICOL.retencion.puntoVenta+'. MontoBasePercepcion: '+percepcioneSICOL.retencion.baseCalculo+'. ImportePercepcion: '+percepcioneSICOL.retencion.importeComprobante+'. TipoComprobante: '+percepcioneSICOL.retencion.codigoComprobante+'. LetraComprobante: '+percepcioneSICOL.retencion.letra);
							contenidoTXT += percepcioneSICOL.retencion.cuitEntity + percepcioneSICOL.retencion.numeroComprobante + percepcioneSICOL.retencion.fechaComprobante +
								percepcioneSICOL.retencion.puntoVenta + percepcioneSICOL.retencion.baseCalculo +
								percepcioneSICOL.retencion.importeComprobante + percepcioneSICOL.retencion.codigoComprobante + percepcioneSICOL.retencion.letra;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo informacion de la Percepcion";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT eSicol (Percepciones) - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion del Sujeto Percibido";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT eSicol (Percepciones) - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Generando TXT eSicol (Percepciones)');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT eSicol (Percepciones) - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT eSicol (Percepciones) Correcta - No se Encontraron Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Obteniendo Percepciones eSicol (Percepciones)');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT eSicol (Percepciones) - Error : Error Obteniendo Percepciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'GenerarTXT eSicol (Percepciones)', 'Error Generando TXT eSicol (Percepciones) - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT eSicol (Percepciones) - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		percepcioneSICOL = grabarError(true, 'Error Generando TXT eSicol (Percepciones)', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		percepcioneSICOL = grabarError(false, 'Generacion de TXT eSicol (Percepciones) Correcta', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT eSicol (Percepciones) Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT Percepciones eSICOL', 'Finalizacion - Generacion TXT eSicol (Percepciones)');
	percepcioneSICOL.contenidoTXT = contenidoTXT;
	return percepcioneSICOL;
}

function generarTXT_TUCUMAN(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion) {

	nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'Inicio - Generación TXT TUCUMÁN - Percepciones/Retenciones');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de TUCUMÁN";
	var descripcionError = "";
	var contenidoTXT = "";
	var contenidoTXTSujeto = "";
	var contenidoTXTNotasCredito = "";
	var procesoEncolado = false;

	try {
		var info_ret_perc_tucuman = {};
		info_ret_perc_tucuman.informacion = {};
		info_ret_perc_tucuman.informacionSujetos = {};
		info_ret_perc_tucuman.informacionNotasCredito = {};
		info_ret_perc_tucuman.contenidoTXTSujeto = {};
		info_ret_perc_tucuman.contenidoTXTNotasCredito = {};
		info_ret_perc_tucuman.existenRetenciones = false;
		info_ret_perc_tucuman.error = false;
		info_ret_perc_tucuman.descripcionError = "";
		info_ret_perc_tucuman.procesoEncolado = false;
		info_ret_perc_tucuman.idLog = idRegistroLOG;
		info_ret_perc_tucuman.contenidoTXT = "";

		if (esRetencion) {

			//-------- INICIO --- Obtener la Informacion de RETENCIONES usando un SavedSearch
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);

			var iCont = 0;
			var filtroTXTRetencionesTucuman = [];
			if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
				filtroTXTRetencionesTucuman[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
			}

			if (!isEmpty(subsidiaria))
				filtroTXTRetencionesTucuman[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);

			var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_ret_tucuman');
			search.addFilters(filtroTXTRetencionesTucuman);

			var searchResults = search.runSearch();

			var resultadoTXTRetencionesTUCUMAN = [];

			// resultIndex points to record starting current "resultado" in the entire results array
			var resultIndex = 0;
			var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			var resultado; // temporary variable used to store the result set
			do {
				// fetch one result set
				resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

				if (!isEmpty(resultado) && resultado.length > 0) {
					if (resultIndex == 0)
						resultadoTXTRetencionesTUCUMAN = resultado; //Primera ve inicializa
					else
						resultadoTXTRetencionesTUCUMAN = resultadoTXTRetencionesTUCUMAN.concat(resultado);

					// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
				}

				// increase pointer
				resultIndex = resultIndex + resultStep;

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

				// once no records are returned we already got all of them
			} while (!isEmpty(resultado) && resultado.length > 0)

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Retenciones usando un SavedSearch');
			//-------- FIN --- Obtener la Informacion de RETENCIONES usando un SavedSearch

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTRetencionesTUCUMAN: ' + JSON.stringify(resultadoTXTRetencionesTUCUMAN));
		}

		if (esPercepcion) {

			//-------- INICIO --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);
			var iCont = 0;
			var filtroTXTPercepcionesTUCUMAN = new Array();
			if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
				filtroTXTPercepcionesTUCUMAN[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
			}

			if (!isEmpty(subsidiaria))
				filtroTXTPercepcionesTUCUMAN[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

			var search = new nlapiLoadSearch('transaction', 'customsearch_l54_per_tucuman');
			search.addFilters(filtroTXTPercepcionesTUCUMAN);

			var searchResults = search.runSearch();

			var resultadoTXTPercepcionesTUCUMAN = [];

			// resultIndex points to record starting current "resultado" in the entire results array
			var resultIndex = 0;
			var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
			var resultado; // temporary variable used to store the result set
			do {
				// fetch one result set
				resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

				if (!isEmpty(resultado) && resultado.length > 0) {
					if (resultIndex == 0)
						resultadoTXTPercepcionesTUCUMAN = resultado; //Primera ve inicializa
					else
						resultadoTXTPercepcionesTUCUMAN = resultadoTXTPercepcionesTUCUMAN.concat(resultado);

					// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
				}

				// increase pointer
				resultIndex = resultIndex + resultStep;

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);

				// once no records are returned we already got all of them
			} while (!isEmpty(resultado) && resultado.length > 0)
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Percepciones usando un SavedSearch');
			//-------- FIN --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTPercepcionesTUCUMAN: ' + JSON.stringify(resultadoTXTPercepcionesTUCUMAN));
		}

		//-------- INICIO --- UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		var informacionResultado = [];
		var indiceArray = 0;
		var arrayProveedores = [];
		var arrayClientes = [];
		var arrayNotasCredito = [];

		if (esRetencion) {

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Recorrer Retenciones');

			for (var i = 0; resultadoTXTRetencionesTUCUMAN != null && i < resultadoTXTRetencionesTUCUMAN.length; i++) {
				info_ret_perc_tucuman.existenRetenciones = true;
				var result = resultadoTXTRetencionesTUCUMAN[i];
				var columns = result.getAllColumns();
				informacionResultado[indiceArray] = {};
				// informacionResultado[indiceArray].tipoOperacion = 1;
				informacionResultado[indiceArray].idInterno = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[0]);
				informacionResultado[indiceArray].fechaComprobante = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[1]);
				informacionResultado[indiceArray].tipoDocumentoAfip = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[2]);
				informacionResultado[indiceArray].numeroDocumentoCliente = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[3]);
				informacionResultado[indiceArray].tipoTransaccionAfip = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[4]);
				informacionResultado[indiceArray].letraDocumento = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[5]);
				informacionResultado[indiceArray].puntoVenta = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[6]);
				informacionResultado[indiceArray].numeroComprobante = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[7]);
				informacionResultado[indiceArray].baseCalculo = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[9]);
				if (isEmpty(informacionResultado[indiceArray].baseCalculo))
					informacionResultado[indiceArray].baseCalculo = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[8]);

				informacionResultado[indiceArray].alicuota = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[10]);
				informacionResultado[indiceArray].importeRetPerc = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[11]);
				informacionResultado[indiceArray].tipoRegistro = 'retencion';
				informacionResultado[indiceArray].referenciaEntidad = resultadoTXTRetencionesTUCUMAN[i].getValue(columns[13]);
				arrayProveedores.push(resultadoTXTRetencionesTUCUMAN[i].getValue(columns[13]));
				/* informacionResultado[indiceArray].baseCalculo = parseFloat(result.getValue(columns[33]), 10);
				var fechaOperacionAux = resultadoTXTRetencionesTUCUMAN[i].getValue('custrecord_l54_ret_fecha');
				var fechaOperacionDate = '';
				if (!isEmpty(fechaOperacionAux))
					fechaOperacionDate = nlapiStringToDate(fechaOperacionAux, 'datetimetz'); */
				indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Recorrer Retenciones');
		}

		if (esPercepcion) {

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Recorrer Percepciones');

			for (var i = 0; resultadoTXTPercepcionesTUCUMAN != null && i < resultadoTXTPercepcionesTUCUMAN.length; i++) {
				info_ret_perc_tucuman.existenRetenciones = true;
				var result = resultadoTXTPercepcionesTUCUMAN[i];
				var columns = result.getAllColumns();
				informacionResultado[indiceArray] = new Object();
				informacionResultado[indiceArray].idInterno = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[0]);
				informacionResultado[indiceArray].fechaComprobante = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[1]);
				informacionResultado[indiceArray].tipoDocumentoAfip = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[2]);
				informacionResultado[indiceArray].numeroDocumentoCliente = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[3]);
				informacionResultado[indiceArray].tipoTransaccionAfip = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[4]);
				informacionResultado[indiceArray].letraDocumento = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[5]);
				informacionResultado[indiceArray].puntoVenta = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[6]);
				informacionResultado[indiceArray].numeroComprobante = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[7]);
				informacionResultado[indiceArray].baseCalculo = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[9]);
				if (isEmpty(informacionResultado[indiceArray].baseCalculo))
					informacionResultado[indiceArray].baseCalculo = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[8]);

				informacionResultado[indiceArray].alicuota = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[10]);
				informacionResultado[indiceArray].importeRetPerc = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[12]);
				informacionResultado[indiceArray].tipoRegistro = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[14]);

				if (!isEmpty(informacionResultado[indiceArray].tipoRegistro) && informacionResultado[indiceArray].tipoRegistro == 'creditmemo')
					arrayNotasCredito.push(informacionResultado[indiceArray].idInterno);

				informacionResultado[indiceArray].tipoRegistro = 'percepcion';
				informacionResultado[indiceArray].referenciaEntidad = resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[15]);
				arrayClientes.push(resultadoTXTPercepcionesTUCUMAN[i].getValue(columns[15]));
				indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Recorrer Percepciones');
		}

		nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Ordenar Retenciones y Percepciones');
		// Ordenar Array
		var date_sort_asc = function (a, b) {
			// This is a comparison function that will result in dates being sorted in
			// ASCENDING order. As you can see, JavaScript's native comparison operators
			// can be used to compare dates. This was news to me.
			if (a.fechaOperacion > b.fechaOperacion)
				return 1;
			if (a.fechaOperacion < b.fechaOperacion)
				return -1;
			return 0;
		};

		if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
			informacionResultado.sort(date_sort_asc);
		}
		//-------- FIN --- UNIFICAR RETENCIONES Y PERCEPCIONES EN UN UNICO OBJETO
		nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Ordenar Retenciones y Percepciones - informacionResultado: ' + JSON.stringify(informacionResultado));

		if (esPercepcion) {

			//-------- INICIO --- Obtener la Informacion de Clientes usando un SavedSearch
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Clientes usando un SavedSearch');
			var resultadoTXTClientesTUCUMAN = [];
			if (!isEmpty(arrayClientes) && arrayClientes.length > 0) {
				var iCont = 0;
				var filtroTXTClientesTUCUMAN = [];
				filtroTXTClientesTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayClientes);

				var search = new nlapiLoadSearch('customer', 'customsearch_l54_txt_tucuman_dat_cliente');
				search.addFilters(filtroTXTClientesTUCUMAN);

				var searchResults = search.runSearch();

				// resultIndex points to record starting current "resultado" in the entire results array
				var resultIndex = 0;
				var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
				var resultado; // temporary variable used to store the result set
				do {
					// fetch one result set
					resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

					if (!isEmpty(resultado) && resultado.length > 0) {
						if (resultIndex == 0)
							resultadoTXTClientesTUCUMAN = resultado; //Primera ve inicializa
						else
							resultadoTXTClientesTUCUMAN = resultadoTXTClientesTUCUMAN.concat(resultado);

						// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
					}

					// increase pointer
					resultIndex = resultIndex + resultStep;

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);

					// once no records are returned we already got all of them
				} while (!isEmpty(resultado) && resultado.length > 0)
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Clientes usando un SavedSearch');
			//-------- FIN --- Obtener la Informacion de Clientes usando un SavedSearch

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTClientesTUCUMAN: ' + JSON.stringify(resultadoTXTClientesTUCUMAN));
		}

		if (esRetencion) {

			//-------- INICIO --- Obtener la Informacion de Proveedores usando un SavedSearch
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Proveedores usando un SavedSearch');
			var resultadoTXTProveedoresTUCUMAN = [];
			if (!isEmpty(arrayProveedores) && arrayProveedores.length > 0) {
				var iCont = 0;
				var filtroTXTProveedoresTUCUMAN = [];
				filtroTXTProveedoresTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayProveedores);

				var search = new nlapiLoadSearch('vendor', 'customsearch_l54_txt_tucuman_dat_proveed');
				search.addFilters(filtroTXTProveedoresTUCUMAN);

				var searchResults = search.runSearch();

				// resultIndex points to record starting current "resultado" in the entire results array
				var resultIndex = 0;
				var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
				var resultado; // temporary variable used to store the result set
				do {
					// fetch one result set
					resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

					if (!isEmpty(resultado) && resultado.length > 0) {
						if (resultIndex == 0)
							resultadoTXTProveedoresTUCUMAN = resultado; //Primera ve inicializa
						else
							resultadoTXTProveedoresTUCUMAN = resultadoTXTProveedoresTUCUMAN.concat(resultado);

						// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
					}

					// increase pointer
					resultIndex = resultIndex + resultStep;

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);

					// once no records are returned we already got all of them
				} while (!isEmpty(resultado) && resultado.length > 0)
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Proveedores usando un SavedSearch');
			//-------- FIN --- Obtener la Informacion de Proveedores usando un SavedSearch

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultadoTXTProveedoresTUCUMAN: ' + JSON.stringify(resultadoTXTProveedoresTUCUMAN));
		}

		var infoSujetosInicial = [];
		var indiceArray = 0;

		if (esPercepcion) {
			//-------- INICIO --- Recorrer la Informacion de Clientes para almacenarla en un array de objetos.
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos.');
			for (var i = 0; i < resultadoTXTClientesTUCUMAN.length; i++) {
				var columns = resultadoTXTClientesTUCUMAN[i].getAllColumns();
				infoSujetosInicial[indiceArray] = {};
				infoSujetosInicial[indiceArray].idInterno = resultadoTXTClientesTUCUMAN[i].getValue(columns[0]);
				infoSujetosInicial[indiceArray].tipoDocumentoAfip = resultadoTXTClientesTUCUMAN[i].getValue(columns[1]);
				infoSujetosInicial[indiceArray].numeroDocumento = resultadoTXTClientesTUCUMAN[i].getValue(columns[2]);
				infoSujetosInicial[indiceArray].nombreLegal = resultadoTXTClientesTUCUMAN[i].getValue(columns[3]);
				infoSujetosInicial[indiceArray].domicilioFiscal = resultadoTXTClientesTUCUMAN[i].getValue(columns[4]);
				infoSujetosInicial[indiceArray].numeroCalle = resultadoTXTClientesTUCUMAN[i].getValue(columns[5]);
				infoSujetosInicial[indiceArray].localidad = resultadoTXTClientesTUCUMAN[i].getValue(columns[6]);
				infoSujetosInicial[indiceArray].provincia = resultadoTXTClientesTUCUMAN[i].getValue(columns[7]);
				infoSujetosInicial[indiceArray].noUsado = resultadoTXTClientesTUCUMAN[i].getValue(columns[8]);
				infoSujetosInicial[indiceArray].codigoPostal = resultadoTXTClientesTUCUMAN[i].getValue(columns[9]);
				infoSujetosInicial[indiceArray].dirFactDefault = resultadoTXTClientesTUCUMAN[i].getValue(columns[12]);
				infoSujetosInicial[indiceArray].idAddress = resultadoTXTClientesTUCUMAN[i].getValue(columns[13]);
				infoSujetosInicial[indiceArray].tipoEntidad = 'Cliente';
				indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//-------- FIN --- Recorrer la Informacion de Clientes para almacenarla en un array de objetos.
		}

		if (esRetencion) {
			//-------- INICIO --- Recorrer la Informacion de Proveedores para almacenarla en un array de objetos.
			for (var i = 0; i < resultadoTXTProveedoresTUCUMAN.length; i++) {
				var columns = resultadoTXTProveedoresTUCUMAN[i].getAllColumns();
				infoSujetosInicial[indiceArray] = {};
				infoSujetosInicial[indiceArray].idInterno = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[0]);
				infoSujetosInicial[indiceArray].tipoDocumentoAfip = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[1]);
				infoSujetosInicial[indiceArray].numeroDocumento = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[2]);
				infoSujetosInicial[indiceArray].nombreLegal = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[3]);
				infoSujetosInicial[indiceArray].domicilioFiscal = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[4]);
				infoSujetosInicial[indiceArray].numeroCalle = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[5]);
				infoSujetosInicial[indiceArray].localidad = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[6]);
				infoSujetosInicial[indiceArray].provincia = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[7]);
				infoSujetosInicial[indiceArray].noUsado = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[8]);
				infoSujetosInicial[indiceArray].codigoPostal = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[9]);
				infoSujetosInicial[indiceArray].dirFactDefault = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[12]);
				infoSujetosInicial[indiceArray].idAddress = resultadoTXTProveedoresTUCUMAN[i].getValue(columns[13]);
				infoSujetosInicial[indiceArray].tipoEntidad = 'Proveedor';
				indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de Clientes y Proveedores para almacenarla en un array de objetos.');
			//-------- FIN --- Recorrer la Informacion de Proveedores para almacenarla en un array de objetos.
		}

		// INICIO - Manejo de direcciones de clientes/proveedores para dejar predeterminada para facturación o una sola si no existe dirección de facturación preferida
		var informacionSujetos = [];
		for (var i = 0; i < infoSujetosInicial.length; i++) {

			// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'infoSujetosInicial[i]: ' + JSON.stringify(infoSujetosInicial[i]));
			var direccionDuplicada = false;

			for (var j = 0; j < informacionSujetos.length; j++) {

				// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'informacionSujetos[j]: ' + JSON.stringify(informacionSujetos[j]));

				if (informacionSujetos[j].idInterno == infoSujetosInicial[i].idInterno) {

					direccionDuplicada = true;

					if (((informacionSujetos[j].dirFactDefault == 'F' || informacionSujetos[j].dirFactDefault == false) && (infoSujetosInicial[i].dirFactDefault == 'T' || infoSujetosInicial[i].dirFactDefault == true))
						|| ((informacionSujetos[j].dirFactDefault == 'F' || informacionSujetos[j].dirFactDefault == false) && (informacionSujetos[j].idAddress > infoSujetosInicial[i].idAddress))) {

						// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'ingreso a setear información de dirección, datos de nueva dirección: ' + JSON.stringify(infoSujetosInicial[i]));
						informacionSujetos[j] = infoSujetosInicial[i];
						j = informacionSujetos.length + 1;
						break;
					}
				}
			}

			if ((j == informacionSujetos.length) && !direccionDuplicada) {
				informacionSujetos.push(infoSujetosInicial[i]);
			}
			// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'informacionSujetos: ' + JSON.stringify(informacionSujetos));
		}
		// FIN - Manejo de direcciones de clientes/proveedores para dejar predeterminada para facturación o una sola si no existe dirección de facturación preferida

		if (esPercepcion) {

			//-------- INICIO --- Obtener la Informacion de Notas de Créditos usando un SavedSearch
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch');
			var resultadoTXTNotasCreditoTUCUMAN = [];
			if (!isEmpty(arrayNotasCredito) && arrayNotasCredito.length > 0) {
				var iCont = 0;
				var filtroTXTNotasCreditoTUCUMAN = new Array();
				filtroTXTNotasCreditoTUCUMAN[iCont++] = new nlobjSearchFilter('internalid', null, 'is', arrayNotasCredito);
				var search = new nlapiLoadSearch('transaction', 'customsearch_l54_txt_tucuman_dat_nc');
				search.addFilters(filtroTXTNotasCreditoTUCUMAN);

				var searchResults = search.runSearch();
				// resultIndex points to record starting current "resultado" in the entire results array
				var resultIndex = 0;
				var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
				var resultado; // temporary variable used to store the result set
				do {
					// fetch one result set
					resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

					if (!isEmpty(resultado) && resultado.length > 0) {
						if (resultIndex == 0)
							resultadoTXTNotasCreditoTUCUMAN = resultado; //Primera ve inicializa
						else
							resultadoTXTNotasCreditoTUCUMAN = resultadoTXTNotasCreditoTUCUMAN.concat(resultado);

						// nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);
					}

					// increase pointer
					resultIndex = resultIndex + resultStep;

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);

					// once no records are returned we already got all of them
				} while (!isEmpty(resultado) && resultado.length > 0)
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN - Obtener la Informacion de Notas de Créditos Asociadas a Facturas usando un SavedSearch');
			//-------- FIN --- Obtener la Informacion de Notas de Créditos usando un SavedSearch

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.');
			var informacionNotasCredito = [];
			var indiceArray = 0;
			//-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
			for (var i = 0; i < resultadoTXTNotasCreditoTUCUMAN.length; i++) {
				var columns = resultadoTXTNotasCreditoTUCUMAN[i].getAllColumns();
				informacionNotasCredito[indiceArray] = {};
				informacionNotasCredito[indiceArray].idInterno = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[0]);
				informacionNotasCredito[indiceArray].puntoVenta = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[1]);
				informacionNotasCredito[indiceArray].numeroComprobante = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[2]);
				informacionNotasCredito[indiceArray].puntoVentaCompAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[3]);
				informacionNotasCredito[indiceArray].numeroComprobanteAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[4]);
				informacionNotasCredito[indiceArray].tipoTransaccionAfipComprobanteAsociado = resultadoTXTNotasCreditoTUCUMAN[i].getValue(columns[5]);
				indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
			}
			//-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.');

		}

		nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT. Cantidad de percepciones/retenciones: ' + informacionResultado.length);
		if (!isEmpty(informacionResultado)) {

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las transacciones para armar los TXT.');
			for (var i = 0; informacionResultado != null && i < informacionResultado.length; i++) {
				existenPercepciones = true;
				errorGlobal = false;
				var descripcionError = "";
				var idRetencionNetSuite = '';
				var refComprobante = '';
				info_ret_perc_tucuman.informacion = {};
				var tipoTransaccion = informacionResultado[i].tipoRegistro;
				var tipoEntidad = '';
				if (tipoTransaccion == 'retencion') {
					idRetencionNetSuite = informacionResultado[i].idInterno;
					tipoEntidad = 'Proveedor';
					nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'idRetencionNetSuite o retención ID: ' + idRetencionNetSuite);
				} else {
					refComprobante = informacionResultado[i].idInterno;
					tipoEntidad = 'Cliente';
					nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'refComprobante o transacción ID: ' + refComprobante);
				}

				if (!isEmpty(informacionResultado[i].fechaComprobante)) {
					info_ret_perc_tucuman.informacion.fechaComprobante = informacionResultado[i].fechaComprobante; // Fecha de la percepción/retención
					if (!isEmpty(informacionResultado[i].tipoDocumentoAfip)) {
						info_ret_perc_tucuman.informacion.tipoDocumentoAfip = informacionResultado[i].tipoDocumentoAfip; // Tipo Documento AFIP
						if (!isEmpty(informacionResultado[i].numeroDocumentoCliente)) {
							info_ret_perc_tucuman.informacion.numeroDocumentoCliente = informacionResultado[i].numeroDocumentoCliente; // Número documento cliente/proveedor
							if (!isEmpty(informacionResultado[i].tipoTransaccionAfip)) {
								info_ret_perc_tucuman.informacion.tipoTransaccionAfip = informacionResultado[i].tipoTransaccionAfip; // Tipo Transacción AFIP
								if (!isEmpty(informacionResultado[i].letraDocumento)) {
									info_ret_perc_tucuman.informacion.letraDocumento = informacionResultado[i].letraDocumento; // Letra documento
									if (!isEmpty(informacionResultado[i].puntoVenta)) {
										info_ret_perc_tucuman.informacion.puntoVenta = informacionResultado[i].puntoVenta;
										if (!isEmpty(informacionResultado[i].numeroComprobante)) {
											info_ret_perc_tucuman.informacion.numeroComprobante = informacionResultado[i].numeroComprobante;
											if (!isEmpty(informacionResultado[i].baseCalculo)) {
												info_ret_perc_tucuman.informacion.baseCalculo = informacionResultado[i].baseCalculo;
												if (!isEmpty(informacionResultado[i].alicuota)) {
													info_ret_perc_tucuman.informacion.alicuota = informacionResultado[i].alicuota;
													if (!isEmpty(informacionResultado[i].importeRetPerc)) {
														info_ret_perc_tucuman.informacion.importeRetPerc = informacionResultado[i].importeRetPerc;
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el Importe de la " + tipoTransaccion;
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo la Alícuota de la " + tipoTransaccion;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Base de Cálculo de la " + tipoTransaccion;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo el Número de Comprobante de la " + tipoTransaccion;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Punto de Venta de la " + tipoTransaccion;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Letra de la " + tipoTransaccion;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Tipo de Transacción AFIP de la " + tipoTransaccion;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número de Documento del " + tipoEntidad + " asociado a la " + tipoTransaccion;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Tipo de Documento del " + tipoEntidad + " asociado a la " + tipoTransaccion;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Fecha de la " + tipoTransaccion;
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (info_ret_perc_tucuman.informacion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
						contenidoTXT += info_ret_perc_tucuman.informacion.fechaComprobante + info_ret_perc_tucuman.informacion.tipoDocumentoAfip + info_ret_perc_tucuman.informacion.numeroDocumentoCliente + info_ret_perc_tucuman.informacion.tipoTransaccionAfip +
							info_ret_perc_tucuman.informacion.letraDocumento + info_ret_perc_tucuman.informacion.puntoVenta + info_ret_perc_tucuman.informacion.numeroComprobante + info_ret_perc_tucuman.informacion.baseCalculo +
							info_ret_perc_tucuman.informacion.alicuota + info_ret_perc_tucuman.informacion.importeRetPerc;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la " + tipoTransaccion;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT TUCUMÁN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT TUCUMÁN: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT TUCUMÁN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las transacciones para armar los TXT.');

			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de los sujetos para armar los TXT. Cantidad de sujetos: ' + informacionSujetos.length);
			for (var i = 0; informacionSujetos != null && i < informacionSujetos.length; i++) {
				errorGlobal = false;
				var descripcionError = "";
				var idRetencionNetSuite = '';
				var refComprobante = '';
				var refEntidad = informacionSujetos[i].idInterno;
				info_ret_perc_tucuman.informacionSujetos = {};
				var tipoEntidad = informacionSujetos[i].tipoEntidad;

				if (!isEmpty(informacionSujetos[i].tipoDocumentoAfip)) {
					info_ret_perc_tucuman.informacionSujetos.tipoDocumentoAfip = informacionSujetos[i].tipoDocumentoAfip;
					if (!isEmpty(informacionSujetos[i].numeroDocumento)) {
						info_ret_perc_tucuman.informacionSujetos.numeroDocumento = informacionSujetos[i].numeroDocumento;
						if (!isEmpty(informacionSujetos[i].nombreLegal)) {
							info_ret_perc_tucuman.informacionSujetos.nombreLegal = padding_right(removeDiacritics(informacionSujetos[i].nombreLegal), " ", 40);
							if (!isEmpty(informacionSujetos[i].domicilioFiscal)) {
								info_ret_perc_tucuman.informacionSujetos.domicilioFiscal = padding_right(removeDiacritics(informacionSujetos[i].domicilioFiscal), " ", 40);
								if (!isEmpty(informacionSujetos[i].numeroCalle)) {
									info_ret_perc_tucuman.informacionSujetos.numeroCalle = informacionSujetos[i].numeroCalle;
									if (!isEmpty(informacionSujetos[i].localidad)) {
										info_ret_perc_tucuman.informacionSujetos.localidad = padding_right(removeDiacritics(informacionSujetos[i].localidad), " ", 15);
										if (!isEmpty(informacionSujetos[i].provincia)) {
											info_ret_perc_tucuman.informacionSujetos.provincia = padding_right(removeDiacritics(informacionSujetos[i].provincia), " ", 15);
											if (!isEmpty(informacionSujetos[i].noUsado)) {
												info_ret_perc_tucuman.informacionSujetos.noUsado = informacionSujetos[i].noUsado;
												if (!isEmpty(informacionSujetos[i].codigoPostal)) {
													info_ret_perc_tucuman.informacionSujetos.codigoPostal = padding_right(removeDiacritics(informacionSujetos[i].codigoPostal), " ", 8);
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Código Postal del " + tipoEntidad + ', con id interno: ' + refEntidad;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la información del campo No Usado del " + tipoEntidad + ', con id interno: ' + refEntidad;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Provincia del " + tipoEntidad + ', con id interno: ' + refEntidad;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Localidad del " + tipoEntidad + ', con id interno: ' + refEntidad;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Nro de la Calle del " + tipoEntidad + ', con id interno: ' + refEntidad;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Domicilio Fiscal del " + tipoEntidad + ', con id interno: ' + refEntidad;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Nombre del " + tipoEntidad + ', con id interno: ' + refEntidad;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número Documento del " + tipoEntidad + ', con id interno: ' + refEntidad;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo el Tipo Documento AFIP del " + tipoEntidad + ', con id interno: ' + refEntidad;
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (info_ret_perc_tucuman.informacionSujetos != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXTSujeto)) {
							contenidoTXTSujeto += "\r\n";
						}
						//var descripcionMensaje = "TXT de Retenciones Generado Correctamente";
						contenidoTXTSujeto += info_ret_perc_tucuman.informacionSujetos.tipoDocumentoAfip + info_ret_perc_tucuman.informacionSujetos.numeroDocumento + info_ret_perc_tucuman.informacionSujetos.nombreLegal +
							info_ret_perc_tucuman.informacionSujetos.domicilioFiscal + info_ret_perc_tucuman.informacionSujetos.numeroCalle + info_ret_perc_tucuman.informacionSujetos.localidad +
							info_ret_perc_tucuman.informacionSujetos.provincia + info_ret_perc_tucuman.informacionSujetos.noUsado + info_ret_perc_tucuman.informacionSujetos.codigoPostal;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de los clientes/proveedores";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT de Clientes/Proveedores de TUCUMAN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Percepciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT de Clientes/Proveedores de TUCUMAN: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT de Clientes/Proveedores de TUCUMAN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de los sujetos para armar los TXT.');

			if (esPercepcion) {
				nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'INICIO --- Recorrer la Informacion de las Notas de Crédito para armar los TXT. Cantidad de NC: ' + informacionNotasCredito.length);
				for (var i = 0; informacionNotasCredito != null && i < informacionNotasCredito.length; i++) {
					errorGlobal = false;
					var descripcionError = "";
					var idRetencionNetSuite = '';
					var refComprobante = informacionNotasCredito[i].idInterno;
					info_ret_perc_tucuman.informacionNotasCredito = {};

					if (!isEmpty(informacionNotasCredito[i].puntoVenta)) {
						info_ret_perc_tucuman.informacionNotasCredito.puntoVenta = informacionNotasCredito[i].puntoVenta;
						if (!isEmpty(informacionNotasCredito[i].numeroComprobante)) {
							info_ret_perc_tucuman.informacionNotasCredito.numeroComprobante = informacionNotasCredito[i].numeroComprobante;
							if (!isEmpty(informacionNotasCredito[i].puntoVentaCompAsociado)) {
								info_ret_perc_tucuman.informacionNotasCredito.puntoVentaCompAsociado = informacionNotasCredito[i].puntoVentaCompAsociado;
								if (!isEmpty(informacionNotasCredito[i].numeroComprobanteAsociado)) {
									info_ret_perc_tucuman.informacionNotasCredito.numeroComprobanteAsociado = informacionNotasCredito[i].numeroComprobanteAsociado;
									if (!isEmpty(informacionNotasCredito[i].tipoTransaccionAfipComprobanteAsociado)) {
										info_ret_perc_tucuman.informacionNotasCredito.tipoTransaccionAfipComprobanteAsociado = informacionNotasCredito[i].tipoTransaccionAfipComprobanteAsociado;
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Tipo de Transacción del Comprobante Asociado a la Nota de Crédito";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Número de Comprobante del Comprobante Asociado a la Nota de Crédito";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Punto de Venta del Comprobante Asociado a la Nota de Crédito";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Número Comprobante de la Nota de Crédito";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Punto de Venta de la Nota de Crédito";
					}

					// Genero el Contenido
					if (errorGlobal == false) {

						if (info_ret_perc_tucuman.informacionNotasCredito != null) {

							// Genero Contenido
							if (!isEmpty(contenidoTXTNotasCredito)) {
								contenidoTXTNotasCredito += "\r\n";
							}

							contenidoTXTNotasCredito += info_ret_perc_tucuman.informacionNotasCredito.puntoVenta + info_ret_perc_tucuman.informacionNotasCredito.numeroComprobante + info_ret_perc_tucuman.informacionNotasCredito.puntoVentaCompAsociado +
								info_ret_perc_tucuman.informacionNotasCredito.numeroComprobanteAsociado + info_ret_perc_tucuman.informacionNotasCredito.tipoTransaccionAfipComprobanteAsociado;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información del TXT de las Notas de Crédito";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT de Notas de Crédito de TUCUMAN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						// Error Obteniendo Informacion de Percepciones
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT de Notas de Crédito de TUCUMAN: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT de Notas de Crédito de TUCUMAN - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
				nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las Notas de Crédito para armar los TXT.');
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT TUCUMÁN Correcta - No se Encontraron Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Obteniendo transacciones de Retenciones/Percepciones de TUCUMÁN');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo transacciones de Retenciones/Percepciones de TUCUMÁN - Error : Error Obteniendo Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

		if (!isEmpty(contenidoTXTSujeto))
			contenidoTXTSujeto += "\r\n";

		if (!isEmpty(contenidoTXTNotasCredito) && esPercepcion)
			contenidoTXTNotasCredito += "\r\n";

		nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'FIN --- Recorrer la Informacion de las transacciones, sujetos y NC para armar los TXT.');
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXT_TUCUMAN', 'Error Generando TXT TUCUMÁN - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT TUCUMÁN - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		info_ret_perc_tucuman = grabarError(true, 'Error Generando TXT TUCUMÁN', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		info_ret_perc_tucuman = grabarError(false, 'Generación de TXT TUCUMÁN Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT TUCUMÁN Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXT_TUCUMAN', 'Finalización - Generación TXT TUCUMÁN - contenidoTXT: ' + JSON.stringify(contenidoTXT) + ' - contenidoTXTSujeto: ' + JSON.stringify(contenidoTXTSujeto) + ' - contenidoTXTNotasCredito: ' + JSON.stringify(contenidoTXTNotasCredito));

	info_ret_perc_tucuman.contenidoTXT = contenidoTXT;
	info_ret_perc_tucuman.contenidoTXTSujeto = contenidoTXTSujeto;
	info_ret_perc_tucuman.contenidoTXTNotasCredito = contenidoTXTNotasCredito;
	return info_ret_perc_tucuman;
}

function generarTXTSAREPE(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, esPercepcion, esRetencion) {

	nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'Inicio - Generación TXT SAREPE - Percepciones/Retenciones');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de SAREPE";
	var descripcionError = "";
	var contenidoTXTRetenciones = "";
	var contenidoTXTPercepciones = "";
	var procesoEncolado = false;
	var tipoTXT = esPercepcion ? 'Percepciones' : 'Retenciones';

	try {
		var info_ret_perc_SAREPE = {};
		info_ret_perc_SAREPE.informacion = {};
		info_ret_perc_SAREPE.informacionSujetos = {};
		info_ret_perc_SAREPE.informacionNotasCredito = {};
		info_ret_perc_SAREPE.contenidoTXTSujeto = {};
		info_ret_perc_SAREPE.contenidoTXTNotasCredito = {};
		info_ret_perc_SAREPE.existenRetenciones = false;
		info_ret_perc_SAREPE.error = false;
		info_ret_perc_SAREPE.descripcionError = "";
		info_ret_perc_SAREPE.procesoEncolado = false;
		info_ret_perc_SAREPE.idLog = idRegistroLOG;
		info_ret_perc_SAREPE.contenidoTXTRetenciones = "";
		info_ret_perc_SAREPE.contenidoTXTPercepciones = "";

		//-------- INICIO --- Obtener la Informacion de RETENCIONES usando un SavedSearch
		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO - Obtener la Informacion de Retenciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);

		var resultadoTXTRetencionesSAREPE = { resultados: [], error: false };
		if (esRetencion)
			resultadoTXTRetencionesSAREPE = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_mendoza_sarepe');

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN - Obtener la Informacion de Retenciones usando un SavedSearch');
		//-------- FIN --- Obtener la Informacion de RETENCIONES usando un SavedSearch

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'resultadoTXTRetencionesSAREPE: ' + JSON.stringify(resultadoTXTRetencionesSAREPE));

		//-------- INICIO --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch
		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO - Obtener la Informacion de Percepciones usando un SavedSearch - periodo: ' + JSON.stringify(periodo) + ' - subsidiaria: ' + subsidiaria);

		var resultadoTXTPercepcionesSAREPE = { resultados: [], error: false };
		if (esPercepcion)
			resultadoTXTPercepcionesSAREPE = savedSearchUtility('trandate', periodo, 'subsidiary', subsidiaria, 'transaction', 'customsearch_l54_per_mendoza_sarepe');

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN - Obtener la Informacion de Percepciones usando un SavedSearch');
		//-------- FIN --- Obtener la Informacion de PERCEPCIONES usando un SavedSearch

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'resultadoTXTPercepcionesSAREPE: ' + JSON.stringify(resultadoTXTPercepcionesSAREPE));

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos.');
		var informacionResultadoRetenciones = [];
		var indiceArray = 0;
		var resultAux = resultadoTXTRetencionesSAREPE.resultados;
		//-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		for (var i = 0; i < resultAux.length; i++) {
			var columns = resultAux[i].getAllColumns();
			informacionResultadoRetenciones[indiceArray] = {};
			informacionResultadoRetenciones[indiceArray].idInterno = resultAux[i].getValue(columns[0]);
			informacionResultadoRetenciones[indiceArray].idInternoPagoProveedor = resultAux[i].getValue(columns[1]);
			informacionResultadoRetenciones[indiceArray].cuit = resultAux[i].getValue(columns[2]);
			informacionResultadoRetenciones[indiceArray].razonSocial = resultAux[i].getValue(columns[3]);
			informacionResultadoRetenciones[indiceArray].fechaComprobante = resultAux[i].getValue(columns[4]);
			informacionResultadoRetenciones[indiceArray].nroComprobante = resultAux[i].getValue(columns[5]);
			informacionResultadoRetenciones[indiceArray].fecha = resultAux[i].getValue(columns[6]);
			informacionResultadoRetenciones[indiceArray].baseCalculoManual = resultAux[i].getValue(columns[7]);
			informacionResultadoRetenciones[indiceArray].baseCalculoLocal = resultAux[i].getValue(columns[8]);
			informacionResultadoRetenciones[indiceArray].alicuota = resultAux[i].getValue(columns[9]);
			informacionResultadoRetenciones[indiceArray].importeManual = resultAux[i].getValue(columns[10]);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}
		//-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de Retenciones para almacenarla en un array de objetos.');

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos.');
		var informacionResultadoPercepciones = [];
		var indiceArray = 0;
		var resultAux = resultadoTXTPercepcionesSAREPE.resultados;
		//-------- INICIO --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		for (var i = 0; i < resultAux.length; i++) {
			var columns = resultAux[i].getAllColumns();
			informacionResultadoPercepciones[indiceArray] = {};
			informacionResultadoPercepciones[indiceArray].idInterno = resultAux[i].getValue(columns[0]);
			informacionResultadoPercepciones[indiceArray].cuit = resultAux[i].getValue(columns[1]);
			informacionResultadoPercepciones[indiceArray].razonSocial = resultAux[i].getValue(columns[2]);
			informacionResultadoPercepciones[indiceArray].fechaComprobante = resultAux[i].getValue(columns[3]);
			informacionResultadoPercepciones[indiceArray].nroComprobante = resultAux[i].getValue(columns[4]);
			informacionResultadoPercepciones[indiceArray].fecha = resultAux[i].getValue(columns[5]);
			informacionResultadoPercepciones[indiceArray].baseCalculoManual = resultAux[i].getValue(columns[6]);
			informacionResultadoPercepciones[indiceArray].baseCalculoLocal = resultAux[i].getValue(columns[7]);
			informacionResultadoPercepciones[indiceArray].alicuota = resultAux[i].getValue(columns[8]);
			informacionResultadoPercepciones[indiceArray].importeManual = resultAux[i].getValue(columns[10]);
			indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
		}
		//-------- FIN --- Recorrer la Informacion de Notas de Crédito para almacenarla en un array de objetos.
		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de Percepciones para almacenarla en un array de objetos.');

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las transacciones para armar los TXT');
		if ((!isEmpty(resultadoTXTRetencionesSAREPE) && !resultadoTXTRetencionesSAREPE.error) || (!isEmpty(resultadoTXTPercepcionesSAREPE) && !resultadoTXTPercepcionesSAREPE.error)) {

			nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las retenciones para armar los TXT - Cantidad de retenciones: ' + informacionResultadoRetenciones.length);
			if (esRetencion) {
				for (var i = 0; !isEmpty(informacionResultadoRetenciones) && i < informacionResultadoRetenciones.length; i++) {
					existenPercepciones = true;
					errorGlobal = false;
					var descripcionError = "";
					var refComprobante = informacionResultadoRetenciones[i].idInternoPagoProveedor;
					info_ret_perc_SAREPE.informacion = {};
					var idRetencionNetSuite = informacionResultadoRetenciones[i].idInterno;
					var idRetencion = informacionResultadoRetenciones[i].idInterno;
					nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'idRetencionNetSuite o retención ID: ' + idRetencion + ' - Referencia Pago Proveedor: ' + idRetencionNetSuite);

					if (!isEmpty(informacionResultadoRetenciones[i].cuit)) {
						info_ret_perc_SAREPE.informacion.cuit = informacionResultadoRetenciones[i].cuit;
						if (!isEmpty(informacionResultadoRetenciones[i].razonSocial)) {
							info_ret_perc_SAREPE.informacion.razonSocial = informacionResultadoRetenciones[i].razonSocial;
							if (!isEmpty(informacionResultadoRetenciones[i].fechaComprobante)) {
								info_ret_perc_SAREPE.informacion.fechaComprobante = informacionResultadoRetenciones[i].fechaComprobante;
								if (!isEmpty(informacionResultadoRetenciones[i].nroComprobante)) {
									info_ret_perc_SAREPE.informacion.nroComprobante = informacionResultadoRetenciones[i].nroComprobante;
									if (!isEmpty(informacionResultadoRetenciones[i].fecha)) {
										info_ret_perc_SAREPE.informacion.fecha = informacionResultadoRetenciones[i].fecha;
										if (!isEmpty(informacionResultadoRetenciones[i].baseCalculoLocal) || !isEmpty(informacionResultadoRetenciones[i].baseCalculoManual)) {
											info_ret_perc_SAREPE.informacion.baseCalculoLocal = !isEmpty(informacionResultadoRetenciones[i].baseCalculoLocal) ? informacionResultadoRetenciones[i].baseCalculoLocal : informacionResultadoRetenciones[i].baseCalculoManual;
											if (!isEmpty(informacionResultadoRetenciones[i].alicuota)) {
												info_ret_perc_SAREPE.informacion.alicuota = informacionResultadoRetenciones[i].alicuota;
												if (!isEmpty(informacionResultadoRetenciones[i].importeManual)) {
													info_ret_perc_SAREPE.informacion.importe = informacionResultadoRetenciones[i].importeManual;
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Importe de la Retención";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Alícuota de la Retención";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Base de Cálculo de la Retención";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha de la Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Número de Comprobante de la Retención";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha del Comprobante que originó la Retención";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Razón Social/Nombre Legal del Proveedor";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Documento del Proveedor (CUIT)";
					}

					// Genero el Contenido
					if (errorGlobal == false) {

						if (!isEmpty(info_ret_perc_SAREPE.informacion)) {

							// Genero Contenido
							if (!isEmpty(contenidoTXTRetenciones)) {
								contenidoTXTRetenciones += "\r\n";
							}

							contenidoTXTRetenciones += info_ret_perc_SAREPE.informacion.cuit + info_ret_perc_SAREPE.informacion.razonSocial + info_ret_perc_SAREPE.informacion.fechaComprobante +
								info_ret_perc_SAREPE.informacion.nroComprobante + info_ret_perc_SAREPE.informacion.fecha + info_ret_perc_SAREPE.informacion.baseCalculoLocal +
								info_ret_perc_SAREPE.informacion.alicuota + info_ret_perc_SAREPE.informacion.importe;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información del TXT SAREPE Retenciones";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SAREPE Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						// Error Obteniendo Informacion de Retenciones
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE Retenciones: ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SAREPE Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}
			nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las retenciones para armar los TXT.');

			nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'INICIO --- Recorrer la Informacion de las Percepciones para armar los TXT - Cantidad de percepciones: ' + informacionResultadoPercepciones.length);
			if (esPercepcion) {
				for (var i = 0; !isEmpty(informacionResultadoPercepciones) && i < informacionResultadoPercepciones.length; i++) {
					existenPercepciones = true;
					errorGlobal = false;
					var descripcionError = "";
					var idRetencionNetSuite = '';
					var refComprobante = informacionResultadoPercepciones[i].idInterno;
					info_ret_perc_SAREPE.informacion = {};

					if (!isEmpty(informacionResultadoPercepciones[i].cuit)) {
						info_ret_perc_SAREPE.informacion.cuit = informacionResultadoPercepciones[i].cuit;
						if (!isEmpty(informacionResultadoPercepciones[i].razonSocial)) {
							info_ret_perc_SAREPE.informacion.razonSocial = informacionResultadoPercepciones[i].razonSocial;
							if (!isEmpty(informacionResultadoPercepciones[i].fechaComprobante)) {
								info_ret_perc_SAREPE.informacion.fechaComprobante = informacionResultadoPercepciones[i].fechaComprobante;
								if (!isEmpty(informacionResultadoPercepciones[i].nroComprobante)) {
									info_ret_perc_SAREPE.informacion.nroComprobante = informacionResultadoPercepciones[i].nroComprobante;
									if (!isEmpty(informacionResultadoPercepciones[i].fecha)) {
										info_ret_perc_SAREPE.informacion.fecha = informacionResultadoPercepciones[i].fecha;
										if (!isEmpty(informacionResultadoPercepciones[i].baseCalculoLocal) || !isEmpty(informacionResultadoPercepciones[i].baseCalculoManual)) {
											info_ret_perc_SAREPE.informacion.baseCalculoLocal = !isEmpty(informacionResultadoPercepciones[i].baseCalculoLocal) ? informacionResultadoPercepciones[i].baseCalculoLocal : informacionResultadoPercepciones[i].baseCalculoManual;
											if (!isEmpty(informacionResultadoPercepciones[i].alicuota)) {
												info_ret_perc_SAREPE.informacion.alicuota = informacionResultadoPercepciones[i].alicuota;
												if (!isEmpty(informacionResultadoPercepciones[i].importeManual)) {
													info_ret_perc_SAREPE.informacion.importe = informacionResultadoPercepciones[i].importeManual;
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Importe de la Percepción";
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la Alícuota de la Percepcion";
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Base de Cálculo de la Percepción";
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la Fecha de la Percepción";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Número de Comprobante de la Transacción";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la Fecha del Comprobante que originó la Percepción";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo la Razón Social/Nombre Legal del Cliente";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Número de Documento del Cliente (CUIT)";
					}

					// Genero el Contenido
					if (errorGlobal == false) {

						if (!isEmpty(info_ret_perc_SAREPE.informacion)) {

							// Genero Contenido
							if (!isEmpty(contenidoTXTPercepciones)) {
								contenidoTXTPercepciones += "\r\n";
							}

							contenidoTXTPercepciones += info_ret_perc_SAREPE.informacion.cuit + info_ret_perc_SAREPE.informacion.razonSocial + info_ret_perc_SAREPE.informacion.fechaComprobante +
								info_ret_perc_SAREPE.informacion.nroComprobante + info_ret_perc_SAREPE.informacion.fecha + info_ret_perc_SAREPE.informacion.baseCalculoLocal +
								info_ret_perc_SAREPE.informacion.alicuota + info_ret_perc_SAREPE.informacion.importe;

						} else {
							errorGeneral = true;
							descripcionError = "Error Obteniendo Información del TXT SAREPE Percepciones";
							idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SAREPE Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
						}

					} else {
						// Error Obteniendo Informacion de Percepciones
						// Grabo el Error en NetSuite
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE Percepciones : ' + descripcionError);
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SAREPE Percepciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

					// Verifico si debo Encolar el Proceso
					checkGovernance(1000);
				}
			}
			nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las Percepciones para armar los TXT.');

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if ((!isEmpty(informacionResultadoRetenciones) && informacionResultadoRetenciones.length == 0) || (!isEmpty(informacionResultadoPercepciones) && informacionResultadoPercepciones.length == 0)) {
						// No se Encontraron Percepciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT SAREPE Correcta - No se Encontraron Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);

					} else {
						// Error Obteniendo Transacciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Obteniendo transacciones para crear el TXT SAREPE');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo transacciones de ' + tipoTXT + ' del TXT SAREPE - Error : Error Obteniendo Transacciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		} else {
			// Error Obteniendo Transacciones
			errorGeneral = true;
			nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Obteniendo transacciones de ' + tipoTXT + ' para crear el TXT SAREPE');
			idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SAREPE - Se generó un error al buscar las transacciones de ' + tipoTXT + '.', idRetencionNetSuite, refComprobante, subsidiaria);
		}

		if (!isEmpty(contenidoTXTRetenciones))
			contenidoTXTRetenciones += "\r\n";

		if (!isEmpty(contenidoTXTPercepciones))
			contenidoTXTPercepciones += "\r\n";

		nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'FIN --- Recorrer la Informacion de las transacciones para armar los TXT.');
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSAREPE', 'Error Generando TXT SAREPE - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SAREPE - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		info_ret_perc_SAREPE = grabarError(true, 'Error Generando TXT SAREPE', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		info_ret_perc_SAREPE = grabarError(false, 'Generación de TXT SAREPE Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT SAREPE Generado Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSAREPE', 'Finalización - Generación TXT SAREPE - contenidoTXTRetenciones: ' + JSON.stringify(contenidoTXTRetenciones) + ' - contenidoTXTPercepciones: ' + JSON.stringify(contenidoTXTPercepciones));

	info_ret_perc_SAREPE.contenidoTXTRetenciones = contenidoTXTRetenciones;
	info_ret_perc_SAREPE.contenidoTXTPercepciones = contenidoTXTPercepciones;
	return info_ret_perc_SAREPE;
}

function generarTXTCATAMARCA(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria, tipoRegimen) {

	nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Inicio - Generación TXT Catamarca Retemciones');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var contenidoTXT = "";
	var procesoEncolado = false;
	var contadorDetalle = 1;

	try {
		var retencionesCatamarca = new Object();
		retencionesCatamarca.retencion = new Object();
		retencionesCatamarca.sujeto = new Object();
		retencionesCatamarca.existenPercepciones = false;
		retencionesCatamarca.error = false;
		retencionesCatamarca.descripcionError = "";
		retencionesCatamarca.procesoEncolado = false;
		retencionesCatamarca.idLog = idRegistroLOG;
		retencionesCatamarca.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';
		var montoTotal = 0.00;
		var montoTotalRetenido = 0.00;


		var tipoLineaSec1 = '10';
		var cuitEmpresaAux = obtenerInformacionEmpresa("custrecord_l54_nro_documento", subsidiaria).substring(0, 11);
		var nroIIBBEmpresa = obtenerInformacionEmpresa("custrecord_l54_nro_iibb_cia", subsidiaria).substring(0, 10);

		nroIIBBEmpresa = padding_left(nroIIBBEmpresa, "0", 10);
		var periodoConsulta = nlapiStringToDate(periodo.fHasta);
		var mesConsultaAux = periodoConsulta.getMonth() + 1;
		var mesConsulta = padding_left(mesConsultaAux, "0", 2);
		var periodoName = periodoConsulta.getFullYear().toString() + mesConsulta.toString();
		contenidoTXT += tipoLineaSec1 + nroIIBBEmpresa + cuitEmpresaAux + periodoName;

		var resultadoTXTCatamarcaRet = { resultados: [], error: false };
		resultadoTXTCatamarcaRet = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_catamarca');

		if (!isEmpty(resultadoTXTCatamarcaRet)) {
			nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Cantidad retenciones: ' + resultadoTXTCatamarcaRet.resultados.length);

			for (var i = 0; resultadoTXTCatamarcaRet != null && i < resultadoTXTCatamarcaRet.resultados.length; i++) {

				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionesCatamarca.retencion = new Object();
				// retencionesCatamarca.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTCatamarcaRet.resultados[i];
				var columns = result.getAllColumns();

				// Obtengo el Codigo de Comprobante (OP) y el ID de la retención
				// idRetencionNetSuite = result.getValue(columns[0]); // ID Retención
				// refComprobante = result.getValue(columns[1]); // ID orden de pago

				nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);

				// Versión
				if (!isEmpty(result.getValue(columns[1]))) {
					retencionesCatamarca.retencion.tipoLineaSec2 = result.getValue(columns[1]);
					// Código de Trazabilidad
					if (!isEmpty(result.getValue(columns[2]))) {
						var nroOperacionCat = padding_left(contadorDetalle.toString(), "0", 6);
						retencionesCatamarca.retencion.nroOperacion = nroOperacionCat;
						// Código de Impuesto
						if (!isEmpty(result.getValue(columns[3]))) {
							retencionesCatamarca.retencion.nroIIBB = padding_left(result.getValue(columns[3]), "0", 10);
							// Código de Régimen
							if (!isEmpty(result.getValue(columns[4]))) {
								retencionesCatamarca.retencion.cuit = result.getValue(columns[4]);
								// Fecha Retención
								if (!isEmpty(result.getValue(columns[5]))) {
									retencionesCatamarca.retencion.nombreLegal = result.getValue(columns[5]);
									// Código Condición
									if (!isEmpty(result.getValue(columns[6]))) {
										retencionesCatamarca.retencion.direccion = result.getValue(columns[6]);
										if (!isEmpty(result.getValue(columns[7]))) {
											retencionesCatamarca.retencion.localidad = result.getValue(columns[7]);
											if (!isEmpty(result.getValue(columns[8]))) {
												retencionesCatamarca.retencion.provincia = result.getValue(columns[8]);
												if (!isEmpty(result.getValue(columns[9]))) {
													retencionesCatamarca.retencion.tipoLineaSec3 = result.getValue(columns[9]);
													if (!isEmpty(result.getValue(columns[10]))) {
														retencionesCatamarca.retencion.codigoRubro = result.getValue(columns[10]);
														//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retencionesCatamarca.retencion.codigoRubro length:' + retencionesCatamarca.retencion.codigoRubro.length);
														// Importe Retenido (Moneda Local)
														if (!isEmpty(result.getValue(columns[11]))) {
															retencionesCatamarca.retencion.totalFacturado = padding_left(result.getValue(columns[11]), "0", 13).replace(" ", "0");
															//nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retencionesCatamarca.retencion.totalFacturado length:' + retencionesCatamarca.retencion.totalFacturado.length);
															montoTotal = montoTotal + parseFloat(result.getValue(columns[12]));
															if (tipoRegimen == 38) {
																if (!isEmpty(result.getValue(columns[13]))) {
																	retencionesCatamarca.retencion.nroRetencion = result.getValue(columns[13]);
																	if (!isEmpty(result.getValue(columns[14]))) {
																		retencionesCatamarca.retencion.totalRetenido = padding_left(result.getValue(columns[14]), "0", 13).replace(" ", "0");
																		montoTotalRetenido = montoTotalRetenido + parseFloat(result.getValue(columns[15]));
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Total Retenido de la retención con ID: " + idRetencionNetSuite;
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo el Numero de Constancia de Retención de la retención con ID: " + idRetencionNetSuite;
																}
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Importe Total de la retención con ID: " + idRetencionNetSuite;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo el valor de Codigo rubro de la retención con ID: " + idRetencionNetSuite;
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Tipo de linea Seccion 3 de la retención con ID: " + idRetencionNetSuite;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo la provincia de la retención con ID: " + idRetencionNetSuite;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la localidad de la retención con ID: " + idRetencionNetSuite;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo la direccion de la retención con ID: " + idRetencionNetSuite;
									}

								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el Nombre Legal de la retención con ID: " + idRetencionNetSuite;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el CUIT del Proveedor de la retención con ID: " + idRetencionNetSuite;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Nro. IIBB de la retención con ID: " + idRetencionNetSuite;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Nro. Operacion de la retención con ID: " + idRetencionNetSuite;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Tipo de Linea Seccion 2 para la retención con ID: " + idRetencionNetSuite;
				}

				// Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
				/* nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
				if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
					errorGlobal = true;
					descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
				} */

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionesCatamarca.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}

						if (tipoRegimen == 37) {
							contenidoTXT += retencionesCatamarca.retencion.tipoLineaSec2 + retencionesCatamarca.retencion.nroOperacion + retencionesCatamarca.retencion.nroIIBB +
								retencionesCatamarca.retencion.cuit + retencionesCatamarca.retencion.nombreLegal + retencionesCatamarca.retencion.direccion +
								retencionesCatamarca.retencion.localidad + retencionesCatamarca.retencion.provincia + '\n' + retencionesCatamarca.retencion.tipoLineaSec3 +
								retencionesCatamarca.retencion.codigoRubro + retencionesCatamarca.retencion.totalFacturado;
						} else {
							contenidoTXT += retencionesCatamarca.retencion.tipoLineaSec2 + retencionesCatamarca.retencion.nroOperacion + retencionesCatamarca.retencion.nroRetencion + retencionesCatamarca.retencion.nroIIBB +
								retencionesCatamarca.retencion.cuit + retencionesCatamarca.retencion.nombreLegal + retencionesCatamarca.retencion.direccion +
								retencionesCatamarca.retencion.localidad + retencionesCatamarca.retencion.provincia + retencionesCatamarca.retencion.totalFacturado + retencionesCatamarca.retencion.totalRetenido;
						}


					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT CATAMARCA RET - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Generando TXT CATAMARCA RET: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT CATAMARCA RET - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
				contadorDetalle++;
			}

			var tipoLineaSec9 = '90';
			var cantidadOperaciones = padding_left((contadorDetalle - 1).toString(), "0", 6);
			var montoTotalLetras = numberTruncTwoDec(montoTotal);
			var importeTotalFacturado = padding_left(montoTotalLetras.replace('.', ''), "0", 13);


			if (tipoRegimen == 37) {
				contenidoTXT += '\n' + tipoLineaSec9 + cantidadOperaciones + importeTotalFacturado;
			} else {
				var montoTotalRetenidoLetras = numberTruncTwoDec(montoTotalRetenido);
				var importeTotalRetenidoFacturado = padding_left(montoTotalRetenidoLetras.replace('.', ''), "0", 13);
				contenidoTXT += '\n' + tipoLineaSec9 + cantidadOperaciones + importeTotalFacturado + importeTotalRetenidoFacturado;
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTCatamarcaRet) && resultadoTXTCatamarcaRet.resultados.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT CATAMARCA Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
						contenidoTXT = "";
					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Obteniendo Retenciones SIRE Retenciones IVA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Resultados para el TXT CATAMARCA Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTCATAMARCARet', 'Error Generando TXT CATAMARCA Retenciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT CATAMARCA Retenciones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionesSireIVA = grabarError(true, 'Error Generando TXT CATAMARCA Retenciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionesSireIVA = grabarError(false, 'Generación de TXT CATAMARCA Retenciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT CATAMARCA Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTCATAMARCARet', 'Finalización - Generación TXT CATAMARCA Retenciones');

	retencionesSireIVA.contenidoTXT = contenidoTXT;
	return retencionesSireIVA;
}
// Función para elaborar SS
function savedSearchUtility(campoFiltroFecha, periodo, campoFiltroSubsidiaria, subsidiaria, tipoRegistroSS, idSavedSearch) {

	try {
		var response = { resultados: [], error: false };
		var iCont = 0;
		var filtro = [];
		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[iCont++] = new nlobjSearchFilter(campoFiltroFecha, null, 'within', periodo.fDesde, periodo.fHasta);
		}

		if (!isEmpty(subsidiaria))
			filtro[iCont++] = new nlobjSearchFilter(campoFiltroSubsidiaria, null, 'is', subsidiaria);

		var search = new nlapiLoadSearch(tipoRegistroSS, idSavedSearch);
		search.addFilters(filtro);

		var searchResults = search.runSearch();
		var completeResults = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResults = resultado; //Primera ve inicializa
				else
					completeResults = completeResults.concat(resultado);
			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		response.resultados = completeResults;
		return response;

	} catch (error) {
		nlapiLogExecution('ERROR', 'savedSearchUtility', 'Error NetSuite Excepción - Detalles: ' + error.message);
		response.error = true;
		return response;
	}
}

function removeDiacritics(str) {

	var defaultDiacriticsRemovalMap = [
		{ 'base': 'A', 'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g },
		{ 'base': 'AA', 'letters': /[\uA732]/g },
		{ 'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g },
		{ 'base': 'AO', 'letters': /[\uA734]/g },
		{ 'base': 'AU', 'letters': /[\uA736]/g },
		{ 'base': 'AV', 'letters': /[\uA738\uA73A]/g },
		{ 'base': 'AY', 'letters': /[\uA73C]/g },
		{ 'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g },
		{ 'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g },
		{ 'base': 'D', 'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g },
		{ 'base': 'DZ', 'letters': /[\u01F1\u01C4]/g },
		{ 'base': 'Dz', 'letters': /[\u01F2\u01C5]/g },
		{ 'base': 'E', 'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g },
		{ 'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g },
		{ 'base': 'G', 'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g },
		{ 'base': 'H', 'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g },
		{ 'base': 'I', 'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g },
		{ 'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g },
		{ 'base': 'K', 'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g },
		{ 'base': 'L', 'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g },
		{ 'base': 'LJ', 'letters': /[\u01C7]/g },
		{ 'base': 'Lj', 'letters': /[\u01C8]/g },
		{ 'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g },
		{ 'base': 'N', 'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g },
		{ 'base': 'NJ', 'letters': /[\u01CA]/g },
		{ 'base': 'Nj', 'letters': /[\u01CB]/g },
		{ 'base': 'O', 'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g },
		{ 'base': 'OI', 'letters': /[\u01A2]/g },
		{ 'base': 'OO', 'letters': /[\uA74E]/g },
		{ 'base': 'OU', 'letters': /[\u0222]/g },
		{ 'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g },
		{ 'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g },
		{ 'base': 'R', 'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g },
		{ 'base': 'S', 'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g },
		{ 'base': 'T', 'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g },
		{ 'base': 'TZ', 'letters': /[\uA728]/g },
		{ 'base': 'U', 'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g },
		{ 'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g },
		{ 'base': 'VY', 'letters': /[\uA760]/g },
		{ 'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g },
		{ 'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g },
		{ 'base': 'Y', 'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g },
		{ 'base': 'Z', 'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g },
		{ 'base': 'a', 'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g },
		{ 'base': 'aa', 'letters': /[\uA733]/g },
		{ 'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g },
		{ 'base': 'ao', 'letters': /[\uA735]/g },
		{ 'base': 'au', 'letters': /[\uA737]/g },
		{ 'base': 'av', 'letters': /[\uA739\uA73B]/g },
		{ 'base': 'ay', 'letters': /[\uA73D]/g },
		{ 'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g },
		{ 'base': 'c', 'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g },
		{ 'base': 'd', 'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g },
		{ 'base': 'dz', 'letters': /[\u01F3\u01C6]/g },
		{ 'base': 'e', 'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g },
		{ 'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g },
		{ 'base': 'g', 'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g },
		{ 'base': 'h', 'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g },
		{ 'base': 'hv', 'letters': /[\u0195]/g },
		{ 'base': 'i', 'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g },
		{ 'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g },
		{ 'base': 'k', 'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g },
		{ 'base': 'l', 'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g },
		{ 'base': 'lj', 'letters': /[\u01C9]/g },
		{ 'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g },
		{ 'base': 'n', 'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g },
		{ 'base': 'nj', 'letters': /[\u01CC]/g },
		{ 'base': 'o', 'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g },
		{ 'base': 'oi', 'letters': /[\u01A3]/g },
		{ 'base': 'ou', 'letters': /[\u0223]/g },
		{ 'base': 'oo', 'letters': /[\uA74F]/g },
		{ 'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g },
		{ 'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g },
		{ 'base': 'r', 'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g },
		{ 'base': 's', 'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g },
		{ 'base': 't', 'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g },
		{ 'base': 'tz', 'letters': /[\uA729]/g },
		{ 'base': 'u', 'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g },
		{ 'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g },
		{ 'base': 'vy', 'letters': /[\uA761]/g },
		{ 'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g },
		{ 'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g },
		{ 'base': 'y', 'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g },
		{ 'base': 'z', 'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }
	];

	for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
		str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
	}

	return str;
}

function generarTXTSireRetIVA(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Inicio - Generación TXT Retenciones IVA - F2005');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionesSireIVA = new Object();
		retencionesSireIVA.retencion = new Object();
		retencionesSireIVA.sujeto = new Object();
		retencionesSireIVA.existenPercepciones = false;
		retencionesSireIVA.error = false;
		retencionesSireIVA.descripcionError = "";
		retencionesSireIVA.procesoEncolado = false;
		retencionesSireIVA.idLog = idRegistroLOG;
		retencionesSireIVA.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		var resultadoTXTSireRetIVA = { resultados: [], error: false };
		resultadoTXTSireRetIVA = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_sire_iva_f2005');

		if (!isEmpty(resultadoTXTSireRetIVA)) {
			nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Cantidad retenciones: ' + resultadoTXTSireRetIVA.resultados.length);

			for (var i = 0; resultadoTXTSireRetIVA != null && i < resultadoTXTSireRetIVA.resultados.length; i++) {

				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionesSireIVA.retencion = new Object();
				// retencionesSireIVA.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTSireRetIVA.resultados[i];
				var columns = result.getAllColumns();

				// Obtengo el Codigo de Comprobante (OP) y el ID de la retención
				idRetencionNetSuite = result.getValue(columns[0]); // ID Retención
				refComprobante = result.getValue(columns[1]); // ID orden de pago

				nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);

				// Versión
				if (!isEmpty(result.getValue(columns[2]))) {
					retencionesSireIVA.retencion.versión = result.getValue(columns[2]);
					// Código de Trazabilidad
					if (!isEmpty(result.getValue(columns[3]))) {
						retencionesSireIVA.retencion.codigoTrazabilidad = result.getValue(columns[3]);
						// Código de Impuesto
						if (!isEmpty(result.getValue(columns[4]))) {
							retencionesSireIVA.retencion.codigoImpuesto = result.getValue(columns[4]);
							// Código de Régimen
							if (!isEmpty(result.getValue(columns[5]))) {
								retencionesSireIVA.retencion.codigoRegimen = result.getValue(columns[5]);
								// Fecha Retención
								if (!isEmpty(result.getValue(columns[6]))) {
									retencionesSireIVA.retencion.fechaRetencion = result.getValue(columns[6]);
									// Código Condición
									if (!isEmpty(result.getValue(columns[7]))) {
										retencionesSireIVA.retencion.codigoCondicion = result.getValue(columns[7]);
										// Imposibilidad de Retención (por defecto es "0": Retención Efectuada)
										if (!isEmpty(result.getValue(columns[8]))) {
											retencionesSireIVA.retencion.imposibilidadRetencion = result.getValue(columns[8]);
											// No Retención Motivo
											if (!isEmpty(result.getValue(columns[9]))) {
												retencionesSireIVA.retencion.noRetencionMotivo = result.getValue(columns[9]);
												// Importe Retenido (Moneda Local)
												if (!isEmpty(result.getValue(columns[10]))) {
													retencionesSireIVA.retencion.importeRetencion = result.getValue(columns[10]);
													// Base de Cálculo Moneda Local (campo de columna) o Base de Cálculo Manual
													if (!isEmpty(result.getValue(columns[11])) || !isEmpty(result.getValue(columns[12]))) {
														retencionesSireIVA.retencion.baseCalculo = !isEmpty(result.getValue(columns[11])) ? result.getValue(columns[11]) : result.getValue(columns[12]);
														// Régimen de Exclusión (por defecto es "0": No excluido)
														if (!isEmpty(result.getValue(columns[13]))) {
															retencionesSireIVA.retencion.regimenExclusion = result.getValue(columns[13]);
															// Porcentaje de Exclusión
															if (!isEmpty(result.getValue(columns[14]))) {
																retencionesSireIVA.retencion.porcentajeExclusion = result.getValue(columns[14]);
																// Fecha de Finalización de Vigencia
																if (!isEmpty(result.getValue(columns[15]))) {
																	retencionesSireIVA.retencion.fechaFinalizacionVigencia = result.getValue(columns[15]);
																	// Tipo Comprobante (orden de pago)
																	if (!isEmpty(result.getValue(columns[16]))) {
																		retencionesSireIVA.retencion.tipoComprobante = result.getValue(columns[16]);
																		// Fecha Comprobante (orden de pago)
																		if (!isEmpty(result.getValue(columns[17]))) {
																			retencionesSireIVA.retencion.fechaComprobante = result.getValue(columns[17]);
																			// Número Comprobante (orden de pago)
																			if (!isEmpty(result.getValue(columns[18]))) {
																				retencionesSireIVA.retencion.numeroComprobante = result.getValue(columns[18]);
																				// COE
																				if (!isEmpty(result.getValue(columns[19]))) {
																					retencionesSireIVA.retencion.coe = result.getValue(columns[19]);
																					// COE Original
																					if (!isEmpty(result.getValue(columns[20]))) {
																						retencionesSireIVA.retencion.coeOriginal = result.getValue(columns[20]);
																						// CAE
																						if (!isEmpty(result.getValue(columns[21]))) {
																							retencionesSireIVA.retencion.cae = result.getValue(columns[21]);
																							// Importe Comprobante
																							if (!isEmpty(result.getValue(columns[22]))) {
																								retencionesSireIVA.retencion.importeComprobante = result.getValue(columns[22]);
																								// Motivo Emisión NC
																								if (!isEmpty(result.getValue(columns[23]))) {
																									retencionesSireIVA.retencion.motivoEmisionNC = result.getValue(columns[23]);
																									// Retenido Clave (CUIT)
																									if (!isEmpty(result.getValue(columns[24]))) {
																										retencionesSireIVA.retencion.retenidoClave = result.getValue(columns[24]);
																										// Certificado Original Nro.
																										if (!isEmpty(result.getValue(columns[25]))) {
																											retencionesSireIVA.retencion.certificadoOriginalNro = result.getValue(columns[25]);
																											// Certificado Original Fecha Ret.
																											if (!isEmpty(result.getValue(columns[26]))) {
																												retencionesSireIVA.retencion.certificadoOriginalFechaRet = result.getValue(columns[26]);
																												// Certificado Original Importe
																												if (!isEmpty(result.getValue(columns[27]))) {
																													retencionesSireIVA.retencion.certificadoOriginalImporte = result.getValue(columns[27]);
																													// Motivo de la anulación
																													if (!isEmpty(result.getValue(columns[28]))) {
																														retencionesSireIVA.retencion.motivoAnulacion = result.getValue(columns[28]);
																													} else {
																														errorGlobal = true;
																														descripcionError = "Error Obteniendo el Motivo de Anulación de la retención con ID: " + idRetencionNetSuite;
																													}
																												} else {
																													errorGlobal = true;
																													descripcionError = "Error Obteniendo el Certificado Original Importe de la retención con ID: " + idRetencionNetSuite;
																												}
																											} else {
																												errorGlobal = true;
																												descripcionError = "Error Obteniendo el Certificado Original Fecha de la retención con ID: " + idRetencionNetSuite;
																											}
																										} else {
																											errorGlobal = true;
																											descripcionError = "Error Obteniendo el Certificado Original Nro. de la retención con ID: " + idRetencionNetSuite;
																										}
																									} else {
																										errorGlobal = true;
																										descripcionError = "Error Obteniendo el CUIT del proveedor de la retención con ID: " + idRetencionNetSuite;
																									}
																								} else {
																									errorGlobal = true;
																									descripcionError = "Error Obteniendo el Motivo Emisión NC de la retención con ID: " + idRetencionNetSuite;
																								}
																							} else {
																								errorGlobal = true;
																								descripcionError = "Error Obteniendo el Importe del Comprobante de la retención con ID: " + idRetencionNetSuite;
																							}
																						} else {
																							errorGlobal = true;
																							descripcionError = "Error Obteniendo el CAE de la retención con ID: " + idRetencionNetSuite;
																						}
																					} else {
																						errorGlobal = true;
																						descripcionError = "Error Obteniendo el COE Original de la retención con ID: " + idRetencionNetSuite;
																					}
																				} else {
																					errorGlobal = true;
																					descripcionError = "Error Obteniendo el COE de la retención con ID: " + idRetencionNetSuite;
																				}
																			} else {
																				errorGlobal = true;
																				descripcionError = "Error Obteniendo el Número Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
																			}
																		} else {
																			errorGlobal = true;
																			descripcionError = "Error Obteniendo la Fecha Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
																		}
																	} else {
																		errorGlobal = true;
																		descripcionError = "Error Obteniendo el Tipo Comprobante (orden de pago) de la retención con ID: " + idRetencionNetSuite;
																	}
																} else {
																	errorGlobal = true;
																	descripcionError = "Error Obteniendo la Fecha de Finalización de Vigencia de la retención con ID: " + idRetencionNetSuite;
																}
															} else {
																errorGlobal = true;
																descripcionError = "Error Obteniendo el Porcentaje de Exclusión de la retención con ID: " + idRetencionNetSuite;
															}
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el Régimen de Exclusión de la retención con ID: " + idRetencionNetSuite;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo la Base de Cálculo de la retención con ID: " + idRetencionNetSuite;
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el Importe Retenido de la retención con ID: " + idRetencionNetSuite;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el valor de No Retención Motivo de la retención con ID: " + idRetencionNetSuite;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la Imposibilidad de Retención de la retención con ID: " + idRetencionNetSuite;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Código Condición de la retención con ID: " + idRetencionNetSuite;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo la Fecha de la retención con ID: " + idRetencionNetSuite;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo el Código de Régimen de la retención con ID: " + idRetencionNetSuite;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el Código de Impuesto de la retención con ID: " + idRetencionNetSuite;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el Código de Trazabilidad de la retención con ID: " + idRetencionNetSuite;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la Versión del TXT de SIRE IVA para la retención con ID: " + idRetencionNetSuite;
				}

				// Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
				/* nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
				if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
					errorGlobal = true;
					descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
				} */

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionesSireIVA.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}

						contenidoTXT += retencionesSireIVA.retencion.versión + retencionesSireIVA.retencion.codigoTrazabilidad + retencionesSireIVA.retencion.codigoImpuesto +
							retencionesSireIVA.retencion.codigoRegimen + retencionesSireIVA.retencion.fechaRetencion + retencionesSireIVA.retencion.codigoCondicion +
							retencionesSireIVA.retencion.imposibilidadRetencion + retencionesSireIVA.retencion.noRetencionMotivo + retencionesSireIVA.retencion.importeRetencion +
							retencionesSireIVA.retencion.baseCalculo + retencionesSireIVA.retencion.regimenExclusion + retencionesSireIVA.retencion.porcentajeExclusion +
							retencionesSireIVA.retencion.fechaFinalizacionVigencia + retencionesSireIVA.retencion.tipoComprobante + retencionesSireIVA.retencion.fechaComprobante +
							retencionesSireIVA.retencion.numeroComprobante + retencionesSireIVA.retencion.coe + retencionesSireIVA.retencion.coeOriginal + retencionesSireIVA.retencion.cae +
							retencionesSireIVA.retencion.importeComprobante + retencionesSireIVA.retencion.motivoEmisionNC + retencionesSireIVA.retencion.retenidoClave +
							retencionesSireIVA.retencion.certificadoOriginalNro + retencionesSireIVA.retencion.certificadoOriginalFechaRet +
							retencionesSireIVA.retencion.certificadoOriginalImporte + retencionesSireIVA.retencion.motivoAnulacion;

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIRE Retenciones IVA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Generando TXT SIRE Retenciones IVA: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT SIRE Retenciones IVA - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {

				if (existenPercepciones == false) {

					if (!isEmpty(resultadoTXTSireRetIVA) && resultadoTXTSireRetIVA.resultados.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT SIRE Retenciones IVA Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Obteniendo Retenciones SIRE Retenciones IVA');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Resultados para el TXT SIRE Retenciones IVA - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTSireRetIVA', 'Error Generando TXT SIRE Retenciones IVA - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIRE Retenciones IVA - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionesSireIVA = grabarError(true, 'Error Generando TXT SIRE Retenciones IVA', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionesSireIVA = grabarError(false, 'Generación de TXT SIRE Retenciones IVA Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT SIRE Retenciones IVA Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTSireRetIVA', 'Finalización - Generación TXT SIRE Retenciones IVA');

	retencionesSireIVA.contenidoTXT = contenidoTXT;
	return retencionesSireIVA;
}

function numeroConstanciaFinalSIRCAR(record) {

	var response = { error: false, mensaje: '', numeroConstancia: '' };

	try {
		var nroTipoDocumentoReferencia = '1';
		var letraTransaccionReferencia = record.getFieldValue('custbody_l54_letra');
		var bocaTransaccionReferencia = record.getFieldValue('custbody_l54_boca');
		var bocaTransaccionReferenciaFinal = '';
		var letraTransaccionReferenciaFinal = '';

		if (!isEmpty(bocaTransaccionReferencia) && !isEmpty(letraTransaccionReferencia)) {

			letraTransaccionReferenciaFinal = nlapiLookupField('customrecord_l54_letra_doc', letraTransaccionReferencia, 'name');
			letraTransaccionReferenciaFinal = letraTransaccionReferenciaFinal.toString().substring(0, 1);
			bocaTransaccionReferenciaFinal = nlapiLookupField('customrecord_l54_bocas', bocaTransaccionReferencia, 'name');
			bocaTransaccionReferenciaFinal = bocaTransaccionReferenciaFinal.toString().substr(-4);
			bocaTransaccionReferenciaFinal = padding_left(bocaTransaccionReferenciaFinal, '0', 4);
			var numeroTransaccionReferencia = !isEmpty(record.getFieldValue('custbody_l54_numero')) ? record.getFieldValue('custbody_l54_numero') : '0';
			var numeroTransaccionReferenciaFinal = padding_left(numeroTransaccionReferencia, '0', 8);

			response.numeroConstancia = nroTipoDocumentoReferencia + letraTransaccionReferenciaFinal + bocaTransaccionReferenciaFinal + numeroTransaccionReferenciaFinal;
		} else {
			response.error = true;
			response.mensaje = "Error consultando el punto de venta y la letra de la transacción de referencia de la nota de crédito con ID INTERNO: ";
		}
	} catch (error) {
		response.error = true;
		response.mensaje = "Error Excepción NetSuite - Detalles: " + error.message;
	}

	return response;
}

function generarTXTMisionesRet(periodo, email, tipoRegimen, tipoOperacion, ultimapercepcionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'Inicio - Generación TXT Retenciones Misiones - F2005');
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Retenciones";
	var descripcionError = "";
	var contenidoTXT = "";
	var procesoEncolado = false;

	try {
		var retencionesMisiones = new Object();
		retencionesMisiones.retencion = new Object();
		retencionesMisiones.sujeto = new Object();
		retencionesMisiones.existenPercepciones = false;
		retencionesMisiones.error = false;
		retencionesMisiones.descripcionError = "";
		retencionesMisiones.procesoEncolado = false;
		retencionesMisiones.idLog = idRegistroLOG;
		retencionesMisiones.contenidoTXT = "";
		var refComprobante = '';
		var idRetencionNetSuite = '';

		var resultadoTXTMisiones = { resultados: [], error: false };
		resultadoTXTMisiones = savedSearchUtility('custrecord_l54_ret_fecha', periodo, 'custrecord_l54_ret_subsidiaria', subsidiaria, 'customrecord_l54_retencion', 'customsearch_l54_ret_misiones');

		if (!isEmpty(resultadoTXTMisiones)) {
			nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'Cantidad retenciones: ' + resultadoTXTMisiones.resultados.length);

			for (var i = 0; resultadoTXTMisiones != null && i < resultadoTXTMisiones.resultados.length; i++) {

				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionesMisiones.retencion = new Object();
				// retencionesMisiones.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTMisiones.resultados[i];
				var columns = result.getAllColumns();

				// Obtengo el Codigo de Comprobante (OP) y el ID de la retención
				idRetencionNetSuite = result.getValue(columns[0]); // ID Retención
				refComprobante = result.getValue(columns[1]); // ID orden de pago

				nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);

				// FECHA COMPROBANTE
				if (!isEmpty(result.getValue(columns[2]))) {
					retencionesMisiones.retencion.fechaComprobante = result.getValue(columns[2]);
					// TIPO COMPROBANTE
					if (!isEmpty(result.getValue(columns[3]))) {
						retencionesMisiones.retencion.tipoComprobante = result.getValue(columns[3]);
						// NÚMERO COMPROBANTE
						if (!isEmpty(result.getValue(columns[4]))) {
							retencionesMisiones.retencion.numeroComprobante = result.getValue(columns[4]);
							// RAZÓN SOCIAL
							if (!isEmpty(result.getValue(columns[5]))) {
								retencionesMisiones.retencion.razonSocial = result.getValue(columns[5]);
								// CUIT
								if (!isEmpty(result.getValue(columns[6]))) {
									retencionesMisiones.retencion.cuit = result.getValue(columns[6]);
									// MONTO OPERACIÓN
									if (!isEmpty(result.getValue(columns[7]))) {
										retencionesMisiones.retencion.montoOperacion = result.getValue(columns[7]);
										// ALICUOTA
										if (!isEmpty(result.getValue(columns[8]))) {
											retencionesMisiones.retencion.alicuota = result.getValue(columns[8]);
											// TIPO COMPROBANTE ORIGINAL
											retencionesMisiones.retencion.tipoComprobanteOriginal = result.getValue(columns[9]);
											// NÚMERO COMPROBANTE ORIGINAL
											retencionesMisiones.retencion.numeroComprobanteOriginal = result.getValue(columns[10]);
											// FECHA COMPROBANTE ORIGINAL
											retencionesMisiones.retencion.fechaComprobanteOriginal = result.getValue(columns[11]);
											// CUIT COMPROBANTE ORIGINAL
											retencionesMisiones.retencion.cuitComprobanteOriginal = result.getValue(columns[12]);			
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la ALICUOTA de la retención con ID: " + idRetencionNetSuite;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el MONTO OPERACIÓN de la retención con ID: " + idRetencionNetSuite;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el CUIT de la retención con ID: " + idRetencionNetSuite;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la RAZÓN SOCIAL de la retención con ID: " + idRetencionNetSuite;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el TIPO COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la FECHA COMPROBANTE de la retención con ID: " + idRetencionNetSuite;
				}

				// Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
				/* nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
				if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
					errorGlobal = true;
					descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
				} */

				// Genero el Contenido
				if (errorGlobal == false) {
					if (retencionesMisiones.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}

						// contenidoTXT += retencionesMisiones.retencion.fechaComprobante + retencionesMisiones.retencion.tipoComprobante + retencionesMisiones.retencion.numeroComprobante +
						// 	retencionesMisiones.retencion.razonSocial + retencionesMisiones.retencion.cuit + retencionesMisiones.retencion.montoOperacion +
						// 	retencionesMisiones.retencion.alicuota + retencionesMisiones.retencion.tipoComprobanteOriginal + retencionesMisiones.retencion.numeroComprobanteOriginal +
						// 	retencionesMisiones.retencion.fechaComprobanteOriginal + retencionesMisiones.retencion.cuitComprobanteOriginal;
						contenidoTXT += retencionesMisiones.retencion.fechaComprobante + "," +
							retencionesMisiones.retencion.tipoComprobante + "," +
							retencionesMisiones.retencion.numeroComprobante + "," +
							retencionesMisiones.retencion.razonSocial + "," +
							retencionesMisiones.retencion.cuit + "," +
							retencionesMisiones.retencion.montoOperacion + "," +
							retencionesMisiones.retencion.alicuota + "," +
							retencionesMisiones.retencion.tipoComprobanteOriginal + "," +
							retencionesMisiones.retencion.numeroComprobanteOriginal + "," +
							retencionesMisiones.retencion.fechaComprobanteOriginal + "," +
							retencionesMisiones.retencion.cuitComprobanteOriginal;
							
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
				} else {
					// Error Obteniendo Información de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}

			if (errorGeneral == false) {
				if (existenPercepciones == false) {
					if (!isEmpty(resultadoTXTMisiones) && resultadoTXTMisiones.resultados.length == 0) {
						// No se Encontraron Retenciones para el Período
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT Misiones Retenciones Correcta - No se Encontraron Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					} else {
						// Error Obteniendo Retenciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'generarTXTMisionesRet', 'Error Obteniendo Retenciones Misiones Retenciones');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Obteniendo Resultados para el TXT Misiones Retenciones - Error : Error Obteniendo Retenciones', idRetencionNetSuite, refComprobante, subsidiaria);
					}
				}
			}
		}

		// TXT Anulaciñon de retenciones
		var resultadoTXTMisionesAnulacion = { resultados: [], error: false };
		resultadoTXTMisionesAnulacion = savedSearchUtility('custrecord_l54_anul_ret_fecha', periodo, 'custrecord_l54_anul_ret_subsidiaria', subsidiaria, 'customrecord_l54_anulacion_retencion', 'customsearch_l54_anulacion_ret_misiones');

		if (!isEmpty(resultadoTXTMisionesAnulacion)) {
			nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'Cantidad anulación retenciones: ' + resultadoTXTMisionesAnulacion.resultados.length);

			for (var i = 0; resultadoTXTMisionesAnulacion != null && i < resultadoTXTMisionesAnulacion.resultados.length; i++) { 
				existenPercepciones = true;
				errorGlobal = false;
				descripcionError = "";
				idRetencionNetSuite = '';
				retencionesMisiones.retencion = new Object();
				// retencionesMisiones.sujeto = new Object();
				refComprobante = '';

				var result = resultadoTXTMisionesAnulacion.resultados[i];
				var columns = result.getAllColumns();

				// Obtengo el Codigo de Comprobante (OP) y el ID de la anulación retención
				idRetencionNetSuite = result.getValue(columns[0]); // ID Anulación Retención
				refComprobante = result.getValue(columns[1]); // ID orden de pago

				nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'refComprobante de orden de pago: ' + refComprobante + ' - idRetencionNetSuite: ' + idRetencionNetSuite);

				// FECHA COMPROBANTE
				if (!isEmpty(result.getValue(columns[2]))) {
					retencionesMisiones.retencion.fechaComprobante = result.getValue(columns[2]);
					// TIPO COMPROBANTE
					if (!isEmpty(result.getValue(columns[3]))) {
						retencionesMisiones.retencion.tipoComprobante = result.getValue(columns[3]);
						// NÚMERO COMPROBANTE
						if (!isEmpty(result.getValue(columns[4]))) {
							retencionesMisiones.retencion.numeroComprobante = result.getValue(columns[4]);
							// RAZÓN SOCIAL
							if (!isEmpty(result.getValue(columns[5]))) {
								retencionesMisiones.retencion.razonSocial = result.getValue(columns[5]);
								// CUIT
								if (!isEmpty(result.getValue(columns[6]))) {
									retencionesMisiones.retencion.cuit = result.getValue(columns[6]);
									// MONTO OPERACIÓN
									if (!isEmpty(result.getValue(columns[7]))) {
										retencionesMisiones.retencion.montoOperacion = result.getValue(columns[7]);
										// ALICUOTA
										if (!isEmpty(result.getValue(columns[8]))) {
											retencionesMisiones.retencion.alicuota = result.getValue(columns[8]);
											// TIPO COMPROBANTE ORIGINAL
											if (!isEmpty(result.getValue(columns[9]))) {
												retencionesMisiones.retencion.tipoComprobanteOriginal = result.getValue(columns[9]);
												// NÚMERO COMPROBANTE ORIGINAL
												if (!isEmpty(result.getValue(columns[10]))) {
													retencionesMisiones.retencion.numeroComprobanteOriginal = result.getValue(columns[10]);
													// FECHA COMPROBANTE ORIGINAL
													if (!isEmpty(result.getValue(columns[11]))) {
														retencionesMisiones.retencion.fechaComprobanteOriginal = result.getValue(columns[11]);
														// CUIT COMPROBANTE ORIGINAL
														if (!isEmpty(result.getValue(columns[12]))) {
															retencionesMisiones.retencion.cuitComprobanteOriginal = result.getValue(columns[12]);
														} else {
															errorGlobal = true;
															descripcionError = "Error Obteniendo el CUIT COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
														}
													} else {
														errorGlobal = true;
														descripcionError = "Error Obteniendo la FECHA COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
													}
												} else {
													errorGlobal = true;
													descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
												}
											} else {
												errorGlobal = true;
												descripcionError = "Error Obteniendo el TIPO COMPROBANTE ORIGINAL de la anulación retención con ID: " + idRetencionNetSuite;
											}
										} else {
											errorGlobal = true;
											descripcionError = "Error Obteniendo la ALICUOTA de la anulación retención con ID: " + idRetencionNetSuite;
										}
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el MONTO OPERACIÓN de la anulación retención con ID: " + idRetencionNetSuite;
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo el CUIT de la anulación retención con ID: " + idRetencionNetSuite;
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo la RAZÓN SOCIAL de la anulación retención con ID: " + idRetencionNetSuite;
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo el NÚMERO COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
						}
					} else {
						errorGlobal = true;
						descripcionError = "Error Obteniendo el TIPO COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo la FECHA COMPROBANTE de la anulación retención con ID: " + idRetencionNetSuite;
				}

				// Si no existe error previo, verifico la longitud de la información por cada retención, debe ser 305 caracteres por línea.
				/* nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'retención con ID: ' + idRetencionNetSuite + ' - longitud de información de retención: ' + contenidoTransaccionAuxiliar.length);
				if (!errorGlobal && contenidoTransaccionAuxiliar.length != 305) {
					errorGlobal = true;
					descripcionError = "Error de longitud de caracteres de línea incorrecta, para la retención con ID: " + idRetencionNetSuite + " - cantidad de caracteres: " + contenidoTransaccionAuxiliar.length;
				} */

				// Genero el Contenido
				if (errorGlobal == false) {
					if (retencionesMisiones.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}

						// contenidoTXT += retencionesMisiones.retencion.fechaComprobante + retencionesMisiones.retencion.tipoComprobante + retencionesMisiones.retencion.numeroComprobante +
						// 	retencionesMisiones.retencion.razonSocial + retencionesMisiones.retencion.cuit + retencionesMisiones.retencion.montoOperacion +
						// 	retencionesMisiones.retencion.alicuota + retencionesMisiones.retencion.tipoComprobanteOriginal + retencionesMisiones.retencion.numeroComprobanteOriginal +
						// 	retencionesMisiones.retencion.fechaComprobanteOriginal + retencionesMisiones.retencion.cuitComprobanteOriginal;
						contenidoTXT += retencionesMisiones.retencion.fechaComprobante + "," +
							retencionesMisiones.retencion.tipoComprobante + "," +
							retencionesMisiones.retencion.numeroComprobante + "," +
							retencionesMisiones.retencion.razonSocial + "," +
							retencionesMisiones.retencion.cuit + "," +
							retencionesMisiones.retencion.montoOperacion + "," +
							retencionesMisiones.retencion.alicuota + "," +
							retencionesMisiones.retencion.tipoComprobanteOriginal + "," +
							retencionesMisiones.retencion.numeroComprobanteOriginal + "," +
							retencionesMisiones.retencion.fechaComprobanteOriginal + "," +
							retencionesMisiones.retencion.cuitComprobanteOriginal;
							
					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo Información de la Anulación Retención";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
					}
				} else {
					// Error Obteniendo Información de la Anulación Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones: ' + descripcionError);
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Misiones Retenciones - Error : ' + descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
		} else {
			nlapiLogExecution('DEBUG', 'generarTXTRetencion', 'No se encontraron resultados para ANULACIÓN RETENCIONES');
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}
	} catch (e) {
		nlapiLogExecution('ERROR', 'generarTXTMisionesRet', 'Error Generando TXT Misiones Retenciones - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT Misones Retenciones - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idRetencionNetSuite, refComprobante, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionesMisiones = grabarError(true, 'Error Generando TXT Misiones Retenciones', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionesMisiones = grabarError(false, 'Generación de TXT Misiones Retenciones Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenPercepciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Misiones Retenciones Generadas Correctamente', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'generarTXTMisionesRet', 'Finalización - Generación TXT Misiones Retenciones');

	retencionesMisiones.contenidoTXT = contenidoTXT;
	return retencionesMisiones;
}

function generarTxtSipret(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT', 'Inicio - Generacion TXT SIPRET RETENCIONES');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenRetenciones = false;
	var mensajeError = "Error Generando TXT SIPRET RETENCIONES";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var marcaGenerarTXT = true;
	var errorParcial = false;
	var contenidoTXT = "";

	try {
		var retencionSIPRET = new Object();
		retencionSIPRET.retencion = new Object();
		retencionSIPRET.sujeto = new Object();
		retencionSIPRET.existenRetenciones = false;
		retencionSIPRET.error = false;
		retencionSIPRET.descripcionError = "";
		retencionSIPRET.procesoEncolado = false;
		retencionSIPRET.idLog = idRegistroLOG;
		retencionSIPRET.retencion.importeRetencion = 0;
		retencionSIPRET.contenidoTXT = "";

		// Grabo Registro de TXT
		var estadoGeneracionTXT = null;

		var filtro = new Array();
		var i = 0;

		if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
		}
		if (!isEmpty(subsidiaria))
			filtro[i++] = new nlobjSearchFilter('custrecord_l54_ret_subsidiaria', null, 'is', subsidiaria);
		//////////////

		var search = new nlapiLoadSearch('customrecord_l54_retencion', 'customsearch_l54_retenciones_tissh_txt');
		search.addFilters(filtro);

		var searchResults = search.runSearch();

		var completeResultSet = [];

		// resultIndex points to record starting current "resultado" in the entire results array
		var resultIndex = 0;
		var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
		var resultado; // temporary variable used to store the result set
		do {
			// fetch one result set
			resultado = searchResults.getResults(resultIndex, resultIndex + resultStep);

			if (!isEmpty(resultado) && resultado.length > 0) {
				if (resultIndex == 0)
					completeResultSet = resultado; //Primera ve inicializa
				else
					completeResultSet = completeResultSet.concat(resultado);

				nlapiLogExecution('DEBUG', 'generarTXT_SIPRET_ret', 'resultIndex:' + resultIndex + ',resultado.length:' + resultado.length);

			}

			// increase pointer
			resultIndex = resultIndex + resultStep;

			// Verifico si debo Encolar el Proceso
			checkGovernance(1000);

			// once no records are returned we already got all of them
		} while (!isEmpty(resultado) && resultado.length > 0)

		if (!isEmpty(completeResultSet)) {
			nlapiLogExecution('DEBUG', 'generarTXT_SIPRET - Retenciones', 'Cantidad Retenciones:' + completeResultSet.length);

			for (i = 0; i < completeResultSet.length; i++) {
				retencionSIPRET.retencion = new Object();
				retencionSIPRET.sujeto = new Object();
				var resultadoTXTRetencionesSIPRET = completeResultSet[i];
				var columns = resultadoTXTRetencionesSIPRET.getAllColumns();
				nlapiLogExecution('DEBUG', 'generarTXT_SIPRET - Retenciones',  'resultadoTXTRetencionesSIPRET:' + JSON.stringify(resultadoTXTRetencionesSIPRET));

				existenRetenciones = true;
				errorGlobal = false;
				descripcionError = "";
				var idPercepcionNetSuite = null;
				var fechaRetencionDate = resultadoTXTRetencionesSIPRET.getValue(columns[6]);
				if (!isEmpty(fechaRetencionDate)) {
					retencionSIPRET.retencion.fecha = fechaRetencionDate;
					var nroRetencion = resultadoTXTRetencionesSIPRET.getValue(columns[7]);
					if (!isEmpty(nroRetencion)) {
						retencionSIPRET.retencion.nroRet = nroRetencion;
						var refProveedor = resultadoTXTRetencionesSIPRET.getValue(columns[8]);
						if (!isEmpty(refProveedor)) {
							retencionSIPRET.retencion.refProveedor = refProveedor;
							var cuitProveedor = resultadoTXTRetencionesSIPRET.getValue(columns[4]);
							if (!isEmpty(cuitProveedor)) {
								retencionSIPRET.retencion.cuitProveedor = cuitProveedor;
								var nPadron = resultadoTXTRetencionesSIPRET.getValue(columns[11]);
								if (!isEmpty(nPadron)) {
									retencionSIPRET.retencion.nPadron = nPadron;
									var importeRet = resultadoTXTRetencionesSIPRET.getValue(columns[9]);
									if (!isEmpty(importeRet)) {
										retencionSIPRET.retencion.importeRet = importeRet;
									} else {
										errorGlobal = true;
										descripcionError = "Error Obteniendo el Importe Retención";
									}
								} else {
									errorGlobal = true;
									descripcionError = "Error Obteniendo Número Padrón";
								}
							} else {
								errorGlobal = true;
								descripcionError = "Error Obteniendo CUIT Proveedor";
							}
						} else {
							errorGlobal = true;
							descripcionError = "Error Obteniendo Referencia Provedor";
						}
					} else {
						errorGlobal = true;
						descripcionError = "Numero de Retención Invalido";
					}
				} else {
					errorGlobal = true;
					descripcionError = "Error Obteniendo Fecha Retención";
				}

				// Genero el Contenido
				if (errorGlobal == false) {

					if (retencionSIPRET.retencion != null) {

						// Genero Contenido
						if (!isEmpty(contenidoTXT)) {
							contenidoTXT += "\r\n";
						}
						var error = false;
						var descripcionMensaje = "TXT Retenciones Generado Correctamente";
						contenidoTXT += retencionSIPRET.retencion.fecha + '@' + retencionSIPRET.retencion.nroRet + '@' + retencionSIPRET.retencion.refProveedor + '@' + retencionSIPRET.retencion.cuitProveedor + '@' + retencionSIPRET.retencion.nPadron + '@' + retencionSIPRET.retencion.importeRet + '@';

						// Grabo Registro de TXT
						/*var estadoGeneracionTXT = null;

						estadoGeneracionTXT = generarTXT(periodo, tipoOperacion, tipoRegimen, contenidoTXT, idRegistroLOG, idPercepcionNetSuite);

						if (isEmpty(estadoGeneracionTXT) || !isEmpty(estadoGeneracionTXT) && estadoGeneracionTXT.errorGeneracion == true) {
						// Error Generando TXT
						error = true;
						descripcionMensaje = "Error Generando TXT Percepciones";
						if (isEmpty(estadoGeneracionTXT))
						descripcionMensaje = estadoGeneracionTXT.descripcionError;
						errorGeneral = true;
						descripcionError = descripcionMensaje;
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, refComprobante, subsidiaria);
						}*/

					} else {
						errorGeneral = true;
						descripcionError = "Error Obteniendo informacion de la Percepcion";
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
					}

				} else {
					// Error Obteniendo Informacion de Retenciones
					// Grabo el Error en NetSuite
					errorGeneral = true;
					nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Retenciones SIPRET');
					idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : ' + descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
				}

				// Verifico si debo Encolar el Proceso
				checkGovernance(1000);
			}
			if (errorGeneral == false) {

				if (existenRetenciones == false) {

					if (!isEmpty(completeResultSet) && completeResultSet.length == 0) {
						// No se Encontraron Retenciones para el Periodo
						idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Retenciones Correcta - No se Encontraron Retenciones', idPercepcionNetSuite, nroRetencion, subsidiaria);

					} else {
						// Error Obteniendo Percepciones
						errorGeneral = true;
						nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Retenciones SIPRET');
						idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Retenciones - Error : Error Obteniendo Retenciones', idPercepcionNetSuite, nroRetencion, subsidiaria);
					}
				}
			}
		}

		if (!isEmpty(contenidoTXT)) {
			contenidoTXT += "\r\n";
		}

	} catch (e) {
		nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT SIPRET - Error : ' + e.message);
		errorGeneral = true;
		descripcionError = "Error Generando TXT SIPRET - Error : " + e.message;
		idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, idPercepcionNetSuite, nroRetencion, subsidiaria);
	}

	if (errorGeneral == true) {
		retencionSIPRET = grabarError(true, 'Error Generando TXT de Retenciones - SIPRET', existenRetenciones, procesoEncolado, idRegistroLOG);
	} else {
		retencionSIPRET = grabarError(false, 'Generacion de TXT de Retenciones Correcta - SIPRET', existenRetenciones, procesoEncolado, idRegistroLOG);
		if (procesoEncolado == false) {
			if (existenRetenciones == true)
				idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Retenciones Generadas Correctamente - SIPRET', null, null, subsidiaria);
		}
	}

	nlapiLogExecution('DEBUG', 'Proceso Generacion TXT - SIPRET', 'Finalizacion - Generación TXT SIPRET Retenciones');

	retencionSIPRET.contenidoTXT = contenidoTXT;
	return retencionSIPRET;
}

function generarTxtPercepRetSirtac(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
 
	nlapiLogExecution('DEBUG', 'generarTxtPercRET-SIRTAC', 'Inicio - Generación TXT Percepciones RET-SIRTAC');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones RET-SIRTAC";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";
  
	try {
	  var arrayPercepRetSirtac = new Object();
	  arrayPercepRetSirtac.percepcion = new Object();
	  arrayPercepRetSirtac.sujeto = new Object();
	  arrayPercepRetSirtac.existenPercepciones = false;
	  arrayPercepRetSirtac.error = false;
	  arrayPercepRetSirtac.descripcionError = "";
	  arrayPercepRetSirtac.procesoEncolado = false;
	  arrayPercepRetSirtac.idLog = idRegistroLOG;
	  arrayPercepRetSirtac.contenidoTXT = "";
  
	  // INICIO Obtener la Informacion de PERCEPCIONES
	  var iCont = 0;
	  var arrayFilters = new Array();
	  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
		arrayFilters[iCont++] = new nlobjSearchFilter('custrecord_l54_ret_fecha', null, 'within', periodo.fDesde, periodo.fHasta);
	  }
  
	  if (!isEmpty(subsidiaria))
		arrayFilters[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

	  var search1 = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_txt_sir');
	  search1.addFilters(arrayFilters);
	  
	  var searchResults = search1.runSearch();
  
	  var resultPercepcionesRetSirtac = [];
  
	  // resultIndex points to record starting current "resultado" in the entire results array
	  var resultIndex = 0;
	  var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
	  var resultado; // temporary variable used to store the result set
	  do {
		// fetch one result set
		resultado = searchResults.getRange({
		  start: resultIndex,
		  end: resultIndex + resultStep
		});

		if (!isEmpty(resultado) && resultado.length > 0) {
		  if (resultIndex == 0)
			resultPercepcionesRetSirtac = resultado; //Primera ve inicializa
		  else
			resultPercepcionesRetSirtac = resultPercepcionesRetSirtac.concat(resultado);
		}
  
		// increase pointer
		resultIndex = resultIndex + resultStep;
  
		// Verifico si debo Encolar el Proceso
		//checkGovernance(1000);
  
		// once no records are returned we already got all of them
	  } while (!isEmpty(resultado) && resultado.length > 0)
  
	  // FIN Obtener la Informacion de PERCEPCIONES
  
	  var informacionResultado = new Array();
	  var indiceArray = 0;
  
	  nlapiLogExecution('DEBUG', 'generarTxtPercepRetSirtac', 'INICIO Recorrer Percepciones');
  
	  for (var i = 0; resultPercepcionesRetSirtac != null && i < resultPercepcionesRetSirtac.length; i++) {
		var result = resultPercepcionesRetSirtac[i];
		var columns = result.getAllColumns();
		informacionResultado[indiceArray] = new Object();
		informacionResultado[indiceArray].codJurisdiccion = result.getValue(columns[1]);
		informacionResultado[indiceArray].cuitAgenteRet = result.getValue(columns[2]);
		informacionResultado[indiceArray].fechaRet = result.getValue(columns[3]);
		informacionResultado[indiceArray].numSucursal = result.getValue(columns[4]);
		informacionResultado[indiceArray].numConstancia = result.getValue(columns[5]);
		informacionResultado[indiceArray].letraTipoComprobante = result.getValue(columns[6]);
		informacionResultado[indiceArray].impRetenido = result.getValue(columns[7]);
  
		indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
	  }
  
	  nlapiLogExecution('DEBUG', 'generarTxtPercepRetSirtac', 'INICIO Ordenar' + JSON.stringify(informacionResultado));
  
	  // Ordenar Array
	  var date_sort_asc = function (a, b) {
		// This is a comparison function that will result in dates being sorted in
		// ASCENDING order. As you can see, JavaScript's native comparison operators
		// can be used to compare dates. This was news to me.
		if (a.fechaRet > b.fechaRet)
		  return 1;
		if (a.fechaRet < b.fechaRet)
		  return -1;
		return 0;
	  };
  
	  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
		informacionResultado.sort(date_sort_asc);
	  }
  
	  if (!isEmpty(informacionResultado)) {
  
		for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
  
		  arrayPercepRetSirtac.percepcion = new Object();
		  arrayPercepRetSirtac.sujeto = new Object();
		  // Obtengo el Codigo de Comprobante
		  existenPercepciones = true;
		  errorGlobal = false;
		  descripcionError = "";
		  refComprobante = informacionResultado[i].idInterno;
  
		  if (!isEmpty(informacionResultado[i].codJurisdiccion)) {
			arrayPercepRetSirtac.percepcion.codJurisdiccion = informacionResultado[i].codJurisdiccion;
			  if (!isEmpty(informacionResultado[i].cuitAgenteRet)) {
				arrayPercepRetSirtac.percepcion.cuitAgenteRet = informacionResultado[i].cuitAgenteRet;
				if (!isEmpty(informacionResultado[i].fechaRet)) {
				  arrayPercepRetSirtac.percepcion.fechaRet = informacionResultado[i].fechaRet;
				  if (!isEmpty(informacionResultado[i].numSucursal)) {
					arrayPercepRetSirtac.percepcion.numSucursal = informacionResultado[i].numSucursal;
					if (!isEmpty(informacionResultado[i].numConstancia)) {
					  arrayPercepRetSirtac.percepcion.numConstancia = informacionResultado[i].numConstancia;
					  if (!isEmpty(informacionResultado[i].letraTipoComprobante)) {
						arrayPercepRetSirtac.percepcion.letraTipoComprobante = informacionResultado[i].letraTipoComprobante;
						if (!isEmpty(informacionResultado[i].impRetenido) && parseFloat(informacionResultado[i].impRetenido) > 0) {
						  arrayPercepRetSirtac.percepcion.impRetenido = informacionResultado[i].impRetenido;
						} else {
						  errorGlobal = true;
						  descripcionError = 'El campo Importe Retenido es obligatorio.' ;
						}
					  } else {
						errorGlobal = true;
						descripcionError = 'El campo Letra y Tipo son obligatorios.' ;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = 'El campo Número de constancia es obligatorio.' ;
					}
				  } else {
					errorGlobal = true;
					descripcionError = 'El campo Número de Sucursal es obligatorio.' ;
				  }
				} else {
					errorGlobal = true;
				  descripcionError = 'El campo Fecha es obligatorio.' ;
				}
			  } else {
				errorGlobal = true;
				descripcionError = 'El campo Cuit Agente de Retención es obligatorio.' ;
			  }
		  } else {
			errorGlobal = true;
			descripcionError = 'El campo Código de jurisdicción es obligatorio.' ;
		  }
  
		  if(!errorGlobal){
			// Genero el Contenido
			if (arrayPercepRetSirtac.percepcion != null) {
  
			  // Genero Contenido
			  if (!isEmpty(contenidoTXT)) {
				contenidoTXT += "\r\n";
			  }
			  var error = false;
			  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
			  contenidoTXT += arrayPercepRetSirtac.percepcion.codJurisdiccion + arrayPercepRetSirtac.percepcion.cuitAgenteRet + arrayPercepRetSirtac.percepcion.fechaRet + arrayPercepRetSirtac.percepcion.numSucursal + arrayPercepRetSirtac.percepcion.numConstancia +
				arrayPercepRetSirtac.percepcion.letraTipoComprobante + arrayPercepRetSirtac.percepcion.impRetenido;
  
			} else {
			  errorGeneral = true;
			  descripcionError = "Error Obteniendo informacion de la Percepción";
			  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
			}
  
		  }else {
			// Error Obteniendo Informacion de Retenciones
			// Grabo el Error en NetSuite
			errorGeneral = true;
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT', descripcionError);
			nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
			idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
		}
		  
		  // Verifico si debo Encolar el Proceso
		  //checkGovernance(1000);
  
		}
  
		if (errorGeneral == false) {
  
		  if (existenPercepciones == false) {
  
			if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
			  // No se Encontraron Percepciones para el Periodo
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generacion de TXT de Percepciones SIRTAC Correcta', null, refComprobante, subsidiaria);
  
			}
			/*else {
			  // Error Obteniendo Percepcion
			  errorGeneral = true;
			  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
			  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
			}*/
		  }
		}
	  } else {
		nlapiLogExecution('DEBUG', 'generarTxtPercepSirtac', 'No se encontraron Percepciones');
	  }
  
	  if (!isEmpty(contenidoTXT)) {
		contenidoTXT += "\r\n";
	  }
  
	} catch (e) {
	  nlapiLogExecution('ERROR', 'generarTxtPercepSirtac', 'Error Generando TXT Percepciones SIRTAC - Error : ' + e.message);
	  errorGeneral = true;
	  descripcionError = "Error Generando TXT Percepciones SIRTAC - Error : " + e.message;
	  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}
  
	if (errorGeneral == true) {
	  arrayPercepRetSirtac = grabarError(true, 'Error Generando TXT de Percepciones SIRTAC', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
	  arrayPercepRetSirtac = grabarError(false, 'Generacion de TXT de Percepciones SIRTAC Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
	  if (procesoEncolado == false) {
		if (existenPercepciones == true)
		  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
	  }
	}
  
	nlapiLogExecution('DEBUG', 'generarTxtPercepSirtac', 'Finalización - Generación TXT Percepciones SIRTAC');
	arrayPercepRetSirtac.contenidoTXT = contenidoTXT;
	return arrayPercepRetSirtac;
}

function generarTxtPercepSircreb(periodo, email, tipoRegimen, tipoOperacion, ultimaRetencionProcesada, context, idLogErrores, url, separadorDecimal, separadorMiles, subsidiaria) {
 
	nlapiLogExecution('DEBUG', 'generarTxtPercRET-SIRCREB', 'Inicio - Generación TXT Percepciones RET-SIRCREB');
	var procesoEncolado = false;
	var idRegistroLOG = idLogErrores;
	var errorGlobal = false;
	var errorGeneral = false;
	var existenPercepciones = false;
	var mensajeError = "Error Generando TXT de Percepciones RET-SIRCREB";
	var descripcionError = "";
	var tipoComprobanteNS = "";
	var contenidoTXT = "";
	var refComprobante = "";
  
	try {
	  var arrayPercepRetSircreb = new Object();
	  arrayPercepRetSircreb.percepcion = new Object();
	  arrayPercepRetSircreb.sujeto = new Object();
	  arrayPercepRetSircreb.existenPercepciones = false;
	  arrayPercepRetSircreb.error = false;
	  arrayPercepRetSircreb.descripcionError = "";
	  arrayPercepRetSircreb.procesoEncolado = false;
	  arrayPercepRetSircreb.idLog = idRegistroLOG;
	  arrayPercepRetSircreb.contenidoTXT = "";
  
	  // INICIO Obtener la Informacion de PERCEPCIONES
	  var iCont = 0;
	  var arrayFilters = new Array();
	  if (!isEmpty(periodo) && !isEmpty(periodo.fDesde) && !isEmpty(periodo.fHasta)) {
		arrayFilters[iCont++] = new nlobjSearchFilter('trandate', null, 'within', periodo.fDesde, periodo.fHasta);
	  }
  
	  if (!isEmpty(subsidiaria))
		arrayFilters[iCont++] = new nlobjSearchFilter('subsidiary', null, 'is', subsidiaria);

	  var search1 = new nlapiLoadSearch('transaction', 'customsearch_l54_ret_txt_sir_2');
	  search1.addFilters(arrayFilters);
	  
	  var searchResults = search1.runSearch();
  
	  var resultPercepcionesRetSircreb = [];
  
	  // resultIndex points to record starting current "resultado" in the entire results array
	  var resultIndex = 0;
	  var resultStep = 1000; // Number of records returned in one step (maximum is 1000)
	  var resultado; // temporary variable used to store the result set
	  do {
		// fetch one result set
		resultado = searchResults.getRange({
		  start: resultIndex,
		  end: resultIndex + resultStep
		});

		if (!isEmpty(resultado) && resultado.length > 0) {
		  if (resultIndex == 0)
			resultPercepcionesRetSircreb = resultado; //Primera ve inicializa
		  else
			resultPercepcionesRetSircreb = resultPercepcionesRetSircreb.concat(resultado);
		}
  
		// increase pointer
		resultIndex = resultIndex + resultStep;
  
		// Verifico si debo Encolar el Proceso
		//checkGovernance(1000);
  
		// once no records are returned we already got all of them
	  } while (!isEmpty(resultado) && resultado.length > 0)
  
	  // FIN Obtener la Informacion de PERCEPCIONES
  
	  var informacionResultado = new Array();
	  var indiceArray = 0;
  
	  nlapiLogExecution('DEBUG', 'generarTxtPercepRetSircreb', 'INICIO Recorrer Percepciones');
  
	  for (var i = 0; resultPercepcionesRetSircreb != null && i < resultPercepcionesRetSircreb.length; i++) {
		var result = resultPercepcionesRetSircreb[i];
		var columns = result.getAllColumns();
		informacionResultado[indiceArray] = new Object();
		informacionResultado[indiceArray].codJurisdiccion = result.getValue(columns[1]);
		informacionResultado[indiceArray].cuitAgenteRet = result.getValue(columns[2]);
		informacionResultado[indiceArray].periodoRet = result.getValue(columns[3]);
		informacionResultado[indiceArray].cbu = result.getValue(columns[4]);
		informacionResultado[indiceArray].tipoCuenta = result.getValue(columns[5]);
		informacionResultado[indiceArray].tipoMoneda = result.getValue(columns[6]);
		informacionResultado[indiceArray].impRetenido = result.getValue(columns[7]);
  
		indiceArray = parseInt(indiceArray, 10) + parseInt(1, 10);
	  }
  
	  nlapiLogExecution('DEBUG', 'generarTxtPercepRetSircreb', 'INICIO Ordenar' + JSON.stringify(informacionResultado));
  
	  // Ordenar Array
	  var date_sort_asc = function (a, b) {
		// This is a comparison function that will result in dates being sorted in
		// ASCENDING order. As you can see, JavaScript's native comparison operators
		// can be used to compare dates. This was news to me.
		if (a.periodoRet > b.periodoRet)
		  return 1;
		if (a.periodoRet < b.periodoRet)
		  return -1;
		return 0;
	  };
  
	  if (!isEmpty(informacionResultado) && informacionResultado.length > 0) {
		informacionResultado.sort(date_sort_asc);
	  }
  
	  if (!isEmpty(informacionResultado)) {
  
		for (var i = 0; informacionResultado != null && i < informacionResultado.length && procesoEncolado == false; i++) {
  
		  arrayPercepRetSircreb.percepcion = new Object();
		  arrayPercepRetSircreb.sujeto = new Object();
		  // Obtengo el Codigo de Comprobante
		  existenPercepciones = true;
		  errorGlobal = false;
		  descripcionError = "";
		  refComprobante = informacionResultado[i].idInterno;
  
		  if (!isEmpty(informacionResultado[i].codJurisdiccion)) {
			arrayPercepRetSircreb.percepcion.codJurisdiccion = informacionResultado[i].codJurisdiccion;
			  if (!isEmpty(informacionResultado[i].cuitAgenteRet)) {
				arrayPercepRetSircreb.percepcion.cuitAgenteRet = informacionResultado[i].cuitAgenteRet;
				if (!isEmpty(informacionResultado[i].periodoRet)) {
				  arrayPercepRetSircreb.percepcion.periodoRet = informacionResultado[i].periodoRet;
				  if (!isEmpty(informacionResultado[i].cbu)) {
					arrayPercepRetSircreb.percepcion.cbu = informacionResultado[i].cbu;
					if (!isEmpty(informacionResultado[i].tipoCuenta)) {
					  arrayPercepRetSircreb.percepcion.tipoCuenta = informacionResultado[i].tipoCuenta;
					  if (!isEmpty(informacionResultado[i].tipoMoneda)) {
						arrayPercepRetSircreb.percepcion.tipoMoneda = informacionResultado[i].tipoMoneda;
						if (!isEmpty(informacionResultado[i].impRetenido) && parseFloat(informacionResultado[i].impRetenido) > 0) {
						  arrayPercepRetSircreb.percepcion.impRetenido = informacionResultado[i].impRetenido;
						} else {
						  errorGlobal = true;
						  descripcionError = 'El campo Importe Retenido es obligatorio.' ;
						}
					  } else {
						errorGlobal = true;
						descripcionError = 'El campo Tipo de Moneda son obligatorios.' ;
					  }
					} else {
					  errorGlobal = true;
					  descripcionError = 'El campo Tipo de cuenta es obligatorio.' ;
					}
				  } else {
					errorGlobal = true;
					descripcionError = 'El campo CBU es obligatorio.' ;
				  }
				} else {
					errorGlobal = true;
				  descripcionError = 'El campo Periodo es obligatorio.' ;
				}
			  } else {
				errorGlobal = true;
				descripcionError = 'El campo Cuit Agente de Retención es obligatorio.' ;
			  }
		  } else {
			errorGlobal = true;
			descripcionError = 'El campo Código de jurisdicción es obligatorio.' ;
		  }
  
		  if(!errorGlobal){
			// Genero el Contenido
			if (arrayPercepRetSircreb.percepcion != null) {
  
			  // Genero Contenido
			  if (!isEmpty(contenidoTXT)) {
				contenidoTXT += "\r\n";
			  }
			  var error = false;
			  var descripcionMensaje = "TXT Percepciones Generado Correctamente";
			  contenidoTXT += arrayPercepRetSircreb.percepcion.codJurisdiccion + arrayPercepRetSircreb.percepcion.cuitAgenteRet + arrayPercepRetSircreb.percepcion.periodoRet + arrayPercepRetSircreb.percepcion.cbu + arrayPercepRetSircreb.percepcion.tipoCuenta +
				arrayPercepRetSircreb.percepcion.tipoMoneda + arrayPercepRetSircreb.percepcion.impRetenido;
  
			} else {
			  errorGeneral = true;
			  descripcionError = "Error Obteniendo informacion de la Percepción";
			  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
			}
  
		  } else {
			// Error Obteniendo Informacion de Retenciones
			// Grabo el Error en NetSuite
			errorGeneral = true;
			nlapiLogExecution('ERROR','Proceso Generacion TXT', descripcionError);
			nlapiLogExecution('ERROR','Proceso Generacion TXT', 'Error Generando TXT Percepciones Misiones'); 
			idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : ' + descripcionError, null, refComprobante, subsidiaria);
		  }
		  
		  // Verifico si debo Encolar el Proceso
		  //checkGovernance(1000);
  
		}
  
		if (errorGeneral == false) {
  
		  if (existenPercepciones == false) {
  
			if (!isEmpty(informacionResultado) && informacionResultado.length == 0) {
			  // No se Encontraron Percepciones para el Periodo
			  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Generación de TXT de Percepciones SIRCREB Correcta', null, refComprobante, subsidiaria);
  
			}
			/*else {
			  // Error Obteniendo Percepcion
			  errorGeneral = true;
			  nlapiLogExecution('ERROR', 'Proceso Generacion TXT', 'Error Obteniendo Percepciones eARCIBA Notas de Credito');
			  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'Error Generando TXT Percepciones - Error : Error Obteniendo Percepciones', null, refComprobante, subsidiaria);
			}*/
		  }
		}
	  } else {
		nlapiLogExecution('DEBUG', 'generarTxtPercepSircreb', 'No se encontraron Percepciones');
	  }
  
	  if (!isEmpty(contenidoTXT)) {
		contenidoTXT += "\r\n";
	  }
  
	} catch (e) {
	  nlapiLogExecution('ERROR','generarTxtPercepSircreb', 'Error Generando TXT Percepciones SIRCREB - Error : ' + e.message);
	  errorGeneral = true;
	  descripcionError = "Error Generando TXT Percepciones SIRCREB - Error : " + e.message;
	  idRegistroLOG = grabarLogError('EST-LOG-ERROR', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, descripcionError, null, refComprobante, subsidiaria);
	}
  
	if (errorGeneral == true) {
	  arrayPercepRetSircreb = grabarError(true, 'Error Generando TXT de Percepciones SIRCREB', existenPercepciones, procesoEncolado, idRegistroLOG);
	} else {
	  arrayPercepRetSircreb = grabarError(false, 'Generacion de TXT de Percepciones SIRCREB Correcta', existenPercepciones, procesoEncolado, idRegistroLOG);
	  if (procesoEncolado == false) {
		if (existenPercepciones == true)
		  idRegistroLOG = grabarLogError('EST-LOG-OK', periodo, tipoOperacion, tipoRegimen, idRegistroLOG, 'TXT Percepciones Generadas Correctamente', null, null, subsidiaria);
	  }
	}
  
	nlapiLogExecution('DEBUG', 'generarTxtPercepSircreb', 'Finalización - Generación TXT Percepciones SIRCREB');
	arrayPercepRetSircreb.contenidoTXT = contenidoTXT;
	return arrayPercepRetSircreb;
}